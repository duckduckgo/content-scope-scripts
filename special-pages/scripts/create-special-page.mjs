import fs from 'node:fs';
import path from 'node:path';
import { execSync } from 'node:child_process';
import { fileURLToPath } from 'node:url';

const _filename = fileURLToPath(import.meta.url);
const _dirname = path.dirname(_filename);

// Path to special pages relative to this script
const BASE_PATH = path.join(_dirname, '../pages');
const EXAMPLE_PATH = path.join(BASE_PATH, 'example');

// Function to convert dashed words to Pascal Case
const toPascalCase = (str) => {
    return str.split('-').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join('');
};

// Function to recursively replace occurrences in files
const replaceInFiles = (dir, searchValue, replaceValue) => {
    const files = fs.readdirSync(dir);
    files.forEach(file => {
        const filePath = path.join(dir, file);
        const stat = fs.statSync(filePath);
        if (stat.isDirectory()) {
            // If it's a directory, recurse into it
            replaceInFiles(filePath, searchValue, replaceValue);
        } else if (file !== 'readme.md') {
            // If it's a file and not readme.md, perform the replacement
            let content = fs.readFileSync(filePath, 'utf-8');
            content = content.replace(new RegExp(searchValue, 'g'), replaceValue);
            fs.writeFileSync(filePath, content);
        }
    });
};

// Check if the parameter is provided
if (process.argv.length < 3) {
    console.error('Usage: node create-special-page.mjs <new-page-name>');
    process.exit(1);
}

// Define the new folder name
const NEW_PAGE = process.argv[2];
const NEW_PAGE_PATH = path.join(BASE_PATH, NEW_PAGE);

// Copy the "example" folder to the new folder
fs.mkdirSync(NEW_PAGE_PATH, { recursive: true });
fs.cpSync(EXAMPLE_PATH, NEW_PAGE_PATH, { recursive: true });

// Remove autogenerated files
const typesPath = path.join(NEW_PAGE_PATH, 'types');
if (fs.existsSync(typesPath)) {
    fs.rmSync(typesPath, { recursive: true, force: true });
}

// Replace occurrences of "example" with the new folder name in all files except readme.md
replaceInFiles(NEW_PAGE_PATH, 'example', NEW_PAGE);

// Get the Pascal Case version of the new folder name
const PASCAL_CASE_NAME = toPascalCase(NEW_PAGE);

// Replace occurrences of "Example" with the Pascal Case value in all files except readme.md
replaceInFiles(NEW_PAGE_PATH, 'Example', PASCAL_CASE_NAME);

// Rename translations file
const translationFilePath = path.join(NEW_PAGE_PATH, 'public/locales/en/example.json');
const newTranslationFilePath = path.join(NEW_PAGE_PATH, 'public/locales/en', `${NEW_PAGE}.json`);
fs.renameSync(translationFilePath, newTranslationFilePath);

// Reset readme to boilerplate text
const readmePath = path.join(NEW_PAGE_PATH, 'readme.md');
fs.writeFileSync(readmePath, `# ${PASCAL_CASE_NAME}\n\nA brand new special page`);

// Change to special-pages directory and run build
process.chdir('../special-pages');
execSync('npm run build', { stdio: 'inherit' });

console.log(`\n\nSpecial Page ${NEW_PAGE} created! Now run...`);
console.log(`npm run watch -- --page ${NEW_PAGE}`);
