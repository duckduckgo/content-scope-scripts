"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __typeError = (msg) => {
    throw TypeError(msg);
  };
  var __defNormalProp = (obj, key2, value2) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value: value2 }) : obj[key2] = value2;
  var __glob = (map) => (path) => {
    var fn2 = map[path];
    if (fn2) return fn2();
    throw new Error("Module not found in bundle: " + path);
  };
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod2) => function __require() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __export = (target, all2) => {
    for (var name2 in all2)
      __defProp(target, name2, { get: all2[name2], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key2 of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key2) && key2 !== except)
          __defProp(to, key2, { get: () => from[key2], enumerable: !(desc = __getOwnPropDesc(from, key2)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
    mod2
  ));
  var __publicField = (obj, key2, value2) => __defNormalProp(obj, typeof key2 !== "symbol" ? key2 + "" : key2, value2);
  var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
  var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateAdd = (obj, member, value2) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value2);
  var __privateSet = (obj, member, value2, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value2) : member.set(obj, value2), value2);
  var __privateWrapper = (obj, member, setter, getter) => ({
    set _(value2) {
      __privateSet(obj, member, value2, setter);
    },
    get _() {
      return __privateGet(obj, member, getter);
    }
  });

  // ../node_modules/preact/dist/preact.module.js
  function d(n3, l5) {
    for (var u4 in l5) n3[u4] = l5[u4];
    return n3;
  }
  function g(n3) {
    n3 && n3.parentNode && n3.parentNode.removeChild(n3);
  }
  function _(l5, u4, t4) {
    var i5, r4, o4, e4 = {};
    for (o4 in u4) "key" == o4 ? i5 = u4[o4] : "ref" == o4 ? r4 = u4[o4] : e4[o4] = u4[o4];
    if (arguments.length > 2 && (e4.children = arguments.length > 3 ? n.call(arguments, 2) : t4), "function" == typeof l5 && null != l5.defaultProps) for (o4 in l5.defaultProps) void 0 === e4[o4] && (e4[o4] = l5.defaultProps[o4]);
    return m(l5, e4, i5, r4, null);
  }
  function m(n3, t4, i5, r4, o4) {
    var e4 = { type: n3, props: t4, key: i5, ref: r4, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: null == o4 ? ++u : o4, __i: -1, __u: 0 };
    return null == o4 && null != l.vnode && l.vnode(e4), e4;
  }
  function k(n3) {
    return n3.children;
  }
  function x(n3, l5) {
    this.props = n3, this.context = l5;
  }
  function S(n3, l5) {
    if (null == l5) return n3.__ ? S(n3.__, n3.__i + 1) : null;
    for (var u4; l5 < n3.__k.length; l5++) if (null != (u4 = n3.__k[l5]) && null != u4.__e) return u4.__e;
    return "function" == typeof n3.type ? S(n3) : null;
  }
  function C(n3) {
    var l5, u4;
    if (null != (n3 = n3.__) && null != n3.__c) {
      for (n3.__e = n3.__c.base = null, l5 = 0; l5 < n3.__k.length; l5++) if (null != (u4 = n3.__k[l5]) && null != u4.__e) {
        n3.__e = n3.__c.base = u4.__e;
        break;
      }
      return C(n3);
    }
  }
  function M(n3) {
    (!n3.__d && (n3.__d = true) && i.push(n3) && !$.__r++ || r != l.debounceRendering) && ((r = l.debounceRendering) || o)($);
  }
  function $() {
    for (var n3, u4, t4, r4, o4, f4, c4, s4 = 1; i.length; ) i.length > s4 && i.sort(e), n3 = i.shift(), s4 = i.length, n3.__d && (t4 = void 0, o4 = (r4 = (u4 = n3).__v).__e, f4 = [], c4 = [], u4.__P && ((t4 = d({}, r4)).__v = r4.__v + 1, l.vnode && l.vnode(t4), O(u4.__P, t4, r4, u4.__n, u4.__P.namespaceURI, 32 & r4.__u ? [o4] : null, f4, null == o4 ? S(r4) : o4, !!(32 & r4.__u), c4), t4.__v = r4.__v, t4.__.__k[t4.__i] = t4, z(f4, t4, c4), t4.__e != o4 && C(t4)));
    $.__r = 0;
  }
  function I(n3, l5, u4, t4, i5, r4, o4, e4, f4, c4, s4) {
    var a4, h5, y5, w5, d5, g6, _5 = t4 && t4.__k || v, m4 = l5.length;
    for (f4 = P(u4, l5, _5, f4, m4), a4 = 0; a4 < m4; a4++) null != (y5 = u4.__k[a4]) && (h5 = -1 == y5.__i ? p : _5[y5.__i] || p, y5.__i = a4, g6 = O(n3, y5, h5, i5, r4, o4, e4, f4, c4, s4), w5 = y5.__e, y5.ref && h5.ref != y5.ref && (h5.ref && q(h5.ref, null, y5), s4.push(y5.ref, y5.__c || w5, y5)), null == d5 && null != w5 && (d5 = w5), 4 & y5.__u || h5.__k === y5.__k ? f4 = A(y5, f4, n3) : "function" == typeof y5.type && void 0 !== g6 ? f4 = g6 : w5 && (f4 = w5.nextSibling), y5.__u &= -7);
    return u4.__e = d5, f4;
  }
  function P(n3, l5, u4, t4, i5) {
    var r4, o4, e4, f4, c4, s4 = u4.length, a4 = s4, h5 = 0;
    for (n3.__k = new Array(i5), r4 = 0; r4 < i5; r4++) null != (o4 = l5[r4]) && "boolean" != typeof o4 && "function" != typeof o4 ? (f4 = r4 + h5, (o4 = n3.__k[r4] = "string" == typeof o4 || "number" == typeof o4 || "bigint" == typeof o4 || o4.constructor == String ? m(null, o4, null, null, null) : w(o4) ? m(k, { children: o4 }, null, null, null) : null == o4.constructor && o4.__b > 0 ? m(o4.type, o4.props, o4.key, o4.ref ? o4.ref : null, o4.__v) : o4).__ = n3, o4.__b = n3.__b + 1, e4 = null, -1 != (c4 = o4.__i = L(o4, u4, f4, a4)) && (a4--, (e4 = u4[c4]) && (e4.__u |= 2)), null == e4 || null == e4.__v ? (-1 == c4 && (i5 > s4 ? h5-- : i5 < s4 && h5++), "function" != typeof o4.type && (o4.__u |= 4)) : c4 != f4 && (c4 == f4 - 1 ? h5-- : c4 == f4 + 1 ? h5++ : (c4 > f4 ? h5-- : h5++, o4.__u |= 4))) : n3.__k[r4] = null;
    if (a4) for (r4 = 0; r4 < s4; r4++) null != (e4 = u4[r4]) && 0 == (2 & e4.__u) && (e4.__e == t4 && (t4 = S(e4)), B(e4, e4));
    return t4;
  }
  function A(n3, l5, u4) {
    var t4, i5;
    if ("function" == typeof n3.type) {
      for (t4 = n3.__k, i5 = 0; t4 && i5 < t4.length; i5++) t4[i5] && (t4[i5].__ = n3, l5 = A(t4[i5], l5, u4));
      return l5;
    }
    n3.__e != l5 && (l5 && n3.type && !u4.contains(l5) && (l5 = S(n3)), u4.insertBefore(n3.__e, l5 || null), l5 = n3.__e);
    do {
      l5 = l5 && l5.nextSibling;
    } while (null != l5 && 8 == l5.nodeType);
    return l5;
  }
  function H(n3, l5) {
    return l5 = l5 || [], null == n3 || "boolean" == typeof n3 || (w(n3) ? n3.some(function(n4) {
      H(n4, l5);
    }) : l5.push(n3)), l5;
  }
  function L(n3, l5, u4, t4) {
    var i5, r4, o4 = n3.key, e4 = n3.type, f4 = l5[u4];
    if (null === f4 && null == n3.key || f4 && o4 == f4.key && e4 == f4.type && 0 == (2 & f4.__u)) return u4;
    if (t4 > (null != f4 && 0 == (2 & f4.__u) ? 1 : 0)) for (i5 = u4 - 1, r4 = u4 + 1; i5 >= 0 || r4 < l5.length; ) {
      if (i5 >= 0) {
        if ((f4 = l5[i5]) && 0 == (2 & f4.__u) && o4 == f4.key && e4 == f4.type) return i5;
        i5--;
      }
      if (r4 < l5.length) {
        if ((f4 = l5[r4]) && 0 == (2 & f4.__u) && o4 == f4.key && e4 == f4.type) return r4;
        r4++;
      }
    }
    return -1;
  }
  function T(n3, l5, u4) {
    "-" == l5[0] ? n3.setProperty(l5, null == u4 ? "" : u4) : n3[l5] = null == u4 ? "" : "number" != typeof u4 || y.test(l5) ? u4 : u4 + "px";
  }
  function j(n3, l5, u4, t4, i5) {
    var r4, o4;
    n: if ("style" == l5) if ("string" == typeof u4) n3.style.cssText = u4;
    else {
      if ("string" == typeof t4 && (n3.style.cssText = t4 = ""), t4) for (l5 in t4) u4 && l5 in u4 || T(n3.style, l5, "");
      if (u4) for (l5 in u4) t4 && u4[l5] == t4[l5] || T(n3.style, l5, u4[l5]);
    }
    else if ("o" == l5[0] && "n" == l5[1]) r4 = l5 != (l5 = l5.replace(f, "$1")), o4 = l5.toLowerCase(), l5 = o4 in n3 || "onFocusOut" == l5 || "onFocusIn" == l5 ? o4.slice(2) : l5.slice(2), n3.l || (n3.l = {}), n3.l[l5 + r4] = u4, u4 ? t4 ? u4.u = t4.u : (u4.u = c, n3.addEventListener(l5, r4 ? a : s, r4)) : n3.removeEventListener(l5, r4 ? a : s, r4);
    else {
      if ("http://www.w3.org/2000/svg" == i5) l5 = l5.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
      else if ("width" != l5 && "height" != l5 && "href" != l5 && "list" != l5 && "form" != l5 && "tabIndex" != l5 && "download" != l5 && "rowSpan" != l5 && "colSpan" != l5 && "role" != l5 && "popover" != l5 && l5 in n3) try {
        n3[l5] = null == u4 ? "" : u4;
        break n;
      } catch (n4) {
      }
      "function" == typeof u4 || (null == u4 || false === u4 && "-" != l5[4] ? n3.removeAttribute(l5) : n3.setAttribute(l5, "popover" == l5 && 1 == u4 ? "" : u4));
    }
  }
  function F(n3) {
    return function(u4) {
      if (this.l) {
        var t4 = this.l[u4.type + n3];
        if (null == u4.t) u4.t = c++;
        else if (u4.t < t4.u) return;
        return t4(l.event ? l.event(u4) : u4);
      }
    };
  }
  function O(n3, u4, t4, i5, r4, o4, e4, f4, c4, s4) {
    var a4, h5, p5, v4, y5, _5, m4, b4, S2, C3, M3, $2, P4, A5, H3, L2, T5, j4 = u4.type;
    if (null != u4.constructor) return null;
    128 & t4.__u && (c4 = !!(32 & t4.__u), o4 = [f4 = u4.__e = t4.__e]), (a4 = l.__b) && a4(u4);
    n: if ("function" == typeof j4) try {
      if (b4 = u4.props, S2 = "prototype" in j4 && j4.prototype.render, C3 = (a4 = j4.contextType) && i5[a4.__c], M3 = a4 ? C3 ? C3.props.value : a4.__ : i5, t4.__c ? m4 = (h5 = u4.__c = t4.__c).__ = h5.__E : (S2 ? u4.__c = h5 = new j4(b4, M3) : (u4.__c = h5 = new x(b4, M3), h5.constructor = j4, h5.render = D), C3 && C3.sub(h5), h5.props = b4, h5.state || (h5.state = {}), h5.context = M3, h5.__n = i5, p5 = h5.__d = true, h5.__h = [], h5._sb = []), S2 && null == h5.__s && (h5.__s = h5.state), S2 && null != j4.getDerivedStateFromProps && (h5.__s == h5.state && (h5.__s = d({}, h5.__s)), d(h5.__s, j4.getDerivedStateFromProps(b4, h5.__s))), v4 = h5.props, y5 = h5.state, h5.__v = u4, p5) S2 && null == j4.getDerivedStateFromProps && null != h5.componentWillMount && h5.componentWillMount(), S2 && null != h5.componentDidMount && h5.__h.push(h5.componentDidMount);
      else {
        if (S2 && null == j4.getDerivedStateFromProps && b4 !== v4 && null != h5.componentWillReceiveProps && h5.componentWillReceiveProps(b4, M3), !h5.__e && null != h5.shouldComponentUpdate && false === h5.shouldComponentUpdate(b4, h5.__s, M3) || u4.__v == t4.__v) {
          for (u4.__v != t4.__v && (h5.props = b4, h5.state = h5.__s, h5.__d = false), u4.__e = t4.__e, u4.__k = t4.__k, u4.__k.some(function(n4) {
            n4 && (n4.__ = u4);
          }), $2 = 0; $2 < h5._sb.length; $2++) h5.__h.push(h5._sb[$2]);
          h5._sb = [], h5.__h.length && e4.push(h5);
          break n;
        }
        null != h5.componentWillUpdate && h5.componentWillUpdate(b4, h5.__s, M3), S2 && null != h5.componentDidUpdate && h5.__h.push(function() {
          h5.componentDidUpdate(v4, y5, _5);
        });
      }
      if (h5.context = M3, h5.props = b4, h5.__P = n3, h5.__e = false, P4 = l.__r, A5 = 0, S2) {
        for (h5.state = h5.__s, h5.__d = false, P4 && P4(u4), a4 = h5.render(h5.props, h5.state, h5.context), H3 = 0; H3 < h5._sb.length; H3++) h5.__h.push(h5._sb[H3]);
        h5._sb = [];
      } else do {
        h5.__d = false, P4 && P4(u4), a4 = h5.render(h5.props, h5.state, h5.context), h5.state = h5.__s;
      } while (h5.__d && ++A5 < 25);
      h5.state = h5.__s, null != h5.getChildContext && (i5 = d(d({}, i5), h5.getChildContext())), S2 && !p5 && null != h5.getSnapshotBeforeUpdate && (_5 = h5.getSnapshotBeforeUpdate(v4, y5)), L2 = a4, null != a4 && a4.type === k && null == a4.key && (L2 = N(a4.props.children)), f4 = I(n3, w(L2) ? L2 : [L2], u4, t4, i5, r4, o4, e4, f4, c4, s4), h5.base = u4.__e, u4.__u &= -161, h5.__h.length && e4.push(h5), m4 && (h5.__E = h5.__ = null);
    } catch (n4) {
      if (u4.__v = null, c4 || null != o4) if (n4.then) {
        for (u4.__u |= c4 ? 160 : 128; f4 && 8 == f4.nodeType && f4.nextSibling; ) f4 = f4.nextSibling;
        o4[o4.indexOf(f4)] = null, u4.__e = f4;
      } else for (T5 = o4.length; T5--; ) g(o4[T5]);
      else u4.__e = t4.__e, u4.__k = t4.__k;
      l.__e(n4, u4, t4);
    }
    else null == o4 && u4.__v == t4.__v ? (u4.__k = t4.__k, u4.__e = t4.__e) : f4 = u4.__e = V(t4.__e, u4, t4, i5, r4, o4, e4, c4, s4);
    return (a4 = l.diffed) && a4(u4), 128 & u4.__u ? void 0 : f4;
  }
  function z(n3, u4, t4) {
    for (var i5 = 0; i5 < t4.length; i5++) q(t4[i5], t4[++i5], t4[++i5]);
    l.__c && l.__c(u4, n3), n3.some(function(u5) {
      try {
        n3 = u5.__h, u5.__h = [], n3.some(function(n4) {
          n4.call(u5);
        });
      } catch (n4) {
        l.__e(n4, u5.__v);
      }
    });
  }
  function N(n3) {
    return "object" != typeof n3 || null == n3 || n3.__b && n3.__b > 0 ? n3 : w(n3) ? n3.map(N) : d({}, n3);
  }
  function V(u4, t4, i5, r4, o4, e4, f4, c4, s4) {
    var a4, h5, v4, y5, d5, _5, m4, b4 = i5.props, k4 = t4.props, x3 = t4.type;
    if ("svg" == x3 ? o4 = "http://www.w3.org/2000/svg" : "math" == x3 ? o4 = "http://www.w3.org/1998/Math/MathML" : o4 || (o4 = "http://www.w3.org/1999/xhtml"), null != e4) {
      for (a4 = 0; a4 < e4.length; a4++) if ((d5 = e4[a4]) && "setAttribute" in d5 == !!x3 && (x3 ? d5.localName == x3 : 3 == d5.nodeType)) {
        u4 = d5, e4[a4] = null;
        break;
      }
    }
    if (null == u4) {
      if (null == x3) return document.createTextNode(k4);
      u4 = document.createElementNS(o4, x3, k4.is && k4), c4 && (l.__m && l.__m(t4, e4), c4 = false), e4 = null;
    }
    if (null == x3) b4 === k4 || c4 && u4.data == k4 || (u4.data = k4);
    else {
      if (e4 = e4 && n.call(u4.childNodes), b4 = i5.props || p, !c4 && null != e4) for (b4 = {}, a4 = 0; a4 < u4.attributes.length; a4++) b4[(d5 = u4.attributes[a4]).name] = d5.value;
      for (a4 in b4) if (d5 = b4[a4], "children" == a4) ;
      else if ("dangerouslySetInnerHTML" == a4) v4 = d5;
      else if (!(a4 in k4)) {
        if ("value" == a4 && "defaultValue" in k4 || "checked" == a4 && "defaultChecked" in k4) continue;
        j(u4, a4, null, d5, o4);
      }
      for (a4 in k4) d5 = k4[a4], "children" == a4 ? y5 = d5 : "dangerouslySetInnerHTML" == a4 ? h5 = d5 : "value" == a4 ? _5 = d5 : "checked" == a4 ? m4 = d5 : c4 && "function" != typeof d5 || b4[a4] === d5 || j(u4, a4, d5, b4[a4], o4);
      if (h5) c4 || v4 && (h5.__html == v4.__html || h5.__html == u4.innerHTML) || (u4.innerHTML = h5.__html), t4.__k = [];
      else if (v4 && (u4.innerHTML = ""), I("template" == t4.type ? u4.content : u4, w(y5) ? y5 : [y5], t4, i5, r4, "foreignObject" == x3 ? "http://www.w3.org/1999/xhtml" : o4, e4, f4, e4 ? e4[0] : i5.__k && S(i5, 0), c4, s4), null != e4) for (a4 = e4.length; a4--; ) g(e4[a4]);
      c4 || (a4 = "value", "progress" == x3 && null == _5 ? u4.removeAttribute("value") : null != _5 && (_5 !== u4[a4] || "progress" == x3 && !_5 || "option" == x3 && _5 != b4[a4]) && j(u4, a4, _5, b4[a4], o4), a4 = "checked", null != m4 && m4 != u4[a4] && j(u4, a4, m4, b4[a4], o4));
    }
    return u4;
  }
  function q(n3, u4, t4) {
    try {
      if ("function" == typeof n3) {
        var i5 = "function" == typeof n3.__u;
        i5 && n3.__u(), i5 && null == u4 || (n3.__u = n3(u4));
      } else n3.current = u4;
    } catch (n4) {
      l.__e(n4, t4);
    }
  }
  function B(n3, u4, t4) {
    var i5, r4;
    if (l.unmount && l.unmount(n3), (i5 = n3.ref) && (i5.current && i5.current != n3.__e || q(i5, null, u4)), null != (i5 = n3.__c)) {
      if (i5.componentWillUnmount) try {
        i5.componentWillUnmount();
      } catch (n4) {
        l.__e(n4, u4);
      }
      i5.base = i5.__P = null;
    }
    if (i5 = n3.__k) for (r4 = 0; r4 < i5.length; r4++) i5[r4] && B(i5[r4], u4, t4 || "function" != typeof n3.type);
    t4 || g(n3.__e), n3.__c = n3.__ = n3.__e = void 0;
  }
  function D(n3, l5, u4) {
    return this.constructor(n3, u4);
  }
  function E(u4, t4, i5) {
    var r4, o4, e4, f4;
    t4 == document && (t4 = document.documentElement), l.__ && l.__(u4, t4), o4 = (r4 = "function" == typeof i5) ? null : i5 && i5.__k || t4.__k, e4 = [], f4 = [], O(t4, u4 = (!r4 && i5 || t4).__k = _(k, null, [u4]), o4 || p, p, t4.namespaceURI, !r4 && i5 ? [i5] : o4 ? null : t4.firstChild ? n.call(t4.childNodes) : null, e4, !r4 && i5 ? i5 : o4 ? o4.__e : t4.firstChild, r4, f4), z(e4, u4, f4);
  }
  function K(n3) {
    function l5(n4) {
      var u4, t4;
      return this.getChildContext || (u4 = /* @__PURE__ */ new Set(), (t4 = {})[l5.__c] = this, this.getChildContext = function() {
        return t4;
      }, this.componentWillUnmount = function() {
        u4 = null;
      }, this.shouldComponentUpdate = function(n5) {
        this.props.value != n5.value && u4.forEach(function(n6) {
          n6.__e = true, M(n6);
        });
      }, this.sub = function(n5) {
        u4.add(n5);
        var l6 = n5.componentWillUnmount;
        n5.componentWillUnmount = function() {
          u4 && u4.delete(n5), l6 && l6.call(n5);
        };
      }), n4.children;
    }
    return l5.__c = "__cC" + h++, l5.__ = n3, l5.Provider = l5.__l = (l5.Consumer = function(n4, l6) {
      return n4.children(l6);
    }).contextType = l5, l5;
  }
  var n, l, u, t, i, r, o, e, f, c, s, a, h, p, v, y, w;
  var init_preact_module = __esm({
    "../node_modules/preact/dist/preact.module.js"() {
      p = {};
      v = [];
      y = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
      w = Array.isArray;
      n = v.slice, l = { __e: function(n3, l5, u4, t4) {
        for (var i5, r4, o4; l5 = l5.__; ) if ((i5 = l5.__c) && !i5.__) try {
          if ((r4 = i5.constructor) && null != r4.getDerivedStateFromError && (i5.setState(r4.getDerivedStateFromError(n3)), o4 = i5.__d), null != i5.componentDidCatch && (i5.componentDidCatch(n3, t4 || {}), o4 = i5.__d), o4) return i5.__E = i5;
        } catch (l6) {
          n3 = l6;
        }
        throw n3;
      } }, u = 0, t = function(n3) {
        return null != n3 && null == n3.constructor;
      }, x.prototype.setState = function(n3, l5) {
        var u4;
        u4 = null != this.__s && this.__s != this.state ? this.__s : this.__s = d({}, this.state), "function" == typeof n3 && (n3 = n3(d({}, u4), this.props)), n3 && d(u4, n3), null != n3 && this.__v && (l5 && this._sb.push(l5), M(this));
      }, x.prototype.forceUpdate = function(n3) {
        this.__v && (this.__e = true, n3 && this.__h.push(n3), M(this));
      }, x.prototype.render = k, i = [], o = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, e = function(n3, l5) {
        return n3.__v.__b - l5.__v.__b;
      }, $.__r = 0, f = /(PointerCapture)$|Capture$/i, c = 0, s = F(false), a = F(true), h = 0;
    }
  });

  // ../node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "../node_modules/classnames/index.js"(exports2, module2) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        function classNames2() {
          var classes = "";
          for (var i5 = 0; i5 < arguments.length; i5++) {
            var arg = arguments[i5];
            if (arg) {
              classes = appendClass(classes, parseValue(arg));
            }
          }
          return classes;
        }
        function parseValue(arg) {
          if (typeof arg === "string" || typeof arg === "number") {
            return arg;
          }
          if (typeof arg !== "object") {
            return "";
          }
          if (Array.isArray(arg)) {
            return classNames2.apply(null, arg);
          }
          if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
            return arg.toString();
          }
          var classes = "";
          for (var key2 in arg) {
            if (hasOwn.call(arg, key2) && arg[key2]) {
              classes = appendClass(classes, key2);
            }
          }
          return classes;
        }
        function appendClass(value2, newClass) {
          if (!newClass) {
            return value2;
          }
          if (value2) {
            return value2 + " " + newClass;
          }
          return value2 + newClass;
        }
        if (typeof module2 !== "undefined" && module2.exports) {
          classNames2.default = classNames2;
          module2.exports = classNames2;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames2;
          });
        } else {
          window.classNames = classNames2;
        }
      })();
    }
  });

  // ../node_modules/preact/hooks/dist/hooks.module.js
  function p2(n3, t4) {
    c2.__h && c2.__h(r2, n3, o2 || t4), o2 = 0;
    var u4 = r2.__H || (r2.__H = { __: [], __h: [] });
    return n3 >= u4.__.length && u4.__.push({}), u4.__[n3];
  }
  function d2(n3) {
    return o2 = 1, h2(D2, n3);
  }
  function h2(n3, u4, i5) {
    var o4 = p2(t2++, 2);
    if (o4.t = n3, !o4.__c && (o4.__ = [i5 ? i5(u4) : D2(void 0, u4), function(n4) {
      var t4 = o4.__N ? o4.__N[0] : o4.__[0], r4 = o4.t(t4, n4);
      t4 !== r4 && (o4.__N = [r4, o4.__[1]], o4.__c.setState({}));
    }], o4.__c = r2, !r2.__f)) {
      var f4 = function(n4, t4, r4) {
        if (!o4.__c.__H) return true;
        var u5 = o4.__c.__H.__.filter(function(n5) {
          return !!n5.__c;
        });
        if (u5.every(function(n5) {
          return !n5.__N;
        })) return !c4 || c4.call(this, n4, t4, r4);
        var i6 = o4.__c.props !== n4;
        return u5.forEach(function(n5) {
          if (n5.__N) {
            var t5 = n5.__[0];
            n5.__ = n5.__N, n5.__N = void 0, t5 !== n5.__[0] && (i6 = true);
          }
        }), c4 && c4.call(this, n4, t4, r4) || i6;
      };
      r2.__f = true;
      var c4 = r2.shouldComponentUpdate, e4 = r2.componentWillUpdate;
      r2.componentWillUpdate = function(n4, t4, r4) {
        if (this.__e) {
          var u5 = c4;
          c4 = void 0, f4(n4, t4, r4), c4 = u5;
        }
        e4 && e4.call(this, n4, t4, r4);
      }, r2.shouldComponentUpdate = f4;
    }
    return o4.__N || o4.__;
  }
  function y2(n3, u4) {
    var i5 = p2(t2++, 3);
    !c2.__s && C2(i5.__H, u4) && (i5.__ = n3, i5.u = u4, r2.__H.__h.push(i5));
  }
  function _2(n3, u4) {
    var i5 = p2(t2++, 4);
    !c2.__s && C2(i5.__H, u4) && (i5.__ = n3, i5.u = u4, r2.__h.push(i5));
  }
  function A2(n3) {
    return o2 = 5, T2(function() {
      return { current: n3 };
    }, []);
  }
  function T2(n3, r4) {
    var u4 = p2(t2++, 7);
    return C2(u4.__H, r4) && (u4.__ = n3(), u4.__H = r4, u4.__h = n3), u4.__;
  }
  function q2(n3, t4) {
    return o2 = 8, T2(function() {
      return n3;
    }, t4);
  }
  function x2(n3) {
    var u4 = r2.context[n3.__c], i5 = p2(t2++, 9);
    return i5.c = n3, u4 ? (null == i5.__ && (i5.__ = true, u4.sub(r2)), u4.props.value) : n3.__;
  }
  function g2() {
    var n3 = p2(t2++, 11);
    if (!n3.__) {
      for (var u4 = r2.__v; null !== u4 && !u4.__m && null !== u4.__; ) u4 = u4.__;
      var i5 = u4.__m || (u4.__m = [0, 0]);
      n3.__ = "P" + i5[0] + "-" + i5[1]++;
    }
    return n3.__;
  }
  function j2() {
    for (var n3; n3 = f2.shift(); ) if (n3.__P && n3.__H) try {
      n3.__H.__h.forEach(z2), n3.__H.__h.forEach(B2), n3.__H.__h = [];
    } catch (t4) {
      n3.__H.__h = [], c2.__e(t4, n3.__v);
    }
  }
  function w2(n3) {
    var t4, r4 = function() {
      clearTimeout(u4), k2 && cancelAnimationFrame(t4), setTimeout(n3);
    }, u4 = setTimeout(r4, 35);
    k2 && (t4 = requestAnimationFrame(r4));
  }
  function z2(n3) {
    var t4 = r2, u4 = n3.__c;
    "function" == typeof u4 && (n3.__c = void 0, u4()), r2 = t4;
  }
  function B2(n3) {
    var t4 = r2;
    n3.__c = n3.__(), r2 = t4;
  }
  function C2(n3, t4) {
    return !n3 || n3.length !== t4.length || t4.some(function(t5, r4) {
      return t5 !== n3[r4];
    });
  }
  function D2(n3, t4) {
    return "function" == typeof t4 ? t4(n3) : t4;
  }
  var t2, r2, u2, i3, o2, f2, c2, e2, a2, v2, l2, m2, s2, k2;
  var init_hooks_module = __esm({
    "../node_modules/preact/hooks/dist/hooks.module.js"() {
      init_preact_module();
      o2 = 0;
      f2 = [];
      c2 = l;
      e2 = c2.__b;
      a2 = c2.__r;
      v2 = c2.diffed;
      l2 = c2.__c;
      m2 = c2.unmount;
      s2 = c2.__;
      c2.__b = function(n3) {
        r2 = null, e2 && e2(n3);
      }, c2.__ = function(n3, t4) {
        n3 && t4.__k && t4.__k.__m && (n3.__m = t4.__k.__m), s2 && s2(n3, t4);
      }, c2.__r = function(n3) {
        a2 && a2(n3), t2 = 0;
        var i5 = (r2 = n3.__c).__H;
        i5 && (u2 === r2 ? (i5.__h = [], r2.__h = [], i5.__.forEach(function(n4) {
          n4.__N && (n4.__ = n4.__N), n4.u = n4.__N = void 0;
        })) : (i5.__h.forEach(z2), i5.__h.forEach(B2), i5.__h = [], t2 = 0)), u2 = r2;
      }, c2.diffed = function(n3) {
        v2 && v2(n3);
        var t4 = n3.__c;
        t4 && t4.__H && (t4.__H.__h.length && (1 !== f2.push(t4) && i3 === c2.requestAnimationFrame || ((i3 = c2.requestAnimationFrame) || w2)(j2)), t4.__H.__.forEach(function(n4) {
          n4.u && (n4.__H = n4.u), n4.u = void 0;
        })), u2 = r2 = null;
      }, c2.__c = function(n3, t4) {
        t4.some(function(n4) {
          try {
            n4.__h.forEach(z2), n4.__h = n4.__h.filter(function(n5) {
              return !n5.__ || B2(n5);
            });
          } catch (r4) {
            t4.some(function(n5) {
              n5.__h && (n5.__h = []);
            }), t4 = [], c2.__e(r4, n4.__v);
          }
        }), l2 && l2(n3, t4);
      }, c2.unmount = function(n3) {
        m2 && m2(n3);
        var t4, r4 = n3.__c;
        r4 && r4.__H && (r4.__H.__.forEach(function(n4) {
          try {
            z2(n4);
          } catch (n5) {
            t4 = n5;
          }
        }), r4.__H = void 0, t4 && c2.__e(t4, r4.__v));
      };
      k2 = "function" == typeof requestAnimationFrame;
    }
  });

  // pages/new-tab/app/settings.provider.js
  function SettingsProvider({ settings, children }) {
    return /* @__PURE__ */ _(SettingsContext.Provider, { value: { settings } }, children);
  }
  function usePlatformName() {
    return x2(SettingsContext).settings.platform.name;
  }
  function useCustomizerDrawerSettings() {
    return x2(SettingsContext).settings.customizerDrawer;
  }
  function useBatchedActivityApi() {
    const settings = x2(SettingsContext).settings;
    return settings.batchedActivityApi.state === "enabled";
  }
  function useAdBlocking() {
    const settings = x2(SettingsContext).settings;
    return settings.adBlocking.state === "enabled";
  }
  var SettingsContext;
  var init_settings_provider = __esm({
    "pages/new-tab/app/settings.provider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      SettingsContext = K(
        /** @type {{settings: import("./settings.js").Settings}} */
        {}
      );
    }
  });

  // ../node_modules/@preact/signals-core/dist/signals-core.module.js
  function t3() {
    if (!(s3 > 1)) {
      var i5, t4 = false;
      while (void 0 !== h3) {
        var r4 = h3;
        h3 = void 0;
        f3++;
        while (void 0 !== r4) {
          var o4 = r4.o;
          r4.o = void 0;
          r4.f &= -3;
          if (!(8 & r4.f) && c3(r4)) try {
            r4.c();
          } catch (r5) {
            if (!t4) {
              i5 = r5;
              t4 = true;
            }
          }
          r4 = o4;
        }
      }
      f3 = 0;
      s3--;
      if (t4) throw i5;
    } else s3--;
  }
  function r3(i5) {
    if (s3 > 0) return i5();
    s3++;
    try {
      return i5();
    } finally {
      t3();
    }
  }
  function n2(i5) {
    var t4 = o3;
    o3 = void 0;
    try {
      return i5();
    } finally {
      o3 = t4;
    }
  }
  function e3(i5) {
    if (void 0 !== o3) {
      var t4 = i5.n;
      if (void 0 === t4 || t4.t !== o3) {
        t4 = { i: 0, S: i5, p: o3.s, n: void 0, t: o3, e: void 0, x: void 0, r: t4 };
        if (void 0 !== o3.s) o3.s.n = t4;
        o3.s = t4;
        i5.n = t4;
        if (32 & o3.f) i5.S(t4);
        return t4;
      } else if (-1 === t4.i) {
        t4.i = 0;
        if (void 0 !== t4.n) {
          t4.n.p = t4.p;
          if (void 0 !== t4.p) t4.p.n = t4.n;
          t4.p = o3.s;
          t4.n = void 0;
          o3.s.n = t4;
          o3.s = t4;
        }
        return t4;
      }
    }
  }
  function u3(i5, t4) {
    this.v = i5;
    this.i = 0;
    this.n = void 0;
    this.t = void 0;
    this.W = null == t4 ? void 0 : t4.watched;
    this.Z = null == t4 ? void 0 : t4.unwatched;
  }
  function d3(i5, t4) {
    return new u3(i5, t4);
  }
  function c3(i5) {
    for (var t4 = i5.s; void 0 !== t4; t4 = t4.n) if (t4.S.i !== t4.i || !t4.S.h() || t4.S.i !== t4.i) return true;
    return false;
  }
  function a3(i5) {
    for (var t4 = i5.s; void 0 !== t4; t4 = t4.n) {
      var r4 = t4.S.n;
      if (void 0 !== r4) t4.r = r4;
      t4.S.n = t4;
      t4.i = -1;
      if (void 0 === t4.n) {
        i5.s = t4;
        break;
      }
    }
  }
  function l3(i5) {
    var t4 = i5.s, r4 = void 0;
    while (void 0 !== t4) {
      var o4 = t4.p;
      if (-1 === t4.i) {
        t4.S.U(t4);
        if (void 0 !== o4) o4.n = t4.n;
        if (void 0 !== t4.n) t4.n.p = o4;
      } else r4 = t4;
      t4.S.n = t4.r;
      if (void 0 !== t4.r) t4.r = void 0;
      t4 = o4;
    }
    i5.s = r4;
  }
  function y3(i5, t4) {
    u3.call(this, void 0);
    this.x = i5;
    this.s = void 0;
    this.g = v3 - 1;
    this.f = 4;
    this.W = null == t4 ? void 0 : t4.watched;
    this.Z = null == t4 ? void 0 : t4.unwatched;
  }
  function w3(i5, t4) {
    return new y3(i5, t4);
  }
  function _3(i5) {
    var r4 = i5.u;
    i5.u = void 0;
    if ("function" == typeof r4) {
      s3++;
      var n3 = o3;
      o3 = void 0;
      try {
        r4();
      } catch (t4) {
        i5.f &= -2;
        i5.f |= 8;
        b(i5);
        throw t4;
      } finally {
        o3 = n3;
        t3();
      }
    }
  }
  function b(i5) {
    for (var t4 = i5.s; void 0 !== t4; t4 = t4.n) t4.S.U(t4);
    i5.x = void 0;
    i5.s = void 0;
    _3(i5);
  }
  function g3(i5) {
    if (o3 !== this) throw new Error("Out-of-order effect");
    l3(this);
    o3 = i5;
    this.f &= -2;
    if (8 & this.f) b(this);
    t3();
  }
  function p3(i5) {
    this.x = i5;
    this.u = void 0;
    this.s = void 0;
    this.o = void 0;
    this.f = 32;
  }
  function E2(i5) {
    var t4 = new p3(i5);
    try {
      t4.c();
    } catch (i6) {
      t4.d();
      throw i6;
    }
    var r4 = t4.d.bind(t4);
    r4[Symbol.dispose] = r4;
    return r4;
  }
  var i4, o3, h3, s3, f3, v3;
  var init_signals_core_module = __esm({
    "../node_modules/@preact/signals-core/dist/signals-core.module.js"() {
      i4 = Symbol.for("preact-signals");
      o3 = void 0;
      h3 = void 0;
      s3 = 0;
      f3 = 0;
      v3 = 0;
      u3.prototype.brand = i4;
      u3.prototype.h = function() {
        return true;
      };
      u3.prototype.S = function(i5) {
        var t4 = this, r4 = this.t;
        if (r4 !== i5 && void 0 === i5.e) {
          i5.x = r4;
          this.t = i5;
          if (void 0 !== r4) r4.e = i5;
          else n2(function() {
            var i6;
            null == (i6 = t4.W) || i6.call(t4);
          });
        }
      };
      u3.prototype.U = function(i5) {
        var t4 = this;
        if (void 0 !== this.t) {
          var r4 = i5.e, o4 = i5.x;
          if (void 0 !== r4) {
            r4.x = o4;
            i5.e = void 0;
          }
          if (void 0 !== o4) {
            o4.e = r4;
            i5.x = void 0;
          }
          if (i5 === this.t) {
            this.t = o4;
            if (void 0 === o4) n2(function() {
              var i6;
              null == (i6 = t4.Z) || i6.call(t4);
            });
          }
        }
      };
      u3.prototype.subscribe = function(i5) {
        var t4 = this;
        return E2(function() {
          var r4 = t4.value, n3 = o3;
          o3 = void 0;
          try {
            i5(r4);
          } finally {
            o3 = n3;
          }
        });
      };
      u3.prototype.valueOf = function() {
        return this.value;
      };
      u3.prototype.toString = function() {
        return this.value + "";
      };
      u3.prototype.toJSON = function() {
        return this.value;
      };
      u3.prototype.peek = function() {
        var i5 = o3;
        o3 = void 0;
        try {
          return this.value;
        } finally {
          o3 = i5;
        }
      };
      Object.defineProperty(u3.prototype, "value", { get: function() {
        var i5 = e3(this);
        if (void 0 !== i5) i5.i = this.i;
        return this.v;
      }, set: function(i5) {
        if (i5 !== this.v) {
          if (f3 > 100) throw new Error("Cycle detected");
          this.v = i5;
          this.i++;
          v3++;
          s3++;
          try {
            for (var r4 = this.t; void 0 !== r4; r4 = r4.x) r4.t.N();
          } finally {
            t3();
          }
        }
      } });
      y3.prototype = new u3();
      y3.prototype.h = function() {
        this.f &= -3;
        if (1 & this.f) return false;
        if (32 == (36 & this.f)) return true;
        this.f &= -5;
        if (this.g === v3) return true;
        this.g = v3;
        this.f |= 1;
        if (this.i > 0 && !c3(this)) {
          this.f &= -2;
          return true;
        }
        var i5 = o3;
        try {
          a3(this);
          o3 = this;
          var t4 = this.x();
          if (16 & this.f || this.v !== t4 || 0 === this.i) {
            this.v = t4;
            this.f &= -17;
            this.i++;
          }
        } catch (i6) {
          this.v = i6;
          this.f |= 16;
          this.i++;
        }
        o3 = i5;
        l3(this);
        this.f &= -2;
        return true;
      };
      y3.prototype.S = function(i5) {
        if (void 0 === this.t) {
          this.f |= 36;
          for (var t4 = this.s; void 0 !== t4; t4 = t4.n) t4.S.S(t4);
        }
        u3.prototype.S.call(this, i5);
      };
      y3.prototype.U = function(i5) {
        if (void 0 !== this.t) {
          u3.prototype.U.call(this, i5);
          if (void 0 === this.t) {
            this.f &= -33;
            for (var t4 = this.s; void 0 !== t4; t4 = t4.n) t4.S.U(t4);
          }
        }
      };
      y3.prototype.N = function() {
        if (!(2 & this.f)) {
          this.f |= 6;
          for (var i5 = this.t; void 0 !== i5; i5 = i5.x) i5.t.N();
        }
      };
      Object.defineProperty(y3.prototype, "value", { get: function() {
        if (1 & this.f) throw new Error("Cycle detected");
        var i5 = e3(this);
        this.h();
        if (void 0 !== i5) i5.i = this.i;
        if (16 & this.f) throw this.v;
        return this.v;
      } });
      p3.prototype.c = function() {
        var i5 = this.S();
        try {
          if (8 & this.f) return;
          if (void 0 === this.x) return;
          var t4 = this.x();
          if ("function" == typeof t4) this.u = t4;
        } finally {
          i5();
        }
      };
      p3.prototype.S = function() {
        if (1 & this.f) throw new Error("Cycle detected");
        this.f |= 1;
        this.f &= -9;
        _3(this);
        a3(this);
        s3++;
        var i5 = o3;
        o3 = this;
        return g3.bind(this, i5);
      };
      p3.prototype.N = function() {
        if (!(2 & this.f)) {
          this.f |= 2;
          this.o = h3;
          h3 = this;
        }
      };
      p3.prototype.d = function() {
        this.f |= 8;
        if (!(1 & this.f)) b(this);
      };
      p3.prototype.dispose = function() {
        this.d();
      };
    }
  });

  // ../node_modules/@preact/signals/dist/signals.module.js
  function _4(i5, r4) {
    l[i5] = r4.bind(null, l[i5] || function() {
    });
  }
  function g4(i5) {
    if (d4) d4();
    d4 = i5 && i5.S();
  }
  function b2(i5) {
    var n3 = this, t4 = i5.data, o4 = useSignal(t4);
    o4.value = t4;
    var e4 = T2(function() {
      var i6 = n3, t5 = n3.__v;
      while (t5 = t5.__) if (t5.__c) {
        t5.__c.__$f |= 4;
        break;
      }
      var f4 = w3(function() {
        var i7 = o4.value.value;
        return 0 === i7 ? 0 : true === i7 ? "" : i7 || "";
      }), e5 = w3(function() {
        return !Array.isArray(f4.value) && !t(f4.value);
      }), a5 = E2(function() {
        this.N = T3;
        if (e5.value) {
          var n4 = f4.value;
          if (i6.__v && i6.__v.__e && 3 === i6.__v.__e.nodeType) i6.__v.__e.data = n4;
        }
      }), v5 = n3.__$u.d;
      n3.__$u.d = function() {
        a5();
        v5.call(this);
      };
      return [e5, f4];
    }, []), a4 = e4[0], v4 = e4[1];
    return a4.value ? v4.peek() : v4.value;
  }
  function y4(i5, n3, r4, t4) {
    var f4 = n3 in i5 && void 0 === i5.ownerSVGElement, o4 = d3(r4);
    return { o: function(i6, n4) {
      o4.value = i6;
      t4 = n4;
    }, d: E2(function() {
      this.N = T3;
      var r5 = o4.value.value;
      if (t4[n3] !== r5) {
        t4[n3] = r5;
        if (f4) i5[n3] = r5;
        else if (r5) i5.setAttribute(n3, r5);
        else i5.removeAttribute(n3);
      }
    }) };
  }
  function useSignal(i5, n3) {
    return T2(function() {
      return d3(i5, n3);
    }, []);
  }
  function useComputed(i5, n3) {
    var r4 = A2(i5);
    r4.current = i5;
    l4.__$f |= 4;
    return T2(function() {
      return w3(function() {
        return r4.current();
      }, n3);
    }, []);
  }
  function A3() {
    r3(function() {
      var i5;
      while (i5 = p4.shift()) h4.call(i5);
    });
  }
  function w4() {
    if (1 === p4.push(this)) (l.requestAnimationFrame || k3)(A3);
  }
  function F2() {
    r3(function() {
      var i5;
      while (i5 = m3.shift()) h4.call(i5);
    });
  }
  function T3() {
    if (1 === m3.push(this)) (l.requestAnimationFrame || q3)(F2);
  }
  function useSignalEffect(i5) {
    var n3 = A2(i5);
    n3.current = i5;
    y2(function() {
      return E2(function() {
        this.N = w4;
        return n3.current();
      });
    }, []);
  }
  var h4, l4, d4, p4, m3, k3, q3;
  var init_signals_module = __esm({
    "../node_modules/@preact/signals/dist/signals.module.js"() {
      init_preact_module();
      init_hooks_module();
      init_signals_core_module();
      init_signals_core_module();
      p4 = [];
      m3 = [];
      E2(function() {
        h4 = this.N;
      })();
      b2.displayName = "_st";
      Object.defineProperties(u3.prototype, { constructor: { configurable: true, value: void 0 }, type: { configurable: true, value: b2 }, props: { configurable: true, get: function() {
        return { data: this };
      } }, __b: { configurable: true, value: 1 } });
      _4("__b", function(i5, n3) {
        if ("string" == typeof n3.type) {
          var r4, t4 = n3.props;
          for (var f4 in t4) if ("children" !== f4) {
            var o4 = t4[f4];
            if (o4 instanceof u3) {
              if (!r4) n3.__np = r4 = {};
              r4[f4] = o4;
              t4[f4] = o4.peek();
            }
          }
        }
        i5(n3);
      });
      _4("__r", function(i5, n3) {
        if (n3.type !== k) {
          g4();
          var r4, f4 = n3.__c;
          if (f4) {
            f4.__$f &= -2;
            if (void 0 === (r4 = f4.__$u)) f4.__$u = r4 = (function(i6) {
              var n4;
              E2(function() {
                n4 = this;
              });
              n4.c = function() {
                f4.__$f |= 1;
                f4.setState({});
              };
              return n4;
            })();
          }
          l4 = f4;
          g4(r4);
        }
        i5(n3);
      });
      _4("__e", function(i5, n3, r4, t4) {
        g4();
        l4 = void 0;
        i5(n3, r4, t4);
      });
      _4("diffed", function(i5, n3) {
        g4();
        l4 = void 0;
        var r4;
        if ("string" == typeof n3.type && (r4 = n3.__e)) {
          var t4 = n3.__np, f4 = n3.props;
          if (t4) {
            var o4 = r4.U;
            if (o4) for (var e4 in o4) {
              var u4 = o4[e4];
              if (void 0 !== u4 && !(e4 in t4)) {
                u4.d();
                o4[e4] = void 0;
              }
            }
            else {
              o4 = {};
              r4.U = o4;
            }
            for (var a4 in t4) {
              var c4 = o4[a4], v4 = t4[a4];
              if (void 0 === c4) {
                c4 = y4(r4, a4, v4, f4);
                o4[a4] = c4;
              } else c4.o(v4, f4);
            }
          }
        }
        i5(n3);
      });
      _4("unmount", function(i5, n3) {
        if ("string" == typeof n3.type) {
          var r4 = n3.__e;
          if (r4) {
            var t4 = r4.U;
            if (t4) {
              r4.U = void 0;
              for (var f4 in t4) {
                var o4 = t4[f4];
                if (o4) o4.d();
              }
            }
          }
        } else {
          var e4 = n3.__c;
          if (e4) {
            var u4 = e4.__$u;
            if (u4) {
              e4.__$u = void 0;
              u4.d();
            }
          }
        }
        i5(n3);
      });
      _4("__h", function(i5, n3, r4, t4) {
        if (t4 < 3 || 9 === t4) n3.__$f |= 2;
        i5(n3, r4, t4);
      });
      x.prototype.shouldComponentUpdate = function(i5, n3) {
        var r4 = this.__$u, t4 = r4 && void 0 !== r4.s;
        for (var f4 in n3) return true;
        if (this.__f || "boolean" == typeof this.u && true === this.u) {
          var o4 = 2 & this.__$f;
          if (!(t4 || o4 || 4 & this.__$f)) return true;
          if (1 & this.__$f) return true;
        } else {
          if (!(t4 || 4 & this.__$f)) return true;
          if (3 & this.__$f) return true;
        }
        for (var e4 in i5) if ("__source" !== e4 && i5[e4] !== this.props[e4]) return true;
        for (var u4 in this.props) if (!(u4 in i5)) return true;
        return false;
      };
      k3 = "undefined" == typeof requestAnimationFrame ? setTimeout : function(i5) {
        var n3 = function() {
          clearTimeout(r4);
          cancelAnimationFrame(t4);
          i5();
        }, r4 = setTimeout(n3, 35), t4 = requestAnimationFrame(n3);
      };
      q3 = function(i5) {
        queueMicrotask(function() {
          queueMicrotask(i5);
        });
      };
    }
  });

  // pages/new-tab/app/widget-list/widget-config.provider.js
  function WidgetConfigProvider(props) {
    const currentValues = useSignal(props.widgetConfigs);
    E2(() => {
      const unsub = props.api.onData((widgetConfig) => {
        currentValues.value = widgetConfig.data;
      });
      return () => unsub();
    });
    function toggle(id) {
      props.api.toggleVisibility(id);
    }
    return /* @__PURE__ */ _(
      WidgetConfigContext.Provider,
      {
        value: {
          // this field is static for the lifespan of the page
          widgets: props.widgets,
          entryPoints: props.entryPoints,
          widgetConfigItems: props.widgetConfigs,
          currentValues,
          toggle
        }
      },
      props.children
    );
  }
  function useVisibility() {
    return x2(WidgetVisibilityContext);
  }
  function WidgetVisibilityProvider(props) {
    const { toggle, currentValues } = x2(WidgetConfigContext);
    const visibility = useComputed(() => {
      const matchingConfig = currentValues.value.find((x3) => x3.id === props.id);
      if (!matchingConfig) throw new Error("unreachable. Must find widget config via id: " + props.id);
      return matchingConfig.visibility;
    });
    return /* @__PURE__ */ _(
      WidgetVisibilityContext.Provider,
      {
        value: {
          visibility,
          id: props.id,
          toggle,
          index: props.index
        }
      },
      props.children
    );
  }
  var WidgetConfigContext, WidgetVisibilityContext;
  var init_widget_config_provider = __esm({
    "pages/new-tab/app/widget-list/widget-config.provider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_signals_module();
      WidgetConfigContext = K({
        /** @type {Widgets} */
        widgets: [],
        /** @type {Record<string, {factory: () => import("preact").ComponentChild}>} */
        entryPoints: {},
        /**
         * A snapshot of the widget config as received at page load. Use this when you
         * don't need up-to-date values.
         * @type {WidgetConfigItem[]}
         */
        widgetConfigItems: [],
        /**
         * The live version of the data in 'widgetConfigItems' above. This represents the very
         * latest updates and can be subscribed to for reactive updates
         * @type {import("@preact/signals").Signal<WidgetConfigItem[]>}
         */
        currentValues: d3([]),
        /** @type {(id:string) => void} */
        toggle: (_id) => {
        }
      });
      WidgetVisibilityContext = K({
        id: (
          /** @type {WidgetConfigItem['id']} */
          ""
        ),
        /** @type {(id: string) => void} */
        toggle: (_id) => {
        },
        /** @type {number} */
        index: -1,
        visibility: d3(
          /** @type {WidgetConfigItem['visibility']} */
          "visible"
        )
      });
    }
  });

  // shared/translations.js
  function apply(subject, replacements, textLength = 1) {
    if (typeof subject !== "string" || subject.length === 0) return "";
    let out = subject;
    if (replacements) {
      for (let [name2, value2] of Object.entries(replacements)) {
        if (typeof value2 !== "string") value2 = "";
        out = out.replaceAll(`{${name2}}`, value2);
      }
    }
    if (textLength !== 1 && textLength > 0 && textLength <= 2) {
      const targetLen = Math.ceil(out.length * textLength);
      const target = Math.ceil(textLength);
      const combined = out.repeat(target);
      return combined.slice(0, targetLen);
    }
    return out;
  }
  var init_translations = __esm({
    "shared/translations.js"() {
      "use strict";
    }
  });

  // shared/components/TranslationsProvider.js
  function TranslationProvider({ children, translationObject, fallback, textLength = 1 }) {
    function t4(inputKey, replacements) {
      const subject = translationObject?.[inputKey]?.title || fallback?.[inputKey]?.title;
      return apply(subject, replacements, textLength);
    }
    return /* @__PURE__ */ _(TranslationContext.Provider, { value: { t: t4 } }, children);
  }
  function Trans({ str, values: values2 }) {
    const ref = A2(null);
    const cleanups = A2([]);
    y2(() => {
      if (!ref.current) return;
      const curr = ref.current;
      const cleanupsCurr = cleanups.current;
      Object.entries(values2).forEach(([tag, attributes]) => {
        curr.querySelectorAll(tag).forEach((el) => {
          Object.entries(attributes).forEach(([key2, value2]) => {
            if (typeof value2 === "function") {
              el.addEventListener(key2, value2);
              cleanupsCurr.push(() => el.removeEventListener(key2, value2));
            } else {
              el.setAttribute(key2, value2);
            }
          });
        });
      });
      return () => {
        cleanupsCurr.forEach((fn2) => fn2());
      };
    }, [values2, str]);
    return /* @__PURE__ */ _("span", { ref, dangerouslySetInnerHTML: { __html: str } });
  }
  var TranslationContext;
  var init_TranslationsProvider = __esm({
    "shared/components/TranslationsProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_translations();
      TranslationContext = K({
        /** @type {LocalTranslationFn} */
        t: () => {
          throw new Error("must implement");
        }
      });
    }
  });

  // pages/new-tab/app/types.js
  function useTypedTranslation() {
    return {
      t: x2(TranslationContext).t
    };
  }
  function useTypedTranslationWith(_context) {
    return {
      /** @type {any} */
      t: x2(TranslationContext).t
    };
  }
  var MessagingContext, useMessaging, TelemetryContext, useTelemetry, InitialSetupContext, useInitialSetupData;
  var init_types = __esm({
    "pages/new-tab/app/types.js"() {
      "use strict";
      init_hooks_module();
      init_TranslationsProvider();
      init_preact_module();
      MessagingContext = K(
        /** @type {import("../src/index.js").NewTabPage} */
        {}
      );
      useMessaging = () => {
        const ctx = x2(MessagingContext);
        if (!ctx) console.warn("missing MessagingContext");
        return ctx;
      };
      TelemetryContext = K(
        /** @type {import("./telemetry/telemetry.js").Telemetry} */
        {
          measureFromPageLoad: () => {
          }
        }
      );
      useTelemetry = () => x2(TelemetryContext);
      InitialSetupContext = K(
        /** @type {InitialSetupResponse} */
        {}
      );
      useInitialSetupData = () => x2(InitialSetupContext);
    }
  });

  // pages/new-tab/app/components/Layout.js
  function Centered({ children, ...rest }) {
    return /* @__PURE__ */ _("div", { ...rest, class: "layout-centered" }, children);
  }
  function VerticalSpace({ children, ...rest }) {
    return /* @__PURE__ */ _("div", { ...rest, class: "vertical-space" }, children);
  }
  var init_Layout = __esm({
    "pages/new-tab/app/components/Layout.js"() {
      "use strict";
      init_preact_module();
    }
  });

  // pages/new-tab/app/customizer/components/Customizer.module.css
  var Customizer_default;
  var init_Customizer = __esm({
    "pages/new-tab/app/customizer/components/Customizer.module.css"() {
      Customizer_default = {
        lowerRightFixed: "Customizer_lowerRightFixed",
        customizeButton: "Customizer_customizeButton"
      };
    }
  });

  // pages/new-tab/app/components/Icons.module.css
  var Icons_default;
  var init_Icons = __esm({
    "pages/new-tab/app/components/Icons.module.css"() {
      Icons_default = {
        chevronButton: "Icons_chevronButton",
        chevronCircle: "Icons_chevronCircle",
        chevronArrow: "Icons_chevronArrow"
      };
    }
  });

  // pages/new-tab/app/components/Icons.js
  function Chevron() {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M12.0694 9.48822C11.7999 9.80271 11.3264 9.83913 11.0119 9.56956L7.99999 6.98793L4.98808 9.56956C4.67359 9.83913 4.20011 9.80271 3.93054 9.48822C3.66098 9.17372 3.6974 8.70025 4.01189 8.43068L7.51189 5.43068C7.79276 5.18994 8.20721 5.18994 8.48808 5.43068L11.9881 8.43068C12.3026 8.70025 12.339 9.17372 12.0694 9.48822Z",
        fill: "currentColor"
      }
    ));
  }
  function ChevronSmall() {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M3.93057 6.51191C4.20014 6.19741 4.67361 6.16099 4.98811 6.43056L8.00001 9.01219L11.0119 6.43056C11.3264 6.16099 11.7999 6.19741 12.0695 6.51191C12.339 6.8264 12.3026 7.29988 11.9881 7.56944L8.48811 10.5694C8.20724 10.8102 7.79279 10.8102 7.51192 10.5694L4.01192 7.56944C3.69743 7.29988 3.661 6.8264 3.93057 6.51191Z",
        fill: "currentColor"
      }
    ));
  }
  function CustomizeIcon() {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none", class: Icons_default.customize }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M4.5 1C2.567 1 1 2.567 1 4.5C1 6.433 2.567 8 4.5 8C6.17556 8 7.57612 6.82259 7.91946 5.25H14.375C14.7202 5.25 15 4.97018 15 4.625C15 4.27982 14.7202 4 14.375 4H7.96456C7.72194 2.30385 6.26324 1 4.5 1ZM2.25 4.5C2.25 3.25736 3.25736 2.25 4.5 2.25C5.74264 2.25 6.75 3.25736 6.75 4.5C6.75 5.74264 5.74264 6.75 4.5 6.75C3.25736 6.75 2.25 5.74264 2.25 4.5Z",
        fill: "currentColor"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M8.03544 12H1.625C1.27982 12 1 11.7202 1 11.375C1 11.0298 1.27982 10.75 1.625 10.75H8.08054C8.42388 9.17741 9.82444 8 11.5 8C13.433 8 15 9.567 15 11.5C15 13.433 13.433 15 11.5 15C9.73676 15 8.27806 13.6961 8.03544 12ZM9.25 11.5C9.25 10.2574 10.2574 9.25 11.5 9.25C12.7426 9.25 13.75 10.2574 13.75 11.5C13.75 12.7426 12.7426 13.75 11.5 13.75C10.2574 13.75 9.25 12.7426 9.25 11.5Z",
        fill: "currentColor"
      }
    ));
  }
  function DuckFoot() {
    return /* @__PURE__ */ _("svg", { viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16" }, /* @__PURE__ */ _(
      "path",
      {
        "clip-rule": "evenodd",
        fill: "currentColor",
        d: "M6.483.612A2.13 2.13 0 0 1 7.998 0c.56.001 1.115.215 1.512.62.673.685 1.26 1.045 1.852 1.228.594.185 1.31.228 2.311.1a2.175 2.175 0 0 1 1.575.406c.452.34.746.862.75 1.445.033 3.782-.518 6.251-1.714 8.04-1.259 1.882-3.132 2.831-5.045 3.8l-.123.063-.003.001-.125.063a2.206 2.206 0 0 1-1.976 0l-.124-.063-.003-.001-.124-.063c-1.913-.969-3.786-1.918-5.045-3.8C.52 10.05-.031 7.58 0 3.798a1.83 1.83 0 0 1 .75-1.444 2.175 2.175 0 0 1 1.573-.407c1.007.127 1.725.076 2.32-.114.59-.189 1.172-.551 1.839-1.222Zm2.267 1.36v12.233c1.872-.952 3.311-1.741 4.287-3.2.949-1.42 1.493-3.529 1.462-7.194 0-.072-.037-.17-.152-.257a.677.677 0 0 0-.484-.118c-1.126.144-2.075.115-2.945-.155-.77-.239-1.47-.664-2.168-1.309Zm-1.5 12.233V1.955c-.69.635-1.383 1.063-2.15 1.308-.87.278-1.823.317-2.963.174a.677.677 0 0 0-.484.117c-.115.087-.151.186-.152.258-.03 3.664.513 5.774 1.462 7.192.976 1.46 2.415 2.249 4.287 3.201Z"
      }
    ));
  }
  function Shield() {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M6.341 1.367c.679-1.375 2.64-1.375 3.318 0l1.366 2.767a.35.35 0 0 0 .264.192l3.054.444c1.517.22 2.123 2.085 1.025 3.155l-2.21 2.155a.35.35 0 0 0-.1.31l.521 3.041c.26 1.512-1.327 2.664-2.684 1.95l-2.732-1.436a.35.35 0 0 0-.326 0l-2.732 1.437c-1.357.713-2.943-.44-2.684-1.95l.522-3.043a.35.35 0 0 0-.1-.31L.631 7.926C-.466 6.855.14 4.99 1.657 4.77l3.055-.444a.35.35 0 0 0 .263-.192l1.366-2.767Zm1.973.664a.35.35 0 0 0-.628 0L6.32 4.798A1.85 1.85 0 0 1 4.927 5.81l-3.054.444a.35.35 0 0 0-.194.597l2.21 2.154a1.85 1.85 0 0 1 .532 1.638L3.9 13.685a.35.35 0 0 0 .508.369l2.732-1.436a1.85 1.85 0 0 1 1.722 0l2.732 1.436a.35.35 0 0 0 .508-.369l-.522-3.042a1.85 1.85 0 0 1 .532-1.638l2.21-2.154a.35.35 0 0 0-.194-.597l-3.054-.444A1.85 1.85 0 0 1 9.68 4.798L8.314 2.031Z",
        fill: "currentColor"
      }
    ));
  }
  function Cross() {
    return /* @__PURE__ */ _("svg", { xmlns: "http://www.w3.org/2000/svg", width: "16", height: "16", viewBox: "0 0 16 16", fill: "none" }, /* @__PURE__ */ _(
      "path",
      {
        d: "M11.4419 5.44194C11.686 5.19786 11.686 4.80214 11.4419 4.55806C11.1979 4.31398 10.8021 4.31398 10.5581 4.55806L8 7.11612L5.44194 4.55806C5.19786 4.31398 4.80214 4.31398 4.55806 4.55806C4.31398 4.80214 4.31398 5.19786 4.55806 5.44194L7.11612 8L4.55806 10.5581C4.31398 10.8021 4.31398 11.1979 4.55806 11.4419C4.80214 11.686 5.19786 11.686 5.44194 11.4419L8 8.88388L10.5581 11.4419C10.8021 11.686 11.1979 11.686 11.4419 11.4419C11.686 11.1979 11.686 10.8021 11.4419 10.5581L8.88388 8L11.4419 5.44194Z",
        fill: "currentColor"
      }
    ));
  }
  function CheckColor() {
    return /* @__PURE__ */ _("svg", { fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ _("path", { fill: "#4CBA3C", d: "M15.5 8a7.5 7.5 0 1 1-15 0 7.5 7.5 0 0 1 15 0" }), /* @__PURE__ */ _(
      "path",
      {
        fill: "#fff",
        "fill-rule": "evenodd",
        d: "M11.844 5.137a.5.5 0 0 1 .019.707l-4.5 4.75a.5.5 0 0 1-.733-.008l-2.5-2.75a.5.5 0 0 1 .74-.672l2.138 2.351 4.129-4.359a.5.5 0 0 1 .707-.019",
        "clip-rule": "evenodd"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "#288419",
        "fill-rule": "evenodd",
        d: "M8 1a7 7 0 1 0 0 14A7 7 0 0 0 8 1M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8",
        "clip-rule": "evenodd"
      }
    ));
  }
  function CircleCheck() {
    return /* @__PURE__ */ _("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ _("g", { "clip-path": "url(#clip0_1635_18497)" }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M24 12C24 18.6274 18.6274 24 12 24C5.37258 24 0 18.6274 0 12C0 5.37258 5.37258 0 12 0C18.6274 0 24 5.37258 24 12ZM17.5737 9.25013C17.9189 8.86427 17.886 8.27159 17.5001 7.92635C17.1143 7.5811 16.5216 7.61403 16.1764 7.99989L10.5319 14.3084L7.85061 11.0313C7.52274 10.6306 6.9321 10.5716 6.53137 10.8994C6.13064 11.2273 6.07157 11.8179 6.39944 12.2187L9.77444 16.3437C9.94792 16.5557 10.2054 16.6812 10.4793 16.6873C10.7532 16.6933 11.016 16.5793 11.1987 16.3751L17.5737 9.25013Z",
        fill: "currentColor",
        "fill-opacity": "0.6"
      }
    )), /* @__PURE__ */ _("defs", null, /* @__PURE__ */ _("clipPath", { id: "clip0_1635_18497" }, /* @__PURE__ */ _("rect", { width: "24", height: "24", fill: "white" }))));
  }
  function Picker() {
    return /* @__PURE__ */ _("svg", { width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M20.5588 3.44118C19.3873 2.26961 17.4878 2.26961 16.3162 3.44118L16.1527 3.60466C16.1473 3.61004 16.1418 3.61544 16.1364 3.62087L12.5858 7.17141L11.7071 6.29268C11.3166 5.90216 10.6834 5.90216 10.2929 6.29268C9.90239 6.68321 9.90239 7.31637 10.2929 7.7069L11.1717 8.58568L3.44124 16.3161C2.26967 17.4877 2.26967 19.3872 3.44124 20.5588C4.61281 21.7304 6.51231 21.7304 7.68388 20.5588L15.4143 12.8283L16.2929 13.7069C16.6834 14.0974 17.3166 14.0974 17.7071 13.7069C18.0977 13.3164 18.0977 12.6832 17.7071 12.2927L16.8286 11.4141L20.5588 7.68382C21.7304 6.51225 21.7304 4.61275 20.5588 3.44118ZM12.5859 9.9999L4.85545 17.7304C4.46493 18.1209 4.46493 18.754 4.85545 19.1446C5.24598 19.5351 5.87914 19.5351 6.26967 19.1446L14.0001 11.4141L12.5859 9.9999Z",
        fill: "currentColor",
        "fill-opacity": "0.84"
      }
    ));
  }
  function PlusIcon() {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none" }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M8.25 0.5C8.66421 0.5 9 0.835786 9 1.25V7H14.75C15.1642 7 15.5 7.33579 15.5 7.75C15.5 8.16421 15.1642 8.5 14.75 8.5H9V14.25C9 14.6642 8.66421 15 8.25 15C7.83579 15 7.5 14.6642 7.5 14.25V8.5H1.75C1.33579 8.5 1 8.16421 1 7.75C1 7.33579 1.33579 7 1.75 7H7.5V1.25C7.5 0.835786 7.83579 0.5 8.25 0.5Z",
        fill: "currentColor"
      }
    ));
  }
  function BackChevron() {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M10.4419 3.18306C10.686 3.42714 10.686 3.82286 10.4419 4.06694L6.50888 8L10.4419 11.9331C10.686 12.1771 10.686 12.5729 10.4419 12.8169C10.1979 13.061 9.80214 13.061 9.55806 12.8169L5.18306 8.44194C4.93898 8.19786 4.93898 7.80214 5.18306 7.55806L9.55806 3.18306C9.80214 2.93898 10.1979 2.93898 10.4419 3.18306Z",
        fill: "currentColor",
        "fill-opacity": "0.84"
      }
    ));
  }
  function SearchIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _("g", { "clip-path": "url(#Find-Search-16_svg__a)" }, /* @__PURE__ */ _(
      "path",
      {
        fill: "currentColor",
        "fill-rule": "evenodd",
        d: "M7 0a7 7 0 1 0 4.488 12.372l3.445 3.445a.625.625 0 1 0 .884-.884l-3.445-3.445A7 7 0 0 0 7 0M1.25 7a5.75 5.75 0 1 1 11.5 0 5.75 5.75 0 0 1-11.5 0",
        "clip-rule": "evenodd"
      }
    )), /* @__PURE__ */ _("defs", null, /* @__PURE__ */ _("clipPath", { id: "Find-Search-16_svg__a" }, /* @__PURE__ */ _("path", { fill: "#fff", d: "M0 0h16v16H0z" }))));
  }
  function SearchColorIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _("g", { "clip-path": "url(#Search-Find-Color-16_svg__a)" }, /* @__PURE__ */ _("path", { fill: "#CCDAFF", d: "M13 7A6 6 0 1 1 1 7a6 6 0 0 1 12 0Z" }), /* @__PURE__ */ _("path", { fill: "#fff", d: "M7 2a4.98 4.98 0 0 1 3.403 1.338 5.5 5.5 0 0 0-7.065 7.065A5 5 0 0 1 7 2Z", opacity: ".5" }), /* @__PURE__ */ _(
      "path",
      {
        fill: "url(#Search-Find-Color-16_svg__b)",
        d: "M7 0a7 7 0 0 1 5.372 11.488l3.445 3.445.043.047a.625.625 0 0 1-.88.88l-.047-.043-3.445-3.445A7 7 0 1 1 7 0Zm0 1a6 6 0 1 0 0 12A6 6 0 0 0 7 1Z"
      }
    )), /* @__PURE__ */ _("defs", null, /* @__PURE__ */ _("linearGradient", { id: "Search-Find-Color-16_svg__b", x1: "8", x2: "8", y1: "0", y2: "16", gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ _("stop", { "stop-color": "#557FF3" }), /* @__PURE__ */ _("stop", { offset: "1", "stop-color": "#2B55CA" })), /* @__PURE__ */ _("clipPath", { id: "Search-Find-Color-16_svg__a" }, /* @__PURE__ */ _("path", { fill: "#fff", d: "M0 0h16v16H0z" }))));
  }
  function SearchOnDarkColorIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _("g", { "clip-path": "url(#Search-Find-OnDark-Color-16_svg__a)" }, /* @__PURE__ */ _("path", { fill: "#000", d: "M13 7A6 6 0 1 1 1 7a6 6 0 0 1 12 0Z", opacity: ".2" }), /* @__PURE__ */ _(
      "path",
      {
        fill: "#fff",
        "fill-opacity": ".4",
        d: "M7 2c1.315 0 2.512.508 3.404 1.339a5.5 5.5 0 0 0-7.065 7.065A5 5 0 0 1 7 2Z",
        opacity: ".5"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "url(#Search-Find-OnDark-Color-16_svg__b)",
        d: "M7 0a7 7 0 0 1 5.371 11.486l3.446 3.447.08.098a.626.626 0 0 1-.866.867l-.098-.08-3.447-3.447A7 7 0 1 1 7 0Zm0 1a6 6 0 1 0 0 12A6 6 0 0 0 7 1Z"
      }
    )), /* @__PURE__ */ _("defs", null, /* @__PURE__ */ _("linearGradient", { id: "Search-Find-OnDark-Color-16_svg__b", x1: "8", x2: "8", y1: "0", y2: "16", gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ _("stop", { "stop-color": "#CCDAFF" }), /* @__PURE__ */ _("stop", { offset: "1", "stop-color": "#8FABF9" })), /* @__PURE__ */ _("clipPath", { id: "Search-Find-OnDark-Color-16_svg__a" }, /* @__PURE__ */ _("path", { fill: "#fff", d: "M0 0h16v16H0z" }))));
  }
  function AiChatIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _("g", { fill: "currentColor", "clip-path": "url(#Ai-Chat-16_svg__a)" }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        d: "m10.54 12.57-.047.02c-.81.372-2.323.786-4.064 1.174a93 93 0 0 1-3.324.67l.297-.343c.781-.901.554-2.169-.215-2.85-1.22-1.08-1.937-2.539-1.937-4.116C1.25 4.013 4.132 1.25 8 1.25s6.75 2.763 6.75 5.875c0 2.372-1.644 4.514-4.161 5.427l-.049.017Zm.475 1.157c-1.891.868-6.545 1.75-9.2 2.206-.665.114-1.092-.66-.65-1.17l1.293-1.491c.28-.322.22-.813-.1-1.096C.902 10.886 0 9.1 0 7.125 0 3.19 3.582 0 8 0s8 3.19 8 7.125c0 2.985-2.061 5.541-4.985 6.602",
        "clip-rule": "evenodd"
      }
    ), /* @__PURE__ */ _("path", { d: "M7.62 3.271c.099-.396.661-.396.76 0l.22.878a3.27 3.27 0 0 0 2.376 2.376l.878.22c.396.099.396.661 0 .76l-.878.22A3.27 3.27 0 0 0 8.6 10.102l-.219.877c-.099.396-.661.396-.76 0l-.22-.877a3.27 3.27 0 0 0-2.377-2.377l-.877-.22c-.396-.099-.396-.661 0-.76l.877-.22A3.27 3.27 0 0 0 7.4 4.15l.22-.878Z" })), /* @__PURE__ */ _("defs", null, /* @__PURE__ */ _("clipPath", { id: "Ai-Chat-16_svg__a" }, /* @__PURE__ */ _("path", { fill: "#fff", d: "M0 0h16v16H0z" }))));
  }
  function AiChatColorIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _("g", { "clip-path": "url(#Ai-Chat-Color-16_svg__a)" }, /* @__PURE__ */ _(
      "path",
      {
        fill: "url(#Ai-Chat-Color-16_svg__b)",
        d: "M1.164 14.763c-.441.51-.014 1.284.65 1.17 2.655-.457 7.306-1.338 9.199-2.206C13.938 12.667 16 10.111 16 7.125 16 3.19 12.418 0 8 0S0 3.19 0 7.125c0 1.974.902 3.76 2.358 5.051.32.283.38.773.1 1.095l-1.294 1.492Z"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "url(#Ai-Chat-Color-16_svg__c)",
        d: "M15 7.125c0 2.495-1.729 4.72-4.328 5.662l-.039.014-.037.017c-.838.384-2.376.803-4.114 1.19a98.74 98.74 0 0 1-4.03.797l.762-.878c.68-.785.487-1.898-.193-2.5-1.227-1.087-1.973-2.55-2.019-4.147L1 7.125C1 3.848 4.022 1 8 1V0l-.207.003C3.54.099.11 3.153.003 6.94L0 7.125c0 1.913.846 3.649 2.223 4.929l.135.122c.32.283.38.773.1 1.096l-1.293 1.491c-.442.51-.015 1.284.65 1.17 2.654-.456 7.305-1.338 9.198-2.206C13.938 12.667 16 10.111 16 7.125l-.002-.184C15.888 3.091 12.349.001 8 .001v1c3.916 0 6.905 2.759 6.998 5.97l.002.154Z"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "#fff",
        d: "M7.632 2.787c.096-.383.64-.383.736 0l.438 1.753c.203.815.84 1.45 1.654 1.654l1.753.438c.383.096.383.64 0 .736l-1.753.438c-.815.203-1.45.84-1.654 1.654l-.438 1.753c-.096.383-.64.383-.736 0L7.194 9.46A2.273 2.273 0 0 0 5.54 7.806l-1.753-.438c-.383-.096-.383-.64 0-.736l1.753-.438A2.273 2.273 0 0 0 7.194 4.54l.438-1.753Z"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "url(#Ai-Chat-Color-16_svg__d)",
        d: "M6.662 2.544C7 1.195 8.867 1.154 9.3 2.418l.038.126.438 1.753c.114.457.47.813.927.927l1.753.438c1.392.348 1.392 2.328 0 2.676l-1.753.438c-.457.114-.813.47-.927.927l-.438 1.753c-.348 1.392-2.328 1.392-2.676 0l-.438-1.753a1.274 1.274 0 0 0-.927-.927l-1.753-.438c-1.392-.348-1.392-2.328 0-2.676l1.753-.438c.457-.114.813-.47.927-.927l.438-1.753ZM8 5.271A3.273 3.273 0 0 1 6.27 7 3.273 3.273 0 0 1 8 8.729 3.274 3.274 0 0 1 9.729 7 3.273 3.273 0 0 1 8 5.27Z"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "#fff",
        d: "M7.632 2.787c.096-.383.64-.383.736 0l.438 1.753c.203.815.84 1.45 1.654 1.654l1.753.438c.383.096.383.64 0 .736l-1.753.438c-.815.203-1.45.84-1.654 1.654l-.438 1.753c-.096.383-.64.383-.736 0L7.194 9.46A2.273 2.273 0 0 0 5.54 7.806l-1.753-.438c-.383-.096-.383-.64 0-.736l1.753-.438A2.273 2.273 0 0 0 7.194 4.54l.438-1.753Z"
      }
    )), /* @__PURE__ */ _("defs", null, /* @__PURE__ */ _("linearGradient", { id: "Ai-Chat-Color-16_svg__b", x1: "8", x2: "8", y1: "0", y2: "15.944", gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ _("stop", { "stop-color": "#A7B7FD" }), /* @__PURE__ */ _("stop", { offset: "1", "stop-color": "#3969EF" })), /* @__PURE__ */ _("linearGradient", { id: "Ai-Chat-Color-16_svg__c", x1: "8", x2: "8", y1: "15.944", y2: "0", gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ _("stop", { "stop-color": "#2B55CA" }), /* @__PURE__ */ _("stop", { offset: "1", "stop-color": "#557FF3" })), /* @__PURE__ */ _("linearGradient", { id: "Ai-Chat-Color-16_svg__d", x1: "8", x2: "8", y1: "2.5", y2: "11.5", gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ _("stop", { "stop-color": "#839DF9" }), /* @__PURE__ */ _("stop", { offset: "1", "stop-color": "#3969EF" })), /* @__PURE__ */ _("clipPath", { id: "Ai-Chat-Color-16_svg__a" }, /* @__PURE__ */ _("path", { fill: "#fff", d: "M0 0h16v16H0z" }))));
  }
  function AiChatOnDarkColorIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _("g", { "clip-path": "url(#Ai-Chat-OnDark-Color-16_svg__a)" }, /* @__PURE__ */ _(
      "path",
      {
        fill: "url(#Ai-Chat-OnDark-Color-16_svg__b)",
        d: "M1.164 14.763c-.441.51-.014 1.284.65 1.17 2.655-.457 7.306-1.338 9.199-2.206C13.938 12.667 16 10.111 16 7.125 16 3.19 12.418 0 8 0S0 3.19 0 7.125c0 1.974.902 3.76 2.358 5.051.32.283.38.773.1 1.095l-1.294 1.492Z"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "url(#Ai-Chat-OnDark-Color-16_svg__c)",
        d: "M15 7.125c0 2.495-1.729 4.72-4.328 5.662l-.039.014-.037.017c-.838.384-2.376.803-4.114 1.19a98.74 98.74 0 0 1-4.03.797l.762-.878c.68-.785.487-1.898-.193-2.5-1.227-1.087-1.973-2.55-2.019-4.147L1 7.125C1 3.848 4.022 1 8 1V0l-.207.003C3.54.099.11 3.153.003 6.94L0 7.125c0 1.913.846 3.649 2.223 4.929l.135.122c.32.283.38.773.1 1.096l-1.293 1.491c-.442.51-.015 1.284.65 1.17 2.654-.456 7.305-1.338 9.198-2.206C13.938 12.667 16 10.111 16 7.125l-.002-.184C15.888 3.091 12.349.001 8 .001v1c3.916 0 6.905 2.759 6.998 5.97l.002.154Z"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "#fff",
        d: "M7.632 2.787c.096-.383.64-.383.736 0l.438 1.753c.203.815.84 1.45 1.654 1.654l1.753.438c.383.096.383.64 0 .736l-1.753.438c-.815.203-1.45.84-1.654 1.654l-.438 1.753c-.096.383-.64.383-.736 0L7.194 9.46A2.273 2.273 0 0 0 5.54 7.806l-1.753-.438c-.383-.096-.383-.64 0-.736l1.753-.438A2.273 2.273 0 0 0 7.194 4.54l.438-1.753Z"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "url(#Ai-Chat-OnDark-Color-16_svg__d)",
        d: "M6.662 2.544C7 1.195 8.867 1.154 9.3 2.418l.038.126.438 1.753c.114.457.47.813.927.927l1.753.438c1.392.348 1.392 2.328 0 2.676l-1.753.438c-.457.114-.813.47-.927.927l-.438 1.753c-.348 1.392-2.328 1.392-2.676 0l-.438-1.753a1.274 1.274 0 0 0-.927-.927l-1.753-.438c-1.392-.348-1.392-2.328 0-2.676l1.753-.438c.457-.114.813-.47.927-.927l.438-1.753ZM8 5.271A3.273 3.273 0 0 1 6.27 7 3.273 3.273 0 0 1 8 8.729 3.274 3.274 0 0 1 9.729 7 3.273 3.273 0 0 1 8 5.27Z"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "#2B55CA",
        d: "M7.632 2.787c.096-.383.64-.383.736 0l.438 1.753c.203.815.84 1.45 1.654 1.654l1.753.438c.383.096.383.64 0 .736l-1.753.438c-.815.203-1.45.84-1.654 1.654l-.438 1.753c-.096.383-.64.383-.736 0L7.194 9.46A2.273 2.273 0 0 0 5.54 7.806l-1.753-.438c-.383-.096-.383-.64 0-.736l1.753-.438A2.273 2.273 0 0 0 7.194 4.54l.438-1.753Z"
      }
    )), /* @__PURE__ */ _("defs", null, /* @__PURE__ */ _("linearGradient", { id: "Ai-Chat-OnDark-Color-16_svg__b", x1: "8", x2: "8", y1: "0", y2: "15.944", gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ _("stop", { "stop-color": "#CCDAFF" }), /* @__PURE__ */ _("stop", { offset: "1", "stop-color": "#8FABF9" })), /* @__PURE__ */ _("linearGradient", { id: "Ai-Chat-OnDark-Color-16_svg__c", x1: "8", x2: "8", y1: "15.944", y2: "0", gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ _("stop", { "stop-color": "#557FF3" }), /* @__PURE__ */ _("stop", { offset: "1", "stop-color": "#ADC2FC" })), /* @__PURE__ */ _("linearGradient", { id: "Ai-Chat-OnDark-Color-16_svg__d", x1: "8", x2: "8", y1: "2.5", y2: "11.5", gradientUnits: "userSpaceOnUse" }, /* @__PURE__ */ _("stop", { "stop-color": "#CCDAFF" }), /* @__PURE__ */ _("stop", { offset: "1", "stop-color": "#ADC2FC" })), /* @__PURE__ */ _("clipPath", { id: "Ai-Chat-OnDark-Color-16_svg__a" }, /* @__PURE__ */ _("path", { fill: "#fff", d: "M0 0h16v16H0z" }))));
  }
  function ArrowRightIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _(
      "path",
      {
        fill: "currentColor",
        d: "M8.187 1.689a.625.625 0 0 1 .885-.884l5.31 5.316c.83.83.83 2.174 0 3.004l-5.31 5.315a.625.625 0 0 1-.885-.884l5.305-5.308H.625a.625.625 0 1 1 0-1.25h12.867z"
      }
    ));
  }
  function GlobeIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _("g", { "clip-path": "url(#Globe-16_svg__a)" }, /* @__PURE__ */ _(
      "path",
      {
        fill: "currentColor",
        "fill-rule": "evenodd",
        d: "M.017 7.482a8 8 0 0 1 15.967 0q.025.115.01.225a8 8 0 1 1-15.99 0 .6.6 0 0 1 .013-.225m1.247.951a6.75 6.75 0 0 0 4.197 5.823 7 7 0 0 1-.416-.781c-.555-1.213-.92-2.787-1.018-4.518a29 29 0 0 1-2.763-.524m2.739-.742a28 28 0 0 1-2.7-.535A6.76 6.76 0 0 1 5.46 1.744q-.229.372-.416.781c-.623 1.363-1.006 3.18-1.042 5.166Zm1.286 1.413c.109 1.516.436 2.852.893 3.85.59 1.292 1.28 1.796 1.818 1.796s1.228-.504 1.818-1.795c.457-1 .784-2.335.893-3.85-1.803.17-3.619.17-5.422 0Zm5.46-1.26a27.5 27.5 0 0 1-5.498 0c.018-1.904.38-3.596.93-4.799C6.774 1.755 7.462 1.25 8 1.25s1.228.504 1.818 1.795c.55 1.203.913 2.895.931 4.8Zm1.224 1.113c-.099 1.731-.463 3.305-1.018 4.518a7 7 0 0 1-.416.781 6.75 6.75 0 0 0 4.197-5.823q-1.372.33-2.763.524m2.725-1.801q-1.341.336-2.7.535c-.037-1.985-.42-3.803-1.043-5.166a7 7 0 0 0-.416-.781 6.76 6.76 0 0 1 4.159 5.412",
        "clip-rule": "evenodd"
      }
    )), /* @__PURE__ */ _("defs", null, /* @__PURE__ */ _("clipPath", { id: "Globe-16_svg__a" }, /* @__PURE__ */ _("path", { fill: "#fff", d: "M0 0h16v16H0z" }))));
  }
  function HistoryIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _("g", { fill: "currentColor", "clip-path": "url(#History-16_svg__a)" }, /* @__PURE__ */ _("path", { d: "m2.072 4.918-.08-.004A6.753 6.753 0 1 1 1.246 8 .623.623 0 1 0 0 8a8 8 0 1 0 1.247-4.29V1.115a.623.623 0 0 0-1.247 0v2.977c0 1.145.928 2.072 2.072 2.072h2.486a.623.623 0 0 0 0-1.246z" }), /* @__PURE__ */ _("path", { d: "M8.625 3.625a.625.625 0 1 0-1.25 0V8c0 .166.066.325.183.442l2.375 2.375a.625.625 0 1 0 .884-.884L8.625 7.741z" })), /* @__PURE__ */ _("defs", null, /* @__PURE__ */ _("clipPath", { id: "History-16_svg__a" }, /* @__PURE__ */ _("path", { fill: "#fff", d: "M0 0h16v16H0z" }))));
  }
  function FavoriteIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _("g", { "clip-path": "url(#Favorite-16_svg__a)" }, /* @__PURE__ */ _(
      "path",
      {
        fill: "currentColor",
        "fill-rule": "evenodd",
        d: "M6.042 1.35c.73-1.732 3.186-1.732 3.916 0l1.033 2.452a.63.63 0 0 0 .489.376l2.686.38c1.774.252 2.46 2.45 1.144 3.666l-2.046 1.889a.63.63 0 0 0-.194.552l.434 2.88c.272 1.812-1.72 3.096-3.258 2.1L8.34 14.409a.63.63 0 0 0-.68 0l-1.906 1.236c-1.537.996-3.53-.288-3.258-2.1l.434-2.88a.63.63 0 0 0-.194-.552L.69 8.223C-.626 7.009.06 4.81 1.834 4.56l2.686-.381a.63.63 0 0 0 .489-.376zm2.764.486c-.3-.714-1.312-.714-1.612 0L6.16 4.287a1.88 1.88 0 0 1-1.465 1.128l-2.687.381a.875.875 0 0 0-.47 1.51l2.045 1.889c.457.421.675 1.042.582 1.656l-.433 2.88a.875.875 0 0 0 1.34.865L6.98 13.36a1.88 1.88 0 0 1 2.04 0l1.906 1.236a.875.875 0 0 0 1.341-.864l-.433-2.881a1.88 1.88 0 0 1 .582-1.656l2.046-1.89a.875.875 0 0 0-.471-1.509l-2.687-.38a1.88 1.88 0 0 1-1.464-1.13z",
        "clip-rule": "evenodd"
      }
    )), /* @__PURE__ */ _("defs", null, /* @__PURE__ */ _("clipPath", { id: "Favorite-16_svg__a" }, /* @__PURE__ */ _("path", { fill: "#fff", d: "M0 0h16v16H0z" }))));
  }
  function BookmarkIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _("g", { "clip-path": "url(#Bookmark-16_svg__a)" }, /* @__PURE__ */ _(
      "path",
      {
        fill: "currentColor",
        "fill-rule": "evenodd",
        d: "M2 4a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v9.684c0 1.857-2.079 2.957-3.614 1.912l-1.788-1.218a1.06 1.06 0 0 0-1.196 0l-1.788 1.218C4.08 16.64 2 15.54 2 13.684zm4-2.75A2.75 2.75 0 0 0 3.25 4v9.684c0 .854.955 1.359 1.66.878l1.788-1.217a2.31 2.31 0 0 1 2.604 0l1.787 1.217a1.063 1.063 0 0 0 1.661-.878V4A2.75 2.75 0 0 0 10 1.25z",
        "clip-rule": "evenodd"
      }
    )), /* @__PURE__ */ _("defs", null, /* @__PURE__ */ _("clipPath", { id: "Bookmark-16_svg__a" }, /* @__PURE__ */ _("path", { fill: "#fff", d: "M0 0h16v16H0z" }))));
  }
  function BrowserIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _(
      "path",
      {
        fill: "currentColor",
        "fill-rule": "evenodd",
        d: "M0 5a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v1.792c0 .478-.681.721-1.053.422a.52.52 0 0 1-.197-.4v-.819H1.25V11A2.75 2.75 0 0 0 4 13.75h2.135a.57.57 0 0 1 .497.312c.21.398-.055.938-.506.938H4a4 4 0 0 1-4-4zm1.262-.255h13.476A2.75 2.75 0 0 0 12 2.25H4a2.75 2.75 0 0 0-2.738 2.495",
        "clip-rule": "evenodd"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "currentColor",
        "fill-rule": "evenodd",
        d: "M11.5 7a4.5 4.5 0 1 0 0 9 4.5 4.5 0 0 0 0-9m-1.972 7.084A3.25 3.25 0 0 1 8.288 12h.85a7.6 7.6 0 0 0 .39 2.084M8.337 10.75h.818a7.5 7.5 0 0 1 .373-1.834 3.25 3.25 0 0 0-1.191 1.834m2.495 3.233c-.226-.5-.392-1.19-.441-1.983h2.218c-.05.793-.215 1.482-.441 1.983-.299.66-.583.767-.668.767s-.37-.106-.668-.767m0-4.966c-.202.447-.356 1.045-.422 1.733h2.18c-.066-.688-.22-1.286-.422-1.733-.299-.66-.583-.767-.668-.767s-.37.106-.668.767m2.64 5.067c.213-.606.348-1.32.39-2.084h.85a3.25 3.25 0 0 1-1.24 2.084m.373-3.334h.818a3.25 3.25 0 0 0-1.19-1.834c.188.54.316 1.164.371 1.834Z",
        "clip-rule": "evenodd"
      }
    ));
  }
  function TabDesktopIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _(
      "path",
      {
        fill: "currentColor",
        d: "M11 2a4 4 0 0 1 4 4v4c0 .854.39 1.617 1 2.121v.357c0 .517-.541.841-.925.495A4 4 0 0 1 13.75 10V6A2.75 2.75 0 0 0 11 3.25H5A2.75 2.75 0 0 0 2.25 6v4a4 4 0 0 1-1.325 2.973c-.384.346-.925.022-.925-.495v-.357c.61-.504 1-1.267 1-2.121V6a4 4 0 0 1 4-4z"
      }
    ));
  }
  function LogoStacked(props) {
    return /* @__PURE__ */ _("svg", { fill: "none", viewBox: "0 0 206 165", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _(
      "path",
      {
        fill: "#DE5833",
        "fill-rule": "evenodd",
        d: "M103 120c33.137 0 60-26.863 60-60S136.137 0 103 0 43 26.863 43 60s26.863 60 60 60Z",
        "clip-rule": "evenodd"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "#DDD",
        "fill-rule": "evenodd",
        d: "M111.438 104.766c0-.469.115-.576-1.375-3.546-3.96-7.93-7.94-19.11-6.13-26.32.33-1.31-3.73-48.51-6.6-50.03-3.19-1.7-7.115-4.397-10.705-4.997-1.822-.291-4.21-.153-6.077.098-.332.045-.346.641-.029.749 1.226.415 2.715 1.136 3.592 2.226.166.206-.057.531-.322.54-.827.031-2.326.378-4.305 2.059-.23.194-.04.555.255.497 4.253-.841 8.597-.427 11.156 1.9.167.15.08.422-.137.48-22.213 6.037-17.816 25.36-11.902 49.073 5.248 21.047 7.235 27.881 7.867 29.981a.716.716 0 0 0 .424.468c7.656 3.037 24.288 3.168 24.288-2.007v-1.171Z",
        "clip-rule": "evenodd"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "#fff",
        "fill-rule": "evenodd",
        d: "M158.078 60c0 30.419-24.659 55.078-55.078 55.078-30.419 0-55.078-24.66-55.078-55.078 0-30.419 24.66-55.078 55.078-55.078 30.419 0 55.078 24.66 55.078 55.078Zm-67.932 48.736c-1.522-4.701-5.775-18.329-9.977-35.55l-.419-1.713-.003-.014c-5.085-20.772-9.239-37.737 13.525-43.067.209-.049.31-.297.172-.46-2.611-3.1-7.504-4.115-13.691-1.98-.254.087-.474-.169-.317-.386 1.213-1.672 3.584-2.958 4.755-3.522.242-.116.227-.47-.03-.55a26.04 26.04 0 0 0-3.535-.844c-.347-.056-.378-.65-.03-.697 8.771-1.18 17.93 1.453 22.527 7.243a.305.305 0 0 0 .174.107c16.83 3.614 18.035 30.22 16.097 31.432-.383.239-1.608.102-3.224-.079-6.548-.733-19.516-2.184-8.814 17.763.106.197-.034.458-.255.492-6.015.936 1.646 19.72 7.324 32.179 22.327-5.176 38.966-25.19 38.966-49.09 0-27.83-22.561-50.39-50.391-50.39S52.61 32.17 52.61 60c0 23.388 15.932 43.054 37.536 48.736Z",
        "clip-rule": "evenodd"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "#3CA82B",
        d: "M122.013 85.03c-1.281-.594-6.208 2.939-9.478 5.65-.683-.966-1.972-1.669-4.878-1.163-2.544.442-3.949 1.055-4.575 2.113-4.015-1.523-10.77-3.872-12.402-1.603-1.784 2.48.446 14.213 2.815 15.736 1.237.796 7.154-3.007 10.243-5.63.499.702 1.301 1.104 2.951 1.066 2.495-.058 6.543-.638 7.171-1.8.038-.071.071-.154.099-.25 3.175 1.187 8.765 2.444 10.013 2.256 3.254-.489-.453-15.678-1.959-16.376Z"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "#4CBA3C",
        d: "M112.835 91.028c.134.24.243.494.335.751.452 1.267 1.19 5.294.632 6.29-.558.994-4.18 1.475-6.415 1.513-2.235.039-2.738-.778-3.191-2.045-.362-1.013-.541-3.394-.536-4.758-.092-2.022.647-2.733 4.063-3.286 2.528-.409 3.864.067 4.635.88 3.589-2.678 9.577-6.457 10.161-5.767 2.912 3.445 3.28 11.645 2.649 14.944-.206 1.078-9.848-1.069-9.848-2.232 0-4.83-1.253-6.154-2.485-6.29ZM91.713 89.52c.79-1.25 7.194.304 10.709 1.869 0 0-.722 3.273.428 7.129.336 1.127-8.088 6.147-9.187 5.284-1.271-.999-3.61-11.655-1.95-14.282Z"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        fill: "#FC3",
        "fill-rule": "evenodd",
        d: "M94.815 64.131c.518-2.253 2.931-6.499 11.551-6.395 4.357-.019 9.77-.002 13.358-.41a48.043 48.043 0 0 0 11.931-2.902c3.731-1.423 5.055-1.106 5.52-.254.51.936-.091 2.552-1.395 4.04-2.49 2.841-6.967 5.043-14.873 5.696-7.907.654-13.145-1.467-15.4 1.986-.972 1.489-.22 4.999 7.426 6.104 10.332 1.491 18.818-1.796 19.866.19 1.048 1.985-4.991 6.025-15.34 6.11-10.349.084-16.813-3.624-19.105-5.467-2.909-2.338-4.21-5.749-3.54-8.698Z",
        "clip-rule": "evenodd"
      }
    ), /* @__PURE__ */ _("g", { fill: "#14307E", opacity: ".8" }, /* @__PURE__ */ _("path", { d: "M107.994 39.494c.577-.945 1.857-1.675 3.952-1.675 2.095 0 3.08.834 3.763 1.763.138.19-.072.412-.287.319l-.158-.069c-.766-.334-1.707-.745-3.318-.768-1.724-.024-2.81.407-3.495.78-.23.125-.594-.126-.457-.35ZM84.41 40.703c2.034-.85 3.633-.74 4.763-.472.238.056.403-.2.213-.354-.877-.707-2.84-1.586-5.401-.63-2.284.85-3.36 2.62-3.367 3.784-.002.274.563.297.708.065.395-.627 1.05-1.542 3.084-2.393Z" }), /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        d: "M113.725 52.425a3.253 3.253 0 0 1-3.257-3.245 3.253 3.253 0 0 1 3.257-3.245 3.252 3.252 0 0 1 3.257 3.245 3.252 3.252 0 0 1-3.257 3.245Zm2.294-4.32a.842.842 0 0 0-1.686 0c0 .464.379.84.843.84a.84.84 0 0 0 .843-.84Zm-23.872 3.321a3.79 3.79 0 0 1-3.797 3.784 3.792 3.792 0 0 1-3.796-3.784 3.792 3.792 0 0 1 3.796-3.785 3.792 3.792 0 0 1 3.797 3.785Zm-1.12-1.255a.981.981 0 0 0-1.965 0 .982.982 0 0 0 1.966-.001Z",
        "clip-rule": "evenodd"
      }
    )), /* @__PURE__ */ _(
      "path",
      {
        fill: "currentColor",
        d: "M78.35 144.8h-3.9l-7.1 7.3v-14.6h-3v24.9h3v-8.2l8.1 8.1.1.1h3.6v-.3l-9.1-9 8.3-8.3Zm-19.2 13.3c-1.1 1.1-2.7 1.7-4.5 1.7-3.1 0-6.2-1.9-6.2-6.3 0-3.7 2.6-6.3 6.2-6.3 1.6 0 3.1.6 4.3 1.7l.1.1 1.9-2-.1-.1c-1.8-1.7-3.9-2.5-6.3-2.5-5.5 0-9.2 3.7-9.2 9.1 0 6.3 4.6 9.1 9.2 9.1h.1c2.4 0 4.7-.9 6.3-2.6l.1-.1-2-2 .1.2Zm-20.3-3.9c0 3.2-2.2 5.6-5.3 5.7-3.3 0-5.3-2-5.3-5.4v-9.7h-3v9.7c0 5 3 8.2 7.7 8.2h.1c2.3 0 4.4-1.1 5.8-2.8l.1-.2.1 2.7h2.8v-17.6h-3v9.4Zm-29.5-16.8H.25v25h9.1c8.7 0 12.5-6.4 12.5-12.7 0-5.9-3.9-12.3-12.5-12.3Zm9.4 12.2c0 4.8-2.9 9.6-9.3 9.6h-6v-18.7h5.9c6.4 0 9.4 4.7 9.4 9.1Zm154.9 1.9h7.7v5.8c-1.9 1.6-4.2 2.5-6.7 2.5-6.8 0-9.9-4.9-9.9-9.7 0-4.9 3.1-10.2 9.8-10.2 2.7 0 5.2 1 7.2 2.8l.1.1 1.8-2.1-.1-.1c-2.4-2.4-5.6-3.6-9.1-3.6-3.8 0-7 1.2-9.3 3.6-2.4 2.4-3.7 5.8-3.6 9.6 0 5.9 3.4 12.7 13 12.7h.2c3.6 0 7-1.5 9.4-4.2v-9.9h-10.6v2.7h.1Zm-82.6-14.1h-9.1v25h9.1c8.7 0 12.5-6.4 12.5-12.7 0-5.9-3.9-12.3-12.5-12.3Zm9.4 12.2c0 4.8-2.9 9.6-9.3 9.6h-5.9v-18.7h5.9c6.3 0 9.3 4.7 9.3 9.1Zm95.9-5.2c-5.3 0-9.1 3.9-9.1 9.2 0 5.3 3.8 9.1 9.1 9.1s9.2-3.8 9.2-9.1c0-5.4-3.8-9.2-9.2-9.2Zm6.2 9.2c0 3.7-2.6 6.3-6.2 6.3-3.5 0-6.1-2.6-6.1-6.3 0-3.8 2.5-6.5 6.2-6.5 3.5.1 6.1 2.8 6.1 6.5Zm-82 .6c0 3.2-2.2 5.6-5.3 5.7-3.3 0-5.3-2-5.3-5.4v-9.7h-3v9.7c0 5 3 8.2 7.6 8.2h.1c2.3 0 4.4-1.1 5.8-2.8l.1-.2.1 2.7h2.8v-17.6h-3v9.4h.1Zm20.3 3.9c-1.1 1.1-2.7 1.7-4.5 1.7-3.1 0-6.2-1.9-6.2-6.3 0-3.7 2.6-6.3 6.2-6.3 1.6 0 3.1.6 4.3 1.7l.1.1 1.9-2-.1-.1c-1.8-1.7-3.9-2.5-6.3-2.5-5.5 0-9.2 3.7-9.2 9.1 0 6.3 4.6 9.1 9.2 9.1h.1c2.4 0 4.7-.9 6.3-2.6l.1-.1-2-2 .1.2Zm19.2-13.3h-3.9l-7.1 7.3v-14.6h-3v24.9h3v-8.2l8.1 8.1.1.1h3.6v-.3l-9.1-9 8.3-8.3Z"
      }
    ));
  }
  function ArrowIndentCenteredIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _(
      "path",
      {
        fill: "currentColor",
        d: "M3.625 1c.345 0 .625.28.625.625V5c0 1.52 1.23 2.75 2.749 2.75h7.117l-2.683-2.683a.625.625 0 0 1 .86-.906l.024.022 2.69 2.69c.83.83.83 2.175 0 3.005l-2.69 2.689a.625.625 0 1 1-.884-.884L14.116 9H7a3.999 3.999 0 0 1-4-4V1.625C3 1.28 3.28 1 3.625 1Z"
      }
    ));
  }
  function CloseSmallIcon(props) {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", fill: "none", viewBox: "0 0 16 16", xmlns: "http://www.w3.org/2000/svg", ...props }, /* @__PURE__ */ _(
      "path",
      {
        fill: "currentColor",
        d: "M11.933 3.183a.625.625 0 1 1 .884.884L8.884 8l3.933 3.933a.625.625 0 1 1-.884.884L8 8.884l-3.933 3.933a.625.625 0 1 1-.884-.884L7.116 8 3.183 4.067a.625.625 0 1 1 .884-.884L8 7.116l3.933-3.933Z"
      }
    ));
  }
  var init_Icons2 = __esm({
    "pages/new-tab/app/components/Icons.js"() {
      "use strict";
      init_preact_module();
      init_Icons();
    }
  });

  // pages/new-tab/app/customizer/components/CustomizerMenu.js
  function getItems() {
    const next = [];
    const detail = {
      register: (incoming) => {
        next.push(incoming);
      }
    };
    const event = new CustomEvent(OPEN_EVENT, { detail });
    window.dispatchEvent(event);
    next.sort((a4, b4) => a4.index - b4.index);
    return next;
  }
  function useContextMenu() {
    const messaging2 = useMessaging();
    y2(() => {
      function handler(e4) {
        e4.preventDefault();
        e4.stopImmediatePropagation();
        const items = getItems();
        const simplified = items.filter((x3) => !x3.id.startsWith("_")).map((item) => {
          return {
            id: item.id,
            title: item.title
          };
        });
        messaging2.contextMenu({ visibilityMenuItems: simplified });
      }
      document.body.addEventListener("contextmenu", handler);
      return () => {
        document.body.removeEventListener("contextmenu", handler);
      };
    }, [messaging2]);
  }
  function CustomizerButton({ menuId, buttonId, isOpen, toggleMenu, buttonRef, kind }) {
    const { t: t4 } = useTypedTranslation();
    return /* @__PURE__ */ _(
      "button",
      {
        ref: buttonRef,
        class: Customizer_default.customizeButton,
        onClick: toggleMenu,
        "aria-haspopup": "true",
        "aria-expanded": isOpen,
        "aria-controls": menuId,
        "data-kind": kind,
        id: buttonId,
        "data-testid": "customizer-button"
      },
      /* @__PURE__ */ _(CustomizeIcon, null),
      /* @__PURE__ */ _("span", null, t4("ntp_customizer_button"))
    );
  }
  function CustomizerMenuPositionedFixed({ children }) {
    return /* @__PURE__ */ _("div", { class: Customizer_default.lowerRightFixed }, children);
  }
  function useCustomizer({ title, id, icon, toggle, visibility, index: index2, enabled }) {
    y2(() => {
      const handler = (e4) => {
        e4.detail.register({ title, id, icon, toggle, visibility, index: index2, enabled });
      };
      window.addEventListener(OPEN_EVENT, handler);
      return () => window.removeEventListener(OPEN_EVENT, handler);
    }, [title, id, icon, toggle, visibility, index2, enabled]);
    y2(() => {
      window.dispatchEvent(new Event(UPDATE_EVENT));
      return () => {
        window.dispatchEvent(new Event(UPDATE_EVENT));
      };
    }, [visibility]);
  }
  var OPEN_EVENT, UPDATE_EVENT;
  var init_CustomizerMenu = __esm({
    "pages/new-tab/app/customizer/components/CustomizerMenu.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_Customizer();
      init_Icons2();
      init_types();
      OPEN_EVENT = "ntp-customizer-open";
      UPDATE_EVENT = "ntp-customizer-update";
    }
  });

  // shared/components/EnvironmentProvider.js
  function EnvironmentProvider({
    children,
    debugState,
    env = "production",
    willThrow = false,
    injectName = "windows",
    locale = "en"
  }) {
    const [theme, setTheme] = d2(window.matchMedia(THEME_QUERY).matches ? "dark" : "light");
    const [isReducedMotion, setReducedMotion] = d2(window.matchMedia(REDUCED_MOTION_QUERY).matches);
    y2(() => {
      const mediaQueryList2 = window.matchMedia(THEME_QUERY);
      const listener = (e4) => setTheme(e4.matches ? "dark" : "light");
      mediaQueryList2.addEventListener("change", listener);
      return () => mediaQueryList2.removeEventListener("change", listener);
    }, []);
    y2(() => {
      const mediaQueryList2 = window.matchMedia(REDUCED_MOTION_QUERY);
      const listener = (e4) => setter(e4.matches);
      mediaQueryList2.addEventListener("change", listener);
      setter(mediaQueryList2.matches);
      function setter(value2) {
        document.documentElement.dataset.reducedMotion = String(value2);
        setReducedMotion(value2);
      }
      window.addEventListener("toggle-reduced-motion", () => {
        setter(true);
      });
      return () => mediaQueryList2.removeEventListener("change", listener);
    }, []);
    return /* @__PURE__ */ _(
      EnvironmentContext.Provider,
      {
        value: {
          isReducedMotion,
          debugState,
          isDarkMode: theme === "dark",
          injectName,
          willThrow,
          env,
          locale
        }
      },
      children
    );
  }
  function UpdateEnvironment({ search }) {
    y2(() => {
      const params = new URLSearchParams(search);
      if (params.has("reduced-motion")) {
        setTimeout(() => {
          window.dispatchEvent(new CustomEvent("toggle-reduced-motion"));
        }, 0);
      }
    }, [search]);
    return null;
  }
  function useEnv() {
    return x2(EnvironmentContext);
  }
  function useLocale() {
    return x2(EnvironmentContext).locale;
  }
  var EnvironmentContext, THEME_QUERY, REDUCED_MOTION_QUERY;
  var init_EnvironmentProvider = __esm({
    "shared/components/EnvironmentProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      EnvironmentContext = K({
        isReducedMotion: false,
        isDarkMode: false,
        debugState: false,
        injectName: (
          /** @type {import('../environment').Environment['injectName']} */
          "windows"
        ),
        willThrow: false,
        /** @type {keyof typeof import('../utils').translationsLocales} */
        locale: "en",
        /** @type {import('../environment').Environment['env']} */
        env: "production"
      });
      THEME_QUERY = "(prefers-color-scheme: dark)";
      REDUCED_MOTION_QUERY = "(prefers-reduced-motion: reduce)";
    }
  });

  // pages/new-tab/app/entry-points/activity.js
  var activity_exports = {};
  __export(activity_exports, {
    factory: () => factory
  });
  function factory() {
  }
  var init_activity = __esm({
    "pages/new-tab/app/entry-points/activity.js"() {
      "use strict";
    }
  });

  // pages/new-tab/app/service.js
  var Service;
  var init_service = __esm({
    "pages/new-tab/app/service.js"() {
      "use strict";
      Service = class {
        eventTarget = new EventTarget();
        DEBOUNCE_TIME_MS = 200;
        _broadcast = true;
        /** @type {undefined|((old: Data, next: Data, trigger: InvocationSource) => Data)} */
        accept;
        /**
         * @param {object} props
         * @param {(arg?: any) => Promise<Data>} [props.initial]
         * @param {(fn: (t: Data) => void) => () => void} [props.subscribe] - optional subscribe
         * @param {(t: Data) => void} [props.persist] - optional persist method
         * @param {(old: Data, next: Data) => Data} [props.update] - optional updater
         * @param {Data|null} [initial] - optional initial data
         */
        constructor(props, initial) {
          this.impl = props;
          if (initial) {
            this.data = initial;
          } else {
            this.data = null;
          }
        }
        /**
         * @param {(old: Data, next: Data, trigger: InvocationSource) => Data} fn
         */
        withUpdater(fn2) {
          this.accept = fn2;
          return this;
        }
        /**
         * @param {any} [params]
         * @return {Promise<Data>}
         */
        async fetchInitial(params) {
          if (!this.impl.initial) throw new Error("unreachable");
          const initial = await this.impl.initial(params);
          this._accept(initial, "initial");
          return (
            /** @type {Data} */
            this.data
          );
        }
        /**
         * @param {any} [params]
         * @return {Promise<Data>}
         */
        async triggerFetch(params) {
          if (!this.impl.initial) throw new Error("unreachable");
          const next = await this.impl.initial(params);
          this._accept(next, "trigger-fetch");
          return (
            /** @type {Data} */
            this.data
          );
        }
        /**
         * This is convenience to prevent the boilerplate of dealing with the
         * eventTarget directly.
         *
         * Consumers pass a callback, which will be invoked with Data and the Source.
         *
         * A function is returned, which can be used to remove the event listener
         *
         * @param {(evt: {data: Data, source: InvocationSource}) => void} cb
         */
        onData(cb) {
          this._setupSubscription();
          const controller = new AbortController();
          this.eventTarget.addEventListener(
            "data",
            (evt) => {
              cb(evt.detail);
            },
            { signal: controller.signal }
          );
          return () => controller.abort();
        }
        /**
         * Remove data subscriptions
         */
        destroy() {
          this.sub?.();
        }
        /**
         * Setup the subscription if one doesn't already exist
         * @private
         */
        _setupSubscription() {
          if (this.sub) return;
          this.sub = this.impl.subscribe?.((data2) => {
            this._accept(data2, "subscription");
          });
        }
        disableBroadcast() {
          this._broadcast = false;
        }
        enableBroadcast() {
          this._broadcast = true;
        }
        flush() {
          if (this.data) this._accept(this.data, "manual");
        }
        /**
         * Apply a function over the current state.
         *
         * The change will be broadcast to observers immediately,
         * and then persists after a debounced period.
         *
         * @param {(prev: Data) => Data} updaterFn - the function that returns the next state
         */
        update(updaterFn) {
          if (this.data === null) return;
          const next = updaterFn(this.data);
          if (next) {
            this._accept(next, "manual");
          } else {
            console.warn("could not update");
          }
        }
        /**
         * @param {Data} data
         * @param {InvocationSource} source
         * @private
         */
        _accept(data2, source) {
          if (this.accept && source !== "initial") {
            this.data = /** @type {NonNullable<Data>} */
            this.accept(
              /** @type {NonNullable<Data>} */
              this.data,
              data2,
              source
            );
          } else {
            this.data = /** @type {NonNullable<Data>} */
            data2;
          }
          if (source === "initial") return;
          this.clearDebounceTimer();
          if (!this._broadcast) return console.warn("not broadcasting");
          const dataEvent = new CustomEvent("data", {
            detail: {
              data: this.data,
              source
            }
          });
          this.eventTarget.dispatchEvent(dataEvent);
          if (source === "manual") {
            const time2 = window.location.search.includes("p2") ? this.DEBOUNCE_TIME_MS * 20.5 : this.DEBOUNCE_TIME_MS;
            this.debounceTimer = setTimeout(() => {
              this.persist();
            }, time2);
          }
        }
        /**
         * Clears the debounce timer if it exists, simulating the switchMap behavior.
         */
        clearDebounceTimer() {
          if (this.debounceTimer) {
            clearTimeout(this.debounceTimer);
            this.debounceTimer = null;
          }
        }
        /**
         * Persists the current in-memory widget configuration state to the internal data feed.
         */
        persist() {
          if (!this.impl.persist) return;
          if (this.data === null) return;
          this.impl.persist(this.data);
        }
      };
    }
  });

  // pages/new-tab/app/favorites/favorites.service.js
  var FavoritesService;
  var init_favorites_service = __esm({
    "pages/new-tab/app/favorites/favorites.service.js"() {
      "use strict";
      init_service();
      FavoritesService = class {
        /**
         * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
         * @internal
         */
        constructor(ntp) {
          this.ntp = ntp;
          this.dataService = new Service({
            initial: () => ntp.messaging.request("favorites_getData"),
            subscribe: (cb) => ntp.messaging.subscribe("favorites_onDataUpdate", cb)
          });
          this.configService = new Service({
            initial: () => ntp.messaging.request("favorites_getConfig"),
            subscribe: (cb) => ntp.messaging.subscribe("favorites_onConfigUpdate", cb),
            persist: (data2) => ntp.messaging.notify("favorites_setConfig", data2)
          });
        }
        name() {
          return "FavoritesService";
        }
        /**
         * @returns {Promise<{data: FavoritesData; config: FavoritesConfig}>}
         * @internal
         */
        async getInitial() {
          const p1 = this.configService.fetchInitial();
          const p22 = this.dataService.fetchInitial();
          const [config, data2] = await Promise.all([p1, p22]);
          return { config, data: data2 };
        }
        /**
         * @internal
         */
        destroy() {
          this.configService.destroy();
          this.dataService.destroy();
        }
        /**
         * @param {(evt: {data: FavoritesData, source: 'manual' | 'subscription'}) => void} cb
         * @internal
         */
        onData(cb) {
          return this.dataService.onData(cb);
        }
        /**
         * @param {(evt: {data: FavoritesConfig, source: 'manual' | 'subscription'}) => void} cb
         * @internal
         */
        onConfig(cb) {
          return this.configService.onData(cb);
        }
        onFaviconsRefreshed(cb) {
          return this.ntp.messaging.subscribe("favorites_onRefresh", (data2) => {
            if (data2.items.some((item) => item.kind === "favicons")) {
              cb();
            }
          });
        }
        /**
         * Update the in-memory data immediate and persist.
         * Any state changes will be broadcast to consumers synchronously
         * @internal
         */
        toggleExpansion() {
          this.configService.update((old) => {
            if (old.expansion === "expanded") {
              return { ...old, expansion: (
                /** @type {const} */
                "collapsed"
              ) };
            } else {
              return { ...old, expansion: (
                /** @type {const} */
                "expanded"
              ) };
            }
          });
        }
        /**
         * @param {FavoritesData} data
         * @param {string} id - entity id to move
         * @param {number} targetIndex - target index
         * @param {number} fromIndex - from index
         * @internal
         */
        setFavoritesOrder(data2, id, fromIndex, targetIndex) {
          this.dataService.update((_old) => {
            return data2;
          });
          this.ntp.messaging.notify("favorites_move", {
            id,
            targetIndex,
            fromIndex
          });
        }
        /**
         * @param {string} id - entity id
         * @internal
         */
        openContextMenu(id) {
          this.ntp.messaging.notify("favorites_openContextMenu", { id });
        }
        /**
         * @param {string} id - entity id
         * @param {string} url - target url
         * @param {FavoritesOpenAction['target']} target
         * @internal
         */
        openFavorite(id, url8, target) {
          this.ntp.messaging.notify("favorites_open", { id, url: url8, target });
        }
        /**
         * @internal
         */
        add() {
          this.ntp.messaging.notify("favorites_add");
        }
      };
    }
  });

  // pages/new-tab/app/service.hooks.js
  function reducer(state, event) {
    switch (state.status) {
      case "idle": {
        switch (event.kind) {
          case "load-initial": {
            return { ...state, status: (
              /** @type {const} */
              "pending-initial"
            ) };
          }
          default:
            return state;
        }
      }
      case "pending-initial": {
        switch (event.kind) {
          case "initial-data": {
            return {
              ...state,
              status: (
                /** @type {const} */
                "ready"
              ),
              data: event.data,
              config: event.config
            };
          }
          case "error": {
            console.error("error with initial data", event.error);
            return state;
          }
          default:
            return state;
        }
      }
      case "ready": {
        switch (event.kind) {
          case "config": {
            return { ...state, config: event.config };
          }
          case "data": {
            return { ...state, data: event.data };
          }
          case "clear": {
            return { ...state, effect: null };
          }
          default:
            return state;
        }
      }
      default:
        return state;
    }
  }
  function useInitialDataAndConfig({ dispatch, service }) {
    const messaging2 = useMessaging();
    y2(() => {
      if (!service.current) return console.warn("missing service");
      const currentService = service.current;
      async function init2() {
        const { data: data2, config } = await currentService.getInitial();
        if (data2 || config) {
          dispatch({ kind: "initial-data", data: data2, config });
        } else {
          dispatch({ kind: "error", error: "missing data from getInitial" });
        }
      }
      dispatch({ kind: "load-initial" });
      init2().catch((e4) => {
        console.error("uncaught error", e4);
        dispatch({ kind: "error", error: e4 });
        messaging2.reportPageException({ message: `${currentService.name()}: failed to fetch initial data+config: ` + e4.message });
      });
      return () => {
        currentService.destroy();
      };
    }, [messaging2]);
  }
  function useInitialData({ dispatch, service }) {
    const messaging2 = useMessaging();
    y2(() => {
      if (!service.current) return console.warn("missing service");
      const currentService = service.current;
      async function init2() {
        const data2 = await currentService.getInitial();
        if (data2) {
          dispatch({ kind: "initial-data", data: data2 });
        } else {
          dispatch({ kind: "error", error: "missing data from getInitial" });
        }
      }
      dispatch({ kind: "load-initial" });
      init2().catch((e4) => {
        console.error("uncaught error", e4);
        dispatch({ kind: "error", error: e4 });
        messaging2.reportPageException({ message: `${currentService.name()}: failed to fetch initial data: ` + e4.message });
      });
      return () => {
        currentService.destroy();
      };
    }, []);
  }
  function useDataSubscription({ dispatch, service }) {
    y2(() => {
      if (!service.current) return console.warn("could not access service");
      const unsub = service.current.onData((evt) => {
        dispatch({ kind: "data", data: evt.data });
      });
      return () => {
        unsub();
      };
    }, [service, dispatch]);
  }
  function useConfigSubscription({ dispatch, service }) {
    y2(() => {
      if (!service.current) return console.warn("could not access service");
      const unsub2 = service.current.onConfig((data2) => {
        dispatch({ kind: "config", config: data2.data });
      });
      return () => {
        unsub2();
      };
    }, [service]);
  }
  var init_service_hooks = __esm({
    "pages/new-tab/app/service.hooks.js"() {
      "use strict";
      init_hooks_module();
      init_types();
    }
  });

  // pages/new-tab/app/favorites/components/FavoritesProvider.js
  function FavoritesProvider({ children }) {
    const initial = (
      /** @type {State} */
      {
        status: (
          /** @type {const} */
          "idle"
        ),
        data: null,
        config: null
      }
    );
    const [state, dispatch] = h2(reducer, initial);
    const service = useService();
    useInitialDataAndConfig({ dispatch, service });
    useDataSubscription({ dispatch, service });
    useConfigSubscription({ dispatch, service });
    const toggle = q2(() => {
      service.current?.toggleExpansion();
    }, [service]);
    const favoritesDidReOrder = q2(
      ({ list: list2, id, fromIndex, targetIndex }) => {
        if (!service.current) return;
        service.current.setFavoritesOrder({ favorites: list2 }, id, fromIndex, targetIndex);
      },
      [service]
    );
    const openContextMenu = q2(
      (id) => {
        if (!service.current) return;
        service.current.openContextMenu(id);
      },
      [service]
    );
    const openFavorite = q2(
      (id, url8, target) => {
        if (!service.current) return;
        service.current.openFavorite(id, url8, target);
      },
      [service]
    );
    const add2 = q2(() => {
      if (!service.current) return;
      service.current.add();
    }, [service]);
    const onConfigChanged = q2(
      (cb) => {
        if (!service.current) return;
        return service.current.onConfig((event) => {
          cb(event.data);
        });
      },
      [service]
    );
    const faviconsRefreshedCount = useSignal(0);
    y2(() => {
      if (!service.current) return;
      return service.current.onFaviconsRefreshed(() => {
        faviconsRefreshedCount.value = faviconsRefreshedCount.value += 1;
      });
    }, []);
    return /* @__PURE__ */ _(FavoritesContext.Provider, { value: { state, toggle, favoritesDidReOrder, openFavorite, openContextMenu, add: add2, onConfigChanged } }, /* @__PURE__ */ _(FaviconsRefreshedCount.Provider, { value: faviconsRefreshedCount }, /* @__PURE__ */ _(FavoritesDispatchContext.Provider, { value: dispatch }, children)));
  }
  function useService() {
    const service = A2(
      /** @type {FavoritesService | null} */
      null
    );
    const ntp = useMessaging();
    y2(() => {
      const stats = new FavoritesService(ntp);
      service.current = stats;
      return () => {
        stats.destroy();
      };
    }, [ntp]);
    return service;
  }
  function useFaviconRefreshedCount() {
    return x2(FaviconsRefreshedCount);
  }
  var FavoritesContext, FavoritesDispatchContext, FaviconsRefreshedCount;
  var init_FavoritesProvider = __esm({
    "pages/new-tab/app/favorites/components/FavoritesProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_favorites_service();
      init_types();
      init_service_hooks();
      init_signals_module();
      FavoritesContext = K({
        /** @type {import('../../service.hooks.js').State<FavoritesData, FavoritesConfig>} */
        state: { status: "idle", data: null, config: null },
        /** @type {() => void} */
        toggle: () => {
          throw new Error("must implement");
        },
        /** @type {ReorderFn<Favorite>} */
        favoritesDidReOrder: (_args) => {
          throw new Error("must implement");
        },
        /** @type {(id: string) => void} */
        openContextMenu: (_id) => {
          throw new Error("must implement");
        },
        /** @type {(id: string, url: string, target: OpenTarget) => void} */
        openFavorite: (_id, _url, _target) => {
          throw new Error("must implement");
        },
        /** @type {() => void} */
        add: () => {
          throw new Error("must implement add");
        },
        /** @type {(cb: (data: FavoritesConfig) => void) => void} */
        onConfigChanged: (_cb) => {
        }
      });
      FavoritesDispatchContext = K(
        /** @type {import("preact/hooks").Dispatch<Events>} */
        {}
      );
      FaviconsRefreshedCount = K(d3(0));
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
  function _arrayWithHoles(r4) {
    if (Array.isArray(r4)) return r4;
  }
  var init_arrayWithHoles = __esm({
    "../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js"() {
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
  function _iterableToArrayLimit(r4, l5) {
    var t4 = null == r4 ? null : "undefined" != typeof Symbol && r4[Symbol.iterator] || r4["@@iterator"];
    if (null != t4) {
      var e4, n3, i5, u4, a4 = [], f4 = true, o4 = false;
      try {
        if (i5 = (t4 = t4.call(r4)).next, 0 === l5) {
          if (Object(t4) !== t4) return;
          f4 = false;
        } else for (; !(f4 = (e4 = i5.call(t4)).done) && (a4.push(e4.value), a4.length !== l5); f4 = true) ;
      } catch (r5) {
        o4 = true, n3 = r5;
      } finally {
        try {
          if (!f4 && null != t4["return"] && (u4 = t4["return"](), Object(u4) !== u4)) return;
        } finally {
          if (o4) throw n3;
        }
      }
      return a4;
    }
  }
  var init_iterableToArrayLimit = __esm({
    "../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js"() {
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray(r4, a4) {
    (null == a4 || a4 > r4.length) && (a4 = r4.length);
    for (var e4 = 0, n3 = Array(a4); e4 < a4; e4++) n3[e4] = r4[e4];
    return n3;
  }
  var init_arrayLikeToArray = __esm({
    "../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js"() {
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  function _unsupportedIterableToArray(r4, a4) {
    if (r4) {
      if ("string" == typeof r4) return _arrayLikeToArray(r4, a4);
      var t4 = {}.toString.call(r4).slice(8, -1);
      return "Object" === t4 && r4.constructor && (t4 = r4.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r4) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray(r4, a4) : void 0;
    }
  }
  var init_unsupportedIterableToArray = __esm({
    "../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js"() {
      init_arrayLikeToArray();
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var init_nonIterableRest = __esm({
    "../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"() {
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/slicedToArray.js
  function _slicedToArray(r4, e4) {
    return _arrayWithHoles(r4) || _iterableToArrayLimit(r4, e4) || _unsupportedIterableToArray(r4, e4) || _nonIterableRest();
  }
  var init_slicedToArray = __esm({
    "../node_modules/@babel/runtime/helpers/esm/slicedToArray.js"() {
      init_arrayWithHoles();
      init_iterableToArrayLimit();
      init_unsupportedIterableToArray();
      init_nonIterableRest();
    }
  });

  // ../node_modules/bind-event-listener/dist/bind.js
  var require_bind = __commonJS({
    "../node_modules/bind-event-listener/dist/bind.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.bind = void 0;
      function bind4(target, _a) {
        var type = _a.type, listener = _a.listener, options = _a.options;
        target.addEventListener(type, listener, options);
        return function unbind() {
          target.removeEventListener(type, listener, options);
        };
      }
      exports2.bind = bind4;
    }
  });

  // ../node_modules/bind-event-listener/dist/bind-all.js
  var require_bind_all = __commonJS({
    "../node_modules/bind-event-listener/dist/bind-all.js"(exports2) {
      "use strict";
      var __assign = exports2 && exports2.__assign || function() {
        __assign = Object.assign || function(t4) {
          for (var s4, i5 = 1, n3 = arguments.length; i5 < n3; i5++) {
            s4 = arguments[i5];
            for (var p5 in s4) if (Object.prototype.hasOwnProperty.call(s4, p5))
              t4[p5] = s4[p5];
          }
          return t4;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.bindAll = void 0;
      var bind_1 = require_bind();
      function toOptions(value2) {
        if (typeof value2 === "undefined") {
          return void 0;
        }
        if (typeof value2 === "boolean") {
          return {
            capture: value2
          };
        }
        return value2;
      }
      function getBinding(original, sharedOptions) {
        if (sharedOptions == null) {
          return original;
        }
        var binding = __assign(__assign({}, original), { options: __assign(__assign({}, toOptions(sharedOptions)), toOptions(original.options)) });
        return binding;
      }
      function bindAll5(target, bindings, sharedOptions) {
        var unbinds = bindings.map(function(original) {
          var binding = getBinding(original, sharedOptions);
          return (0, bind_1.bind)(target, binding);
        });
        return function unbindAll() {
          unbinds.forEach(function(unbind) {
            return unbind();
          });
        };
      }
      exports2.bindAll = bindAll5;
    }
  });

  // ../node_modules/bind-event-listener/dist/index.js
  var require_dist = __commonJS({
    "../node_modules/bind-event-listener/dist/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", { value: true });
      exports2.bindAll = exports2.bind = void 0;
      var bind_1 = require_bind();
      Object.defineProperty(exports2, "bind", { enumerable: true, get: function() {
        return bind_1.bind;
      } });
      var bind_all_1 = require_bind_all();
      Object.defineProperty(exports2, "bindAll", { enumerable: true, get: function() {
        return bind_all_1.bindAll;
      } });
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/honey-pot-fix/honey-pot-data-attribute.js
  var honeyPotDataAttribute;
  var init_honey_pot_data_attribute = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/honey-pot-fix/honey-pot-data-attribute.js"() {
      honeyPotDataAttribute = "data-pdnd-honey-pot";
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/honey-pot-fix/is-honey-pot-element.js
  function isHoneyPotElement(target) {
    return target instanceof Element && target.hasAttribute(honeyPotDataAttribute);
  }
  var init_is_honey_pot_element = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/honey-pot-fix/is-honey-pot-element.js"() {
      init_honey_pot_data_attribute();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/honey-pot-fix/get-element-from-point-without-honey-pot.js
  function getElementFromPointWithoutHoneypot(client) {
    var _document$elementsFro = document.elementsFromPoint(client.x, client.y), _document$elementsFro2 = _slicedToArray(_document$elementsFro, 2), top2 = _document$elementsFro2[0], second = _document$elementsFro2[1];
    if (!top2) {
      return null;
    }
    if (isHoneyPotElement(top2)) {
      return second !== null && second !== void 0 ? second : null;
    }
    return top2;
  }
  var init_get_element_from_point_without_honey_pot = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/honey-pot-fix/get-element-from-point-without-honey-pot.js"() {
      init_slicedToArray();
      init_is_honey_pot_element();
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof2(o4) {
    "@babel/helpers - typeof";
    return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o5) {
      return typeof o5;
    } : function(o5) {
      return o5 && "function" == typeof Symbol && o5.constructor === Symbol && o5 !== Symbol.prototype ? "symbol" : typeof o5;
    }, _typeof2(o4);
  }
  var init_typeof = __esm({
    "../node_modules/@babel/runtime/helpers/esm/typeof.js"() {
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function toPrimitive(t4, r4) {
    if ("object" != _typeof2(t4) || !t4) return t4;
    var e4 = t4[Symbol.toPrimitive];
    if (void 0 !== e4) {
      var i5 = e4.call(t4, r4 || "default");
      if ("object" != _typeof2(i5)) return i5;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r4 ? String : Number)(t4);
  }
  var init_toPrimitive = __esm({
    "../node_modules/@babel/runtime/helpers/esm/toPrimitive.js"() {
      init_typeof();
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function toPropertyKey(t4) {
    var i5 = toPrimitive(t4, "string");
    return "symbol" == _typeof2(i5) ? i5 : i5 + "";
  }
  var init_toPropertyKey = __esm({
    "../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js"() {
      init_typeof();
      init_toPrimitive();
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/defineProperty.js
  function _defineProperty(e4, r4, t4) {
    return (r4 = toPropertyKey(r4)) in e4 ? Object.defineProperty(e4, r4, {
      value: t4,
      enumerable: true,
      configurable: true,
      writable: true
    }) : e4[r4] = t4, e4;
  }
  var init_defineProperty = __esm({
    "../node_modules/@babel/runtime/helpers/esm/defineProperty.js"() {
      init_toPropertyKey();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/max-z-index.js
  var maxZIndex;
  var init_max_z_index = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/max-z-index.js"() {
      maxZIndex = 2147483647;
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/honey-pot-fix/make-honey-pot-fix.js
  function ownKeys(e4, r4) {
    var t4 = Object.keys(e4);
    if (Object.getOwnPropertySymbols) {
      var o4 = Object.getOwnPropertySymbols(e4);
      r4 && (o4 = o4.filter(function(r5) {
        return Object.getOwnPropertyDescriptor(e4, r5).enumerable;
      })), t4.push.apply(t4, o4);
    }
    return t4;
  }
  function _objectSpread(e4) {
    for (var r4 = 1; r4 < arguments.length; r4++) {
      var t4 = null != arguments[r4] ? arguments[r4] : {};
      r4 % 2 ? ownKeys(Object(t4), true).forEach(function(r5) {
        _defineProperty(e4, r5, t4[r5]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(t4)) : ownKeys(Object(t4)).forEach(function(r5) {
        Object.defineProperty(e4, r5, Object.getOwnPropertyDescriptor(t4, r5));
      });
    }
    return e4;
  }
  function floorToClosestPixel(point) {
    return {
      x: Math.floor(point.x),
      y: Math.floor(point.y)
    };
  }
  function pullBackByHalfHoneyPotSize(point) {
    return {
      x: point.x - halfHoneyPotSize,
      y: point.y - halfHoneyPotSize
    };
  }
  function preventGoingBackwardsOffScreen(point) {
    return {
      x: Math.max(point.x, 0),
      y: Math.max(point.y, 0)
    };
  }
  function preventGoingForwardsOffScreen(point) {
    return {
      x: Math.min(point.x, window.innerWidth - honeyPotSize),
      y: Math.min(point.y, window.innerHeight - honeyPotSize)
    };
  }
  function getHoneyPotRectFor(_ref) {
    var client = _ref.client;
    var point = preventGoingForwardsOffScreen(preventGoingBackwardsOffScreen(pullBackByHalfHoneyPotSize(floorToClosestPixel(client))));
    return DOMRect.fromRect({
      x: point.x,
      y: point.y,
      width: honeyPotSize,
      height: honeyPotSize
    });
  }
  function getRectStyles(_ref2) {
    var clientRect = _ref2.clientRect;
    return {
      left: "".concat(clientRect.left, "px"),
      top: "".concat(clientRect.top, "px"),
      width: "".concat(clientRect.width, "px"),
      height: "".concat(clientRect.height, "px")
    };
  }
  function isWithin(_ref3) {
    var client = _ref3.client, clientRect = _ref3.clientRect;
    return (
      // is within horizontal bounds
      client.x >= clientRect.x && client.x <= clientRect.x + clientRect.width && // is within vertical bounds
      client.y >= clientRect.y && client.y <= clientRect.y + clientRect.height
    );
  }
  function mountHoneyPot(_ref4) {
    var initial = _ref4.initial;
    var element = document.createElement("div");
    element.setAttribute(honeyPotDataAttribute, "true");
    var clientRect = getHoneyPotRectFor({
      client: initial
    });
    Object.assign(element.style, _objectSpread(_objectSpread({
      // Setting a background color explicitly to avoid any inherited styles.
      // Looks like this could be `opacity: 0`, but worried that _might_
      // cause the element to be ignored on some platforms.
      // When debugging, set backgroundColor to something like "red".
      backgroundColor: "transparent",
      position: "fixed",
      // Being explicit to avoid inheriting styles
      padding: 0,
      margin: 0,
      boxSizing: "border-box"
    }, getRectStyles({
      clientRect
    })), {}, {
      // We want this element to absorb pointer events,
      // it's kind of the whole point 😉
      pointerEvents: "auto",
      // Want to make sure the honey pot is top of everything else.
      // Don't need to worry about native drag previews, as they will
      // have been rendered (and removed) before the honey pot is rendered
      zIndex: maxZIndex
    }));
    document.body.appendChild(element);
    var unbindPointerMove = (0, import_bind_event_listener.bind)(window, {
      type: "pointermove",
      listener: function listener(event) {
        var client = {
          x: event.clientX,
          y: event.clientY
        };
        clientRect = getHoneyPotRectFor({
          client
        });
        Object.assign(element.style, getRectStyles({
          clientRect
        }));
      },
      // using capture so we are less likely to be impacted by event stopping
      options: {
        capture: true
      }
    });
    return function finish(_ref5) {
      var current = _ref5.current;
      unbindPointerMove();
      if (isWithin({
        client: current,
        clientRect
      })) {
        element.remove();
        return;
      }
      function cleanup() {
        unbindPostDragEvents();
        element.remove();
      }
      var unbindPostDragEvents = (0, import_bind_event_listener.bindAll)(window, [
        {
          type: "pointerdown",
          listener: cleanup
        },
        {
          type: "pointermove",
          listener: cleanup
        },
        {
          type: "focusin",
          listener: cleanup
        },
        {
          type: "focusout",
          listener: cleanup
        },
        // a 'pointerdown' should happen before 'dragstart', but just being super safe
        {
          type: "dragstart",
          listener: cleanup
        },
        // if the user has dragged something out of the window
        // and then is dragging something back into the window
        // the first events we will see are "dragenter" (and then "dragover").
        // So if we see any of these we need to clear the post drag fix.
        {
          type: "dragenter",
          listener: cleanup
        },
        {
          type: "dragover",
          listener: cleanup
        }
        // Not adding a "wheel" event listener, as "wheel" by itself does not
        // resolve the bug.
      ], {
        // Using `capture` so less likely to be impacted by other code stopping events
        capture: true
      });
    };
  }
  function makeHoneyPotFix() {
    var latestPointerMove = null;
    function bindEvents() {
      latestPointerMove = null;
      return (0, import_bind_event_listener.bind)(window, {
        type: "pointermove",
        listener: function listener(event) {
          latestPointerMove = {
            x: event.clientX,
            y: event.clientY
          };
        },
        // listening for pointer move in capture phase
        // so we are less likely to be impacted by events being stopped.
        options: {
          capture: true
        }
      });
    }
    function getOnPostDispatch() {
      var finish = null;
      return function onPostEvent(_ref6) {
        var eventName = _ref6.eventName, payload = _ref6.payload;
        if (eventName === "onDragStart") {
          var input = payload.location.initial.input;
          var initial = latestPointerMove !== null && latestPointerMove !== void 0 ? latestPointerMove : {
            x: input.clientX,
            y: input.clientY
          };
          finish = mountHoneyPot({
            initial
          });
        }
        if (eventName === "onDrop") {
          var _finish;
          var _input = payload.location.current.input;
          (_finish = finish) === null || _finish === void 0 || _finish({
            current: {
              x: _input.clientX,
              y: _input.clientY
            }
          });
          finish = null;
          latestPointerMove = null;
        }
      };
    }
    return {
      bindEvents,
      getOnPostDispatch
    };
  }
  var import_bind_event_listener, honeyPotSize, halfHoneyPotSize;
  var init_make_honey_pot_fix = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/honey-pot-fix/make-honey-pot-fix.js"() {
      init_defineProperty();
      import_bind_event_listener = __toESM(require_dist());
      init_max_z_index();
      init_honey_pot_data_attribute();
      honeyPotSize = 2;
      halfHoneyPotSize = honeyPotSize / 2;
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
  function _arrayWithoutHoles(r4) {
    if (Array.isArray(r4)) return _arrayLikeToArray(r4);
  }
  var init_arrayWithoutHoles = __esm({
    "../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js"() {
      init_arrayLikeToArray();
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray(r4) {
    if ("undefined" != typeof Symbol && null != r4[Symbol.iterator] || null != r4["@@iterator"]) return Array.from(r4);
  }
  var init_iterableToArray = __esm({
    "../node_modules/@babel/runtime/helpers/esm/iterableToArray.js"() {
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var init_nonIterableSpread = __esm({
    "../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"() {
    }
  });

  // ../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  function _toConsumableArray(r4) {
    return _arrayWithoutHoles(r4) || _iterableToArray(r4) || _unsupportedIterableToArray(r4) || _nonIterableSpread();
  }
  var init_toConsumableArray = __esm({
    "../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"() {
      init_arrayWithoutHoles();
      init_iterableToArray();
      init_unsupportedIterableToArray();
      init_nonIterableSpread();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/once.js
  function once(fn2) {
    var cache = null;
    return function wrapped() {
      if (!cache) {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        var result = fn2.apply(this, args);
        cache = {
          result
        };
      }
      return cache.result;
    };
  }
  var init_once = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/once.js"() {
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/is-firefox.js
  var isFirefox;
  var init_is_firefox = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/is-firefox.js"() {
      init_once();
      isFirefox = once(function isFirefox2() {
        if (false) {
          return false;
        }
        return navigator.userAgent.includes("Firefox");
      });
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/is-safari.js
  var isSafari2;
  var init_is_safari = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/is-safari.js"() {
      init_once();
      isSafari2 = once(function isSafari3() {
        if (false) {
          return false;
        }
        var _navigator = navigator, userAgent = _navigator.userAgent;
        return userAgent.includes("AppleWebKit") && !userAgent.includes("Chrome");
      });
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/changing-window/count-events-for-safari.js
  function isEnteringWindowInSafari(_ref) {
    var dragEnter = _ref.dragEnter;
    if (!isSafari2()) {
      return false;
    }
    return dragEnter.hasOwnProperty(symbols.isEnteringWindow);
  }
  function isLeavingWindowInSafari(_ref2) {
    var dragLeave = _ref2.dragLeave;
    if (!isSafari2()) {
      return false;
    }
    return dragLeave.hasOwnProperty(symbols.isLeavingWindow);
  }
  var import_bind_event_listener2, symbols;
  var init_count_events_for_safari = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/changing-window/count-events-for-safari.js"() {
      import_bind_event_listener2 = __toESM(require_dist());
      init_is_safari();
      symbols = {
        isLeavingWindow: Symbol("leaving"),
        isEnteringWindow: Symbol("entering")
      };
      (function fixSafari() {
        if (typeof window === "undefined") {
          return;
        }
        if (false) {
          return;
        }
        if (!isSafari2()) {
          return;
        }
        function getInitialState() {
          return {
            enterCount: 0,
            isOverWindow: false
          };
        }
        var state = getInitialState();
        function resetState() {
          state = getInitialState();
        }
        (0, import_bind_event_listener2.bindAll)(
          window,
          [{
            type: "dragstart",
            listener: function listener() {
              state.enterCount = 0;
              state.isOverWindow = true;
            }
          }, {
            type: "drop",
            listener: resetState
          }, {
            type: "dragend",
            listener: resetState
          }, {
            type: "dragenter",
            listener: function listener(event) {
              if (!state.isOverWindow && state.enterCount === 0) {
                event[symbols.isEnteringWindow] = true;
              }
              state.isOverWindow = true;
              state.enterCount++;
            }
          }, {
            type: "dragleave",
            listener: function listener(event) {
              state.enterCount--;
              if (state.isOverWindow && state.enterCount === 0) {
                event[symbols.isLeavingWindow] = true;
                state.isOverWindow = false;
              }
            }
          }],
          // using `capture: true` so that adding event listeners
          // in bubble phase will have the correct symbols
          {
            capture: true
          }
        );
      })();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/changing-window/is-from-another-window.js
  function isNodeLike(target) {
    return "nodeName" in target;
  }
  function isFromAnotherWindow(eventTarget) {
    return isNodeLike(eventTarget) && eventTarget.ownerDocument !== document;
  }
  var init_is_from_another_window = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/changing-window/is-from-another-window.js"() {
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/changing-window/is-leaving-window.js
  function isLeavingWindow(_ref) {
    var dragLeave = _ref.dragLeave;
    var type = dragLeave.type, relatedTarget = dragLeave.relatedTarget;
    if (type !== "dragleave") {
      return false;
    }
    if (isSafari2()) {
      return isLeavingWindowInSafari({
        dragLeave
      });
    }
    if (relatedTarget == null) {
      return true;
    }
    if (isFirefox()) {
      return isFromAnotherWindow(relatedTarget);
    }
    return relatedTarget instanceof HTMLIFrameElement;
  }
  var init_is_leaving_window = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/changing-window/is-leaving-window.js"() {
      init_is_firefox();
      init_is_safari();
      init_count_events_for_safari();
      init_is_from_another_window();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/detect-broken-drag.js
  function getBindingsForBrokenDrags(_ref) {
    var onDragEnd = _ref.onDragEnd;
    return [
      // ## Detecting drag ending for removed draggables
      //
      // If a draggable element is removed during a drag and the user drops:
      // 1. if over a valid drop target: we get a "drop" event to know the drag is finished
      // 2. if not over a valid drop target (or cancelled): we get nothing
      // The "dragend" event will not fire on the source draggable if it has been
      // removed from the DOM.
      // So we need to figure out if a drag operation has finished by looking at other events
      // We can do this by looking at other events
      // ### First detection: "pointermove" events
      // 1. "pointermove" events cannot fire during a drag and drop operation
      // according to the spec. So if we get a "pointermove" it means that
      // the drag and drop operations has finished. So if we get a "pointermove"
      // we know that the drag is over
      // 2. 🦊😤 Drag and drop operations are _supposed_ to suppress
      // other pointer events. However, firefox will allow a few
      // pointer event to get through after a drag starts.
      // The most I've seen is 3
      {
        type: "pointermove",
        listener: /* @__PURE__ */ (function() {
          var callCount = 0;
          return function listener() {
            if (callCount < 20) {
              callCount++;
              return;
            }
            onDragEnd();
          };
        })()
      },
      // ### Second detection: "pointerdown" events
      // If we receive this event then we know that a drag operation has finished
      // and potentially another one is about to start.
      // Note: `pointerdown` fires on all browsers / platforms before "dragstart"
      {
        type: "pointerdown",
        listener: onDragEnd
      }
    ];
  }
  var init_detect_broken_drag = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/detect-broken-drag.js"() {
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/get-input.js
  function getInput(event) {
    return {
      altKey: event.altKey,
      button: event.button,
      buttons: event.buttons,
      ctrlKey: event.ctrlKey,
      metaKey: event.metaKey,
      shiftKey: event.shiftKey,
      clientX: event.clientX,
      clientY: event.clientY,
      pageX: event.pageX,
      pageY: event.pageY
    };
  }
  var init_get_input = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/get-input.js"() {
    }
  });

  // ../node_modules/raf-schd/dist/raf-schd.esm.js
  var rafSchd, raf_schd_esm_default;
  var init_raf_schd_esm = __esm({
    "../node_modules/raf-schd/dist/raf-schd.esm.js"() {
      rafSchd = function rafSchd2(fn2) {
        var lastArgs = [];
        var frameId = null;
        var wrapperFn = function wrapperFn2() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          lastArgs = args;
          if (frameId) {
            return;
          }
          frameId = requestAnimationFrame(function() {
            frameId = null;
            fn2.apply(void 0, lastArgs);
          });
        };
        wrapperFn.cancel = function() {
          if (!frameId) {
            return;
          }
          cancelAnimationFrame(frameId);
          frameId = null;
        };
        return wrapperFn;
      };
      raf_schd_esm_default = rafSchd;
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/ledger/dispatch-consumer-event.js
  function makeDispatch(_ref) {
    var source = _ref.source, initial = _ref.initial, dispatchEvent2 = _ref.dispatchEvent;
    var previous = {
      dropTargets: []
    };
    function safeDispatch(args) {
      dispatchEvent2(args);
      previous = {
        dropTargets: args.payload.location.current.dropTargets
      };
    }
    var dispatch = {
      start: function start2(_ref2) {
        var nativeSetDragImage = _ref2.nativeSetDragImage;
        var location2 = {
          current: initial,
          previous,
          initial
        };
        safeDispatch({
          eventName: "onGenerateDragPreview",
          payload: {
            source,
            location: location2,
            nativeSetDragImage
          }
        });
        dragStart.schedule(function() {
          safeDispatch({
            eventName: "onDragStart",
            payload: {
              source,
              location: location2
            }
          });
        });
      },
      dragUpdate: function dragUpdate(_ref3) {
        var current = _ref3.current;
        dragStart.flush();
        scheduleOnDrag.cancel();
        safeDispatch({
          eventName: "onDropTargetChange",
          payload: {
            source,
            location: {
              initial,
              previous,
              current
            }
          }
        });
      },
      drag: function drag(_ref4) {
        var current = _ref4.current;
        scheduleOnDrag(function() {
          dragStart.flush();
          var location2 = {
            initial,
            previous,
            current
          };
          safeDispatch({
            eventName: "onDrag",
            payload: {
              source,
              location: location2
            }
          });
        });
      },
      drop: function drop(_ref5) {
        var current = _ref5.current, updatedSourcePayload = _ref5.updatedSourcePayload;
        dragStart.flush();
        scheduleOnDrag.cancel();
        safeDispatch({
          eventName: "onDrop",
          payload: {
            source: updatedSourcePayload !== null && updatedSourcePayload !== void 0 ? updatedSourcePayload : source,
            location: {
              current,
              previous,
              initial
            }
          }
        });
      }
    };
    return dispatch;
  }
  var scheduleOnDrag, dragStart;
  var init_dispatch_consumer_event = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/ledger/dispatch-consumer-event.js"() {
      init_raf_schd_esm();
      scheduleOnDrag = raf_schd_esm_default(function(fn2) {
        return fn2();
      });
      dragStart = /* @__PURE__ */ (function() {
        var scheduled = null;
        function schedule(fn2) {
          var frameId = requestAnimationFrame(function() {
            scheduled = null;
            fn2();
          });
          scheduled = {
            frameId,
            fn: fn2
          };
        }
        function flush() {
          if (scheduled) {
            cancelAnimationFrame(scheduled.frameId);
            scheduled.fn();
            scheduled = null;
          }
        }
        return {
          schedule,
          flush
        };
      })();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/ledger/lifecycle-manager.js
  function canStart() {
    return !globalState.isActive;
  }
  function getNativeSetDragImage(event) {
    if (event.dataTransfer) {
      return event.dataTransfer.setDragImage.bind(event.dataTransfer);
    }
    return null;
  }
  function hasHierarchyChanged(_ref) {
    var current = _ref.current, next = _ref.next;
    if (current.length !== next.length) {
      return true;
    }
    for (var i5 = 0; i5 < current.length; i5++) {
      if (current[i5].element !== next[i5].element) {
        return true;
      }
    }
    return false;
  }
  function start(_ref2) {
    var event = _ref2.event, dragType = _ref2.dragType, getDropTargetsOver = _ref2.getDropTargetsOver, dispatchEvent2 = _ref2.dispatchEvent;
    if (!canStart()) {
      return;
    }
    var initial = getStartLocation({
      event,
      dragType,
      getDropTargetsOver
    });
    globalState.isActive = true;
    var state = {
      current: initial
    };
    setDropEffectOnEvent({
      event,
      current: initial.dropTargets
    });
    var dispatch = makeDispatch({
      source: dragType.payload,
      dispatchEvent: dispatchEvent2,
      initial
    });
    function updateState(next) {
      var hasChanged = hasHierarchyChanged({
        current: state.current.dropTargets,
        next: next.dropTargets
      });
      state.current = next;
      if (hasChanged) {
        dispatch.dragUpdate({
          current: state.current
        });
      }
    }
    function onUpdateEvent(event2) {
      var input = getInput(event2);
      var target = isHoneyPotElement(event2.target) ? getElementFromPointWithoutHoneypot({
        x: input.clientX,
        y: input.clientY
      }) : event2.target;
      var nextDropTargets = getDropTargetsOver({
        target,
        input,
        source: dragType.payload,
        current: state.current.dropTargets
      });
      if (nextDropTargets.length) {
        event2.preventDefault();
        setDropEffectOnEvent({
          event: event2,
          current: nextDropTargets
        });
      }
      updateState({
        dropTargets: nextDropTargets,
        input
      });
    }
    function cancel() {
      if (state.current.dropTargets.length) {
        updateState({
          dropTargets: [],
          input: state.current.input
        });
      }
      dispatch.drop({
        current: state.current,
        updatedSourcePayload: null
      });
      finish();
    }
    function finish() {
      globalState.isActive = false;
      unbindEvents();
    }
    var unbindEvents = (0, import_bind_event_listener3.bindAll)(
      window,
      [{
        // 👋 Note: we are repurposing the `dragover` event as our `drag` event
        // this is because firefox does not publish pointer coordinates during
        // a `drag` event, but does for every other type of drag event
        // `dragover` fires on all elements that are being dragged over
        // Because we are binding to `window` - our `dragover` is effectively the same as a `drag`
        // 🦊😤
        type: "dragover",
        listener: function listener(event2) {
          onUpdateEvent(event2);
          dispatch.drag({
            current: state.current
          });
        }
      }, {
        type: "dragenter",
        listener: onUpdateEvent
      }, {
        type: "dragleave",
        listener: function listener(event2) {
          if (!isLeavingWindow({
            dragLeave: event2
          })) {
            return;
          }
          updateState({
            input: state.current.input,
            dropTargets: []
          });
          if (dragType.startedFrom === "external") {
            cancel();
          }
        }
      }, {
        // A "drop" can only happen if the browser allowed the drop
        type: "drop",
        listener: function listener(event2) {
          state.current = {
            dropTargets: state.current.dropTargets,
            input: getInput(event2)
          };
          if (!state.current.dropTargets.length) {
            cancel();
            return;
          }
          event2.preventDefault();
          setDropEffectOnEvent({
            event: event2,
            current: state.current.dropTargets
          });
          dispatch.drop({
            current: state.current,
            // When dropping something native, we need to extract the latest
            // `.items` from the "drop" event as it is now accessible
            updatedSourcePayload: dragType.type === "external" ? dragType.getDropPayload(event2) : null
          });
          finish();
        }
      }, {
        // "dragend" fires when on the drag source (eg a draggable element)
        // when the drag is finished.
        // "dragend" will fire after "drop" (if there was a successful drop)
        // "dragend" does not fire if the draggable source has been removed during the drag
        // or for external drag sources (eg files)
        // This "dragend" listener will not fire if there was a successful drop
        // as we will have already removed the event listener
        type: "dragend",
        listener: function listener(event2) {
          state.current = {
            dropTargets: state.current.dropTargets,
            input: getInput(event2)
          };
          cancel();
        }
      }].concat(_toConsumableArray(getBindingsForBrokenDrags({
        onDragEnd: cancel
      }))),
      // Once we have started a managed drag operation it is important that we see / own all drag events
      // We got one adoption bug pop up where some code was stopping (`event.stopPropagation()`)
      // all "drop" events in the bubble phase on the `document.body`.
      // This meant that we never saw the "drop" event.
      {
        capture: true
      }
    );
    dispatch.start({
      nativeSetDragImage: getNativeSetDragImage(event)
    });
  }
  function setDropEffectOnEvent(_ref3) {
    var _current$;
    var event = _ref3.event, current = _ref3.current;
    var innerMost = (_current$ = current[0]) === null || _current$ === void 0 ? void 0 : _current$.dropEffect;
    if (innerMost != null && event.dataTransfer) {
      event.dataTransfer.dropEffect = innerMost;
    }
  }
  function getStartLocation(_ref4) {
    var event = _ref4.event, dragType = _ref4.dragType, getDropTargetsOver = _ref4.getDropTargetsOver;
    var input = getInput(event);
    if (dragType.startedFrom === "external") {
      return {
        input,
        dropTargets: []
      };
    }
    var dropTargets = getDropTargetsOver({
      input,
      source: dragType.payload,
      target: event.target,
      current: []
    });
    return {
      input,
      dropTargets
    };
  }
  var import_bind_event_listener3, globalState, lifecycle;
  var init_lifecycle_manager = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/ledger/lifecycle-manager.js"() {
      init_toConsumableArray();
      import_bind_event_listener3 = __toESM(require_dist());
      init_get_element_from_point_without_honey_pot();
      init_is_honey_pot_element();
      init_is_leaving_window();
      init_detect_broken_drag();
      init_get_input();
      init_dispatch_consumer_event();
      globalState = {
        isActive: false
      };
      lifecycle = {
        canStart,
        start
      };
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/ledger/usage-ledger.js
  function registerUsage(_ref) {
    var typeKey = _ref.typeKey, mount3 = _ref.mount;
    var entry = ledger.get(typeKey);
    if (entry) {
      entry.usageCount++;
      return entry;
    }
    var initial = {
      typeKey,
      unmount: mount3(),
      usageCount: 1
    };
    ledger.set(typeKey, initial);
    return initial;
  }
  function register(args) {
    var entry = registerUsage(args);
    return function unregister() {
      entry.usageCount--;
      if (entry.usageCount > 0) {
        return;
      }
      entry.unmount();
      ledger.delete(args.typeKey);
    };
  }
  var ledger;
  var init_usage_ledger = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/ledger/usage-ledger.js"() {
      ledger = /* @__PURE__ */ new Map();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/combine.js
  function combine() {
    for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }
    return function cleanup() {
      fns.forEach(function(fn2) {
        return fn2();
      });
    };
  }
  var init_combine = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/combine.js"() {
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/add-attribute.js
  function addAttribute(element, _ref) {
    var attribute = _ref.attribute, value2 = _ref.value;
    element.setAttribute(attribute, value2);
    return function() {
      return element.removeAttribute(attribute);
    };
  }
  var init_add_attribute = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/add-attribute.js"() {
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/make-adapter/make-drop-target.js
  function ownKeys2(e4, r4) {
    var t4 = Object.keys(e4);
    if (Object.getOwnPropertySymbols) {
      var o4 = Object.getOwnPropertySymbols(e4);
      r4 && (o4 = o4.filter(function(r5) {
        return Object.getOwnPropertyDescriptor(e4, r5).enumerable;
      })), t4.push.apply(t4, o4);
    }
    return t4;
  }
  function _objectSpread2(e4) {
    for (var r4 = 1; r4 < arguments.length; r4++) {
      var t4 = null != arguments[r4] ? arguments[r4] : {};
      r4 % 2 ? ownKeys2(Object(t4), true).forEach(function(r5) {
        _defineProperty(e4, r5, t4[r5]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(t4)) : ownKeys2(Object(t4)).forEach(function(r5) {
        Object.defineProperty(e4, r5, Object.getOwnPropertyDescriptor(t4, r5));
      });
    }
    return e4;
  }
  function _createForOfIteratorHelper(r4, e4) {
    var t4 = "undefined" != typeof Symbol && r4[Symbol.iterator] || r4["@@iterator"];
    if (!t4) {
      if (Array.isArray(r4) || (t4 = _unsupportedIterableToArray2(r4)) || e4 && r4 && "number" == typeof r4.length) {
        t4 && (r4 = t4);
        var _n = 0, F5 = function F6() {
        };
        return { s: F5, n: function n3() {
          return _n >= r4.length ? { done: true } : { done: false, value: r4[_n++] };
        }, e: function e5(r5) {
          throw r5;
        }, f: F5 };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o4, a4 = true, u4 = false;
    return { s: function s4() {
      t4 = t4.call(r4);
    }, n: function n3() {
      var r5 = t4.next();
      return a4 = r5.done, r5;
    }, e: function e5(r5) {
      u4 = true, o4 = r5;
    }, f: function f4() {
      try {
        a4 || null == t4.return || t4.return();
      } finally {
        if (u4) throw o4;
      }
    } };
  }
  function _unsupportedIterableToArray2(r4, a4) {
    if (r4) {
      if ("string" == typeof r4) return _arrayLikeToArray2(r4, a4);
      var t4 = {}.toString.call(r4).slice(8, -1);
      return "Object" === t4 && r4.constructor && (t4 = r4.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r4) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray2(r4, a4) : void 0;
    }
  }
  function _arrayLikeToArray2(r4, a4) {
    (null == a4 || a4 > r4.length) && (a4 = r4.length);
    for (var e4 = 0, n3 = Array(a4); e4 < a4; e4++) n3[e4] = r4[e4];
    return n3;
  }
  function copyReverse(array) {
    return array.slice(0).reverse();
  }
  function makeDropTarget(_ref) {
    var typeKey = _ref.typeKey, defaultDropEffect = _ref.defaultDropEffect;
    var registry = /* @__PURE__ */ new WeakMap();
    var dropTargetDataAtt = "data-drop-target-for-".concat(typeKey);
    var dropTargetSelector = "[".concat(dropTargetDataAtt, "]");
    function addToRegistry2(args) {
      registry.set(args.element, args);
      return function() {
        return registry.delete(args.element);
      };
    }
    function dropTargetForConsumers(args) {
      if (true) {
        var existing = registry.get(args.element);
        if (existing) {
          console.warn("You have already registered a [".concat(typeKey, "] dropTarget on the same element"), {
            existing,
            proposed: args
          });
        }
        if (args.element instanceof HTMLIFrameElement) {
          console.warn("\n            We recommend not registering <iframe> elements as drop targets\n            as it can result in some strange browser event ordering.\n          ".replace(/\s{2,}/g, " ").trim());
        }
      }
      var cleanup = combine(addAttribute(args.element, {
        attribute: dropTargetDataAtt,
        value: "true"
      }), addToRegistry2(args));
      return once(cleanup);
    }
    function getActualDropTargets(_ref2) {
      var _args$getData, _args$getData2, _args$getDropEffect, _args$getDropEffect2;
      var source = _ref2.source, target = _ref2.target, input = _ref2.input, _ref2$result = _ref2.result, result = _ref2$result === void 0 ? [] : _ref2$result;
      if (target == null) {
        return result;
      }
      if (!(target instanceof Element)) {
        if (target instanceof Node) {
          return getActualDropTargets({
            source,
            target: target.parentElement,
            input,
            result
          });
        }
        return result;
      }
      var closest = target.closest(dropTargetSelector);
      if (closest == null) {
        return result;
      }
      var args = registry.get(closest);
      if (args == null) {
        return result;
      }
      var feedback = {
        input,
        source,
        element: args.element
      };
      if (args.canDrop && !args.canDrop(feedback)) {
        return getActualDropTargets({
          source,
          target: args.element.parentElement,
          input,
          result
        });
      }
      var data2 = (_args$getData = (_args$getData2 = args.getData) === null || _args$getData2 === void 0 ? void 0 : _args$getData2.call(args, feedback)) !== null && _args$getData !== void 0 ? _args$getData : {};
      var dropEffect = (_args$getDropEffect = (_args$getDropEffect2 = args.getDropEffect) === null || _args$getDropEffect2 === void 0 ? void 0 : _args$getDropEffect2.call(args, feedback)) !== null && _args$getDropEffect !== void 0 ? _args$getDropEffect : defaultDropEffect;
      var record = {
        data: data2,
        element: args.element,
        dropEffect,
        // we are collecting _actual_ drop targets, so these are
        // being applied _not_ due to stickiness
        isActiveDueToStickiness: false
      };
      return getActualDropTargets({
        source,
        target: args.element.parentElement,
        input,
        // Using bubble ordering. Same ordering as `event.getPath()`
        result: [].concat(_toConsumableArray(result), [record])
      });
    }
    function notifyCurrent(_ref3) {
      var eventName = _ref3.eventName, payload = _ref3.payload;
      var _iterator = _createForOfIteratorHelper(payload.location.current.dropTargets), _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done; ) {
          var _entry$eventName;
          var record = _step.value;
          var entry = registry.get(record.element);
          var args = _objectSpread2(_objectSpread2({}, payload), {}, {
            self: record
          });
          entry === null || entry === void 0 || (_entry$eventName = entry[eventName]) === null || _entry$eventName === void 0 || _entry$eventName.call(
            entry,
            // I cannot seem to get the types right here.
            // TS doesn't seem to like that one event can need `nativeSetDragImage`
            // @ts-expect-error
            args
          );
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
    var actions = {
      onGenerateDragPreview: notifyCurrent,
      onDrag: notifyCurrent,
      onDragStart: notifyCurrent,
      onDrop: notifyCurrent,
      onDropTargetChange: function onDropTargetChange(_ref4) {
        var payload = _ref4.payload;
        var isCurrent = new Set(payload.location.current.dropTargets.map(function(record2) {
          return record2.element;
        }));
        var visited = /* @__PURE__ */ new Set();
        var _iterator2 = _createForOfIteratorHelper(payload.location.previous.dropTargets), _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
            var _entry$onDropTargetCh;
            var record = _step2.value;
            visited.add(record.element);
            var entry = registry.get(record.element);
            var isOver = isCurrent.has(record.element);
            var args = _objectSpread2(_objectSpread2({}, payload), {}, {
              self: record
            });
            entry === null || entry === void 0 || (_entry$onDropTargetCh = entry.onDropTargetChange) === null || _entry$onDropTargetCh === void 0 || _entry$onDropTargetCh.call(entry, args);
            if (!isOver) {
              var _entry$onDragLeave;
              entry === null || entry === void 0 || (_entry$onDragLeave = entry.onDragLeave) === null || _entry$onDragLeave === void 0 || _entry$onDragLeave.call(entry, args);
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        var _iterator3 = _createForOfIteratorHelper(payload.location.current.dropTargets), _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
            var _entry$onDropTargetCh2, _entry$onDragEnter;
            var _record = _step3.value;
            if (visited.has(_record.element)) {
              continue;
            }
            var _args = _objectSpread2(_objectSpread2({}, payload), {}, {
              self: _record
            });
            var _entry = registry.get(_record.element);
            _entry === null || _entry === void 0 || (_entry$onDropTargetCh2 = _entry.onDropTargetChange) === null || _entry$onDropTargetCh2 === void 0 || _entry$onDropTargetCh2.call(_entry, _args);
            _entry === null || _entry === void 0 || (_entry$onDragEnter = _entry.onDragEnter) === null || _entry$onDragEnter === void 0 || _entry$onDragEnter.call(_entry, _args);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    };
    function dispatchEvent2(args) {
      actions[args.eventName](args);
    }
    function getIsOver(_ref5) {
      var source = _ref5.source, target = _ref5.target, input = _ref5.input, current = _ref5.current;
      var actual = getActualDropTargets({
        source,
        target,
        input
      });
      if (actual.length >= current.length) {
        return actual;
      }
      var lastCaptureOrdered = copyReverse(current);
      var actualCaptureOrdered = copyReverse(actual);
      var resultCaptureOrdered = [];
      for (var index2 = 0; index2 < lastCaptureOrdered.length; index2++) {
        var _argsForLast$getIsSti;
        var last = lastCaptureOrdered[index2];
        var fresh = actualCaptureOrdered[index2];
        if (fresh != null) {
          resultCaptureOrdered.push(fresh);
          continue;
        }
        var parent2 = resultCaptureOrdered[index2 - 1];
        var lastParent = lastCaptureOrdered[index2 - 1];
        if ((parent2 === null || parent2 === void 0 ? void 0 : parent2.element) !== (lastParent === null || lastParent === void 0 ? void 0 : lastParent.element)) {
          break;
        }
        var argsForLast = registry.get(last.element);
        if (!argsForLast) {
          break;
        }
        var feedback = {
          input,
          source,
          element: argsForLast.element
        };
        if (argsForLast.canDrop && !argsForLast.canDrop(feedback)) {
          break;
        }
        if (!((_argsForLast$getIsSti = argsForLast.getIsSticky) !== null && _argsForLast$getIsSti !== void 0 && _argsForLast$getIsSti.call(argsForLast, feedback))) {
          break;
        }
        resultCaptureOrdered.push(_objectSpread2(_objectSpread2({}, last), {}, {
          // making it clear to consumers this drop target is active due to stickiness
          isActiveDueToStickiness: true
        }));
      }
      return copyReverse(resultCaptureOrdered);
    }
    return {
      dropTargetForConsumers,
      getIsOver,
      dispatchEvent: dispatchEvent2
    };
  }
  var init_make_drop_target = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/make-adapter/make-drop-target.js"() {
      init_defineProperty();
      init_toConsumableArray();
      init_combine();
      init_once();
      init_add_attribute();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/make-adapter/make-monitor.js
  function _createForOfIteratorHelper2(r4, e4) {
    var t4 = "undefined" != typeof Symbol && r4[Symbol.iterator] || r4["@@iterator"];
    if (!t4) {
      if (Array.isArray(r4) || (t4 = _unsupportedIterableToArray3(r4)) || e4 && r4 && "number" == typeof r4.length) {
        t4 && (r4 = t4);
        var _n = 0, F5 = function F6() {
        };
        return { s: F5, n: function n3() {
          return _n >= r4.length ? { done: true } : { done: false, value: r4[_n++] };
        }, e: function e5(r5) {
          throw r5;
        }, f: F5 };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var o4, a4 = true, u4 = false;
    return { s: function s4() {
      t4 = t4.call(r4);
    }, n: function n3() {
      var r5 = t4.next();
      return a4 = r5.done, r5;
    }, e: function e5(r5) {
      u4 = true, o4 = r5;
    }, f: function f4() {
      try {
        a4 || null == t4.return || t4.return();
      } finally {
        if (u4) throw o4;
      }
    } };
  }
  function _unsupportedIterableToArray3(r4, a4) {
    if (r4) {
      if ("string" == typeof r4) return _arrayLikeToArray3(r4, a4);
      var t4 = {}.toString.call(r4).slice(8, -1);
      return "Object" === t4 && r4.constructor && (t4 = r4.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r4) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray3(r4, a4) : void 0;
    }
  }
  function _arrayLikeToArray3(r4, a4) {
    (null == a4 || a4 > r4.length) && (a4 = r4.length);
    for (var e4 = 0, n3 = Array(a4); e4 < a4; e4++) n3[e4] = r4[e4];
    return n3;
  }
  function ownKeys3(e4, r4) {
    var t4 = Object.keys(e4);
    if (Object.getOwnPropertySymbols) {
      var o4 = Object.getOwnPropertySymbols(e4);
      r4 && (o4 = o4.filter(function(r5) {
        return Object.getOwnPropertyDescriptor(e4, r5).enumerable;
      })), t4.push.apply(t4, o4);
    }
    return t4;
  }
  function _objectSpread3(e4) {
    for (var r4 = 1; r4 < arguments.length; r4++) {
      var t4 = null != arguments[r4] ? arguments[r4] : {};
      r4 % 2 ? ownKeys3(Object(t4), true).forEach(function(r5) {
        _defineProperty(e4, r5, t4[r5]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(t4)) : ownKeys3(Object(t4)).forEach(function(r5) {
        Object.defineProperty(e4, r5, Object.getOwnPropertyDescriptor(t4, r5));
      });
    }
    return e4;
  }
  function makeMonitor() {
    var registry = /* @__PURE__ */ new Set();
    var dragging = null;
    function tryAddToActive(monitor) {
      if (!dragging) {
        return;
      }
      if (!monitor.canMonitor || monitor.canMonitor(dragging.canMonitorArgs)) {
        dragging.active.add(monitor);
      }
    }
    function monitorForConsumers(args) {
      var entry = _objectSpread3({}, args);
      registry.add(entry);
      tryAddToActive(entry);
      function cleanup() {
        registry.delete(entry);
        if (dragging) {
          dragging.active.delete(entry);
        }
      }
      return once(cleanup);
    }
    function dispatchEvent2(_ref) {
      var eventName = _ref.eventName, payload = _ref.payload;
      if (eventName === "onGenerateDragPreview") {
        dragging = {
          canMonitorArgs: {
            initial: payload.location.initial,
            source: payload.source
          },
          active: /* @__PURE__ */ new Set()
        };
        var _iterator = _createForOfIteratorHelper2(registry), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var monitor = _step.value;
            tryAddToActive(monitor);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      if (!dragging) {
        return;
      }
      var active2 = Array.from(dragging.active);
      for (var _i = 0, _active = active2; _i < _active.length; _i++) {
        var _monitor = _active[_i];
        if (dragging.active.has(_monitor)) {
          var _monitor$eventName;
          (_monitor$eventName = _monitor[eventName]) === null || _monitor$eventName === void 0 || _monitor$eventName.call(_monitor, payload);
        }
      }
      if (eventName === "onDrop") {
        dragging.active.clear();
        dragging = null;
      }
    }
    return {
      dispatchEvent: dispatchEvent2,
      monitorForConsumers
    };
  }
  var init_make_monitor = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/make-adapter/make-monitor.js"() {
      init_defineProperty();
      init_once();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/make-adapter/make-adapter.js
  function makeAdapter(_ref) {
    var typeKey = _ref.typeKey, mount3 = _ref.mount, dispatchEventToSource2 = _ref.dispatchEventToSource, onPostDispatch = _ref.onPostDispatch, defaultDropEffect = _ref.defaultDropEffect;
    var monitorAPI = makeMonitor();
    var dropTargetAPI = makeDropTarget({
      typeKey,
      defaultDropEffect
    });
    function dispatchEvent2(args) {
      dispatchEventToSource2 === null || dispatchEventToSource2 === void 0 || dispatchEventToSource2(args);
      dropTargetAPI.dispatchEvent(args);
      monitorAPI.dispatchEvent(args);
      onPostDispatch === null || onPostDispatch === void 0 || onPostDispatch(args);
    }
    function start2(_ref2) {
      var event = _ref2.event, dragType = _ref2.dragType;
      lifecycle.start({
        event,
        dragType,
        getDropTargetsOver: dropTargetAPI.getIsOver,
        dispatchEvent: dispatchEvent2
      });
    }
    function registerUsage2() {
      function mountAdapter() {
        var api = {
          canStart: lifecycle.canStart,
          start: start2
        };
        return mount3(api);
      }
      return register({
        typeKey,
        mount: mountAdapter
      });
    }
    return {
      registerUsage: registerUsage2,
      dropTarget: dropTargetAPI.dropTargetForConsumers,
      monitor: monitorAPI.monitorForConsumers
    };
  }
  var init_make_adapter = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/make-adapter/make-adapter.js"() {
      init_lifecycle_manager();
      init_usage_ledger();
      init_make_drop_target();
      init_make_monitor();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/android.js
  var isAndroid, androidFallbackText;
  var init_android = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/android.js"() {
      init_once();
      isAndroid = once(function isAndroid2() {
        return navigator.userAgent.toLocaleLowerCase().includes("android");
      });
      androidFallbackText = "pdnd:android-fallback";
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/media-types/text-media-type.js
  var textMediaType;
  var init_text_media_type = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/media-types/text-media-type.js"() {
      textMediaType = "text/plain";
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/media-types/url-media-type.js
  var URLMediaType;
  var init_url_media_type = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/media-types/url-media-type.js"() {
      URLMediaType = "text/uri-list";
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/adapter/element-adapter-native-data-key.js
  var elementAdapterNativeDataKey;
  var init_element_adapter_native_data_key = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/adapter/element-adapter-native-data-key.js"() {
      elementAdapterNativeDataKey = "application/vnd.pdnd";
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/adapter/element-adapter.js
  function addToRegistry(args) {
    draggableRegistry.set(args.element, args);
    return function cleanup() {
      draggableRegistry.delete(args.element);
    };
  }
  function draggable(args) {
    if (true) {
      if (args.dragHandle && !args.element.contains(args.dragHandle)) {
        console.warn("Drag handle element must be contained in draggable element", {
          element: args.element,
          dragHandle: args.dragHandle
        });
      }
    }
    if (true) {
      var existing = draggableRegistry.get(args.element);
      if (existing) {
        console.warn("You have already registered a `draggable` on the same element", {
          existing,
          proposed: args
        });
      }
    }
    var cleanup = combine(
      // making the draggable register the adapter rather than drop targets
      // this is because you *must* have a draggable element to start a drag
      // but you _might_ not have any drop targets immediately
      // (You might create drop targets async)
      adapter.registerUsage(),
      addToRegistry(args),
      addAttribute(args.element, {
        attribute: "draggable",
        value: "true"
      })
    );
    return once(cleanup);
  }
  var import_bind_event_listener4, draggableRegistry, honeyPotFix, adapter, dropTargetForElements, monitorForElements;
  var init_element_adapter = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/adapter/element-adapter.js"() {
      init_slicedToArray();
      import_bind_event_listener4 = __toESM(require_dist());
      init_get_element_from_point_without_honey_pot();
      init_make_honey_pot_fix();
      init_make_adapter();
      init_combine();
      init_once();
      init_add_attribute();
      init_android();
      init_get_input();
      init_text_media_type();
      init_url_media_type();
      init_element_adapter_native_data_key();
      draggableRegistry = /* @__PURE__ */ new WeakMap();
      honeyPotFix = makeHoneyPotFix();
      adapter = makeAdapter({
        typeKey: "element",
        defaultDropEffect: "move",
        mount: function mount(api) {
          return combine(honeyPotFix.bindEvents(), (0, import_bind_event_listener4.bind)(document, {
            type: "dragstart",
            listener: function listener(event) {
              var _entry$dragHandle, _entry$getInitialData, _entry$getInitialData2, _entry$dragHandle2, _entry$getInitialData3, _entry$getInitialData4;
              if (!api.canStart(event)) {
                return;
              }
              if (event.defaultPrevented) {
                return;
              }
              if (!event.dataTransfer) {
                if (true) {
                  console.warn("\n              It appears as though you have are not testing DragEvents correctly.\n\n              - If you are unit testing, ensure you have polyfilled DragEvent.\n              - If you are browser testing, ensure you are dispatching drag events correctly.\n\n              Please see our testing guides for more information:\n              https://atlassian.design/components/pragmatic-drag-and-drop/core-package/testing\n            ".replace(/ {2}/g, ""));
                }
                return;
              }
              var target = event.target;
              if (!(target instanceof HTMLElement)) {
                return;
              }
              var entry = draggableRegistry.get(target);
              if (!entry) {
                return;
              }
              var input = getInput(event);
              var feedback = {
                element: entry.element,
                dragHandle: (_entry$dragHandle = entry.dragHandle) !== null && _entry$dragHandle !== void 0 ? _entry$dragHandle : null,
                input
              };
              if (entry.canDrag && !entry.canDrag(feedback)) {
                event.preventDefault();
                return;
              }
              if (entry.dragHandle) {
                var over = getElementFromPointWithoutHoneypot({
                  x: input.clientX,
                  y: input.clientY
                });
                if (!entry.dragHandle.contains(over)) {
                  event.preventDefault();
                  return;
                }
              }
              var nativeData = (_entry$getInitialData = (_entry$getInitialData2 = entry.getInitialDataForExternal) === null || _entry$getInitialData2 === void 0 ? void 0 : _entry$getInitialData2.call(entry, feedback)) !== null && _entry$getInitialData !== void 0 ? _entry$getInitialData : null;
              if (nativeData) {
                for (var _i = 0, _Object$entries = Object.entries(nativeData); _i < _Object$entries.length; _i++) {
                  var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), key2 = _Object$entries$_i[0], data2 = _Object$entries$_i[1];
                  event.dataTransfer.setData(key2, data2 !== null && data2 !== void 0 ? data2 : "");
                }
              }
              if (isAndroid() && !event.dataTransfer.types.includes(textMediaType) && !event.dataTransfer.types.includes(URLMediaType)) {
                event.dataTransfer.setData(textMediaType, androidFallbackText);
              }
              event.dataTransfer.setData(elementAdapterNativeDataKey, "");
              var payload = {
                element: entry.element,
                dragHandle: (_entry$dragHandle2 = entry.dragHandle) !== null && _entry$dragHandle2 !== void 0 ? _entry$dragHandle2 : null,
                data: (_entry$getInitialData3 = (_entry$getInitialData4 = entry.getInitialData) === null || _entry$getInitialData4 === void 0 ? void 0 : _entry$getInitialData4.call(entry, feedback)) !== null && _entry$getInitialData3 !== void 0 ? _entry$getInitialData3 : {}
              };
              var dragType = {
                type: "element",
                payload,
                startedFrom: "internal"
              };
              api.start({
                event,
                dragType
              });
            }
          }));
        },
        dispatchEventToSource: function dispatchEventToSource(_ref) {
          var _draggableRegistry$ge, _draggableRegistry$ge2;
          var eventName = _ref.eventName, payload = _ref.payload;
          (_draggableRegistry$ge = draggableRegistry.get(payload.source.element)) === null || _draggableRegistry$ge === void 0 || (_draggableRegistry$ge2 = _draggableRegistry$ge[eventName]) === null || _draggableRegistry$ge2 === void 0 || _draggableRegistry$ge2.call(
            _draggableRegistry$ge,
            // I cannot seem to get the types right here.
            // TS doesn't seem to like that one event can need `nativeSetDragImage`
            // @ts-expect-error
            payload
          );
        },
        onPostDispatch: honeyPotFix.getOnPostDispatch()
      });
      dropTargetForElements = adapter.dropTarget;
      monitorForElements = adapter.monitor;
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/element/adapter.js
  var init_adapter = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/element/adapter.js"() {
      init_element_adapter();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop-hitbox/dist/esm/closest-edge.js
  function ownKeys4(e4, r4) {
    var t4 = Object.keys(e4);
    if (Object.getOwnPropertySymbols) {
      var o4 = Object.getOwnPropertySymbols(e4);
      r4 && (o4 = o4.filter(function(r5) {
        return Object.getOwnPropertyDescriptor(e4, r5).enumerable;
      })), t4.push.apply(t4, o4);
    }
    return t4;
  }
  function _objectSpread4(e4) {
    for (var r4 = 1; r4 < arguments.length; r4++) {
      var t4 = null != arguments[r4] ? arguments[r4] : {};
      r4 % 2 ? ownKeys4(Object(t4), true).forEach(function(r5) {
        _defineProperty(e4, r5, t4[r5]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e4, Object.getOwnPropertyDescriptors(t4)) : ownKeys4(Object(t4)).forEach(function(r5) {
        Object.defineProperty(e4, r5, Object.getOwnPropertyDescriptor(t4, r5));
      });
    }
    return e4;
  }
  function attachClosestEdge(userData, _ref) {
    var _entries$sort$0$edge, _entries$sort$;
    var element = _ref.element, input = _ref.input, allowedEdges = _ref.allowedEdges;
    var client = {
      x: input.clientX,
      y: input.clientY
    };
    var rect = element.getBoundingClientRect();
    var entries4 = allowedEdges.map(function(edge) {
      return {
        edge,
        value: getDistanceToEdge[edge](rect, client)
      };
    });
    var addClosestEdge = (_entries$sort$0$edge = (_entries$sort$ = entries4.sort(function(a4, b4) {
      return a4.value - b4.value;
    })[0]) === null || _entries$sort$ === void 0 ? void 0 : _entries$sort$.edge) !== null && _entries$sort$0$edge !== void 0 ? _entries$sort$0$edge : null;
    return _objectSpread4(_objectSpread4({}, userData), {}, _defineProperty({}, uniqueKey, addClosestEdge));
  }
  function extractClosestEdge(userData) {
    var _ref2;
    return (_ref2 = userData[uniqueKey]) !== null && _ref2 !== void 0 ? _ref2 : null;
  }
  var getDistanceToEdge, uniqueKey;
  var init_closest_edge = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop-hitbox/dist/esm/closest-edge.js"() {
      init_defineProperty();
      getDistanceToEdge = {
        top: function top(rect, client) {
          return Math.abs(client.y - rect.top);
        },
        right: function right(rect, client) {
          return Math.abs(rect.right - client.x);
        },
        bottom: function bottom(rect, client) {
          return Math.abs(rect.bottom - client.y);
        },
        left: function left(rect, client) {
          return Math.abs(client.x - rect.left);
        }
      };
      uniqueKey = Symbol("closestEdge");
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/reorder.js
  function reorder(_ref) {
    var list2 = _ref.list, startIndex = _ref.startIndex, finishIndex = _ref.finishIndex;
    if (startIndex === -1 || finishIndex === -1) {
      return Array.from(list2);
    }
    var result = Array.from(list2);
    var _result$splice = result.splice(startIndex, 1), _result$splice2 = _slicedToArray(_result$splice, 1), removed = _result$splice2[0];
    result.splice(finishIndex, 0, removed);
    return result;
  }
  var init_reorder = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/reorder.js"() {
      init_slicedToArray();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/reorder.js
  var init_reorder2 = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/reorder.js"() {
      init_reorder();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop-hitbox/dist/esm/get-reorder-destination-index.js
  function getReorderDestinationIndex(_ref) {
    var startIndex = _ref.startIndex, closestEdgeOfTarget = _ref.closestEdgeOfTarget, indexOfTarget = _ref.indexOfTarget, axis = _ref.axis;
    if (startIndex === -1 || indexOfTarget === -1) {
      return startIndex;
    }
    if (startIndex === indexOfTarget) {
      return startIndex;
    }
    if (closestEdgeOfTarget == null) {
      return indexOfTarget;
    }
    var isGoingAfter = axis === "vertical" && closestEdgeOfTarget === "bottom" || axis === "horizontal" && closestEdgeOfTarget === "right";
    var isMovingForward = startIndex < indexOfTarget;
    if (isMovingForward) {
      return isGoingAfter ? indexOfTarget : indexOfTarget - 1;
    }
    return isGoingAfter ? indexOfTarget + 1 : indexOfTarget;
  }
  var init_get_reorder_destination_index = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop-hitbox/dist/esm/get-reorder-destination-index.js"() {
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop-hitbox/dist/esm/reorder-with-edge.js
  function reorderWithEdge(_ref) {
    var list2 = _ref.list, startIndex = _ref.startIndex, closestEdgeOfTarget = _ref.closestEdgeOfTarget, indexOfTarget = _ref.indexOfTarget, axis = _ref.axis;
    return reorder({
      list: list2,
      startIndex,
      finishIndex: getReorderDestinationIndex({
        closestEdgeOfTarget,
        startIndex,
        indexOfTarget,
        axis
      })
    });
  }
  var init_reorder_with_edge = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop-hitbox/dist/esm/reorder-with-edge.js"() {
      init_reorder2();
      init_get_reorder_destination_index();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/changing-window/is-entering-window.js
  function isEnteringWindow(_ref) {
    var dragEnter = _ref.dragEnter;
    var type = dragEnter.type, relatedTarget = dragEnter.relatedTarget;
    if (type !== "dragenter") {
      return false;
    }
    if (isSafari2()) {
      return isEnteringWindowInSafari({
        dragEnter
      });
    }
    if (relatedTarget == null) {
      return true;
    }
    if (isFirefox()) {
      return isFromAnotherWindow(relatedTarget);
    }
    return relatedTarget instanceof HTMLIFrameElement;
  }
  var init_is_entering_window = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/changing-window/is-entering-window.js"() {
      init_is_firefox();
      init_is_safari();
      init_count_events_for_safari();
      init_is_from_another_window();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/adapter/external-adapter.js
  function isAnAvailableType(_ref) {
    var type = _ref.type, value2 = _ref.value;
    if (type === elementAdapterNativeDataKey) {
      return false;
    }
    if (type === textMediaType && value2 === androidFallbackText) {
      return false;
    }
    return true;
  }
  function getAvailableTypes(transfer) {
    return Array.from(transfer.types).filter(function(type) {
      return isAnAvailableType({
        type,
        value: transfer.getData(type)
      });
    });
  }
  function getAvailableItems(dataTransfer) {
    return Array.from(dataTransfer.items).filter(function(item) {
      return item.kind === "file" || isAnAvailableType({
        type: item.type,
        value: dataTransfer.getData(item.type)
      });
    });
  }
  function dropTargetForExternal(args) {
    return adapter2.dropTarget(args);
  }
  function monitorForExternal(args) {
    return adapter2.monitor(args);
  }
  var import_bind_event_listener5, didDragStartLocally, adapter2;
  var init_external_adapter = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/adapter/external-adapter.js"() {
      init_toConsumableArray();
      import_bind_event_listener5 = __toESM(require_dist());
      init_make_adapter();
      init_android();
      init_is_entering_window();
      init_detect_broken_drag();
      init_text_media_type();
      init_element_adapter_native_data_key();
      didDragStartLocally = false;
      adapter2 = makeAdapter({
        typeKey: "external",
        // for external drags, we are generally making a copy of something that is being dragged
        defaultDropEffect: "copy",
        mount: function mount2(api) {
          return (0, import_bind_event_listener5.bind)(window, {
            type: "dragenter",
            listener: function listener(event) {
              if (didDragStartLocally) {
                return;
              }
              if (!event.dataTransfer) {
                if (true) {
                  console.warn("\n              It appears as though you have are not testing DragEvents correctly.\n\n              - If you are unit testing, ensure you have polyfilled DragEvent.\n              - If you are browser testing, ensure you are dispatching drag events correctly.\n\n              Please see our testing guides for more information:\n              https://atlassian.design/components/pragmatic-drag-and-drop/core-package/testing\n            ".replace(/ {2}/g, ""));
                }
                return;
              }
              if (!api.canStart(event)) {
                return;
              }
              if (!isEnteringWindow({
                dragEnter: event
              })) {
                return;
              }
              var types = getAvailableTypes(event.dataTransfer);
              if (!types.length) {
                return;
              }
              var locked = {
                types,
                items: [],
                getStringData: function getStringData() {
                  return null;
                }
              };
              api.start({
                event,
                dragType: {
                  type: "external",
                  startedFrom: "external",
                  payload: locked,
                  getDropPayload: function getDropPayload(event2) {
                    if (!event2.dataTransfer) {
                      return locked;
                    }
                    var items = getAvailableItems(event2.dataTransfer);
                    var nativeGetData = event2.dataTransfer.getData.bind(event2.dataTransfer);
                    return {
                      types,
                      items,
                      // return `null` if there is no result, otherwise string
                      getStringData: function getStringData(mediaType) {
                        if (!types.includes(mediaType)) {
                          return null;
                        }
                        var value2 = nativeGetData(mediaType);
                        if (!isAnAvailableType({
                          type: mediaType,
                          value: value2
                        })) {
                          return null;
                        }
                        return value2;
                      }
                    };
                  }
                }
              });
            }
          });
        }
      });
      (function startup() {
        if (typeof window === "undefined") {
          return;
        }
        adapter2.registerUsage();
        var idle = {
          type: "idle"
        };
        var state = idle;
        function clear() {
          if (state.type !== "dragging") {
            return;
          }
          didDragStartLocally = false;
          state.cleanup();
          state = idle;
        }
        function bindEndEvents() {
          return (0, import_bind_event_listener5.bindAll)(
            window,
            [{
              type: "dragend",
              listener: clear
            }].concat(_toConsumableArray(getBindingsForBrokenDrags({
              onDragEnd: clear
            }))),
            // we want to make sure we get all the events,
            // and this helps avoid not seeing events when folks stop
            // them later on the event path
            {
              capture: true
            }
          );
        }
        (0, import_bind_event_listener5.bind)(window, {
          type: "dragstart",
          listener: function listener() {
            if (state.type !== "idle") {
              return;
            }
            didDragStartLocally = true;
            state = {
              type: "dragging",
              cleanup: bindEndEvents()
            };
          },
          // binding in the capture phase so these listeners are called
          // before our listeners in the adapters `mount` function
          options: {
            capture: true
          }
        });
      })();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/external/adapter.js
  var init_adapter2 = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/external/adapter.js"() {
      init_external_adapter();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/combine.js
  var init_combine2 = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/combine.js"() {
      init_combine();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/media-types/html-media-type.js
  var HTMLMediaType;
  var init_html_media_type = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/util/media-types/html-media-type.js"() {
      HTMLMediaType = "text/html";
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/external/html.js
  function getHTML(_ref2) {
    var source = _ref2.source;
    return source.getStringData(HTMLMediaType);
  }
  var init_html = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/external/html.js"() {
      init_html_media_type();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/external/html.js
  var init_html2 = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/external/html.js"() {
      init_html();
    }
  });

  // pages/new-tab/app/favorites/constants.js
  var DDG_MIME_TYPE, DDG_FALLBACK_ICON, DDG_FALLBACK_ICON_DARK, DDG_DEFAULT_ICON_SIZE;
  var init_constants = __esm({
    "pages/new-tab/app/favorites/constants.js"() {
      "use strict";
      DDG_MIME_TYPE = "application/vnd.duckduckgo.bookmark-by-id";
      DDG_FALLBACK_ICON = "./company-icons/other.svg";
      DDG_FALLBACK_ICON_DARK = "./company-icons/other-dark.svg";
      DDG_DEFAULT_ICON_SIZE = 64;
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/element/custom-native-drag-preview/set-custom-native-drag-preview.js
  function defaultOffset() {
    return {
      x: 0,
      y: 0
    };
  }
  function setCustomNativeDragPreview(_ref) {
    var render = _ref.render, nativeSetDragImage = _ref.nativeSetDragImage, _ref$getOffset = _ref.getOffset, getOffset = _ref$getOffset === void 0 ? defaultOffset : _ref$getOffset;
    var container = document.createElement("div");
    Object.assign(container.style, {
      // Ensuring we don't cause reflow when adding the element to the page
      // Using `position:fixed` rather than `position:absolute` so we are
      // positioned on the current viewport.
      // `position:fixed` also creates a new stacking context, so we don't need to do that here
      position: "fixed",
      // According to `mdn`, the element can be offscreen:
      // https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage#imgelement
      //
      // However, that  information does not appear in the specs:
      // https://html.spec.whatwg.org/multipage/dnd.html#dom-datatransfer-setdragimage-dev
      //
      // If the element is _completely_ offscreen, Safari@17.1 will cancel the drag
      top: 0,
      left: 0,
      // Using maximum possible z-index so that this element will always be on top
      // https://stackoverflow.com/questions/491052/minimum-and-maximum-value-of-z-index
      // Did not use `layers` in `@atlaskit/theme` because:
      // 1. This element is not a 'layer' in the conventional sense, as this element
      //    is only created for a single frame for the browser to take a photo of it,
      //    and then it is destroyed
      // 2. Did not want to add a dependency onto `@atlaskit/theme`
      // 3. Want to always be on top of product UI which might have higher z-index's
      zIndex: maxZIndex,
      // Avoiding any additional events caused by the new element (being super safe)
      pointerEvents: "none"
    });
    document.body.append(container);
    var unmount = render({
      container
    });
    queueMicrotask(function() {
      var previewOffset = getOffset({
        container
      });
      if (isSafari2()) {
        var rect = container.getBoundingClientRect();
        if (rect.width === 0) {
          return;
        }
        container.style.left = "-".concat(rect.width - 1e-4, "px");
      }
      nativeSetDragImage === null || nativeSetDragImage === void 0 || nativeSetDragImage(container, previewOffset.x, previewOffset.y);
    });
    function cleanup() {
      unbindMonitor();
      unmount === null || unmount === void 0 || unmount();
      document.body.removeChild(container);
    }
    var unbindMonitor = monitorForElements({
      // Remove portal in the dragstart event so that the user will never see it
      onDragStart: cleanup,
      // Backup: remove portal when the drop finishes (this would be an error case)
      onDrop: cleanup
    });
  }
  var init_set_custom_native_drag_preview = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/element/custom-native-drag-preview/set-custom-native-drag-preview.js"() {
      init_element_adapter();
      init_is_safari();
      init_max_z_index();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/element/set-custom-native-drag-preview.js
  var init_set_custom_native_drag_preview2 = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/element/set-custom-native-drag-preview.js"() {
      init_set_custom_native_drag_preview();
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/element/custom-native-drag-preview/center-under-pointer.js
  var centerUnderPointer;
  var init_center_under_pointer = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/public-utils/element/custom-native-drag-preview/center-under-pointer.js"() {
      centerUnderPointer = function centerUnderPointer2(_ref) {
        var container = _ref.container;
        var rect = container.getBoundingClientRect();
        return {
          x: rect.width / 2,
          y: rect.height / 2
        };
      };
    }
  });

  // ../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/element/center-under-pointer.js
  var init_center_under_pointer2 = __esm({
    "../node_modules/@atlaskit/pragmatic-drag-and-drop/dist/esm/entry-point/element/center-under-pointer.js"() {
      init_center_under_pointer();
    }
  });

  // pages/new-tab/app/favorites/components/PragmaticDND.js
  function PragmaticDND({ children, items, itemsDidReOrder }) {
    const [instanceId] = d2(getInstanceId);
    useGridState(items, itemsDidReOrder, instanceId);
    return /* @__PURE__ */ _(InstanceIdContext.Provider, { value: instanceId }, children);
  }
  function useGridState(favorites2, itemsDidReOrder, instanceId) {
    y2(() => {
      return combine(
        monitorForExternal({
          onDrop(payload) {
            const id = idFromPayload(payload);
            if (!id) return;
            const location2 = payload.location;
            const target = location2.current.dropTargets[0];
            if (!target || !target.data || typeof target.data.url !== "string") {
              return console.warn("missing data from target");
            }
            const closestEdgeOfTarget = extractClosestEdge(target.data);
            const destinationSrc = target.data.url;
            let indexOfTarget = favorites2.findIndex((item) => item.url === destinationSrc);
            if (indexOfTarget === -1 && destinationSrc.includes("PLACEHOLDER-URL")) {
              indexOfTarget = favorites2.length;
            }
            const targetIndex = getReorderDestinationIndex({
              closestEdgeOfTarget,
              startIndex: favorites2.length,
              indexOfTarget,
              axis: "horizontal"
            });
            itemsDidReOrder({
              list: favorites2,
              id,
              fromIndex: favorites2.length,
              targetIndex
            });
          }
        }),
        monitorForElements({
          canMonitor({ source }) {
            return source.data.instanceId === instanceId;
          },
          onDrop({ source, location: location2 }) {
            const target = location2.current.dropTargets[0];
            if (!target) {
              return;
            }
            const destinationSrc = target.data.url;
            const destinationId = target.data.id;
            const startId = source.data.id;
            if (typeof startId !== "string") {
              return console.warn("could not access startId");
            }
            if (typeof destinationSrc !== "string") {
              return console.warn("could not access the destinationSrc");
            }
            const startIndex = favorites2.findIndex((item) => item.id === startId);
            let indexOfTarget = favorites2.findIndex((item) => item.id === destinationId);
            if (indexOfTarget === -1 && destinationSrc.includes("PLACEHOLDER-URL")) {
              indexOfTarget = favorites2.length;
            }
            const closestEdgeOfTarget = extractClosestEdge(target.data);
            const targetIndex = getReorderDestinationIndex({
              closestEdgeOfTarget,
              startIndex,
              indexOfTarget,
              axis: "horizontal"
            });
            const reorderedList = reorderWithEdge({
              list: favorites2,
              startIndex,
              indexOfTarget,
              closestEdgeOfTarget,
              axis: "horizontal"
            });
            itemsDidReOrder({
              list: reorderedList,
              id: startId,
              fromIndex: startIndex,
              targetIndex
            });
          }
        })
      );
    }, [instanceId, favorites2]);
  }
  function useItemState(url8, id, opts) {
    const instanceId = x2(InstanceIdContext);
    const ref = A2(null);
    const [state, setState] = d2(
      /** @type {DNDState} */
      { type: "idle" }
    );
    y2(() => {
      const el = ref.current;
      if (!el) throw new Error("unreachable");
      let draggableCleanup = () => {
      };
      if (opts.kind === "draggable") {
        draggableCleanup = draggable({
          element: el,
          getInitialData: () => ({ type: "grid-item", url: url8, id, instanceId }),
          getInitialDataForExternal: () => ({
            "text/plain": url8,
            [DDG_MIME_TYPE]: id
          }),
          onDragStart: () => setState({ type: "dragging" }),
          onDrop: () => setState({ type: "idle" }),
          onGenerateDragPreview: ({ nativeSetDragImage, source }) => {
            setCustomNativeDragPreview({
              getOffset: ({ container }) => centerUnderPointer({ container }),
              render: ({ container }) => {
                const clone3 = (
                  /** @type {HTMLElement} */
                  source.element.cloneNode(true)
                );
                const outer = document.createElement("div");
                outer.classList.add(opts.class ?? "");
                outer.dataset.theme = opts.theme;
                outer.appendChild(clone3);
                container.appendChild(outer);
                return () => {
                  container.removeChild(outer);
                };
              },
              nativeSetDragImage
            });
          }
        });
      }
      return combine(
        draggableCleanup,
        dropTargetForExternal({
          element: el,
          canDrop: ({ source }) => {
            return source.types.some((type) => type === "text/html");
          },
          getData: ({ input }) => {
            return attachClosestEdge(
              { url: url8, id },
              {
                element: el,
                input,
                allowedEdges: ["left", "right"]
              }
            );
          },
          onDrop: () => {
            setState({ type: "idle" });
          },
          onDragLeave: () => setState({ type: "idle" }),
          onDrag: ({ self: self2 }) => {
            const closestEdge = extractClosestEdge(self2.data);
            setState((current) => {
              if (current.type === "is-dragging-over" && current.closestEdge === closestEdge) {
                return current;
              }
              return { type: "is-dragging-over", closestEdge };
            });
          }
        }),
        dropTargetForElements({
          element: el,
          getData: ({ input }) => {
            return attachClosestEdge(
              { url: url8, id },
              {
                element: el,
                input,
                allowedEdges: ["left", "right"]
              }
            );
          },
          getIsSticky: () => false,
          canDrop: ({ source }) => {
            return source.data.instanceId === instanceId && source.data.type === "grid-item" && source.data.id !== id;
          },
          onDragEnter: ({ self: self2 }) => {
            const closestEdge = extractClosestEdge(self2.data);
            setState({ type: "is-dragging-over", closestEdge });
          },
          onDrag({ self: self2 }) {
            const closestEdge = extractClosestEdge(self2.data);
            setState((current) => {
              if (current.type === "is-dragging-over" && current.closestEdge === closestEdge) {
                return current;
              }
              return { type: "is-dragging-over", closestEdge };
            });
          },
          onDragLeave: () => setState({ type: "idle" }),
          onDrop: () => setState({ type: "idle" })
        })
      );
    }, [instanceId, url8, id, opts.kind, opts.class, opts.theme]);
    return { ref, state };
  }
  function getInstanceId() {
    return Symbol("instance-id");
  }
  function idFromPayload(payload) {
    const ddg = payload.source.getStringData(DDG_MIME_TYPE);
    if (ddg && ddg.length > 0) return ddg;
    const html = getHTML(payload);
    if (!html) return console.warn(`missing text/html payload + missing ${DDG_MIME_TYPE} mime type`);
    const fragment = document.createRange().createContextualFragment(html);
    const node = fragment.firstElementChild;
    if (!node) return console.warn("missing first element");
    if (node.getAttribute("name") !== DDG_MIME_TYPE) return console.warn(`attribute name was not ${DDG_MIME_TYPE}`);
    const id = node.getAttribute("content");
    if (!id) return console.warn("id missing from `content` attribute");
    return id;
  }
  var InstanceIdContext;
  var init_PragmaticDND = __esm({
    "pages/new-tab/app/favorites/components/PragmaticDND.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_adapter();
      init_closest_edge();
      init_reorder_with_edge();
      init_get_reorder_destination_index();
      init_adapter2();
      init_combine2();
      init_html2();
      init_constants();
      init_set_custom_native_drag_preview2();
      init_center_under_pointer2();
      InstanceIdContext = K(getInstanceId());
    }
  });

  // ../node_modules/preact/compat/dist/compat.module.js
  function g5(n3, t4) {
    for (var e4 in t4) n3[e4] = t4[e4];
    return n3;
  }
  function E3(n3, t4) {
    for (var e4 in n3) if ("__source" !== e4 && !(e4 in t4)) return true;
    for (var r4 in t4) if ("__source" !== r4 && n3[r4] !== t4[r4]) return true;
    return false;
  }
  function N2(n3, t4) {
    this.props = n3, this.context = t4;
  }
  function M2(n3, e4) {
    function r4(n4) {
      var t4 = this.props.ref, r5 = t4 == n4.ref;
      return !r5 && t4 && (t4.call ? t4(null) : t4.current = null), e4 ? !e4(this.props, n4) || !r5 : E3(this.props, n4);
    }
    function u4(e5) {
      return this.shouldComponentUpdate = r4, _(n3, e5);
    }
    return u4.displayName = "Memo(" + (n3.displayName || n3.name) + ")", u4.prototype.isReactComponent = true, u4.__f = true, u4;
  }
  function V2(n3, t4, e4) {
    return n3 && (n3.__c && n3.__c.__H && (n3.__c.__H.__.forEach(function(n4) {
      "function" == typeof n4.__c && n4.__c();
    }), n3.__c.__H = null), null != (n3 = g5({}, n3)).__c && (n3.__c.__P === e4 && (n3.__c.__P = t4), n3.__c.__e = true, n3.__c = null), n3.__k = n3.__k && n3.__k.map(function(n4) {
      return V2(n4, t4, e4);
    })), n3;
  }
  function W(n3, t4, e4) {
    return n3 && e4 && (n3.__v = null, n3.__k = n3.__k && n3.__k.map(function(n4) {
      return W(n4, t4, e4);
    }), n3.__c && n3.__c.__P === t4 && (n3.__e && e4.appendChild(n3.__e), n3.__c.__e = true, n3.__c.__P = e4)), n3;
  }
  function P3() {
    this.__u = 0, this.o = null, this.__b = null;
  }
  function j3(n3) {
    var t4 = n3.__.__c;
    return t4 && t4.__a && t4.__a(n3);
  }
  function z3(n3) {
    var e4, r4, u4;
    function o4(o5) {
      if (e4 || (e4 = n3()).then(function(n4) {
        r4 = n4.default || n4;
      }, function(n4) {
        u4 = n4;
      }), u4) throw u4;
      if (!r4) throw e4;
      return _(r4, o5);
    }
    return o4.displayName = "Lazy", o4.__f = true, o4;
  }
  function B3() {
    this.i = null, this.l = null;
  }
  function rn() {
  }
  function un() {
    return this.cancelBubble;
  }
  function on() {
    return this.defaultPrevented;
  }
  var T4, A4, F4, U, H2, q4, G2, J2, K2, Q, X, en, ln, cn, fn, an, sn;
  var init_compat_module = __esm({
    "../node_modules/preact/compat/dist/compat.module.js"() {
      init_preact_module();
      init_preact_module();
      init_hooks_module();
      init_hooks_module();
      (N2.prototype = new x()).isPureReactComponent = true, N2.prototype.shouldComponentUpdate = function(n3, t4) {
        return E3(this.props, n3) || E3(this.state, t4);
      };
      T4 = l.__b;
      l.__b = function(n3) {
        n3.type && n3.type.__f && n3.ref && (n3.props.ref = n3.ref, n3.ref = null), T4 && T4(n3);
      };
      A4 = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;
      F4 = l.__e;
      l.__e = function(n3, t4, e4, r4) {
        if (n3.then) {
          for (var u4, o4 = t4; o4 = o4.__; ) if ((u4 = o4.__c) && u4.__c) return null == t4.__e && (t4.__e = e4.__e, t4.__k = e4.__k), u4.__c(n3, t4);
        }
        F4(n3, t4, e4, r4);
      };
      U = l.unmount;
      l.unmount = function(n3) {
        var t4 = n3.__c;
        t4 && t4.__R && t4.__R(), t4 && 32 & n3.__u && (n3.type = null), U && U(n3);
      }, (P3.prototype = new x()).__c = function(n3, t4) {
        var e4 = t4.__c, r4 = this;
        null == r4.o && (r4.o = []), r4.o.push(e4);
        var u4 = j3(r4.__v), o4 = false, i5 = function() {
          o4 || (o4 = true, e4.__R = null, u4 ? u4(l5) : l5());
        };
        e4.__R = i5;
        var l5 = function() {
          if (!--r4.__u) {
            if (r4.state.__a) {
              var n4 = r4.state.__a;
              r4.__v.__k[0] = W(n4, n4.__c.__P, n4.__c.__O);
            }
            var t5;
            for (r4.setState({ __a: r4.__b = null }); t5 = r4.o.pop(); ) t5.forceUpdate();
          }
        };
        r4.__u++ || 32 & t4.__u || r4.setState({ __a: r4.__b = r4.__v.__k[0] }), n3.then(i5, i5);
      }, P3.prototype.componentWillUnmount = function() {
        this.o = [];
      }, P3.prototype.render = function(n3, e4) {
        if (this.__b) {
          if (this.__v.__k) {
            var r4 = document.createElement("div"), o4 = this.__v.__k[0].__c;
            this.__v.__k[0] = V2(this.__b, r4, o4.__O = o4.__P);
          }
          this.__b = null;
        }
        var i5 = e4.__a && _(k, null, n3.fallback);
        return i5 && (i5.__u &= -33), [_(k, null, e4.__a ? null : n3.children), i5];
      };
      H2 = function(n3, t4, e4) {
        if (++e4[1] === e4[0] && n3.l.delete(t4), n3.props.revealOrder && ("t" !== n3.props.revealOrder[0] || !n3.l.size)) for (e4 = n3.i; e4; ) {
          for (; e4.length > 3; ) e4.pop()();
          if (e4[1] < e4[0]) break;
          n3.i = e4 = e4[2];
        }
      };
      (B3.prototype = new x()).__a = function(n3) {
        var t4 = this, e4 = j3(t4.__v), r4 = t4.l.get(n3);
        return r4[0]++, function(u4) {
          var o4 = function() {
            t4.props.revealOrder ? (r4.push(u4), H2(t4, n3, r4)) : u4();
          };
          e4 ? e4(o4) : o4();
        };
      }, B3.prototype.render = function(n3) {
        this.i = null, this.l = /* @__PURE__ */ new Map();
        var t4 = H(n3.children);
        n3.revealOrder && "b" === n3.revealOrder[0] && t4.reverse();
        for (var e4 = t4.length; e4--; ) this.l.set(t4[e4], this.i = [1, 0, this.i]);
        return n3.children;
      }, B3.prototype.componentDidUpdate = B3.prototype.componentDidMount = function() {
        var n3 = this;
        this.l.forEach(function(t4, e4) {
          H2(n3, e4, t4);
        });
      };
      q4 = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103;
      G2 = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;
      J2 = /^on(Ani|Tra|Tou|BeforeInp|Compo)/;
      K2 = /[A-Z0-9]/g;
      Q = "undefined" != typeof document;
      X = function(n3) {
        return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/ : /fil|che|ra/).test(n3);
      };
      x.prototype.isReactComponent = {}, ["componentWillMount", "componentWillReceiveProps", "componentWillUpdate"].forEach(function(t4) {
        Object.defineProperty(x.prototype, t4, { configurable: true, get: function() {
          return this["UNSAFE_" + t4];
        }, set: function(n3) {
          Object.defineProperty(this, t4, { configurable: true, writable: true, value: n3 });
        } });
      });
      en = l.event;
      l.event = function(n3) {
        return en && (n3 = en(n3)), n3.persist = rn, n3.isPropagationStopped = un, n3.isDefaultPrevented = on, n3.nativeEvent = n3;
      };
      cn = { enumerable: false, configurable: true, get: function() {
        return this.class;
      } };
      fn = l.vnode;
      l.vnode = function(n3) {
        "string" == typeof n3.type && (function(n4) {
          var t4 = n4.props, e4 = n4.type, u4 = {}, o4 = -1 === e4.indexOf("-");
          for (var i5 in t4) {
            var l5 = t4[i5];
            if (!("value" === i5 && "defaultValue" in t4 && null == l5 || Q && "children" === i5 && "noscript" === e4 || "class" === i5 || "className" === i5)) {
              var c4 = i5.toLowerCase();
              "defaultValue" === i5 && "value" in t4 && null == t4.value ? i5 = "value" : "download" === i5 && true === l5 ? l5 = "" : "translate" === c4 && "no" === l5 ? l5 = false : "o" === c4[0] && "n" === c4[1] ? "ondoubleclick" === c4 ? i5 = "ondblclick" : "onchange" !== c4 || "input" !== e4 && "textarea" !== e4 || X(t4.type) ? "onfocus" === c4 ? i5 = "onfocusin" : "onblur" === c4 ? i5 = "onfocusout" : J2.test(i5) && (i5 = c4) : c4 = i5 = "oninput" : o4 && G2.test(i5) ? i5 = i5.replace(K2, "-$&").toLowerCase() : null === l5 && (l5 = void 0), "oninput" === c4 && u4[i5 = c4] && (i5 = "oninputCapture"), u4[i5] = l5;
            }
          }
          "select" == e4 && u4.multiple && Array.isArray(u4.value) && (u4.value = H(t4.children).forEach(function(n5) {
            n5.props.selected = -1 != u4.value.indexOf(n5.props.value);
          })), "select" == e4 && null != u4.defaultValue && (u4.value = H(t4.children).forEach(function(n5) {
            n5.props.selected = u4.multiple ? -1 != u4.defaultValue.indexOf(n5.props.value) : u4.defaultValue == n5.props.value;
          })), t4.class && !t4.className ? (u4.class = t4.class, Object.defineProperty(u4, "className", cn)) : (t4.className && !t4.class || t4.class && t4.className) && (u4.class = u4.className = t4.className), n4.props = u4;
        })(n3), n3.$$typeof = q4, fn && fn(n3);
      };
      an = l.__r;
      l.__r = function(n3) {
        an && an(n3), ln = n3.__c;
      };
      sn = l.diffed;
      l.diffed = function(n3) {
        sn && sn(n3);
        var t4 = n3.props, e4 = n3.__e;
        null != e4 && "textarea" === n3.type && "value" in t4 && t4.value !== e4.value && (e4.value = null == t4.value ? "" : t4.value), ln = null;
      };
    }
  });

  // pages/new-tab/app/favorites/components/Favorites.module.css
  var Favorites_default;
  var init_Favorites = __esm({
    "pages/new-tab/app/favorites/components/Favorites.module.css"() {
      Favorites_default = {
        root: "Favorites_root",
        showhide: "Favorites_showhide",
        grid: "Favorites_grid",
        gridRow: "Favorites_gridRow"
      };
    }
  });

  // pages/new-tab/app/components/ShowHide.module.css
  var ShowHide_default;
  var init_ShowHide = __esm({
    "pages/new-tab/app/components/ShowHide.module.css"() {
      ShowHide_default = {
        button: "ShowHide_button",
        iconBlock: "ShowHide_iconBlock",
        round: "ShowHide_round",
        pill: "ShowHide_pill",
        fill: "ShowHide_fill",
        hover: "ShowHide_hover",
        bar: "ShowHide_bar"
      };
    }
  });

  // pages/new-tab/app/components/ShowHideButton.jsx
  function ShowHideButtonCircle({ label, onClick, buttonAttrs = {} }) {
    return /* @__PURE__ */ _("button", { ...buttonAttrs, class: (0, import_classnames.default)(ShowHide_default.button, ShowHide_default.round), "aria-label": label, "data-toggle": "true", onClick }, /* @__PURE__ */ _("div", { class: ShowHide_default.iconBlock }, /* @__PURE__ */ _(Chevron, null)));
  }
  function ShowHideButtonPill({ label, onClick, text: text2, fill = true, buttonAttrs = {} }) {
    const btnText = label ? /* @__PURE__ */ _("span", { "aria-hidden": "true" }, text2) : text2;
    return /* @__PURE__ */ _(
      "button",
      {
        ...buttonAttrs,
        "aria-label": label,
        class: (0, import_classnames.default)(ShowHide_default.button, ShowHide_default.hover, ShowHide_default.pill, fill && ShowHide_default.fill),
        "data-toggle": "true",
        onClick
      },
      /* @__PURE__ */ _(Chevron, null),
      btnText
    );
  }
  function ShowHideBar({ children }) {
    return /* @__PURE__ */ _("div", { class: ShowHide_default.bar, "data-show-hide": true }, children);
  }
  var import_classnames;
  var init_ShowHideButton = __esm({
    "pages/new-tab/app/components/ShowHideButton.jsx"() {
      "use strict";
      init_ShowHide();
      import_classnames = __toESM(require_classnames(), 1);
      init_Icons2();
      init_preact_module();
    }
  });

  // pages/new-tab/app/dropzone.js
  function useGlobalDropzone() {
    y2(() => {
      let safezones = [];
      const controller = new AbortController();
      window.addEventListener(
        REGISTER_EVENT,
        (e4) => {
          if (isValidEvent(e4)) {
            safezones.push(e4.detail.dropzone);
          }
        },
        { signal: controller.signal }
      );
      window.addEventListener(
        CLEAR_EVENT,
        (e4) => {
          if (isValidEvent(e4)) {
            const match = safezones.findIndex((x3) => x3 === e4.detail.dropzone);
            safezones.splice(match, 1);
          }
        },
        { signal: controller.signal }
      );
      document.addEventListener(
        "dragover",
        (event) => {
          if (!event.target) return;
          const target = (
            /** @type {HTMLElement} */
            event.target
          );
          if (safezones.length > 0) {
            for (const safezone of safezones) {
              if (safezone.contains(target)) return;
            }
          }
          let preventDrop = true;
          $INTEGRATION: (() => {
            if (window.__playwright_01) {
              preventDrop = false;
            }
          })();
          if (preventDrop) {
            event.preventDefault();
            if (event.dataTransfer) {
              event.dataTransfer.dropEffect = "none";
            }
          }
        },
        { signal: controller.signal }
      );
      return () => {
        controller.abort();
        safezones = [];
      };
    }, []);
  }
  function useDropzoneSafeArea() {
    const ref = A2(null);
    y2(() => {
      if (!ref.current) return;
      const evt = new CustomEvent(REGISTER_EVENT, { detail: { dropzone: ref.current } });
      window.dispatchEvent(evt);
      return () => {
        window.dispatchEvent(new CustomEvent(CLEAR_EVENT, { detail: { dropzone: ref.current } }));
      };
    }, []);
    return ref;
  }
  function isValidEvent(input) {
    return "detail" in input && input.detail.dropzone instanceof HTMLElement;
  }
  var REGISTER_EVENT, CLEAR_EVENT;
  var init_dropzone = __esm({
    "pages/new-tab/app/dropzone.js"() {
      "use strict";
      init_hooks_module();
      REGISTER_EVENT = "register-dropzone";
      CLEAR_EVENT = "clear-dropzone";
    }
  });

  // pages/new-tab/app/favorites/components/Tile.module.css
  var Tile_default;
  var init_Tile = __esm({
    "pages/new-tab/app/favorites/components/Tile.module.css"() {
      Tile_default = {
        item: "Tile_item",
        icon: "Tile_icon",
        pulse: "Tile_pulse",
        preview: "Tile_preview",
        draggable: "Tile_draggable",
        text: "Tile_text",
        placeholder: "Tile_placeholder",
        plus: "Tile_plus",
        dropper: "Tile_dropper"
      };
    }
  });

  // shared/components/FaviconWithState.module.css
  var FaviconWithState_default;
  var init_FaviconWithState = __esm({
    "shared/components/FaviconWithState.module.css"() {
      FaviconWithState_default = {
        favicon: "FaviconWithState_favicon",
        faviconLarge: "FaviconWithState_faviconLarge",
        faviconSmall: "FaviconWithState_faviconSmall",
        faviconText: "FaviconWithState_faviconText"
      };
    }
  });

  // shared/getColorForString.js
  function getArrayIndex(str, arrayLength) {
    const utf8Encoder = new TextEncoder();
    const bytes = utf8Encoder.encode(str);
    let hash = BigInt(5381);
    for (const byte of bytes) {
      hash = (hash << BigInt(5)) + hash + BigInt(byte);
      hash = BigInt.asIntN(64, hash);
    }
    const index2 = hash % BigInt(arrayLength);
    return Number(index2 < 0 ? -index2 : index2);
  }
  function urlToColor(url8) {
    if (typeof url8 !== "string") return null;
    if (urlToColorCache.has(url8)) {
      return urlToColorCache.get(url8);
    }
    const index2 = getArrayIndex(url8, EMPTY_FAVICON_TEXT_BACKGROUND_COLOR_BRUSHES.length);
    const color = EMPTY_FAVICON_TEXT_BACKGROUND_COLOR_BRUSHES[index2];
    urlToColorCache.set(url8, color);
    return color;
  }
  var EMPTY_FAVICON_TEXT_BACKGROUND_COLOR_BRUSHES, urlToColorCache;
  var init_getColorForString = __esm({
    "shared/getColorForString.js"() {
      "use strict";
      EMPTY_FAVICON_TEXT_BACKGROUND_COLOR_BRUSHES = [
        "#94B3AF",
        "#727998",
        "#645468",
        "#4D5F7F",
        "#855DB6",
        "#5E5ADB",
        "#678FFF",
        "#6BB4EF",
        "#4A9BAE",
        "#66C4C6",
        "#55D388",
        "#99DB7A",
        "#ECCC7B",
        "#E7A538",
        "#DD6B4C",
        "#D65D62"
      ];
      urlToColorCache = /* @__PURE__ */ new Map();
    }
  });

  // shared/components/FaviconWithState.js
  function FaviconWithState({ defaultSize = 64, fallback, fallbackDark, faviconSrc, faviconMax, etldPlusOne, theme, displayKind }) {
    const size = Math.min(faviconMax, defaultSize);
    const sizeClass = displayKind === "favorite-tile" ? FaviconWithState_default.faviconLarge : FaviconWithState_default.faviconSmall;
    const imgsrc = faviconSrc ? faviconSrc + "?preferredSize=" + size : null;
    const initialState2 = (() => {
      if (imgsrc) return states.loading_favicon_src;
      if (etldPlusOne) return states.using_fallback_text;
      return states.loading_fallback_img;
    })();
    const [state, setState] = d2(
      /** @type {ImgState} */
      initialState2
    );
    switch (state) {
      /**
       * These are the happy paths, where we are loading the favicon source and it does not 404
       */
      case states.loading_favicon_src:
      case states.did_load_favicon_src: {
        if (!imgsrc) {
          console.warn("unreachable - must have imgsrc here");
          return null;
        }
        return /* @__PURE__ */ _(
          "img",
          {
            src: imgsrc,
            class: (0, import_classnames2.default)(FaviconWithState_default.favicon, sizeClass),
            alt: "",
            "data-state": state,
            onLoad: () => setState(states.did_load_favicon_src),
            onError: () => {
              if (etldPlusOne) {
                setState(states.using_fallback_text);
              } else {
                setState(states.loading_fallback_img);
              }
            }
          }
        );
      }
      /**
       * A fallback can be applied when the `etldPlusOne` is there. For example,
       * if `etldPlusOne = 'example.com'`, we can display `Ex` and use the domain name
       * to select a background color.
       */
      case states.using_fallback_text: {
        if (!etldPlusOne) {
          console.warn("unreachable - must have etld+1 here");
          return null;
        }
        let style;
        const fallbackColor = urlToColor(etldPlusOne);
        if (fallbackColor) {
          style = { background: fallbackColor };
        }
        const chars = etldPlusOne.slice(0, 2);
        return /* @__PURE__ */ _("div", { class: (0, import_classnames2.default)(FaviconWithState_default.favicon, sizeClass, FaviconWithState_default.faviconText), style, "data-state": state }, /* @__PURE__ */ _("span", { "aria-hidden": true }, chars[0]), /* @__PURE__ */ _("span", { "aria-hidden": true }, chars[1]));
      }
      /**
       * If we get here, we couldn't load the favicon source OR the fallback text
       * So, we default to a globe icon
       */
      case states.loading_fallback_img:
      case states.did_load_fallback_img: {
        return /* @__PURE__ */ _(
          "img",
          {
            src: theme === "light" ? fallback : fallbackDark,
            class: (0, import_classnames2.default)(FaviconWithState_default.favicon, sizeClass),
            alt: "",
            "data-state": state,
            onLoad: () => setState(states.did_load_fallback_img),
            onError: () => setState(states.fallback_img_failed)
          }
        );
      }
      default:
        return null;
    }
  }
  var import_classnames2, states;
  var init_FaviconWithState2 = __esm({
    "shared/components/FaviconWithState.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      import_classnames2 = __toESM(require_classnames(), 1);
      init_FaviconWithState();
      init_getColorForString();
      states = /** @type {Record<ImgState, ImgState>} */
      {
        loading_favicon_src: "loading_favicon_src",
        did_load_favicon_src: "did_load_favicon_src",
        loading_fallback_img: "loading_fallback_img",
        did_load_fallback_img: "did_load_fallback_img",
        fallback_img_failed: "fallback_img_failed",
        using_fallback_text: "using_fallback_text"
      };
    }
  });

  // pages/new-tab/app/favorites/components/Tile.js
  function Placeholder() {
    const id = g2();
    const { state, ref } = useItemState(`PLACEHOLDER-URL-${id}`, `PLACEHOLDER-ID-${id}`, { kind: "target" });
    return /* @__PURE__ */ _("div", { class: Tile_default.item, ref, "data-edge": "closestEdge" in state && state.closestEdge }, /* @__PURE__ */ _("div", { class: (0, import_classnames3.default)(Tile_default.icon, Tile_default.placeholder) }, "\xA0"), state.type === "is-dragging-over" && state.closestEdge ? /* @__PURE__ */ _("div", { class: Tile_default.dropper, "data-edge": state.closestEdge }) : null);
  }
  function PlusIconWrapper({ onClick }) {
    const id = g2();
    const { t: t4 } = useTypedTranslationWith(
      /** @type {import('../strings.json')} */
      {}
    );
    const { state, ref } = useItemState(`PLACEHOLDER-URL-${id}`, `PLACEHOLDER-ID-${id}`, { kind: "target" });
    return /* @__PURE__ */ _("div", { class: Tile_default.item, ref, "data-edge": "closestEdge" in state && state.closestEdge }, /* @__PURE__ */ _("button", { class: (0, import_classnames3.default)(Tile_default.icon, Tile_default.plus, Tile_default.draggable), "aria-labelledby": id, onClick }, /* @__PURE__ */ _(PlusIcon, null)), /* @__PURE__ */ _("div", { class: Tile_default.text, id }, t4("favorites_add")), state.type === "is-dragging-over" && state.closestEdge ? /* @__PURE__ */ _("div", { class: Tile_default.dropper, "data-edge": state.closestEdge }) : null);
  }
  var import_classnames3, Tile, PlusIconMemo;
  var init_Tile2 = __esm({
    "pages/new-tab/app/favorites/components/Tile.js"() {
      "use strict";
      init_preact_module();
      import_classnames3 = __toESM(require_classnames(), 1);
      init_hooks_module();
      init_compat_module();
      init_Tile();
      init_constants();
      init_PragmaticDND();
      init_types();
      init_Icons2();
      init_FaviconWithState2();
      Tile = M2(
        /**
         * @param {object} props
         * @param {Favorite['url']} props.url
         * @param {Favorite['etldPlusOne']} props.etldPlusOne
         * @param {Favorite['id']} props.id
         * @param {Favorite['title']} props.title
         * @param {string|null|undefined} props.faviconSrc
         * @param {number|null|undefined} props.faviconMax
         * @param {Document['visibilityState']} props.visibility - whether this item is actually visible on screen, or not
         * @param {"dark"|"light"} props.theme
         * @param {number} props.index
         * @param {boolean} props.animateItems
         */
        function Tile2({ url: url8, etldPlusOne, faviconSrc, faviconMax, theme, index: index2, title, id, visibility, animateItems }) {
          const { state, ref } = useItemState(url8, id, {
            kind: "draggable",
            class: Tile_default.preview,
            theme
          });
          const tileId = g2();
          return /* @__PURE__ */ _(
            "a",
            {
              class: Tile_default.item,
              tabindex: 0,
              href: url8,
              "data-id": id,
              "data-index": index2,
              "data-edge": "closestEdge" in state && state.closestEdge,
              "aria-labelledby": tileId,
              style: animateItems ? { viewTransitionName: `Tile-${id}` } : void 0,
              ref
            },
            /* @__PURE__ */ _("div", { class: (0, import_classnames3.default)(Tile_default.icon, Tile_default.draggable) }, visibility === "visible" && /* @__PURE__ */ _(
              FaviconWithState,
              {
                faviconSrc,
                faviconMax: faviconMax || DDG_DEFAULT_ICON_SIZE,
                theme,
                etldPlusOne,
                displayKind: "favorite-tile",
                fallback: DDG_FALLBACK_ICON,
                fallbackDark: DDG_FALLBACK_ICON_DARK
              }
            )),
            /* @__PURE__ */ _("div", { class: Tile_default.text, id: tileId }, title),
            state.type === "is-dragging-over" && state.closestEdge ? /* @__PURE__ */ _("div", { class: Tile_default.dropper, "data-edge": state.closestEdge }) : null
          );
        }
      );
      PlusIconMemo = M2(PlusIconWrapper);
    }
  });

  // pages/new-tab/app/favorites/components/TileRow.js
  var TileRow;
  var init_TileRow = __esm({
    "pages/new-tab/app/favorites/components/TileRow.js"() {
      "use strict";
      init_Favorites();
      init_Tile2();
      init_preact_module();
      init_compat_module();
      init_Favorites2();
      init_hooks_module();
      init_FavoritesProvider();
      TileRow = M2(
        /**
         * Represents a row of tiles with optional placeholders to fill empty spaces in the first row.
         * @param {object} props - An object containing parameters for the TileRow_ function.
         * @param {number} props.topOffset - The top offset position of the row (relative to the container)
         * @param {Favorite[]} props.items - An array of favorites to be displayed as tiles in the row.
         * @param {Document['visibilityState']} props.visibility - whether this item is actually visible
         * @param {() => void} props.add - A function to be called when a new item is added to the row.
         */
        function TileRow2({ topOffset, items, add: add2, visibility }) {
          const fillers = ROW_CAPACITY - items.length;
          const { theme, animateItems } = x2(FavoritesThemeContext);
          const count = useFaviconRefreshedCount();
          return /* @__PURE__ */ _("ul", { className: Favorites_default.gridRow, style: { transform: `translateY(${topOffset}px)` } }, items.map((item, index2) => {
            return /* @__PURE__ */ _(
              Tile,
              {
                url: item.url,
                etldPlusOne: item.etldPlusOne,
                faviconSrc: item.favicon?.src,
                faviconMax: item.favicon?.maxAvailableSize,
                title: item.title,
                key: item.id + item.favicon?.src + item.favicon?.maxAvailableSize + visibility + count.value,
                id: item.id,
                index: index2,
                visibility,
                theme,
                animateItems: animateItems.value
              }
            );
          }), fillers > 0 && Array.from({ length: fillers }).map((_5, fillerIndex) => {
            if (fillerIndex === 0) {
              return /* @__PURE__ */ _(PlusIconMemo, { key: `placeholder-plus-${items.length}`, onClick: add2 });
            }
            return /* @__PURE__ */ _(Placeholder, { key: `placeholder-${items.length}` });
          }));
        }
      );
    }
  });

  // pages/new-tab/app/components/BackgroundReceiver.module.css
  var BackgroundReceiver_default;
  var init_BackgroundReceiver = __esm({
    "pages/new-tab/app/components/BackgroundReceiver.module.css"() {
      BackgroundReceiver_default = {
        root: "BackgroundReceiver_root",
        "fade-in": "BackgroundReceiver_fade-in"
      };
    }
  });

  // pages/new-tab/app/customizer/values.js
  var values;
  var init_values = __esm({
    "pages/new-tab/app/customizer/values.js"() {
      "use strict";
      values = {
        colors: {
          color01: { hex: "#000000", colorScheme: "dark" },
          color02: { hex: "#342e42", colorScheme: "dark" },
          color03: { hex: "#4d5f7f", colorScheme: "dark" },
          color04: { hex: "#9a979d", colorScheme: "dark" },
          color05: { hex: "#dbdddf", colorScheme: "light" },
          color06: { hex: "#577de4", colorScheme: "dark" },
          color07: { hex: "#75b9f0", colorScheme: "light" },
          color08: { hex: "#5552ac", colorScheme: "dark" },
          color09: { hex: "#b79ed4", colorScheme: "light" },
          color10: { hex: "#e4def2", colorScheme: "light" },
          color11: { hex: "#b5e2ce", colorScheme: "light" },
          color12: { hex: "#5bc787", colorScheme: "light" },
          color13: { hex: "#4594a7", colorScheme: "dark" },
          color14: { hex: "#e9dccd", colorScheme: "light" },
          color15: { hex: "#f3bb44", colorScheme: "light" },
          color16: { hex: "#e5724f", colorScheme: "light" },
          color17: { hex: "#d55154", colorScheme: "dark" },
          color18: { hex: "#f7dee5", colorScheme: "light" },
          color19: { hex: "#e28499", colorScheme: "light" }
        },
        gradients: {
          gradient01: { path: "gradients/gradient01.svg", fallback: "#f2e5d4", colorScheme: "light" },
          gradient02: { path: "gradients/gradient02.svg", fallback: "#d5bcd1", colorScheme: "light" },
          /**
           * Note: the following name `gradient02.01` is used to allow migration for existing macOS users.
           * When switching to the web-based NTP, we introduced an eight gradient to round-out the columns, but
           * the colors in the gradient meant it needed to be wedged in between 02 and 03.
           */
          "gradient02.01": { path: "gradients/gradient02.01.svg", fallback: "#f4ca78", colorScheme: "light" },
          gradient03: { path: "gradients/gradient03.svg", fallback: "#e6a356", colorScheme: "light" },
          gradient04: { path: "gradients/gradient04.svg", fallback: "#4448ae", colorScheme: "dark" },
          gradient05: { path: "gradients/gradient05.svg", fallback: "#a55778", colorScheme: "dark" },
          gradient06: { path: "gradients/gradient06.svg", fallback: "#222566", colorScheme: "dark" },
          gradient07: { path: "gradients/gradient07.svg", fallback: "#0e0e3d", colorScheme: "dark" }
        },
        userImages: {
          "01": {
            colorScheme: "dark",
            id: "01",
            src: "backgrounds/bg-01.jpg",
            thumb: "backgrounds/bg-01-thumb.jpg"
          },
          "02": {
            colorScheme: "light",
            id: "02",
            src: "backgrounds/bg-02.jpg",
            thumb: "backgrounds/bg-02-thumb.jpg"
          },
          "03": {
            colorScheme: "light",
            id: "03",
            src: "backgrounds/bg-03.jpg",
            thumb: "backgrounds/bg-03-thumb.jpg"
          }
        }
      };
    }
  });

  // pages/new-tab/app/customizer/utils.js
  function detectThemeFromHex(backgroundColor) {
    const hex = backgroundColor.replace("#", "");
    const r4 = parseInt(hex.slice(0, 2), 16);
    const g6 = parseInt(hex.slice(2, 4), 16);
    const b4 = parseInt(hex.slice(4, 6), 16);
    const luminance = 0.2126 * r4 + 0.7152 * g6 + 0.0722 * b4;
    return luminance < 128 ? "dark" : "light";
  }
  function applyDefaultStyles(defaultStyles) {
    if (defaultStyles?.lightBackgroundColor) {
      document.body.style.setProperty("--default-light-background-color", defaultStyles.lightBackgroundColor);
    }
    if (defaultStyles?.darkBackgroundColor) {
      document.body.style.setProperty("--default-dark-background-color", defaultStyles.darkBackgroundColor);
    }
  }
  var init_utils = __esm({
    "pages/new-tab/app/customizer/utils.js"() {
      "use strict";
    }
  });

  // pages/new-tab/app/components/BackgroundProvider.js
  function inferSchemeFrom(background, browserTheme, system) {
    const browser = themeFromBrowser(browserTheme, system);
    switch (background.kind) {
      case "default":
        return { bg: browser, browser };
      case "color": {
        const color = values.colors[background.value];
        return { bg: color.colorScheme, browser };
      }
      case "gradient": {
        const gradient = values.gradients[background.value];
        return { bg: gradient.colorScheme, browser };
      }
      case "userImage":
        return { bg: background.value.colorScheme, browser };
      case "hex":
        return { bg: detectThemeFromHex(background.value), browser };
    }
  }
  function themeFromBrowser(browserTheme, system) {
    if (browserTheme === "system") {
      return system;
    }
    return browserTheme;
  }
  function BackgroundConsumer({ browser }) {
    const { data: data2 } = x2(CustomizerContext);
    const background = data2.value.background;
    useSignalEffect(() => {
      const background2 = data2.value.background;
      document.body.dataset.backgroundKind = background2.kind;
      let nextBodyBackground = "";
      if (background2.kind === "gradient") {
        const gradient = values.gradients[background2.value];
        nextBodyBackground = gradient.fallback;
      }
      if (background2.kind === "color") {
        const color = values.colors[background2.value];
        nextBodyBackground = color.hex;
      }
      if (background2.kind === "hex") {
        nextBodyBackground = background2.value;
      }
      if (background2.kind === "userImage") {
        const isDark = background2.value.colorScheme === "dark";
        nextBodyBackground = isDark ? "var(--default-dark-background-color)" : "var(--default-light-background-color)";
      }
      if (background2.kind === "default") {
        nextBodyBackground = browser.value === "dark" ? "var(--default-dark-background-color)" : "var(--default-light-background-color)";
      }
      document.body.style.setProperty("background-color", nextBodyBackground);
      if (!document.body.dataset.animateBackground) {
        requestAnimationFrame(() => {
          document.body.dataset.animateBackground = "true";
        });
      }
    });
    switch (background.kind) {
      case "color":
      case "default":
      case "hex": {
        return null;
      }
      case "userImage": {
        const img = background.value;
        return /* @__PURE__ */ _(ImageCrossFade, { src: img.src });
      }
      case "gradient": {
        const gradient = values.gradients[background.value];
        return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _(ImageCrossFade, { src: gradient.path }), /* @__PURE__ */ _(
          "div",
          {
            className: BackgroundReceiver_default.root,
            style: {
              backgroundImage: `url(gradients/grain.png)`,
              backgroundRepeat: "repeat",
              opacity: 0.5,
              mixBlendMode: "soft-light"
            }
          }
        ));
      }
      default: {
        console.warn("Unreachable!");
        return null;
      }
    }
  }
  function ImageCrossFade_({ src }) {
    const [state, setState] = d2({
      /** @type {ImgState} */
      value: states2.idle,
      current: src,
      next: src
    });
    y2(() => {
      let img = new Image();
      let cancelled = false;
      setState((prev) => {
        const nextState = prev.value === states2.idle ? states2.loadingFirst : states2.loading;
        return { ...prev, value: nextState };
      });
      let handler = () => {
        if (cancelled) return;
        setState((prev) => {
          if (prev.value === states2.loading) {
            return { ...prev, value: states2.fading, next: src };
          }
          return prev;
        });
      };
      img.addEventListener("load", handler);
      img.src = src;
      return () => {
        cancelled = true;
        if (img && handler) {
          img.removeEventListener("load", handler);
          img = void 0;
          handler = void 0;
        }
      };
    }, [src]);
    switch (state.value) {
      case states2.settled:
      case states2.loadingFirst:
        return /* @__PURE__ */ _("img", { class: BackgroundReceiver_default.root, "data-state": state.value, src: state.current, alt: "" });
      case states2.loading:
      case states2.fading:
        return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("img", { class: BackgroundReceiver_default.root, "data-state": state.value, src: state.current, alt: "" }), /* @__PURE__ */ _(
          "img",
          {
            class: BackgroundReceiver_default.root,
            "data-state": state.value,
            src: state.next,
            onLoad: (e4) => {
              const elem2 = (
                /** @type {HTMLImageElement} */
                e4.target
              );
              elem2.style.opacity = "0";
              const anim = elem2.animate([{ opacity: "0" }, { opacity: "1" }], {
                duration: 250,
                iterations: 1,
                fill: "both"
              });
              anim.onfinish = () => {
                setState((prev) => {
                  return { ...prev, value: states2.settled, current: prev.next, next: prev.next };
                });
              };
            }
          }
        ));
      default:
        return null;
    }
  }
  var states2, ImageCrossFade;
  var init_BackgroundProvider = __esm({
    "pages/new-tab/app/components/BackgroundProvider.js"() {
      "use strict";
      init_preact_module();
      init_BackgroundReceiver();
      init_values();
      init_hooks_module();
      init_CustomizerProvider();
      init_utils();
      init_signals_module();
      init_compat_module();
      states2 = {
        idle: "idle",
        loadingFirst: "loadingFirst",
        loading: "loading",
        fading: "fading",
        settled: "settled"
      };
      ImageCrossFade = M2(ImageCrossFade_);
    }
  });

  // pages/new-tab/app/customizer/themes.js
  function useThemes(data2) {
    const mq = useSignal(mediaQueryList.matches ? "dark" : "light");
    useSignalEffect(() => {
      const listener = (e4) => {
        mq.value = e4.matches ? "dark" : "light";
      };
      mediaQueryList.addEventListener("change", listener);
      return () => mediaQueryList.removeEventListener("change", listener);
    });
    const main = useComputed(() => {
      return inferSchemeFrom(data2.value.background, data2.value.theme, mq.value).bg;
    });
    const browser = useComputed(() => {
      return themeFromBrowser(data2.value.theme, mq.value);
    });
    return { main, browser };
  }
  var THEME_QUERY2, mediaQueryList;
  var init_themes = __esm({
    "pages/new-tab/app/customizer/themes.js"() {
      "use strict";
      init_signals_module();
      init_BackgroundProvider();
      THEME_QUERY2 = "(prefers-color-scheme: dark)";
      mediaQueryList = window.matchMedia(THEME_QUERY2);
    }
  });

  // pages/new-tab/app/customizer/CustomizerProvider.js
  function CustomizerProvider({ service, initialData, children }) {
    const data2 = useSignal(initialData);
    const { main, browser } = useThemes(data2);
    useSignalEffect(() => {
      const unsub = service.onBackground((evt) => {
        data2.value = { ...data2.value, background: evt.data.background };
      });
      const unsub1 = service.onTheme((evt) => {
        data2.value = { ...data2.value, theme: evt.data.theme };
      });
      const unsub2 = service.onImages((evt) => {
        data2.value = { ...data2.value, userImages: evt.data.userImages };
      });
      const unsub3 = service.onColor((evt) => {
        data2.value = { ...data2.value, userColor: evt.data.userColor };
      });
      return () => {
        unsub();
        unsub1();
        unsub2();
        unsub3();
      };
    });
    useSignalEffect(() => {
      const unsub = service.onTheme((evt) => {
        if (evt.source === "subscription") {
          applyDefaultStyles(evt.data.defaultStyles);
        }
      });
      return () => {
        unsub();
      };
    });
    const select = q2(
      (bg) => {
        service.setBackground(bg);
      },
      [service]
    );
    const upload = q2(() => {
      service.upload();
    }, [service]);
    const setTheme = q2(
      (theme) => {
        service.setTheme(theme);
      },
      [service]
    );
    const deleteImage = q2(
      (id) => {
        service.deleteImage(id);
      },
      [service]
    );
    const customizerContextMenu = q2((params) => service.contextMenu(params), [service]);
    return /* @__PURE__ */ _(CustomizerContext.Provider, { value: { data: data2, select, upload, setTheme, deleteImage, customizerContextMenu } }, /* @__PURE__ */ _(CustomizerThemesContext.Provider, { value: { main, browser } }, children));
  }
  var CustomizerThemesContext, CustomizerContext;
  var init_CustomizerProvider = __esm({
    "pages/new-tab/app/customizer/CustomizerProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_signals_module();
      init_themes();
      init_utils();
      CustomizerThemesContext = K({
        /** @type {import("@preact/signals").Signal<'light' | 'dark'>} */
        main: d3("light"),
        /** @type {import("@preact/signals").Signal<'light' | 'dark'>} */
        browser: d3("light")
      });
      CustomizerContext = K({
        /** @type {import("@preact/signals").Signal<CustomizerData>} */
        data: d3({
          background: { kind: "default" },
          userImages: [],
          userColor: null,
          theme: "system"
        }),
        /** @type {(bg: BackgroundData) => void} */
        select: (_5) => {
        },
        upload: () => {
        },
        /**
         * @type {(theme: ThemeData) => void}
         */
        setTheme: (_5) => {
        },
        /**
         * @type {(id: string) => void}
         */
        deleteImage: (_5) => {
        },
        /**
         * @param {UserImageContextMenu} _params
         */
        customizerContextMenu: (_params) => {
        }
      });
    }
  });

  // pages/new-tab/app/utils.js
  function viewTransition(fn2) {
    if ("startViewTransition" in document && typeof document.startViewTransition === "function") {
      return document.startViewTransition(fn2);
    }
    return fn2();
  }
  function noop(named) {
    return () => {
      console.log(named, "noop");
    };
  }
  function eventToTarget(event, platformName) {
    const isControlClick = platformName === "macos" ? event.metaKey : event.ctrlKey;
    if (isControlClick) {
      return "new-tab";
    } else if (event.shiftKey) {
      return "new-window";
    } else if (event.button === 1) {
      return "new-tab";
    }
    return "same-tab";
  }
  function useOnMiddleClick(ref, handler) {
    y2(() => {
      const element = ref.current;
      if (!element) return;
      const handleAuxClick = (event) => event.button === 1 && handler(event);
      element.addEventListener("auxclick", handleAuxClick);
      return () => {
        element.removeEventListener("auxclick", handleAuxClick);
      };
    }, [ref, handler]);
  }
  var init_utils2 = __esm({
    "pages/new-tab/app/utils.js"() {
      "use strict";
      init_hooks_module();
    }
  });

  // shared/components/DocumentVisibility.js
  function DocumentVisibilityProvider({ children }) {
    const initial = document.visibilityState;
    const [documentVisibility, setDocumentVisibility] = d2(initial);
    y2(() => {
      const handleVisibilityChange = () => {
        setDocumentVisibility(document.visibilityState);
      };
      document.addEventListener("visibilitychange", handleVisibilityChange);
      return () => {
        document.removeEventListener("visibilitychange", handleVisibilityChange);
      };
    }, []);
    return /* @__PURE__ */ _(DocumentVisibilityContext.Provider, { value: documentVisibility }, children);
  }
  function useDocumentVisibility() {
    return x2(DocumentVisibilityContext);
  }
  var DocumentVisibilityContext;
  var init_DocumentVisibility = __esm({
    "shared/components/DocumentVisibility.js"() {
      "use strict";
      init_hooks_module();
      init_preact_module();
      DocumentVisibilityContext = K(
        /** @type {DocumentVisibilityState} */
        "hidden"
      );
    }
  });

  // pages/new-tab/app/favorites/components/Favorites.js
  function Favorites({ favorites: favorites2, expansion, toggle, openContextMenu, openFavorite, add: add2, canAnimateItems }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {import('../strings.json')} */
      {}
    );
    const WIDGET_ID = g2();
    const TOGGLE_ID = g2();
    const hiddenCount = expansion === "collapsed" ? favorites2.length - ROW_CAPACITY : 0;
    const rowHeight = ITEM_HEIGHT + ROW_GAP;
    const canToggleExpansion = favorites2.length >= ROW_CAPACITY;
    const { data: data2 } = x2(CustomizerContext);
    const { main } = x2(CustomizerThemesContext);
    const kind = useComputed(() => data2.value.background.kind);
    const animateItems = useComputed(() => {
      return canAnimateItems && kind.value !== "userImage";
    });
    return /* @__PURE__ */ _(FavoritesThemeContext.Provider, { value: { theme: main.value, animateItems } }, /* @__PURE__ */ _("div", { class: Favorites_default.root, "data-testid": "FavoritesConfigured", "data-background-kind": kind }, /* @__PURE__ */ _(
      VirtualizedGridRows,
      {
        WIDGET_ID,
        favorites: favorites2,
        rowHeight,
        add: add2,
        expansion,
        openFavorite,
        openContextMenu
      }
    ), canToggleExpansion && /* @__PURE__ */ _(ShowHideBar, null, /* @__PURE__ */ _(
      ShowHideButtonPill,
      {
        buttonAttrs: {
          "aria-expanded": expansion === "expanded",
          "aria-pressed": expansion === "expanded",
          "aria-controls": WIDGET_ID,
          id: TOGGLE_ID
        },
        text: expansion === "expanded" ? t4("ntp_show_less") : t4("ntp_show_more"),
        label: expansion === "expanded" ? t4("favorites_show_less") : t4("favorites_show_more", { count: String(hiddenCount) }),
        onClick: toggle
      }
    ))));
  }
  function VirtualizedGridRows({ WIDGET_ID, rowHeight, favorites: favorites2, expansion, openFavorite, openContextMenu, add: add2 }) {
    const platformName = usePlatformName();
    const visibility = useDocumentVisibility();
    const rows = T2(() => {
      const chunked = [];
      let inner = [];
      for (let i5 = 0; i5 < favorites2.length; i5++) {
        inner.push(favorites2[i5]);
        if (inner.length === ROW_CAPACITY) {
          chunked.push(inner.slice());
          inner = [];
        }
        if (i5 === favorites2.length - 1) {
          chunked.push(inner.slice());
          inner = [];
        }
      }
      return chunked;
    }, [favorites2]);
    const safeAreaRef = (
      /** @type {import("preact").RefObject<HTMLDivElement>} */
      useDropzoneSafeArea()
    );
    const containerHeight = expansion === "collapsed" || rows.length === 0 ? rowHeight : rows.length * rowHeight;
    const clickHandler = getOnClickHandler(openFavorite, platformName);
    useOnMiddleClick(safeAreaRef, clickHandler);
    return /* @__PURE__ */ _(
      "div",
      {
        className: Favorites_default.grid,
        style: { height: containerHeight + "px" },
        id: WIDGET_ID,
        ref: safeAreaRef,
        onContextMenu: getContextMenuHandler(openContextMenu),
        onClick: clickHandler
      },
      rows.length === 0 && /* @__PURE__ */ _(TileRow, { key: "empty-rows", items: [], topOffset: 0, add: add2, visibility: "visible" }),
      rows.length > 0 && /* @__PURE__ */ _(Inner, { rows, safeAreaRef, rowHeight, add: add2, visibility })
    );
  }
  function Inner({ rows, safeAreaRef, rowHeight, add: add2, visibility }) {
    const { onConfigChanged, state } = x2(FavoritesContext);
    const [expansion, setExpansion] = d2(state.config?.expansion || "collapsed");
    const { start: start2, end } = useVisibleRows(rows, rowHeight, safeAreaRef, expansion);
    y2(() => {
      return onConfigChanged((config) => {
        if (config.expansion === "expanded") {
          setTimeout(() => {
            setExpansion(config.expansion);
          }, 0);
        } else {
          setExpansion(config.expansion);
        }
      });
    }, [onConfigChanged]);
    const subsetOfRowsToRender = expansion === "collapsed" ? [rows[0]] : rows.slice(start2, end + 1);
    return /* @__PURE__ */ _(k, null, subsetOfRowsToRender.map((items, rowIndex) => {
      const topOffset = expansion === "expanded" ? (start2 + rowIndex) * rowHeight : 0;
      const keyed = `-${start2 + rowIndex}-`;
      return /* @__PURE__ */ _(TileRow, { key: keyed, items, topOffset, add: add2, visibility });
    }));
  }
  function useVisibleRows(rows, rowHeight, safeAreaRef, expansion) {
    const [{ start: start2, end }, setVisibleRange] = d2({ start: 0, end: 1 });
    const gridOffsetRef = A2(0);
    const mainScrollerRef = A2(
      /** @type {Element|null} */
      null
    );
    const contentTubeRef = A2(
      /** @type {Element|null} */
      null
    );
    function updateGlobals() {
      if (!safeAreaRef.current) return;
      const rec = safeAreaRef.current.getBoundingClientRect();
      gridOffsetRef.current = rec.y + mainScrollerRef.current?.scrollTop;
    }
    function setVisibleRowsForOffset(rowCount) {
      if (!safeAreaRef.current) return console.warn("cannot access ref");
      const scrollY = mainScrollerRef.current?.scrollTop ?? 0;
      const offset = gridOffsetRef.current;
      const end2 = scrollY + window.innerHeight - offset;
      let start3;
      if (offset > scrollY) {
        start3 = 0;
      } else {
        start3 = scrollY - offset;
      }
      const startIndex = Math.floor(start3 / rowHeight);
      const endIndex = Math.min(Math.ceil(end2 / rowHeight), rowCount);
      setVisibleRange((prev) => {
        if (startIndex !== prev.start || endIndex !== prev.end) {
          return { start: startIndex, end: endIndex };
        }
        return prev;
      });
    }
    _2(() => {
      if (expansion === "collapsed") return;
      mainScrollerRef.current = document.querySelector("[data-main-scroller]") || document.documentElement;
      contentTubeRef.current = document.querySelector("[data-content-tube]") || document.body;
      if (!contentTubeRef.current || !mainScrollerRef.current) console.warn("missing elements");
      updateGlobals();
      setVisibleRowsForOffset(rows.length);
      const controller = new AbortController();
      mainScrollerRef.current?.addEventListener(
        "scroll",
        () => {
          setVisibleRowsForOffset(rows.length);
        },
        { signal: controller.signal }
      );
      return () => {
        controller.abort();
      };
    }, [rows.length, expansion]);
    y2(() => {
      let lastWindowHeight = window.innerHeight;
      function handler() {
        if (lastWindowHeight === window.innerHeight) return;
        lastWindowHeight = window.innerHeight;
        updateGlobals();
        setVisibleRowsForOffset(rows.length);
      }
      window.addEventListener("resize", handler);
      return () => {
        return window.removeEventListener("resize", handler);
      };
    }, [rows.length]);
    y2(() => {
      if (!contentTubeRef.current) return;
      let lastHeight;
      let debounceTimer;
      const resizer = new ResizeObserver((entries4) => {
        const first = entries4[0];
        if (!first || !first.contentRect) return;
        if (first.contentRect.height !== lastHeight) {
          lastHeight = first.contentRect.height;
          clearTimeout(debounceTimer);
          debounceTimer = setTimeout(() => {
            updateGlobals();
            setVisibleRowsForOffset(rows.length);
          }, 50);
        }
      });
      resizer.observe(contentTubeRef.current);
      return () => {
        resizer.disconnect();
        clearTimeout(debounceTimer);
      };
    }, [rows.length]);
    return { start: start2, end };
  }
  function getContextMenuHandler(openContextMenu) {
    return (event) => {
      let target = (
        /** @type {HTMLElement|null} */
        event.target
      );
      while (target && target !== event.currentTarget) {
        if (typeof target.dataset.id === "string" && "href" in target && typeof target.href === "string") {
          event.preventDefault();
          event.stopImmediatePropagation();
          return openContextMenu(target.dataset.id);
        } else {
          target = target.parentElement;
        }
      }
    };
  }
  function getOnClickHandler(openFavorite, platformName) {
    return (event) => {
      const target = (
        /** @type {HTMLElement|null} */
        event.target
      );
      if (!target) return;
      const anchor = (
        /** @type {HTMLAnchorElement|null} */
        target.closest("a[href][data-id]")
      );
      if (anchor && anchor.dataset.id) {
        event.preventDefault();
        event.stopImmediatePropagation();
        const openTarget = eventToTarget(event, platformName);
        return openFavorite(anchor.dataset.id, anchor.href, openTarget);
      }
    };
  }
  var FavoritesMemo, ROW_CAPACITY, ITEM_HEIGHT, ROW_GAP, FavoritesThemeContext;
  var init_Favorites2 = __esm({
    "pages/new-tab/app/favorites/components/Favorites.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_compat_module();
      init_Favorites();
      init_ShowHideButton();
      init_types();
      init_settings_provider();
      init_dropzone();
      init_TileRow();
      init_FavoritesProvider();
      init_CustomizerProvider();
      init_signals_module();
      init_utils2();
      init_DocumentVisibility();
      FavoritesMemo = M2(Favorites);
      ROW_CAPACITY = 6;
      ITEM_HEIGHT = 96;
      ROW_GAP = 8;
      FavoritesThemeContext = K({
        theme: (
          /** @type {"light"|"dark"} */
          "light"
        ),
        animateItems: d3(false)
      });
    }
  });

  // pages/new-tab/app/favorites/components/FavoritesCustomized.js
  function FavoritesConsumer() {
    const { state, toggle, favoritesDidReOrder, openContextMenu, openFavorite, add: add2 } = x2(FavoritesContext);
    const telemetry2 = useTelemetry();
    const { data: backgroundData } = x2(CustomizerContext);
    function didReorder(data2) {
      const background = backgroundData.value.background;
      const supportsViewTransitions = state.config?.animation?.kind === "view-transitions" && background.kind !== "userImage";
      if (supportsViewTransitions) {
        viewTransition(() => {
          favoritesDidReOrder(data2);
        });
      } else {
        favoritesDidReOrder(data2);
      }
    }
    if (state.status === "ready") {
      telemetry2.measureFromPageLoad("favorites-will-render", "time to favorites");
      return /* @__PURE__ */ _(PragmaticDND, { items: state.data.favorites, itemsDidReOrder: didReorder }, /* @__PURE__ */ _(
        FavoritesMemo,
        {
          favorites: state.data.favorites,
          expansion: state.config.expansion,
          canAnimateItems: state.config?.animation?.kind === "view-transitions",
          openContextMenu,
          openFavorite,
          add: add2,
          toggle
        }
      ));
    }
    return null;
  }
  function FavoritesCustomized() {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {import("../strings.json")} */
      {}
    );
    const { id, visibility, toggle, index: index2 } = useVisibility();
    const title = t4("favorites_menu_title");
    useCustomizer({ title, id, icon: /* @__PURE__ */ _(Shield, null), toggle, visibility: visibility.value, index: index2, enabled: true });
    if (visibility.value === "hidden") {
      return null;
    }
    return /* @__PURE__ */ _(FavoritesProvider, null, /* @__PURE__ */ _(FavoritesConsumer, null));
  }
  var init_FavoritesCustomized = __esm({
    "pages/new-tab/app/favorites/components/FavoritesCustomized.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_types();
      init_widget_config_provider();
      init_CustomizerMenu();
      init_FavoritesProvider();
      init_PragmaticDND();
      init_Favorites2();
      init_utils2();
      init_CustomizerProvider();
      init_Icons2();
    }
  });

  // pages/new-tab/app/entry-points/favorites.js
  var favorites_exports = {};
  __export(favorites_exports, {
    factory: () => factory2
  });
  function factory2() {
    return /* @__PURE__ */ _(Centered, { "data-entry-point": "favorites" }, /* @__PURE__ */ _(FavoritesCustomized, null));
  }
  var init_favorites = __esm({
    "pages/new-tab/app/entry-points/favorites.js"() {
      "use strict";
      init_preact_module();
      init_Layout();
      init_FavoritesCustomized();
    }
  });

  // shared/components/Button/Button.module.css
  var Button_default;
  var init_Button = __esm({
    "shared/components/Button/Button.module.css"() {
      Button_default = {
        button: "Button_button",
        lg: "Button_lg",
        xl: "Button_xl",
        standard: "Button_standard",
        accent: "Button_accent",
        accentBrand: "Button_accentBrand",
        primary: "Button_primary",
        ghost: "Button_ghost"
      };
    }
  });

  // shared/components/Button/Button.js
  function Button({ variant, size = "md", className, children, onClick, type = "button" }) {
    return /* @__PURE__ */ _(
      "button",
      {
        className: (0, import_classnames4.default)(Button_default.button, { [Button_default[`${variant}`]]: !!variant, [Button_default[size]]: size }, className),
        type,
        onClick: (
          /**
           * @param {import("preact").JSX.TargetedMouseEvent<EventTarget>} event
           */
          (event) => {
            if (onClick) {
              onClick(event);
            }
          }
        )
      },
      children
    );
  }
  var import_classnames4;
  var init_Button2 = __esm({
    "shared/components/Button/Button.js"() {
      "use strict";
      init_preact_module();
      import_classnames4 = __toESM(require_classnames(), 1);
      init_Button();
    }
  });

  // pages/new-tab/app/components/DismissButton.module.css
  var DismissButton_default;
  var init_DismissButton = __esm({
    "pages/new-tab/app/components/DismissButton.module.css"() {
      DismissButton_default = {
        btn: "DismissButton_btn"
      };
    }
  });

  // pages/new-tab/app/components/DismissButton.jsx
  function DismissButton({ className, onClick, buttonProps = {} }) {
    const { t: t4 } = useTypedTranslation();
    return /* @__PURE__ */ _("button", { class: (0, import_classnames5.default)(DismissButton_default.btn, className), onClick, "aria-label": t4("ntp_dismiss"), "data-testid": "dismissBtn", ...buttonProps }, /* @__PURE__ */ _(Cross, null));
  }
  var import_classnames5;
  var init_DismissButton2 = __esm({
    "pages/new-tab/app/components/DismissButton.jsx"() {
      "use strict";
      init_preact_module();
      import_classnames5 = __toESM(require_classnames(), 1);
      init_Icons2();
      init_types();
      init_DismissButton();
    }
  });

  // pages/new-tab/app/freemium-pir-banner/components/FreemiumPIRBanner.module.css
  var FreemiumPIRBanner_default;
  var init_FreemiumPIRBanner = __esm({
    "pages/new-tab/app/freemium-pir-banner/components/FreemiumPIRBanner.module.css"() {
      FreemiumPIRBanner_default = {
        root: "FreemiumPIRBanner_root",
        icon: "FreemiumPIRBanner_icon",
        "animate-fade": "FreemiumPIRBanner_animate-fade",
        iconBlock: "FreemiumPIRBanner_iconBlock",
        content: "FreemiumPIRBanner_content",
        title: "FreemiumPIRBanner_title",
        description: "FreemiumPIRBanner_description",
        btnBlock: "FreemiumPIRBanner_btnBlock",
        btnRow: "FreemiumPIRBanner_btnRow",
        dismissBtn: "FreemiumPIRBanner_dismissBtn"
      };
    }
  });

  // pages/new-tab/app/freemium-pir-banner/freemiumPIRBanner.service.js
  var FreemiumPIRBannerService;
  var init_freemiumPIRBanner_service = __esm({
    "pages/new-tab/app/freemium-pir-banner/freemiumPIRBanner.service.js"() {
      "use strict";
      init_service();
      FreemiumPIRBannerService = class {
        /**
         * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
         * @internal
         */
        constructor(ntp) {
          this.ntp = ntp;
          this.dataService = new Service({
            initial: () => ntp.messaging.request("freemiumPIRBanner_getData"),
            subscribe: (cb) => ntp.messaging.subscribe("freemiumPIRBanner_onDataUpdate", cb)
          });
        }
        name() {
          return "FreemiumPIRBannerService";
        }
        /**
         * @returns {Promise<FreemiumPIRBannerData>}
         * @internal
         */
        async getInitial() {
          return await this.dataService.fetchInitial();
        }
        /**
         * @internal
         */
        destroy() {
          this.dataService.destroy();
        }
        /**
         * @param {(evt: {data: FreemiumPIRBannerData, source: 'manual' | 'subscription'}) => void} cb
         * @internal
         */
        onData(cb) {
          return this.dataService.onData(cb);
        }
        /**
         * @param {string} id
         * @internal
         */
        dismiss(id) {
          return this.ntp.messaging.notify("freemiumPIRBanner_dismiss", { id });
        }
        /**
         * @param {string} id
         */
        action(id) {
          this.ntp.messaging.notify("freemiumPIRBanner_action", { id });
        }
      };
    }
  });

  // pages/new-tab/app/freemium-pir-banner/FreemiumPIRBannerProvider.js
  function FreemiumPIRBannerProvider(props) {
    const initial = (
      /** @type {State} */
      {
        status: "idle",
        data: null,
        config: null
      }
    );
    const [state, dispatch] = h2(reducer, initial);
    const service = useService2();
    useInitialData({ dispatch, service });
    useDataSubscription({ dispatch, service });
    const dismiss = q2(
      (id) => {
        console.log("onDismiss");
        service.current?.dismiss(id);
      },
      [service]
    );
    const action = q2(
      (id) => {
        service.current?.action(id);
      },
      [service]
    );
    return /* @__PURE__ */ _(FreemiumPIRBannerContext.Provider, { value: { state, dismiss, action } }, /* @__PURE__ */ _(FreemiumPIRBannerDispatchContext.Provider, { value: dispatch }, props.children));
  }
  function useService2() {
    const service = A2(
      /** @type {FreemiumPIRBannerService|null} */
      null
    );
    const ntp = useMessaging();
    y2(() => {
      const stats = new FreemiumPIRBannerService(ntp);
      service.current = stats;
      return () => {
        stats.destroy();
      };
    }, [ntp]);
    return service;
  }
  var FreemiumPIRBannerContext, FreemiumPIRBannerDispatchContext;
  var init_FreemiumPIRBannerProvider = __esm({
    "pages/new-tab/app/freemium-pir-banner/FreemiumPIRBannerProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_types();
      init_freemiumPIRBanner_service();
      init_service_hooks();
      FreemiumPIRBannerContext = K({
        /** @type {State} */
        state: { status: "idle", data: null, config: null },
        /** @type {(id: string) => void} */
        dismiss: (id) => {
          throw new Error("must implement dismiss" + id);
        },
        /** @type {(id: string) => void} */
        action: (id) => {
          throw new Error("must implement action" + id);
        }
      });
      FreemiumPIRBannerDispatchContext = K(
        /** @type {import("preact/hooks").Dispatch<Events>} */
        {}
      );
    }
  });

  // shared/utils.js
  function convertMarkdownToHTMLForStrongTags(markdown) {
    markdown = escapeXML(markdown);
    const regex = /\*\*(.*?)\*\*/g;
    const result = markdown.replace(regex, "<strong>$1</strong>");
    return result;
  }
  function escapeXML(str) {
    const replacements = {
      "&": "&amp;",
      '"': "&quot;",
      "'": "&apos;",
      "<": "&lt;",
      ">": "&gt;",
      "/": "&#x2F;"
    };
    return String(str).replace(/[&"'<>/]/g, (m4) => replacements[m4]);
  }
  var translationsLocales, getLocalizedNumberFormatter;
  var init_utils3 = __esm({
    "shared/utils.js"() {
      "use strict";
      translationsLocales = {
        en: "en-US",
        nl: "nl-NL",
        fr: "fr-FR",
        de: "de-DE",
        it: "it-IT",
        pl: "pl-PL",
        pt: "pt-PT",
        ru: "ru-RU",
        es: "es-ES"
      };
      getLocalizedNumberFormatter = (locale) => {
        const localeToUse = translationsLocales[locale] || "en-US";
        return new Intl.NumberFormat(localeToUse);
      };
    }
  });

  // pages/new-tab/app/freemium-pir-banner/components/FreemiumPIRBanner.js
  function FreemiumPIRBanner({ message, action, dismiss }) {
    const processedMessageDescription = convertMarkdownToHTMLForStrongTags(message.descriptionText);
    return /* @__PURE__ */ _("div", { id: message.id, class: (0, import_classnames6.default)(FreemiumPIRBanner_default.root, FreemiumPIRBanner_default.icon) }, /* @__PURE__ */ _("span", { class: FreemiumPIRBanner_default.iconBlock }, /* @__PURE__ */ _("img", { src: `./icons/Information-Remover-96.svg`, alt: "" })), /* @__PURE__ */ _("div", { class: FreemiumPIRBanner_default.content }, message.titleText && /* @__PURE__ */ _("h2", { class: FreemiumPIRBanner_default.title }, message.titleText), /* @__PURE__ */ _("p", { class: FreemiumPIRBanner_default.description, dangerouslySetInnerHTML: { __html: processedMessageDescription } })), message.messageType === "big_single_action" && message?.actionText && action && /* @__PURE__ */ _("div", { class: FreemiumPIRBanner_default.btnBlock }, /* @__PURE__ */ _(Button, { variant: "standard", onClick: () => action(message.id) }, message.actionText)), message.id && dismiss && /* @__PURE__ */ _(DismissButton, { className: FreemiumPIRBanner_default.dismissBtn, onClick: () => dismiss(message.id) }));
  }
  function FreemiumPIRBannerConsumer() {
    const { state, action, dismiss } = x2(FreemiumPIRBannerContext);
    if (state.status === "ready" && state.data.content) {
      return /* @__PURE__ */ _(FreemiumPIRBanner, { message: state.data.content, action, dismiss });
    }
    return null;
  }
  var import_classnames6;
  var init_FreemiumPIRBanner2 = __esm({
    "pages/new-tab/app/freemium-pir-banner/components/FreemiumPIRBanner.js"() {
      "use strict";
      import_classnames6 = __toESM(require_classnames(), 1);
      init_preact_module();
      init_Button2();
      init_DismissButton2();
      init_FreemiumPIRBanner();
      init_FreemiumPIRBannerProvider();
      init_hooks_module();
      init_utils3();
    }
  });

  // pages/new-tab/app/entry-points/freemiumPIRBanner.js
  var freemiumPIRBanner_exports = {};
  __export(freemiumPIRBanner_exports, {
    factory: () => factory3
  });
  function factory3() {
    return /* @__PURE__ */ _(Centered, { "data-entry-point": "freemiumPIRBanner" }, /* @__PURE__ */ _(FreemiumPIRBannerProvider, null, /* @__PURE__ */ _(FreemiumPIRBannerConsumer, null)));
  }
  var init_freemiumPIRBanner = __esm({
    "pages/new-tab/app/entry-points/freemiumPIRBanner.js"() {
      "use strict";
      init_preact_module();
      init_Layout();
      init_FreemiumPIRBanner2();
      init_FreemiumPIRBannerProvider();
    }
  });

  // pages/new-tab/app/next-steps/next-steps.service.js
  var NextStepsService;
  var init_next_steps_service = __esm({
    "pages/new-tab/app/next-steps/next-steps.service.js"() {
      "use strict";
      init_service();
      NextStepsService = class {
        /**
         * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
         * @internal
         */
        constructor(ntp) {
          this.ntp = ntp;
          this.dataService = new Service({
            initial: () => ntp.messaging.request("nextSteps_getData"),
            subscribe: (cb) => ntp.messaging.subscribe("nextSteps_onDataUpdate", cb)
          });
          this.configService = new Service({
            initial: () => ntp.messaging.request("nextSteps_getConfig"),
            subscribe: (cb) => ntp.messaging.subscribe("nextSteps_onConfigUpdate", cb),
            persist: (data2) => ntp.messaging.notify("nextSteps_setConfig", data2)
          });
        }
        name() {
          return "NextStepsService";
        }
        /**
         * @returns {Promise<{data: NextStepsData; config: NextStepsConfig}>}
         * @internal
         */
        async getInitial() {
          const p1 = this.configService.fetchInitial();
          const p22 = this.dataService.fetchInitial();
          const [config, data2] = await Promise.all([p1, p22]);
          return { config, data: data2 };
        }
        /**
         * @internal
         */
        destroy() {
          this.configService.destroy();
          this.dataService.destroy();
        }
        /**
         * @param {(evt: {data: NextStepsData, source: 'manual' | 'subscription'}) => void} cb
         * @internal
         */
        onData(cb) {
          return this.dataService.onData(cb);
        }
        /**
         * @param {(evt: {data: NextStepsConfig, source: 'manual' | 'subscription'}) => void} cb
         * @internal
         */
        onConfig(cb) {
          return this.configService.onData(cb);
        }
        /**
         * Update the in-memory data immediate and persist.
         * Any state changes will be broadcast to consumers synchronously
         * @internal
         */
        toggleExpansion() {
          this.configService.update((old) => {
            if (old.expansion === "expanded") {
              return { ...old, expansion: (
                /** @type {const} */
                "collapsed"
              ) };
            } else {
              return { ...old, expansion: (
                /** @type {const} */
                "expanded"
              ) };
            }
          });
        }
        /**
         * Dismiss a particular card
         * @param {string} id
         */
        dismiss(id) {
          this.ntp.messaging.notify("nextSteps_dismiss", { id });
        }
        /**
         * Perform a primary action on a card
         * @param {string} id
         */
        action(id) {
          this.ntp.messaging.notify("nextSteps_action", { id });
        }
      };
    }
  });

  // pages/new-tab/app/next-steps/NextStepsProvider.js
  function NextStepsProvider(props) {
    const initial = (
      /** @type {State} */
      {
        status: "idle",
        data: null,
        config: null
      }
    );
    const [state, dispatch] = h2(reducer, initial);
    const service = useService3();
    useInitialDataAndConfig({ dispatch, service });
    useDataSubscription({ dispatch, service });
    useConfigSubscription({ dispatch, service });
    const toggle = q2(() => {
      service.current?.toggleExpansion();
    }, [service]);
    const action = q2(
      (id) => {
        service.current?.action(id);
      },
      [service]
    );
    const dismiss = q2(
      (id) => {
        service.current?.dismiss(id);
      },
      [service]
    );
    return /* @__PURE__ */ _(NextStepsContext.Provider, { value: { state, toggle, action, dismiss } }, /* @__PURE__ */ _(NextStepsDispatchContext.Provider, { value: dispatch }, props.children));
  }
  function useService3() {
    const service = A2(
      /** @type {NextStepsService|null} */
      null
    );
    const ntp = useMessaging();
    y2(() => {
      const stats = new NextStepsService(ntp);
      service.current = stats;
      return () => {
        stats.destroy();
      };
    }, [ntp]);
    return service;
  }
  var NextStepsContext, NextStepsDispatchContext;
  var init_NextStepsProvider = __esm({
    "pages/new-tab/app/next-steps/NextStepsProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_types();
      init_next_steps_service();
      init_service_hooks();
      NextStepsContext = K({
        /** @type {State} */
        state: { status: "idle", data: null, config: null },
        /** @type {() => void} */
        toggle: () => {
          throw new Error("must implement");
        },
        /** @type {(id: string) => void} */
        dismiss: (_id) => {
          throw new Error("must implement");
        },
        /** @type {(id: string) => void} */
        action: (_id) => {
          throw new Error("must implement");
        }
      });
      NextStepsDispatchContext = K(
        /** @type {import("preact/hooks").Dispatch<Events>} */
        {}
      );
    }
  });

  // pages/new-tab/app/next-steps/nextsteps.data.js
  var variants, otherText, cardsWithConfirmationText, additionalCardStates;
  var init_nextsteps_data = __esm({
    "pages/new-tab/app/next-steps/nextsteps.data.js"() {
      "use strict";
      variants = {
        /** @param {(translationId: keyof enStrings) => string} t */
        bringStuff: (t4) => ({
          id: "bringStuff",
          icon: "Bring-Stuff",
          title: t4("nextSteps_bringStuff_title"),
          summary: t4("nextSteps_bringStuff_summary"),
          actionText: t4("nextSteps_bringStuff_actionText")
        }),
        /** @param {(translationId: keyof enStrings) => string} t */
        defaultApp: (t4) => ({
          id: "defaultApp",
          icon: "Default-App",
          title: t4("nextSteps_defaultApp_title"),
          summary: t4("nextSteps_defaultApp_summary"),
          actionText: t4("nextSteps_defaultApp_actionText")
        }),
        /** @param {(translationId: keyof enStrings) => string} t */
        blockCookies: (t4) => ({
          id: "blockCookies",
          icon: "Cookie-Pops",
          title: t4("nextSteps_blockCookies_title"),
          summary: t4("nextSteps_blockCookies_summary"),
          actionText: t4("nextSteps_blockCookies_actionText")
        }),
        /** @param {(translationId: keyof enStrings) => string} t */
        emailProtection: (t4) => ({
          id: "emailProtection",
          icon: "Email-Protection",
          title: t4("nextSteps_emailProtection_title"),
          summary: t4("nextSteps_emailProtection_summary"),
          actionText: t4("nextSteps_emailProtection_actionText")
        }),
        /** @param {(translationId: keyof enStrings) => string} t */
        duckplayer: (t4) => ({
          id: "duckplayer",
          icon: "Tube-Clean",
          title: t4("nextSteps_duckPlayer_title"),
          summary: t4("nextSteps_duckPlayer_summary"),
          actionText: t4("nextSteps_duckPlayer_actionText")
        }),
        /** @param {(translationId: keyof enStrings) => string} t */
        addAppToDockMac: (t4) => ({
          id: "addAppToDockMac",
          icon: "Dock-Add-Mac",
          title: t4("nextSteps_addAppDockMac_title"),
          summary: t4("nextSteps_addAppDockMac_summary"),
          actionText: t4("nextSteps_addAppDockMac_actionText"),
          confirmationText: t4("nextSteps_addAppDockMac_confirmationText")
        }),
        /** @param {(translationId: keyof enStrings) => string} t */
        pinAppToTaskbarWindows: (t4) => ({
          id: "pinAppToTaskbarWindows",
          icon: "Dock-Add-Windows",
          title: t4("nextSteps_pinAppToTaskbarWindows_title"),
          summary: t4("nextSteps_pinAppToTaskbarWindows_summary"),
          actionText: t4("nextSteps_pinAppToTaskbarWindows_actionText")
        }),
        /** @param {(translationId: keyof enStrings) => string} t */
        subscription: (t4) => ({
          id: "subscription",
          icon: "Subscription",
          title: t4("nextSteps_subscription_title"),
          summary: t4("nextSteps_subscription_summary"),
          actionText: t4("nextSteps_subscription_actionText")
        })
      };
      otherText = {
        /** @param {(translationId: keyof ntpStrings) => string} t */
        showMore: (t4) => t4("ntp_show_more"),
        /** @param {(translationId: keyof ntpStrings) => string} t */
        showLess: (t4) => t4("ntp_show_less"),
        /** @param {(translationId: keyof enStrings) => string} t */
        nextSteps_sectionTitle: (t4) => t4("nextSteps_sectionTitle")
      };
      cardsWithConfirmationText = ["addAppToDockMac"];
      additionalCardStates = {
        hasConfirmationText: (variantId) => cardsWithConfirmationText.includes(variantId)
      };
    }
  });

  // pages/new-tab/app/next-steps/components/NextSteps.module.css
  var NextSteps_default;
  var init_NextSteps = __esm({
    "pages/new-tab/app/next-steps/components/NextSteps.module.css"() {
      NextSteps_default = {
        card: "NextSteps_card",
        icon: "NextSteps_icon",
        title: "NextSteps_title",
        description: "NextSteps_description",
        btn: "NextSteps_btn",
        supressActiveStateForSwitchToConfirmationText: "NextSteps_supressActiveStateForSwitchToConfirmationText",
        confirmation: "NextSteps_confirmation",
        dismissBtn: "NextSteps_dismissBtn",
        cardGroup: "NextSteps_cardGroup",
        cardGrid: "NextSteps_cardGrid",
        showhide: "NextSteps_showhide",
        bubble: "NextSteps_bubble",
        nextStepsCard: "NextSteps_nextStepsCard"
      };
    }
  });

  // pages/new-tab/app/next-steps/components/NextStepsCard.js
  function NextStepsCard({ type, dismiss, action }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {import("../strings.json")} */
      {}
    );
    const message = variants[type]?.(t4);
    const [showConfirmation, setShowConfirmation] = d2(false);
    const hasConfirmationState = additionalCardStates.hasConfirmationText(type);
    const handleClick = () => {
      if (!hasConfirmationState) {
        return action(message.id);
      }
      action(message.id);
      setShowConfirmation(true);
    };
    return /* @__PURE__ */ _("div", { class: NextSteps_default.card }, /* @__PURE__ */ _("img", { src: `./icons/${message.icon}-128.svg`, alt: "", class: NextSteps_default.icon }), /* @__PURE__ */ _("h3", { class: NextSteps_default.title }, message.title), /* @__PURE__ */ _("p", { class: NextSteps_default.description }, message.summary), hasConfirmationState && !!showConfirmation ? /* @__PURE__ */ _("div", { class: NextSteps_default.confirmation }, /* @__PURE__ */ _(CheckColor, null), /* @__PURE__ */ _("p", null, message.confirmationText)) : /* @__PURE__ */ _(
      "button",
      {
        class: (0, import_classnames7.default)(NextSteps_default.btn, hasConfirmationState && NextSteps_default.supressActiveStateForSwitchToConfirmationText),
        onClick: handleClick
      },
      message.actionText
    ), /* @__PURE__ */ _(DismissButton, { className: NextSteps_default.dismissBtn, onClick: () => dismiss(message.id) }));
  }
  var import_classnames7;
  var init_NextStepsCard = __esm({
    "pages/new-tab/app/next-steps/components/NextStepsCard.js"() {
      "use strict";
      init_preact_module();
      import_classnames7 = __toESM(require_classnames(), 1);
      init_hooks_module();
      init_DismissButton2();
      init_Icons2();
      init_types();
      init_nextsteps_data();
      init_NextSteps();
    }
  });

  // pages/new-tab/app/next-steps/components/NextStepsGroup.js
  function NextStepsCardGroup({ types, expansion, toggle, action, dismiss }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {strings} */
      {}
    );
    const WIDGET_ID = g2();
    const TOGGLE_ID = g2();
    const alwaysShown = types.length > 2 ? types.slice(0, 2) : types;
    return /* @__PURE__ */ _("div", { class: NextSteps_default.cardGroup, id: WIDGET_ID }, types.length > 0 && /* @__PURE__ */ _(NextStepsBubbleHeader, null), /* @__PURE__ */ _("div", { class: NextSteps_default.cardGrid }, alwaysShown.map((type) => /* @__PURE__ */ _(NextStepsCard, { key: type, type, dismiss, action })), expansion === "expanded" && types.length > 2 && types.slice(2).map((type) => /* @__PURE__ */ _(NextStepsCard, { key: type, type, dismiss, action }))), types.length > 2 && /* @__PURE__ */ _(ShowHideBar, null, /* @__PURE__ */ _(
      ShowHideButtonPill,
      {
        buttonAttrs: {
          "aria-expanded": expansion === "expanded",
          "aria-pressed": expansion === "expanded",
          "aria-controls": WIDGET_ID,
          id: TOGGLE_ID
        },
        text: expansion === "expanded" ? otherText.showLess(t4) : otherText.showMore(t4),
        label: void 0,
        onClick: toggle
      }
    )));
  }
  function NextStepsBubbleHeader() {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {strings} */
      {}
    );
    const text2 = otherText.nextSteps_sectionTitle(t4);
    return /* @__PURE__ */ _("div", { class: NextSteps_default.bubble }, /* @__PURE__ */ _("svg", { xmlns: "http://www.w3.org/2000/svg", width: "12", height: "26", viewBox: "0 0 12 26", fill: "none" }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M12 0C5.37258 0 0 5.37258 0 12V25.3388C2.56367 22.0873 6.53807 20 11 20H12V0Z",
        fill: "#3969EF"
      }
    )), /* @__PURE__ */ _("div", null, /* @__PURE__ */ _("h2", null, text2)), /* @__PURE__ */ _("svg", { xmlns: "http://www.w3.org/2000/svg", width: "10", height: "20", viewBox: "0 0 10 20", fill: "none" }, /* @__PURE__ */ _(
      "path",
      {
        d: "M3.8147e-06 0C1.31322 1.566e-08 2.61358 0.258658 3.82684 0.761205C5.04009 1.26375 6.14249 2.00035 7.07107 2.92893C7.99966 3.85752 8.73625 4.95991 9.2388 6.17317C9.74135 7.38642 10 8.68678 10 10C10 11.3132 9.74135 12.6136 9.2388 13.8268C8.73625 15.0401 7.99966 16.1425 7.07107 17.0711C6.14248 17.9997 5.04009 18.7362 3.82684 19.2388C2.61358 19.7413 1.31322 20 0 20L3.8147e-06 10V0Z",
        fill: "#3969EF"
      }
    )));
  }
  var init_NextStepsGroup = __esm({
    "pages/new-tab/app/next-steps/components/NextStepsGroup.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_ShowHideButton();
      init_types();
      init_nextsteps_data();
      init_NextSteps();
      init_NextStepsCard();
    }
  });

  // pages/new-tab/app/next-steps/NextSteps.js
  function NextStepsCustomized() {
    return /* @__PURE__ */ _(NextStepsProvider, null, /* @__PURE__ */ _(NextStepsConsumer, null));
  }
  function NextStepsConsumer() {
    const { state, toggle } = x2(NextStepsContext);
    if (state.status === "ready" && state.data.content) {
      const ids = state.data.content.map((x3) => x3.id);
      const { action, dismiss } = x2(NextStepsContext);
      return /* @__PURE__ */ _(NextStepsCardGroup, { types: ids, toggle, expansion: state.config.expansion, action, dismiss });
    }
    return null;
  }
  var init_NextSteps2 = __esm({
    "pages/new-tab/app/next-steps/NextSteps.js"() {
      "use strict";
      init_preact_module();
      init_NextStepsProvider();
      init_hooks_module();
      init_NextStepsGroup();
    }
  });

  // pages/new-tab/app/entry-points/nextSteps.js
  var nextSteps_exports = {};
  __export(nextSteps_exports, {
    factory: () => factory4
  });
  function factory4() {
    return /* @__PURE__ */ _(Centered, { "data-entry-point": "nextSteps" }, /* @__PURE__ */ _(NextStepsCustomized, null));
  }
  var init_nextSteps = __esm({
    "pages/new-tab/app/entry-points/nextSteps.js"() {
      "use strict";
      init_preact_module();
      init_Layout();
      init_NextSteps2();
    }
  });

  // pages/new-tab/app/omnibar/omnibar.suggestions.service.js
  var EVENT_DATA, _eventTarget, _lastFetchId, OmnibarSuggestionsService;
  var init_omnibar_suggestions_service = __esm({
    "pages/new-tab/app/omnibar/omnibar.suggestions.service.js"() {
      "use strict";
      EVENT_DATA = "data";
      OmnibarSuggestionsService = class {
        /**
         * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
         * @internal
         */
        constructor(ntp) {
          __privateAdd(this, _eventTarget, new EventTarget());
          __privateAdd(this, _lastFetchId, 0);
          this.ntp = ntp;
        }
        /**
         * @param {string} term
         * @returns {Promise<SuggestionsData>}
         */
        triggerFetch(term) {
          const fetchId = ++__privateWrapper(this, _lastFetchId)._;
          const fetch2 = async () => {
            const data2 = await this.ntp.messaging.request("omnibar_getSuggestions", { term });
            if (fetchId === __privateGet(this, _lastFetchId)) {
              __privateGet(this, _eventTarget).dispatchEvent(new CustomEvent(EVENT_DATA, { detail: { data: data2, term } }));
            }
            return data2;
          };
          return fetch2();
        }
        /**
         * @param {(data: SuggestionsData, term: string) => void} cb
         * @returns {() => void}
         */
        onData(cb) {
          const handler = (event) => cb(event.detail.data, event.detail.term);
          __privateGet(this, _eventTarget).addEventListener(EVENT_DATA, handler);
          return () => __privateGet(this, _eventTarget).removeEventListener(EVENT_DATA, handler);
        }
      };
      _eventTarget = new WeakMap();
      _lastFetchId = new WeakMap();
    }
  });

  // pages/new-tab/app/omnibar/omnibar.service.js
  var OmnibarService;
  var init_omnibar_service = __esm({
    "pages/new-tab/app/omnibar/omnibar.service.js"() {
      "use strict";
      init_service();
      init_omnibar_suggestions_service();
      OmnibarService = class {
        /**
         * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
         * @internal
         */
        constructor(ntp) {
          this.ntp = ntp;
          this.configService = new Service({
            initial: () => ntp.messaging.request("omnibar_getConfig"),
            subscribe: (cb) => ntp.messaging.subscribe("omnibar_onConfigUpdate", cb),
            persist: (data2) => ntp.messaging.notify("omnibar_setConfig", data2)
          });
          this.suggestionsService = new OmnibarSuggestionsService(ntp);
        }
        name() {
          return "OmnibarService";
        }
        /**
         * @returns {Promise<{data: null; config: OmnibarConfig}>}
         * @internal
         */
        async getInitial() {
          const config = await this.configService.fetchInitial();
          return { data: null, config };
        }
        /**
         * @internal
         */
        destroy() {
          this.configService.destroy();
        }
        /**
         * @param {(evt: {data: OmnibarConfig, source: 'manual' | 'subscription'}) => void} cb
         * @internal
         */
        onConfig(cb) {
          return this.configService.onData(cb);
        }
        /**
         * @param {OmnibarConfig['mode']} mode
         */
        setMode(mode) {
          this.configService.update((old) => {
            return {
              ...old,
              mode
            };
          });
        }
        /**
         * @param {NonNullable<OmnibarConfig['enableAi']>} enableAi
         */
        setEnableAi(enableAi) {
          this.configService.update((old) => {
            return {
              ...old,
              enableAi,
              // Force mode to 'search' when Duck.ai is disabled to prevent getting stuck in 'ai' mode
              mode: enableAi ? old.mode : "search"
            };
          });
        }
        /**
         * @param {NonNullable<OmnibarConfig['showCustomizePopover']>} showCustomizePopover
         */
        setShowCustomizePopover(showCustomizePopover) {
          this.configService.update((old) => {
            return {
              ...old,
              showCustomizePopover
            };
          });
        }
        /**
         * Get suggestions for the given search term
         * @param {string} term
         * @returns {Promise<SuggestionsData>}
         */
        getSuggestions(term) {
          return this.suggestionsService.triggerFetch(term);
        }
        /**
         * Subscribe to suggestions updates. Returns a function to unsubscribe
         * @param {(data: SuggestionsData, term: string) => void} cb
         * @returns {() => void}
         */
        onSuggestions(cb) {
          return this.suggestionsService.onData(cb);
        }
        /**
         * Open a selected suggestion
         * @param {Object} params
         * @param {Suggestion} params.suggestion
         * @param {OpenTarget} params.target
         */
        openSuggestion(params) {
          this.ntp.messaging.notify("omnibar_openSuggestion", params);
        }
        /**
         * Submit a search query
         * @param {Object} params
         * @param {string} params.term
         * @param {OpenTarget} params.target
         */
        submitSearch(params) {
          this.ntp.messaging.notify("omnibar_submitSearch", params);
        }
        /**
         * Submit a chat message to Duck.ai
         * @param {Object} params
         * @param {string} params.chat
         * @param {OpenTarget} params.target
         */
        submitChat(params) {
          this.ntp.messaging.notify("omnibar_submitChat", params);
        }
      };
    }
  });

  // pages/new-tab/app/omnibar/components/OmnibarProvider.js
  function OmnibarProvider(props) {
    const initial = (
      /** @type {State} */
      {
        status: "idle",
        data: null,
        config: null
      }
    );
    const [state, dispatch] = h2(reducer, initial);
    const service = useService4();
    useInitialDataAndConfig({ dispatch, service });
    useConfigSubscription({ dispatch, service });
    const setMode = q2(
      (mode) => {
        service.current?.setMode(mode);
      },
      [service]
    );
    const setEnableAi = q2(
      (enableAi) => {
        service.current?.setEnableAi(enableAi);
      },
      [service]
    );
    const setShowCustomizePopover = q2(
      (showCustomizePopover) => {
        service.current?.setShowCustomizePopover(showCustomizePopover);
      },
      [service]
    );
    const getSuggestions = q2(
      (term) => {
        if (!service.current) throw new Error("Service not available");
        return service.current.getSuggestions(term);
      },
      [service]
    );
    const onSuggestions = q2(
      (cb) => {
        if (!service.current) throw new Error("Service not available");
        return service.current.onSuggestions(cb);
      },
      [service]
    );
    const openSuggestion = q2(
      (params) => {
        service.current?.openSuggestion(params);
      },
      [service]
    );
    const submitSearch = q2(
      (params) => {
        service.current?.submitSearch(params);
      },
      [service]
    );
    const submitChat = q2(
      (params) => {
        service.current?.submitChat(params);
      },
      [service]
    );
    return /* @__PURE__ */ _(
      OmnibarContext.Provider,
      {
        value: {
          state,
          setMode,
          setEnableAi,
          setShowCustomizePopover,
          getSuggestions,
          onSuggestions,
          openSuggestion,
          submitSearch,
          submitChat
        }
      },
      /* @__PURE__ */ _(OmnibarServiceContext.Provider, { value: service.current }, props.children)
    );
  }
  function useService4() {
    const service = A2(
      /** @type {OmnibarService|null} */
      null
    );
    const ntp = useMessaging();
    y2(() => {
      const omnibar = new OmnibarService(ntp);
      service.current = omnibar;
      return () => {
        omnibar.destroy();
      };
    }, [ntp]);
    return service;
  }
  function useOmnibarService() {
    return x2(OmnibarServiceContext);
  }
  var OmnibarContext, OmnibarServiceContext;
  var init_OmnibarProvider = __esm({
    "pages/new-tab/app/omnibar/components/OmnibarProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_types();
      init_service_hooks();
      init_omnibar_service();
      OmnibarContext = K({
        /** @type {State} */
        state: { status: "idle", data: null, config: null },
        /** @type {(mode: OmnibarConfig['mode']) => void} */
        setMode: () => {
          throw new Error("must implement");
        },
        /** @type {(enableAi: NonNullable<OmnibarConfig['enableAi']>) => void} */
        setEnableAi: () => {
          throw new Error("must implement");
        },
        /** @type {(showCustomizePopover: NonNullable<OmnibarConfig['showCustomizePopover']>) => void} */
        setShowCustomizePopover: () => {
          throw new Error("must implement");
        },
        /** @type {(term: string) => Promise<SuggestionsData>} */
        getSuggestions: () => {
          throw new Error("must implement");
        },
        /** @type {(cb: (data: SuggestionsData, term: string) => void) => (() => void)} */
        onSuggestions: () => {
          throw new Error("must implement");
        },
        /** @type {(params: {suggestion: Suggestion, target: OpenTarget}) => void} */
        openSuggestion: () => {
          throw new Error("must implement");
        },
        /** @type {(params: {term: string, target: OpenTarget}) => void} */
        submitSearch: () => {
          throw new Error("must implement");
        },
        /** @type {(params: {chat: string, target: OpenTarget}) => void} */
        submitChat: () => {
          throw new Error("must implement");
        }
      });
      OmnibarServiceContext = K(
        /** @type {OmnibarService|null} */
        null
      );
    }
  });

  // shared/handlers.js
  function eventToTarget2(event, platformName) {
    const isControlClick = platformName === "macos" ? event.metaKey : event.ctrlKey;
    if (isControlClick || "button" in event && event.button === 1) {
      return "new-tab";
    } else if (event.shiftKey) {
      return "new-window";
    }
    return "same-tab";
  }
  var init_handlers = __esm({
    "shared/handlers.js"() {
      "use strict";
    }
  });

  // pages/new-tab/app/omnibar/components/AiChatForm.module.css
  var AiChatForm_default;
  var init_AiChatForm = __esm({
    "pages/new-tab/app/omnibar/components/AiChatForm.module.css"() {
      AiChatForm_default = {
        form: "AiChatForm_form",
        textarea: "AiChatForm_textarea",
        hasScroll: "AiChatForm_hasScroll",
        buttons: "AiChatForm_buttons",
        submitButton: "AiChatForm_submitButton",
        fadeIn: "AiChatForm_fadeIn"
      };
    }
  });

  // pages/new-tab/app/omnibar/components/AiChatForm.js
  function AiChatForm({ chat, autoFocus, onChange, onSubmit }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    const platformName = usePlatformName();
    const formRef = A2(
      /** @type {HTMLFormElement|null} */
      null
    );
    const textAreaRef = A2(
      /** @type {HTMLTextAreaElement|null} */
      null
    );
    y2(() => {
      if (autoFocus && textAreaRef.current) {
        textAreaRef.current.focus();
      }
    }, [autoFocus]);
    _2(() => {
      const textArea = textAreaRef.current;
      const form = formRef.current;
      if (!textArea || !form) return;
      const { paddingTop, paddingBottom } = window.getComputedStyle(textArea);
      textArea.style.height = "auto";
      textArea.style.height = `calc(${textArea.scrollHeight}px - ${paddingTop} - ${paddingBottom})`;
      if (textArea.scrollHeight > textArea.clientHeight) {
        form.classList.add(AiChatForm_default.hasScroll);
      } else {
        form.classList.remove(AiChatForm_default.hasScroll);
      }
    }, [chat]);
    const disabled = chat.length === 0;
    const handleSubmit = (event) => {
      event.preventDefault();
      if (disabled) return;
      onSubmit({
        chat,
        target: "same-tab"
      });
    };
    const handleKeyDown = (event) => {
      if (event.key === "Enter" && !event.shiftKey) {
        event.preventDefault();
        if (disabled) return;
        onSubmit({
          chat,
          target: eventToTarget2(event, platformName)
        });
      }
    };
    const handleClickSubmit = (event) => {
      event.preventDefault();
      if (disabled) return;
      event.stopPropagation();
      onSubmit({
        chat,
        target: eventToTarget2(event, platformName)
      });
    };
    return /* @__PURE__ */ _("form", { ref: formRef, class: AiChatForm_default.form, onClick: () => textAreaRef.current?.focus(), onSubmit: handleSubmit }, /* @__PURE__ */ _(
      "textarea",
      {
        ref: textAreaRef,
        class: AiChatForm_default.textarea,
        value: chat,
        placeholder: t4("omnibar_aiChatFormPlaceholder"),
        "aria-label": t4("omnibar_aiChatFormPlaceholder"),
        autoComplete: "off",
        rows: 1,
        onKeyDown: handleKeyDown,
        onChange: (event) => onChange(event.currentTarget.value)
      }
    ), /* @__PURE__ */ _("div", { class: AiChatForm_default.buttons }, /* @__PURE__ */ _(
      "button",
      {
        type: "submit",
        class: AiChatForm_default.submitButton,
        "aria-label": t4("omnibar_aiChatFormSubmitButtonLabel"),
        disabled: chat.length === 0,
        onClick: handleClickSubmit,
        onAuxClick: handleClickSubmit
      },
      /* @__PURE__ */ _(ArrowRightIcon, null)
    )));
  }
  var init_AiChatForm2 = __esm({
    "pages/new-tab/app/omnibar/components/AiChatForm.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_handlers();
      init_Icons2();
      init_settings_provider();
      init_types();
      init_AiChatForm();
    }
  });

  // pages/new-tab/app/omnibar/components/Omnibar.module.css
  var Omnibar_default;
  var init_Omnibar = __esm({
    "pages/new-tab/app/omnibar/components/Omnibar.module.css"() {
      Omnibar_default = {
        root: "Omnibar_root",
        logo: "Omnibar_logo",
        tabSwitcherContainer: "Omnibar_tabSwitcherContainer",
        spacer: "Omnibar_spacer",
        popup: "Omnibar_popup",
        field: "Omnibar_field"
      };
    }
  });

  // pages/new-tab/app/omnibar/components/ResizingContainer.js
  function ResizingContainer({ children, ...props }) {
    const contentRef = A2(
      /** @type {HTMLDivElement|null} */
      null
    );
    const [currentHeight, setCurrentHeight] = d2(
      /** @type {number|null} */
      null
    );
    _2(() => {
      const content2 = contentRef.current;
      if (!content2) return;
      setCurrentHeight(content2.scrollHeight);
      const resizeObserver = new ResizeObserver(() => setCurrentHeight(content2.scrollHeight));
      resizeObserver.observe(content2);
      return () => resizeObserver.disconnect();
    }, []);
    return /* @__PURE__ */ _("div", { ...props, style: { height: currentHeight ?? "auto" } }, /* @__PURE__ */ _("div", { ref: contentRef }, children));
  }
  var init_ResizingContainer = __esm({
    "pages/new-tab/app/omnibar/components/ResizingContainer.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
    }
  });

  // pages/new-tab/app/omnibar/utils.js
  function getInputSuffix(term, selectedSuggestion) {
    if (!term || !selectedSuggestion) return null;
    switch (selectedSuggestion.kind) {
      case "phrase":
        return { kind: "searchDuckDuckGo" };
      case "website": {
        const url8 = parseURL(selectedSuggestion.url);
        if (!url8) return null;
        return { kind: "visit", url: formatURL(url8, { scheme: false, trailingSlash: false, search: false, hash: false }) };
      }
      case "bookmark":
      case "historyEntry":
      case "internalPage": {
        const title = getSuggestionTitle(selectedSuggestion, term);
        const autocompletion = getSuggestionCompletionString(selectedSuggestion, term);
        const url8 = parseURL(selectedSuggestion.url);
        if (title && title !== autocompletion) {
          return { kind: "raw", text: title };
        } else if (url8) {
          return { kind: "visit", url: formatURL(url8, { scheme: false, trailingSlash: false, search: false, hash: false }) };
        } else {
          return null;
        }
      }
      case "openTab":
        return { kind: "duckDuckGo" };
      case "aiChat":
        return { kind: "askDuckAi" };
    }
  }
  function getSuggestionTitle(suggestion, term) {
    switch (suggestion.kind) {
      case "phrase":
        return suggestion.phrase;
      case "website": {
        const url8 = parseURL(suggestion.url);
        if (url8) {
          return formatURLForTerm(url8, term);
        } else {
          return "";
        }
      }
      case "historyEntry": {
        const url8 = parseURL(suggestion.url);
        const searchQuery = url8 ? getDuckDuckGoSearchQuery(url8) : "";
        if (searchQuery) {
          return searchQuery;
        } else if (suggestion.title) {
          return suggestion.title;
        } else if (url8) {
          return formatURLForTerm(url8, term);
        } else {
          return "";
        }
      }
      case "bookmark":
      case "internalPage":
      case "openTab":
        return suggestion.title;
      case "aiChat":
        return suggestion.chat;
    }
  }
  function getSuggestionCompletionString(suggestion, term) {
    switch (suggestion.kind) {
      case "historyEntry":
      case "bookmark":
      case "internalPage": {
        const url8 = parseURL(suggestion.url);
        const urlString = url8 ? formatURLForTerm(url8, term) : "";
        if (startsWithIgnoreCase(urlString, term)) {
          return urlString;
        } else {
          return getSuggestionTitle(suggestion, term);
        }
      }
      case "aiChat":
        return getSuggestionTitle(suggestion, term);
      default:
        return getSuggestionTitle(suggestion, term);
    }
  }
  function getSuggestionSuffix(suggestion) {
    switch (suggestion.kind) {
      case "website":
      case "phrase":
        return null;
      case "openTab":
        return null;
      case "historyEntry":
      case "bookmark": {
        const url8 = parseURL(suggestion.url);
        if (!url8) return null;
        return { kind: "raw", text: formatURL(url8, { scheme: false, www: false, trailingSlash: false }) };
      }
      case "internalPage":
        return { kind: "duckDuckGo" };
      case "aiChat":
        return { kind: "askDuckAi" };
    }
  }
  function parseURL(string2) {
    try {
      return new URL(string2);
    } catch {
    }
    try {
      return new URL(`https://${string2}`);
    } catch {
    }
    return null;
  }
  function formatURL(url8, { scheme = true, www = true, trailingSlash = true, search = true, hash = true } = {}) {
    let result = "";
    if (scheme) {
      result += `${url8.protocol}//`;
    }
    if (!www && startsWithIgnoreCase(url8.host, "www.")) {
      result += url8.host.slice(4);
    } else {
      result += url8.host;
    }
    if (!trailingSlash && url8.pathname.endsWith("/")) {
      result += url8.pathname.slice(0, -1);
    } else {
      result += url8.pathname;
    }
    if (search) {
      result += url8.search;
    }
    if (hash) {
      result += url8.hash;
    }
    return result;
  }
  function formatURLForTerm(url8, term) {
    const scheme = `${url8.protocol}//`;
    const isTypingScheme = startsWithIgnoreCase(scheme, term) || startsWithIgnoreCase(term, scheme);
    const termWithoutScheme = startsWithIgnoreCase(term, scheme) ? term.slice(scheme.length) : term;
    const isTypingWww = startsWithIgnoreCase("www.", termWithoutScheme) || startsWithIgnoreCase(termWithoutScheme, "www.");
    const isTypingHost = startsWithIgnoreCase(url8.host, term) || startsWithIgnoreCase(term, url8.host);
    return formatURL(url8, {
      scheme: term !== "" && isTypingScheme && !isTypingHost,
      www: termWithoutScheme !== "" && isTypingWww,
      trailingSlash: termWithoutScheme.endsWith("/")
    });
  }
  function getDuckDuckGoSearchQuery(url8) {
    const isDuckDuckGoSearch = url8.hostname === "duckduckgo.com" && (url8.pathname === "/" || !url8.pathname) && url8.searchParams.has("q");
    return isDuckDuckGoSearch ? url8.searchParams.get("q") ?? "" : "";
  }
  function startsWithIgnoreCase(string2, searchString) {
    return string2.toLowerCase().startsWith(searchString.toLowerCase());
  }
  var init_utils4 = __esm({
    "pages/new-tab/app/omnibar/utils.js"() {
      "use strict";
    }
  });

  // pages/new-tab/app/omnibar/components/SearchForm.module.css
  var SearchForm_default;
  var init_SearchForm = __esm({
    "pages/new-tab/app/omnibar/components/SearchForm.module.css"() {
      SearchForm_default = {
        form: "SearchForm_form",
        input: "SearchForm_input",
        suffixSpacer: "SearchForm_suffixSpacer",
        suffix: "SearchForm_suffix",
        closeButton: "SearchForm_closeButton"
      };
    }
  });

  // pages/new-tab/app/omnibar/components/useSuggestions.js
  function reducer2(state, action) {
    switch (action.type) {
      case "setSuggestions":
        return {
          ...state,
          originalTerm: action.term,
          suggestions: action.suggestions,
          selectedIndex: null,
          suggestionsVisible: true
        };
      case "hideSuggestions":
        return {
          ...state,
          suggestionsVisible: false
        };
      case "setSelectedSuggestion": {
        const nextIndex = state.suggestions.indexOf(action.suggestion);
        if (nextIndex === -1) {
          throw new Error(`Suggestion with id ${action.suggestion.id} not found`);
        }
        return {
          ...state,
          selectedIndex: nextIndex
        };
      }
      case "clearSelectedSuggestion": {
        return {
          ...state,
          selectedIndex: null
        };
      }
      case "previousSuggestion": {
        let nextIndex;
        if (state.selectedIndex === null) {
          nextIndex = state.suggestions.length - 1;
        } else if (state.selectedIndex === 0) {
          nextIndex = null;
        } else {
          nextIndex = state.selectedIndex - 1;
        }
        return {
          ...state,
          selectedIndex: nextIndex
        };
      }
      case "nextSuggestion": {
        let nextIndex;
        if (state.selectedIndex === null) {
          nextIndex = 0;
        } else if (state.selectedIndex === state.suggestions.length - 1) {
          nextIndex = null;
        } else {
          nextIndex = state.selectedIndex + 1;
        }
        return {
          ...state,
          selectedIndex: nextIndex
        };
      }
      default:
        throw new Error("Unknown action type");
    }
  }
  function useSuggestions({ term, setTerm }) {
    const { onSuggestions, getSuggestions } = x2(OmnibarContext);
    const [state, dispatch] = h2(reducer2, initialState);
    y2(() => {
      return onSuggestions((data2, term2) => {
        const suggestions = [
          ...data2.suggestions.topHits,
          ...data2.suggestions.duckduckgoSuggestions,
          ...data2.suggestions.localSuggestions
        ].map((suggestion, index2) => ({
          ...suggestion,
          id: `suggestion-${index2}`
        }));
        if (term2.trim().length > 0) {
          suggestions.push({
            kind: "aiChat",
            chat: term2,
            id: "suggestion-ai-chat"
          });
        }
        dispatch({
          type: "setSuggestions",
          term: term2,
          suggestions
        });
      });
    }, [onSuggestions]);
    const selectedSuggestion = state.selectedIndex !== null ? state.suggestions[state.selectedIndex] : null;
    const updateSuggestions = (term2) => {
      clearSelectedSuggestion();
      if (term2.length === 0) {
        hideSuggestions();
      } else {
        getSuggestions(term2);
      }
    };
    const selectPreviousSuggestion = () => {
      if (!state.suggestionsVisible) {
        return false;
      }
      if (state.originalTerm && term !== state.originalTerm) {
        setTerm(state.originalTerm);
      }
      dispatch({ type: "previousSuggestion" });
      return true;
    };
    const selectNextSuggestion = () => {
      if (!state.suggestionsVisible) {
        return false;
      }
      if (state.originalTerm && term !== state.originalTerm) {
        setTerm(state.originalTerm);
      }
      dispatch({ type: "nextSuggestion" });
      return true;
    };
    const setSelectedSuggestion = (suggestion) => {
      dispatch({ type: "setSelectedSuggestion", suggestion });
    };
    const clearSelectedSuggestion = () => {
      dispatch({ type: "clearSelectedSuggestion" });
    };
    const hideSuggestions = () => {
      dispatch({ type: "hideSuggestions" });
    };
    return {
      suggestions: state.suggestionsVisible ? state.suggestions : EMPTY_ARRAY,
      selectedSuggestion,
      updateSuggestions,
      selectPreviousSuggestion,
      selectNextSuggestion,
      setSelectedSuggestion,
      clearSelectedSuggestion,
      hideSuggestions
    };
  }
  var initialState, EMPTY_ARRAY;
  var init_useSuggestions = __esm({
    "pages/new-tab/app/omnibar/components/useSuggestions.js"() {
      "use strict";
      init_hooks_module();
      init_OmnibarProvider();
      initialState = {
        originalTerm: null,
        suggestions: [],
        selectedIndex: null,
        suggestionsVisible: true
      };
      EMPTY_ARRAY = [];
    }
  });

  // pages/new-tab/app/omnibar/components/SearchFormProvider.js
  function SearchFormProvider({ term, setTerm, children }) {
    const suggestions = useSuggestions({ term, setTerm });
    const suggestionsListId = g2();
    return /* @__PURE__ */ _(
      SearchFormContext.Provider,
      {
        value: {
          ...suggestions,
          term,
          setTerm,
          suggestionsListId
        }
      },
      children
    );
  }
  function useSearchFormContext() {
    const context = x2(SearchFormContext);
    if (!context) {
      throw new Error("useSearchFormContext must be used within a SearchFormProvider");
    }
    return context;
  }
  var SearchFormContext;
  var init_SearchFormProvider = __esm({
    "pages/new-tab/app/omnibar/components/SearchFormProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_useSuggestions();
      SearchFormContext = K(null);
    }
  });

  // pages/new-tab/app/omnibar/components/SuffixText.js
  function useSuffixText(suffix) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    if (!suffix) return "";
    switch (suffix.kind) {
      case "searchDuckDuckGo":
        return "\xA0\u2013\xA0" + t4("omnibar_searchDuckDuckGoSuffix");
      case "duckDuckGo":
        return "\xA0\u2013\xA0" + t4("omnibar_duckDuckGoSuffix");
      case "visit":
        return "\xA0\u2013\xA0" + t4("omnibar_visitSuffix", { url: suffix.url });
      case "raw":
        return "\xA0\u2013\xA0" + suffix.text;
      case "askDuckAi":
        return "\xA0\u2013\xA0" + t4("omnibar_askDuckAiSuffix");
    }
  }
  function SuffixText({ suffix }) {
    return useSuffixText(suffix);
  }
  var init_SuffixText = __esm({
    "pages/new-tab/app/omnibar/components/SuffixText.js"() {
      "use strict";
      init_types();
    }
  });

  // pages/new-tab/app/omnibar/components/useSuggestionInput.js
  function useCompletionInput(base, completion) {
    const ref = A2(
      /** @type {HTMLInputElement|null} */
      null
    );
    _2(() => {
      if (!ref.current) return;
      const value2 = base + completion;
      ref.current.value = value2;
      if (completion) {
        ref.current.setSelectionRange(base.length, value2.length);
      }
    }, [base, completion]);
    return ref;
  }
  var init_useSuggestionInput = __esm({
    "pages/new-tab/app/omnibar/components/useSuggestionInput.js"() {
      "use strict";
      init_hooks_module();
    }
  });

  // pages/new-tab/app/omnibar/components/SearchForm.js
  function SearchForm({ autoFocus, onOpenSuggestion, onSubmit, onSubmitChat }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    const platformName = usePlatformName();
    const {
      term: _term,
      setTerm,
      suggestionsListId,
      suggestions,
      selectedSuggestion,
      updateSuggestions,
      selectPreviousSuggestion,
      selectNextSuggestion,
      clearSelectedSuggestion,
      hideSuggestions
    } = useSearchFormContext();
    const term = _term.replace(/\n/g, " ");
    let inputBase, inputCompletion;
    if (selectedSuggestion) {
      const completionString = getSuggestionCompletionString(selectedSuggestion, term);
      if (startsWithIgnoreCase(completionString, term)) {
        inputBase = term;
        inputCompletion = completionString.slice(term.length);
      } else {
        inputBase = "";
        inputCompletion = completionString;
      }
    } else {
      inputBase = term;
      inputCompletion = "";
    }
    const inputRef = useCompletionInput(inputBase, inputCompletion);
    const inputSuffix = getInputSuffix(term, selectedSuggestion);
    const inputSuffixText = useSuffixText(inputSuffix);
    const inputFont = platformName === "windows" ? "400 14px / 16px system-ui" : "500 13px / 16px system-ui";
    const inputSuffixWidth = T2(() => measureText(inputSuffixText, inputFont), [inputSuffixText, inputFont]);
    y2(() => {
      if (autoFocus && inputRef.current) {
        inputRef.current.focus();
      }
    }, [autoFocus]);
    const acceptSuggestion = () => {
      if (selectedSuggestion) {
        setTerm(inputBase + inputCompletion);
        clearSelectedSuggestion();
      }
    };
    const handleKeyDown = (event) => {
      switch (event.key) {
        case "ArrowUp": {
          const success = selectPreviousSuggestion();
          if (success) event.preventDefault();
          break;
        }
        case "ArrowDown": {
          const success = selectNextSuggestion();
          if (success) event.preventDefault();
          break;
        }
        case "ArrowLeft":
        case "ArrowRight":
          acceptSuggestion();
          break;
        case "Escape":
          event.preventDefault();
          hideSuggestions();
          break;
        case "Enter":
          event.preventDefault();
          if (selectedSuggestion) {
            if (selectedSuggestion.kind === "aiChat") {
              onSubmitChat({ chat: selectedSuggestion.chat, target: eventToTarget2(event, platformName) });
            } else {
              onOpenSuggestion({ suggestion: selectedSuggestion, target: eventToTarget2(event, platformName) });
            }
          } else {
            onSubmit({ term, target: eventToTarget2(event, platformName) });
          }
          break;
      }
    };
    return /* @__PURE__ */ _(
      "form",
      {
        class: SearchForm_default.form,
        style: { "--input-font": inputFont, "--suffix-text-width": `${inputSuffixWidth}px` },
        onSubmit: (event) => {
          event.preventDefault();
          onSubmit({
            term,
            target: "same-tab"
          });
        }
      },
      /* @__PURE__ */ _(
        "input",
        {
          ref: inputRef,
          type: "text",
          role: "combobox",
          class: SearchForm_default.input,
          placeholder: t4("omnibar_searchFormPlaceholder"),
          "aria-label": t4("omnibar_searchFormPlaceholder"),
          "aria-expanded": suggestions.length > 0,
          "aria-haspopup": "listbox",
          "aria-controls": suggestionsListId,
          "aria-activedescendant": selectedSuggestion?.id,
          spellcheck: false,
          autoComplete: "off",
          autoCorrect: "off",
          autoCapitalize: "off",
          onKeyDown: handleKeyDown,
          onChange: (event) => {
            const term2 = event.currentTarget.value;
            setTerm(term2);
            updateSuggestions(term2);
          },
          onClick: () => acceptSuggestion(),
          onBlurCapture: (event) => {
            if (event.relatedTarget instanceof Element) {
              if (event.relatedTarget.role === "option") return;
              if (event.relatedTarget.classList.contains(SearchForm_default.closeButton)) return;
            }
            hideSuggestions();
          }
        }
      ),
      inputSuffix && /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("span", { class: SearchForm_default.suffixSpacer, inert: true }, inputBase + inputCompletion || t4("omnibar_searchFormPlaceholder")), /* @__PURE__ */ _("span", { class: SearchForm_default.suffix, inert: true }, inputSuffixText)),
      term.length > 0 && /* @__PURE__ */ _(
        "button",
        {
          class: SearchForm_default.closeButton,
          "aria-label": t4("omnibar_searchFormCloseButtonLabel"),
          tabIndex: 0,
          onClick: (event) => {
            event.preventDefault();
            hideSuggestions();
            setTerm("");
            inputRef.current?.focus();
          }
        },
        /* @__PURE__ */ _(CloseSmallIcon, null)
      )
    );
  }
  function measureText(text2, font) {
    if (!text2) return 0;
    const canvas = document.createElement("canvas");
    const context = canvas.getContext("2d");
    if (!context) throw new Error("Failed to get canvas context");
    context.font = font;
    return context.measureText(text2).width;
  }
  var init_SearchForm2 = __esm({
    "pages/new-tab/app/omnibar/components/SearchForm.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_handlers();
      init_settings_provider();
      init_types();
      init_utils4();
      init_SearchForm();
      init_SearchFormProvider();
      init_SuffixText();
      init_useSuggestionInput();
      init_Icons2();
    }
  });

  // pages/new-tab/app/omnibar/components/SuggestionsList.module.css
  var SuggestionsList_default;
  var init_SuggestionsList = __esm({
    "pages/new-tab/app/omnibar/components/SuggestionsList.module.css"() {
      SuggestionsList_default = {
        list: "SuggestionsList_list",
        main: "SuggestionsList_main",
        footer: "SuggestionsList_footer",
        item: "SuggestionsList_item",
        suffix: "SuggestionsList_suffix",
        badge: "SuggestionsList_badge",
        title: "SuggestionsList_title"
      };
    }
  });

  // pages/new-tab/app/omnibar/components/SuggestionsList.js
  function SuggestionsList({ onOpenSuggestion, onSubmitChat }) {
    const { suggestionsListId, suggestions } = useSearchFormContext();
    if (suggestions.length === 0) return null;
    const mainSuggestions = suggestions.filter((suggestion) => suggestion.kind !== "aiChat");
    const footerSuggestions = suggestions.filter((suggestion) => suggestion.kind === "aiChat");
    return /* @__PURE__ */ _("div", { role: "listbox", id: suggestionsListId, class: SuggestionsList_default.list }, mainSuggestions.length > 0 && /* @__PURE__ */ _("div", { class: SuggestionsList_default.main }, mainSuggestions.map((suggestion) => /* @__PURE__ */ _(
      SuggestionsListItem,
      {
        key: suggestion.id,
        suggestion,
        onOpenSuggestion,
        onSubmitChat
      }
    ))), footerSuggestions.length > 0 && /* @__PURE__ */ _("div", { class: SuggestionsList_default.footer }, footerSuggestions.map((suggestion) => /* @__PURE__ */ _(
      SuggestionsListItem,
      {
        key: suggestion.id,
        suggestion,
        onOpenSuggestion,
        onSubmitChat
      }
    ))));
  }
  function SuggestionsListItem({ suggestion, onOpenSuggestion, onSubmitChat }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    const platformName = usePlatformName();
    const { term, selectedSuggestion, setSelectedSuggestion, clearSelectedSuggestion } = useSearchFormContext();
    const title = getSuggestionTitle(suggestion, term);
    const suffix = getSuggestionSuffix(suggestion);
    return /* @__PURE__ */ _(
      "button",
      {
        role: "option",
        id: suggestion.id,
        class: SuggestionsList_default.item,
        tabIndex: suggestion === selectedSuggestion ? 0 : -1,
        "aria-selected": suggestion === selectedSuggestion,
        onMouseOver: () => setSelectedSuggestion(suggestion),
        onMouseLeave: () => clearSelectedSuggestion(),
        onClick: (event) => {
          event.preventDefault();
          if (suggestion.kind === "aiChat") {
            onSubmitChat({ chat: suggestion.chat, target: eventToTarget2(event, platformName) });
          } else {
            onOpenSuggestion({ suggestion, target: eventToTarget2(event, platformName) });
          }
        }
      },
      /* @__PURE__ */ _(SuggestionIcon, { suggestion }),
      /* @__PURE__ */ _("span", { class: SuggestionsList_default.title }, suggestion.kind === "aiChat" ? /* @__PURE__ */ _("b", null, title) : startsWithIgnoreCase(title, term) ? /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("b", null, title.slice(0, term.length)), title.slice(term.length)) : title),
      suffix && /* @__PURE__ */ _("span", { class: SuggestionsList_default.suffix }, /* @__PURE__ */ _(SuffixText, { suffix })),
      suggestion.kind === "openTab" && /* @__PURE__ */ _("span", { class: SuggestionsList_default.badge }, t4("omnibar_switchToTab"), " ", /* @__PURE__ */ _(ArrowRightIcon, null))
    );
  }
  function SuggestionIcon({ suggestion }) {
    switch (suggestion.kind) {
      case "phrase":
        return /* @__PURE__ */ _(SearchIcon, null);
      case "website":
        return /* @__PURE__ */ _(GlobeIcon, null);
      case "historyEntry":
        return /* @__PURE__ */ _(HistoryIcon, null);
      case "bookmark":
        return suggestion.isFavorite ? /* @__PURE__ */ _(FavoriteIcon, null) : /* @__PURE__ */ _(BookmarkIcon, null);
      case "openTab":
        return /* @__PURE__ */ _(TabDesktopIcon, null);
      case "internalPage":
        return /* @__PURE__ */ _(BrowserIcon, null);
      case "aiChat":
        return /* @__PURE__ */ _(AiChatIcon, null);
      default:
        throw new Error("Unknown suggestion kind");
    }
  }
  var init_SuggestionsList2 = __esm({
    "pages/new-tab/app/omnibar/components/SuggestionsList.js"() {
      "use strict";
      init_preact_module();
      init_handlers();
      init_Icons2();
      init_settings_provider();
      init_utils4();
      init_SearchFormProvider();
      init_SuffixText();
      init_SuggestionsList();
      init_types();
    }
  });

  // pages/new-tab/app/omnibar/components/TabSwitcher.module.css
  var TabSwitcher_default;
  var init_TabSwitcher = __esm({
    "pages/new-tab/app/omnibar/components/TabSwitcher.module.css"() {
      TabSwitcher_default = {
        tabSwitcher: "TabSwitcher_tabSwitcher",
        tab: "TabSwitcher_tab",
        tabLabel: "TabSwitcher_tabLabel",
        blob: "TabSwitcher_blob"
      };
    }
  });

  // pages/new-tab/app/omnibar/components/TabSwitcher.js
  function TabSwitcher({ mode, onChange }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    return /* @__PURE__ */ _(
      "div",
      {
        class: TabSwitcher_default.tabSwitcher,
        style: { "--tab-count": 2, "--tab-index": mode === "search" ? 0 : 1 },
        role: "tablist",
        "aria-label": t4("omnibar_tabSwitcherLabel")
      },
      /* @__PURE__ */ _("div", { class: TabSwitcher_default.blob }),
      /* @__PURE__ */ _("button", { class: TabSwitcher_default.tab, role: "tab", "aria-selected": mode === "search", onClick: () => onChange("search") }, /* @__PURE__ */ _(TabIcon, { mode: "search", selected: mode === "search" }), /* @__PURE__ */ _("span", { class: TabSwitcher_default.tabLabel }, t4("omnibar_searchTabLabel"))),
      /* @__PURE__ */ _("button", { class: TabSwitcher_default.tab, role: "tab", "aria-selected": mode === "ai", onClick: () => onChange("ai") }, /* @__PURE__ */ _(TabIcon, { mode: "ai", selected: mode === "ai" }), /* @__PURE__ */ _("span", { class: TabSwitcher_default.tabLabel }, t4("omnibar_aiTabLabel")))
    );
  }
  function TabIcon({ mode, selected }) {
    const { main } = x2(CustomizerThemesContext);
    if (mode === "search") {
      if (selected) return main.value === "light" ? /* @__PURE__ */ _(SearchColorIcon, null) : /* @__PURE__ */ _(SearchOnDarkColorIcon, null);
      return /* @__PURE__ */ _(SearchIcon, null);
    } else {
      if (selected) return main.value === "light" ? /* @__PURE__ */ _(AiChatColorIcon, null) : /* @__PURE__ */ _(AiChatOnDarkColorIcon, null);
      return /* @__PURE__ */ _(AiChatIcon, null);
    }
  }
  var init_TabSwitcher2 = __esm({
    "pages/new-tab/app/omnibar/components/TabSwitcher.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_Icons2();
      init_CustomizerProvider();
      init_types();
      init_TabSwitcher();
    }
  });

  // pages/new-tab/app/tabs/tabs.service.js
  var TabsService;
  var init_tabs_service = __esm({
    "pages/new-tab/app/tabs/tabs.service.js"() {
      "use strict";
      init_service();
      TabsService = class {
        /**
         * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
         * @param {Tabs} tabs
         * @internal
         */
        constructor(ntp, tabs) {
          this.ntp = ntp;
          this.tabsService = new Service(
            {
              subscribe: (cb) => ntp.messaging.subscribe("tabs_onDataUpdate", cb)
            },
            tabs
          );
        }
        name() {
          return "TabsService";
        }
        /**
         * @param {(evt: {data: Tabs, source: import('../service.js').InvocationSource}) => void} cb
         * @internal
         */
        onData(cb) {
          return this.tabsService.onData(cb);
        }
        /**
         * @internal
         */
        destroy() {
          this.tabsService.destroy();
        }
        /**
         * @returns {Tabs}
         */
        snapshot() {
          if (!this.tabsService.data) throw new Error("unreachable");
          return this.tabsService.data;
        }
      };
      /** @type {Tabs} */
      __publicField(TabsService, "DEFAULT", {
        tabId: "unknown",
        tabIds: ["unknown"]
      });
    }
  });

  // pages/new-tab/app/tabs/TabsProvider.js
  function TabsProvider({ children, service }) {
    const tabs = useSignal(service.snapshot());
    y2(() => {
      return service.onData(({ data: data2 }) => {
        tabs.value = data2;
      });
    }, [service, tabs]);
    return /* @__PURE__ */ _(TabsStateContext.Provider, { value: tabs }, children);
  }
  function useTabState() {
    const tabs = x2(TabsStateContext);
    const current = useComputed(() => tabs.value.tabId);
    const all2 = useComputed(() => tabs.value.tabIds);
    return { current, all: all2 };
  }
  function TabsDebug() {
    const theme = x2(CustomizerThemesContext);
    const state = useTabState();
    return /* @__PURE__ */ _("pre", { style: "width: 200px; position: fixed; top: 0; left: 0;", "data-theme": theme.main }, /* @__PURE__ */ _("code", { style: "color: var(--ntp-text-normal)" }, JSON.stringify(state, null, 2)));
  }
  var TabsStateContext;
  var init_TabsProvider = __esm({
    "pages/new-tab/app/tabs/TabsProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_CustomizerProvider();
      init_signals_module();
      init_tabs_service();
      TabsStateContext = K(d3(
        /** @type {Tabs} */
        TabsService.DEFAULT
      ));
    }
  });

  // pages/new-tab/app/tabs/PersistentValue.js
  function string(input) {
    if (typeof input !== "string") return "";
    if (input.trim().length < 1) return "";
    return input;
  }
  var _values, PersistentValue;
  var init_PersistentValue = __esm({
    "pages/new-tab/app/tabs/PersistentValue.js"() {
      "use strict";
      PersistentValue = class {
        constructor() {
          /** @type {Map<string, T>} */
          __privateAdd(this, _values, /* @__PURE__ */ new Map());
        }
        name() {
          return "PersistentValue";
        }
        /**
         * Updates the value associated with a given identifier.
         *
         * @param {object} args
         * @param {string} args.id
         * @param {T} args.value
         */
        update({ id, value: value2 }) {
          if (string(id)) {
            __privateGet(this, _values).set(id, value2);
          }
        }
        /**
         * Updates the value with every entry
         *
         * @param {object} args
         * @param {T} args.value
         */
        updateAll({ value: value2 }) {
          for (const [key2] of __privateGet(this, _values)) {
            __privateGet(this, _values).set(key2, value2);
          }
        }
        /**
         * @param {object} params
         * @param {string[]} params.preserve
         */
        prune({ preserve }) {
          for (const key2 of __privateGet(this, _values).keys()) {
            if (!preserve.includes(key2)) {
              __privateGet(this, _values).delete(key2);
            }
          }
        }
        /**
         * @param {object} args
         * @param {string} args.id
         */
        remove({ id }) {
          if (string(id)) {
            __privateGet(this, _values).delete(id);
          }
        }
        /**
         * @param {string|null|undefined} id
         * @return {T | null}
         */
        byId(id) {
          if (typeof id !== "string") return null;
          const value2 = __privateGet(this, _values).get(id);
          if (value2 === void 0) return null;
          return value2;
        }
        print() {
          for (const [key2, value2] of __privateGet(this, _values)) {
            console.log(`key: ${key2}, value: ${value2}`);
          }
          console.log("--");
        }
      };
      _values = new WeakMap();
    }
  });

  // pages/new-tab/app/omnibar/components/PersistentOmnibarValuesProvider.js
  function PersistentTextInputProvider({ children }) {
    const [value2] = d2(() => (
      /** @type {PersistentValue<string>} */
      new PersistentValue()
    ));
    const { all: all2 } = useTabState();
    y2(() => {
      return all2.subscribe((tabIds) => {
        value2?.prune({ preserve: tabIds });
      });
    }, [all2, value2]);
    return /* @__PURE__ */ _(TextInputContext.Provider, { value: value2 }, children);
  }
  function PersistentModeProvider({ children }) {
    const [value2] = d2(() => (
      /** @type {PersistentValue<Mode>} */
      new PersistentValue()
    ));
    const { all: all2 } = useTabState();
    y2(() => {
      return all2.subscribe((tabIds) => {
        value2?.prune({ preserve: tabIds });
      });
    }, [all2, value2]);
    return /* @__PURE__ */ _(ModeContext.Provider, { value: value2 }, children);
  }
  function useQueryWithLocalPersistence(tabId) {
    const terms = x2(TextInputContext);
    invariant(
      x2(OmnibarContext).state.status === "ready",
      "Cannot use `useQueryWithLocalPersistence` without Omnibar Service being ready."
    );
    const [query, setQuery] = d2(() => terms?.byId(tabId) || "");
    const setter = q2(
      (term) => {
        if (tabId) {
          terms?.update({ id: tabId, value: term });
        }
        setQuery(term);
      },
      [tabId, terms]
    );
    return (
      /** @type {const} */
      [query, setter]
    );
  }
  function useModeWithLocalPersistence(tabId, defaultMode) {
    const values2 = x2(ModeContext);
    const [mode, setState] = d2(() => {
      const prev = values2?.byId(tabId);
      if (prev) return prev;
      if (tabId && defaultMode) {
        values2?.update({ id: tabId, value: defaultMode });
      }
      return defaultMode;
    });
    invariant(
      x2(OmnibarContext).state.status === "ready",
      "Cannot use `useQueryWithPersistence` without Omnibar Service being ready."
    );
    const service = useOmnibarService();
    y2(() => {
      if (!service) return;
      return service.onConfig((v4) => {
        if (!tabId) return;
        if (v4.source === "manual") {
          values2?.update({ id: tabId, value: v4.data.mode });
        }
        if (v4.data.enableAi === false) {
          values2?.updateAll({ value: "search" });
        }
        setState(v4.data.mode);
      });
    }, [service, tabId, values2, defaultMode]);
    return mode;
  }
  function invariant(condition, message) {
    if (condition) return;
    if (message) throw new Error("Invariant failed: " + message);
    throw new Error("Invariant failed");
  }
  var TextInputContext, ModeContext;
  var init_PersistentOmnibarValuesProvider = __esm({
    "pages/new-tab/app/omnibar/components/PersistentOmnibarValuesProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_OmnibarProvider();
      init_TabsProvider();
      init_PersistentValue();
      TextInputContext = K(
        /** @type {PersistentValue<string>|null} */
        null
      );
      ModeContext = K(
        /** @type {PersistentValue<Mode>|null} */
        null
      );
    }
  });

  // pages/new-tab/app/components/Popover.module.css
  var Popover_default;
  var init_Popover = __esm({
    "pages/new-tab/app/components/Popover.module.css"() {
      Popover_default = {
        popover: "Popover_popover",
        content: "Popover_content",
        closeButton: "Popover_closeButton",
        heading: "Popover_heading",
        badge: "Popover_badge",
        title: "Popover_title",
        description: "Popover_description",
        arrow: "Popover_arrow"
      };
    }
  });

  // pages/new-tab/app/components/Popover.js
  function Popover({ title, badge, onClose, children }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    const titleId = g2();
    const descriptionId = g2();
    const popoverRef = A2(
      /** @type {HTMLDivElement|null} */
      null
    );
    y2(() => {
      popoverRef.current?.focus();
      const handleEscapeKey = (event) => {
        if (event.key === "Escape") {
          onClose();
        }
      };
      document.addEventListener("keydown", handleEscapeKey);
      return () => document.removeEventListener("keydown", handleEscapeKey);
    }, [onClose]);
    return /* @__PURE__ */ _("div", { ref: popoverRef, class: Popover_default.popover, role: "dialog", "aria-labelledby": titleId, "aria-describedby": descriptionId, tabIndex: -1 }, /* @__PURE__ */ _("svg", { class: Popover_default.arrow, xmlns: "http://www.w3.org/2000/svg", width: "12", height: "30", viewBox: "0 0 12 30", fill: "none" }, /* @__PURE__ */ _(
      "path",
      {
        d: "M9.20362 6.3927L0.510957 13.8636C-0.183621 14.4619 -0.16344 15.5367 0.531137 16.1351L9.20362 23.606C10.9677 25.1256 11.9819 27.3368 11.9819 29.6632L11.9819 30.0003L11.9819 -0.000488281V0.335449C11.9819 2.66185 10.9677 4.87302 9.20362 6.3927Z",
        fill: "currentColor"
      }
    )), /* @__PURE__ */ _("div", { class: Popover_default.content }, /* @__PURE__ */ _("button", { class: Popover_default.closeButton, onClick: onClose, "aria-label": t4("ntp_popover_close_button") }, /* @__PURE__ */ _(Cross, null)), /* @__PURE__ */ _("h3", { id: titleId, class: Popover_default.heading }, badge && /* @__PURE__ */ _("span", { class: Popover_default.badge }, badge), /* @__PURE__ */ _("span", { class: Popover_default.title }, title)), /* @__PURE__ */ _("p", { id: descriptionId, class: Popover_default.description }, children)));
  }
  var init_Popover2 = __esm({
    "pages/new-tab/app/components/Popover.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_types();
      init_Icons2();
      init_Popover();
    }
  });

  // pages/new-tab/app/components/Drawer.js
  function useDrawer(initial) {
    const { isReducedMotion } = useEnv();
    const asideRef = A2(
      /** @type {HTMLDivElement|null} */
      null
    );
    const buttonRef = A2(
      /** @type {HTMLButtonElement|null} */
      null
    );
    const buttonId = g2();
    const drawerId = g2();
    const visibility = useSignal(
      /** @type {DrawerVisibility} */
      "hidden"
    );
    const displayChildren = useSignal(false);
    const animating = useSignal(false);
    const hidden = useComputed(() => displayChildren.value === false);
    _2(() => {
      const controller = new AbortController();
      const aside = asideRef.current;
      if (!aside) return;
      const update = (value2) => {
        visibility.value = value2;
        if (isReducedMotion) {
          displayChildren.value = visibility.value === "visible";
        }
      };
      const close = () => update("hidden");
      const open = () => update("visible");
      const toggle = () => {
        const next = visibility.value === "hidden" ? "visible" : "hidden";
        update(next);
      };
      window.addEventListener(CLOSE_DRAWER_EVENT, close, { signal: controller.signal });
      window.addEventListener(TOGGLE_DRAWER_EVENT, toggle, { signal: controller.signal });
      window.addEventListener(OPEN_DRAWER_EVENT, open, { signal: controller.signal });
      aside?.addEventListener(
        "transitionend",
        (e4) => {
          if (e4.target !== e4.currentTarget) return;
          r3(() => {
            displayChildren.value = visibility.value === "visible";
            animating.value = false;
            if (displayChildren.value === false) {
              buttonRef.current?.focus?.();
            }
          });
        },
        { signal: controller.signal }
      );
      aside?.addEventListener(
        "transitionstart",
        (e4) => {
          if (e4.target !== e4.currentTarget) return;
          r3(() => {
            animating.value = true;
            displayChildren.value = true;
          });
        },
        { signal: controller.signal }
      );
      return () => {
        controller.abort();
      };
    }, [isReducedMotion, initial]);
    const ntp = useMessaging();
    y2(() => {
      if (initial === "visible") {
        _open();
      }
      return ntp.messaging.subscribe("customizer_autoOpen", () => {
        _open();
      });
    }, [initial, ntp]);
    return {
      buttonRef,
      visibility,
      displayChildren,
      buttonId,
      drawerId,
      hidden,
      animating,
      asideRef
    };
  }
  function _toggle() {
    window.dispatchEvent(new CustomEvent(TOGGLE_DRAWER_EVENT));
  }
  function _open() {
    window.dispatchEvent(new CustomEvent(OPEN_DRAWER_EVENT));
  }
  function _close() {
    window.dispatchEvent(new CustomEvent(CLOSE_DRAWER_EVENT));
  }
  function useDrawerEventListeners({ onOpen, onClose, onToggle }, deps = []) {
    y2(() => {
      const controller = new AbortController();
      if (onOpen) window.addEventListener(OPEN_DRAWER_EVENT, onOpen, { signal: controller.signal });
      if (onClose) window.addEventListener(CLOSE_DRAWER_EVENT, onClose, { signal: controller.signal });
      if (onToggle) window.addEventListener(TOGGLE_DRAWER_EVENT, onToggle, { signal: controller.signal });
      return () => controller.abort();
    }, deps);
  }
  function useDrawerControls() {
    return {
      toggle: _toggle,
      close: _close,
      open: _open
    };
  }
  var CLOSE_DRAWER_EVENT, TOGGLE_DRAWER_EVENT, OPEN_DRAWER_EVENT;
  var init_Drawer = __esm({
    "pages/new-tab/app/components/Drawer.js"() {
      "use strict";
      init_hooks_module();
      init_signals_module();
      init_EnvironmentProvider();
      init_types();
      CLOSE_DRAWER_EVENT = "close-drawer";
      TOGGLE_DRAWER_EVENT = "toggle-drawer";
      OPEN_DRAWER_EVENT = "open-drawer";
    }
  });

  // pages/new-tab/app/omnibar/components/Omnibar.js
  function Omnibar({ mode, setMode, enableAi, showCustomizePopover, tabId }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    const [query, setQuery] = useQueryWithLocalPersistence(tabId);
    const [resetKey, setResetKey] = d2(0);
    const [autoFocus, setAutoFocus] = d2(false);
    const { openSuggestion, submitSearch, submitChat, setShowCustomizePopover } = x2(OmnibarContext);
    const { open: openCustomizer } = useDrawerControls();
    useDrawerEventListeners(
      {
        onOpen: () => setShowCustomizePopover(false),
        onToggle: () => setShowCustomizePopover(false)
      },
      [setShowCustomizePopover]
    );
    const resetForm = () => {
      setQuery("");
      setResetKey((prev) => prev + 1);
    };
    const handleCloseCustomizePopover = q2(() => {
      setShowCustomizePopover(false);
    }, [setShowCustomizePopover]);
    const handleOpenSuggestion = (params) => {
      openSuggestion(params);
      resetForm();
    };
    const handleSubmitSearch = (params) => {
      submitSearch(params);
      resetForm();
    };
    const handleSubmitChat = (params) => {
      submitChat(params);
      resetForm();
    };
    const handleChangeMode = (nextMode) => {
      setAutoFocus(true);
      setMode(nextMode);
    };
    return /* @__PURE__ */ _("div", { key: resetKey, class: Omnibar_default.root, "data-mode": mode }, /* @__PURE__ */ _(LogoStacked, { class: Omnibar_default.logo, "aria-label": t4("omnibar_logoAlt") }), enableAi && /* @__PURE__ */ _("div", { class: Omnibar_default.tabSwitcherContainer }, /* @__PURE__ */ _(TabSwitcher, { mode, onChange: handleChangeMode }), showCustomizePopover && /* @__PURE__ */ _(
      Popover,
      {
        title: t4("omnibar_customizePopoverTitle"),
        badge: t4("omnibar_customizePopoverBadge"),
        onClose: handleCloseCustomizePopover
      },
      /* @__PURE__ */ _(
        Trans,
        {
          str: t4("omnibar_customizePopoverDescription"),
          values: {
            button: {
              click: () => openCustomizer()
            }
          }
        }
      )
    )), /* @__PURE__ */ _(SearchFormProvider, { term: query, setTerm: setQuery }, /* @__PURE__ */ _("div", { class: Omnibar_default.spacer }, /* @__PURE__ */ _("div", { class: Omnibar_default.popup }, /* @__PURE__ */ _(ResizingContainer, { className: Omnibar_default.field }, mode === "search" ? /* @__PURE__ */ _(
      SearchForm,
      {
        autoFocus,
        onOpenSuggestion: handleOpenSuggestion,
        onSubmit: handleSubmitSearch,
        onSubmitChat: handleSubmitChat
      }
    ) : /* @__PURE__ */ _(AiChatForm, { chat: query, autoFocus, onChange: setQuery, onSubmit: handleSubmitChat })), mode === "search" && /* @__PURE__ */ _(SuggestionsList, { onOpenSuggestion: handleOpenSuggestion, onSubmitChat: handleSubmitChat })))));
  }
  var init_Omnibar2 = __esm({
    "pages/new-tab/app/omnibar/components/Omnibar.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_Icons2();
      init_types();
      init_AiChatForm2();
      init_Omnibar();
      init_OmnibarProvider();
      init_ResizingContainer();
      init_SearchForm2();
      init_SearchFormProvider();
      init_SuggestionsList2();
      init_TabSwitcher2();
      init_PersistentOmnibarValuesProvider();
      init_Popover2();
      init_Drawer();
      init_TranslationsProvider();
    }
  });

  // pages/new-tab/app/omnibar/components/OmnibarConsumer.js
  function OmnibarConsumer() {
    const { state, setEnableAi } = x2(OmnibarContext);
    const { current } = useTabState();
    const { visibility } = useVisibility();
    if (state.status !== "ready") return null;
    const visible = visibility.value === "visible";
    return /* @__PURE__ */ _(k, null, state.config.showAiSetting && /* @__PURE__ */ _(AiSetting, { enableAi: state.config?.enableAi === true, setEnableAi, omnibarVisible: visible }), visible && /* @__PURE__ */ _(OmnibarReadyState, { config: state.config, key: current.value, tabId: current.value }));
  }
  function OmnibarReadyState({ config, tabId }) {
    const { enableAi = true, showAiSetting = true, showCustomizePopover = false, mode: defaultMode } = config;
    const { setMode } = x2(OmnibarContext);
    const modeForCurrentTab = useModeWithLocalPersistence(tabId, defaultMode);
    return /* @__PURE__ */ _(
      Omnibar,
      {
        mode: modeForCurrentTab,
        setMode,
        enableAi: showAiSetting && enableAi,
        showCustomizePopover,
        tabId
      }
    );
  }
  function AiSetting({ enableAi, setEnableAi, omnibarVisible }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    const { id, index: index2 } = useVisibility();
    useCustomizer({
      title: t4("omnibar_toggleDuckAi"),
      id: `_${id}-toggleAi`,
      icon: /* @__PURE__ */ _(ArrowIndentCenteredIcon, { style: { color: "var(--ntp-icons-tertiary)" } }),
      toggle: () => setEnableAi(!enableAi),
      /**
       * Duck.ai is only ever shown as 'visible' (eg: switch is checked) if the omnibar is also visible.
       */
      visibility: omnibarVisible && enableAi ? "visible" : "hidden",
      index: index2 + 0.1,
      enabled: omnibarVisible
    });
    return null;
  }
  var init_OmnibarConsumer = __esm({
    "pages/new-tab/app/omnibar/components/OmnibarConsumer.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_CustomizerMenu();
      init_types();
      init_widget_config_provider();
      init_Omnibar2();
      init_OmnibarProvider();
      init_Icons2();
      init_PersistentOmnibarValuesProvider();
      init_TabsProvider();
    }
  });

  // pages/new-tab/app/omnibar/components/OmnibarCustomized.js
  function OmnibarCustomized() {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    const sectionTitle = t4("omnibar_menuTitle");
    const { visibility, id, toggle, index: index2 } = useVisibility();
    useCustomizer({ title: sectionTitle, id, icon: /* @__PURE__ */ _(SearchIcon, null), toggle, visibility: visibility.value, index: index2, enabled: true });
    return /* @__PURE__ */ _(PersistentTextInputProvider, null, /* @__PURE__ */ _(PersistentModeProvider, null, /* @__PURE__ */ _(OmnibarProvider, null, /* @__PURE__ */ _(OmnibarConsumer, null))));
  }
  var init_OmnibarCustomized = __esm({
    "pages/new-tab/app/omnibar/components/OmnibarCustomized.js"() {
      "use strict";
      init_types();
      init_widget_config_provider();
      init_CustomizerMenu();
      init_OmnibarProvider();
      init_preact_module();
      init_OmnibarConsumer();
      init_Icons2();
      init_PersistentOmnibarValuesProvider();
    }
  });

  // pages/new-tab/app/entry-points/omnibar.js
  var omnibar_exports = {};
  __export(omnibar_exports, {
    factory: () => factory5
  });
  function factory5() {
    return /* @__PURE__ */ _(Centered, { "data-entry-point": "omnibar" }, /* @__PURE__ */ _(OmnibarCustomized, null));
  }
  var init_omnibar = __esm({
    "pages/new-tab/app/entry-points/omnibar.js"() {
      "use strict";
      init_preact_module();
      init_Layout();
      init_OmnibarCustomized();
    }
  });

  // pages/new-tab/app/entry-points/privacyStats.js
  var privacyStats_exports = {};
  __export(privacyStats_exports, {
    factory: () => factory6
  });
  function factory6() {
  }
  var init_privacyStats = __esm({
    "pages/new-tab/app/entry-points/privacyStats.js"() {
      "use strict";
    }
  });

  // pages/new-tab/app/protections/protections.service.js
  var ProtectionsService;
  var init_protections_service = __esm({
    "pages/new-tab/app/protections/protections.service.js"() {
      "use strict";
      init_service();
      ProtectionsService = class {
        /**
         * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
         * @internal
         */
        constructor(ntp) {
          this.dataService = new Service({
            initial: () => ntp.messaging.request("protections_getData"),
            subscribe: (cb) => ntp.messaging.subscribe("protections_onDataUpdate", cb)
          });
          this.configService = new Service({
            initial: () => ntp.messaging.request("protections_getConfig"),
            subscribe: (cb) => ntp.messaging.subscribe("protections_onConfigUpdate", cb),
            persist: (data2) => ntp.messaging.notify("protections_setConfig", data2)
          });
        }
        name() {
          return "ProtectionsService";
        }
        /**
         * @returns {Promise<{data: ProtectionsData; config: ProtectionsConfig}>}
         * @internal
         */
        async getInitial() {
          const p1 = this.configService.fetchInitial();
          const p22 = this.dataService.fetchInitial();
          const [config, data2] = await Promise.all([p1, p22]);
          return { config, data: data2 };
        }
        /**
         * @internal
         */
        destroy() {
          this.configService.destroy();
          this.dataService.destroy();
        }
        /**
         * @param {(evt: {data: ProtectionsData, source: 'manual' | 'subscription'}) => void} cb
         * @internal
         */
        onData(cb) {
          return this.dataService.onData(cb);
        }
        /**
         * @param {(evt: {data: ProtectionsConfig, source: 'manual' | 'subscription'}) => void} cb
         * @internal
         */
        onConfig(cb) {
          return this.configService.onData(cb);
        }
        /**
         * Update the in-memory data immediate and persist.
         * Any state changes will be broadcast to consumers synchronously
         * @internal
         */
        toggleExpansion() {
          this.configService.update((old) => {
            if (old.expansion === "expanded") {
              return { ...old, expansion: (
                /** @type {const} */
                "collapsed"
              ) };
            } else {
              return { ...old, expansion: (
                /** @type {const} */
                "expanded"
              ) };
            }
          });
        }
        /**
         * @param {ProtectionsConfig['feed']} feed
         */
        setFeed(feed) {
          this.configService.update((old) => {
            return {
              ...old,
              feed
            };
          });
        }
      };
    }
  });

  // pages/new-tab/app/protections/components/ProtectionsProvider.js
  function ProtectionsProvider(props) {
    const initial = (
      /** @type {State} */
      {
        status: "idle",
        data: null,
        config: null
      }
    );
    const [state, dispatch] = h2(reducer, initial);
    const service = useService5();
    useInitialDataAndConfig({ dispatch, service });
    useConfigSubscription({ dispatch, service });
    const toggle = q2(() => {
      service.current?.toggleExpansion();
    }, [service]);
    const setFeed = q2(
      (feed) => {
        service.current?.setFeed(feed);
      },
      [service]
    );
    return /* @__PURE__ */ _(ProtectionsContext.Provider, { value: { state, toggle, setFeed } }, /* @__PURE__ */ _(ProtectionsServiceContext.Provider, { value: service.current }, props.children));
  }
  function useService5() {
    const service = A2(
      /** @type {ProtectionsService|null} */
      null
    );
    const ntp = useMessaging();
    y2(() => {
      const stats = new ProtectionsService(ntp);
      service.current = stats;
      return () => {
        stats.destroy();
      };
    }, [ntp]);
    return service;
  }
  function useBlockedCount(initial) {
    const service = useService5();
    const signal = useSignal(initial);
    useSignalEffect(() => {
      return service.current?.onData((evt) => {
        signal.value = evt.data.totalCount;
      });
    });
    return signal;
  }
  var ProtectionsContext, ProtectionsServiceContext;
  var init_ProtectionsProvider = __esm({
    "pages/new-tab/app/protections/components/ProtectionsProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_types();
      init_service_hooks();
      init_protections_service();
      init_signals_module();
      ProtectionsContext = K({
        /** @type {State} */
        state: { status: "idle", data: null, config: null },
        /** @type {() => void} */
        toggle: () => {
          throw new Error("must implement");
        },
        /** @type {(feed: ProtectionsConfig['feed']) => void} */
        setFeed: (_feed) => {
          throw new Error("must implement");
        }
      });
      ProtectionsServiceContext = K(
        /** @type {ProtectionsService|null} */
        {}
      );
    }
  });

  // pages/new-tab/app/protections/components/Protections.module.css
  var Protections_default;
  var init_Protections = __esm({
    "pages/new-tab/app/protections/components/Protections.module.css"() {
      Protections_default = {
        root: "Protections_root",
        listExpander: "Protections_listExpander",
        body: "Protections_body",
        switcher: "Protections_switcher",
        block: "Protections_block",
        empty: "Protections_empty",
        feed: "Protections_feed",
        button: "Protections_button",
        active: "Protections_active"
      };
    }
  });

  // pages/new-tab/app/privacy-stats/components/PrivacyStats.module.css
  var PrivacyStats_default;
  var init_PrivacyStats = __esm({
    "pages/new-tab/app/privacy-stats/components/PrivacyStats.module.css"() {
      PrivacyStats_default = {
        control: "PrivacyStats_control",
        headingIcon: "PrivacyStats_headingIcon",
        caption: "PrivacyStats_caption",
        widgetExpander: "PrivacyStats_widgetExpander",
        counter: "PrivacyStats_counter",
        title: "PrivacyStats_title",
        subtitle: "PrivacyStats_subtitle",
        indented: "PrivacyStats_indented",
        body: "PrivacyStats_body",
        list: "PrivacyStats_list",
        row: "PrivacyStats_row",
        listFooter: "PrivacyStats_listFooter",
        otherTrackersRow: "PrivacyStats_otherTrackersRow",
        listExpander: "PrivacyStats_listExpander",
        company: "PrivacyStats_company",
        name: "PrivacyStats_name",
        count: "PrivacyStats_count",
        bar: "PrivacyStats_bar",
        fill: "PrivacyStats_fill"
      };
    }
  });

  // pages/new-tab/app/protections/components/ProtectionsHeading.js
  function ProtectionsHeading({ expansion, canExpand, blockedCountSignal, onToggle, buttonAttrs = {} }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    const locale = useLocale();
    const [formatter] = d2(() => getLocalizedNumberFormatter(locale));
    const adBlocking = useAdBlocking();
    const blockedCount = blockedCountSignal.value;
    const none = blockedCount === 0;
    const some = blockedCount > 0;
    const alltime = formatter.format(blockedCount);
    let alltimeTitle;
    if (blockedCount === 1) {
      alltimeTitle = adBlocking ? t4("stats_countBlockedAdsAndTrackersSingular") : t4("stats_countBlockedSingular");
    } else {
      alltimeTitle = adBlocking ? t4("stats_countBlockedAdsAndTrackersPlural", { count: alltime }) : t4("stats_countBlockedPlural", { count: alltime });
    }
    return /* @__PURE__ */ _("div", { class: PrivacyStats_default.heading, "data-testid": "ProtectionsHeading" }, /* @__PURE__ */ _("div", { class: PrivacyStats_default.control }, /* @__PURE__ */ _("span", { class: PrivacyStats_default.headingIcon }, /* @__PURE__ */ _("img", { src: "./icons/Shield-Check-Color-16.svg", alt: "Privacy Shield" })), /* @__PURE__ */ _("h2", { class: PrivacyStats_default.caption }, t4("protections_menuTitle")), canExpand && /* @__PURE__ */ _("span", { class: PrivacyStats_default.widgetExpander }, /* @__PURE__ */ _(
      ShowHideButtonCircle,
      {
        buttonAttrs: {
          ...buttonAttrs,
          "aria-expanded": expansion === "expanded",
          "aria-pressed": expansion === "expanded"
        },
        onClick: onToggle,
        label: expansion === "expanded" ? t4("stats_hideLabel") : t4("stats_toggleLabel")
      }
    ))), /* @__PURE__ */ _("div", { class: PrivacyStats_default.counter }, none && /* @__PURE__ */ _("h3", { class: PrivacyStats_default.title }, t4("protections_noRecent")), some && /* @__PURE__ */ _("h3", { class: PrivacyStats_default.title }, " ", /* @__PURE__ */ _(Trans, { str: alltimeTitle, values: { count: alltime } })), /* @__PURE__ */ _("p", { class: (0, import_classnames8.default)(PrivacyStats_default.subtitle, PrivacyStats_default.indented) }, t4("stats_feedCountBlockedPeriod"))));
  }
  var import_classnames8;
  var init_ProtectionsHeading = __esm({
    "pages/new-tab/app/protections/components/ProtectionsHeading.js"() {
      "use strict";
      init_types();
      init_hooks_module();
      init_PrivacyStats();
      init_ShowHideButton();
      import_classnames8 = __toESM(require_classnames(), 1);
      init_preact_module();
      init_settings_provider();
      init_TranslationsProvider();
      init_utils3();
      init_EnvironmentProvider();
    }
  });

  // pages/new-tab/app/protections/components/Protections.js
  function Protections({ expansion = "expanded", children, blockedCountSignal, feed, toggle, setFeed }) {
    const WIDGET_ID = g2();
    const TOGGLE_ID = g2();
    const attrs = T2(() => {
      return {
        "aria-controls": WIDGET_ID,
        id: TOGGLE_ID
      };
    }, [WIDGET_ID, TOGGLE_ID]);
    return /* @__PURE__ */ _("div", { class: Protections_default.root }, /* @__PURE__ */ _(
      ProtectionsHeading,
      {
        blockedCountSignal,
        onToggle: toggle,
        expansion,
        canExpand: true,
        buttonAttrs: attrs
      }
    ), /* @__PURE__ */ _(ProtectionsBody, { feed, setFeed, id: WIDGET_ID, expansion }, children));
  }
  function ProtectionsBody({ feed, id, expansion, setFeed, children }) {
    const hidden = expansion === "collapsed";
    const showing = expansion === "expanded";
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    return /* @__PURE__ */ _("div", { class: Protections_default.body, id, "aria-hidden": hidden, "aria-expanded": showing }, expansion === "expanded" && /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("div", { class: (0, import_classnames9.default)(Protections_default.switcher, Protections_default.block) }, /* @__PURE__ */ _(
      "button",
      {
        class: (0, import_classnames9.default)(Protections_default.button, feed === "privacy-stats" && Protections_default.active),
        onClick: () => setFeed("privacy-stats")
      },
      t4("protections_statsSwitchTitle")
    ), /* @__PURE__ */ _("button", { class: (0, import_classnames9.default)(Protections_default.button, feed === "activity" && Protections_default.active), onClick: () => setFeed("activity") }, t4("protections_activitySwitchTitle"))), /* @__PURE__ */ _("div", { class: Protections_default.feed }, children)));
  }
  function ProtectionsEmpty({ children }) {
    return /* @__PURE__ */ _("div", { class: (0, import_classnames9.default)(Protections_default.block, Protections_default.empty) }, children);
  }
  var import_classnames9;
  var init_Protections2 = __esm({
    "pages/new-tab/app/protections/components/Protections.js"() {
      "use strict";
      init_hooks_module();
      init_preact_module();
      import_classnames9 = __toESM(require_classnames(), 1);
      init_Protections();
      init_ProtectionsHeading();
      init_types();
    }
  });

  // pages/new-tab/app/activity/batched-activity.service.js
  var BatchedActivityService;
  var init_batched_activity_service = __esm({
    "pages/new-tab/app/activity/batched-activity.service.js"() {
      "use strict";
      init_service();
      BatchedActivityService = class {
        INITIAL = 5;
        CHUNK_SIZE = 10;
        isFetchingNext = false;
        /**
         * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
         * @param {boolean} batched
         * @internal
         */
        constructor(ntp, batched = false) {
          this.ntp = ntp;
          this.batched = batched;
          this.dataService = new Service({
            initial: async (params) => {
              if (this.batched) {
                if (params && Array.isArray(params.urls) && this.dataService.data?.urls) {
                  const data2 = await this.ntp.messaging.request("activity_getDataForUrls", {
                    urls: params.urls
                  });
                  return {
                    activity: data2.activity,
                    totalTrackers: this.dataService.data.totalTrackers,
                    urls: this.dataService.data.urls
                  };
                } else {
                  const urlsResponse = await this.ntp.messaging.request("activity_getUrls");
                  const data2 = await this.ntp.messaging.request("activity_getDataForUrls", {
                    urls: urlsResponse.urls.slice(0, this.INITIAL)
                  });
                  return { activity: data2.activity, urls: urlsResponse.urls, totalTrackers: urlsResponse.totalTrackersBlocked };
                }
              } else {
                const data2 = await this.ntp.messaging.request("activity_getData");
                return {
                  activity: data2.activity,
                  urls: data2.activity.map((x3) => x3.url),
                  totalTrackers: data2.activity.reduce((acc, item) => acc + item.trackingStatus.totalCount, 0)
                };
              }
            },
            subscribe: (cb) => {
              const sub1 = ntp.messaging.subscribe("activity_onDataUpdate", (params) => {
                cb({
                  activity: params.activity,
                  urls: params.activity.map((x3) => x3.url),
                  totalTrackers: params.activity.reduce((acc, item) => acc + item.trackingStatus.totalCount, 0)
                });
              });
              const sub2 = ntp.messaging.subscribe("activity_onDataPatch", (params) => {
                const totalTrackers = params.totalTrackersBlocked;
                if ("patch" in params && params.patch !== null) {
                  cb({ activity: [
                    /** @type {DomainActivity} */
                    params.patch
                  ], urls: params.urls, totalTrackers });
                } else {
                  cb({ activity: [], urls: params.urls, totalTrackers });
                }
              });
              return () => {
                sub1();
                sub2();
              };
            }
          }).withUpdater((old, next, source) => {
            if (source === "manual") {
              return next;
            }
            if (this.batched) {
              return {
                activity: old.activity.concat(next.activity),
                urls: next.urls,
                totalTrackers: next.totalTrackers
              };
            }
            return next;
          });
          this.burns = new EventTarget();
          this.burnUnsub = this.ntp.messaging.subscribe("activity_onBurnComplete", () => {
            this.burns?.dispatchEvent(new CustomEvent("activity_onBurnComplete"));
          });
        }
        name() {
          return "BatchedActivity";
        }
        /**
         * @returns {Promise<ActivityData>}
         * @internal
         */
        async getInitial() {
          return await this.dataService.fetchInitial();
        }
        /**
         * @internal
         */
        destroy() {
          this.dataService.destroy();
          this.burnUnsub();
          this.burns = null;
        }
        /**
         * @param {string[]} urls
         */
        next(urls) {
          if (urls.length === 0) return;
          this.isFetchingNext = true;
          this.dataService.triggerFetch({ urls });
        }
        /**
         * @param {(evt: {data: Incoming, source: InvocationSource}) => void} cb
         * @internal
         */
        onData(cb) {
          return this.dataService.onData((data2) => {
            this.isFetchingNext = false;
            cb(data2);
          });
        }
        /**
         * @param {string[]} [urls] - optional subset to refresh
         */
        triggerDataFetch(urls) {
          if (urls) {
            this.dataService.triggerFetch({ urls });
          } else {
            this.dataService.triggerFetch();
          }
        }
        /**
         * @param {string} url
         */
        addFavorite(url8) {
          this.dataService.update((old) => {
            return {
              ...old,
              activity: old.activity.map((item) => {
                if (item.url === url8) return { ...item, favorite: true };
                return item;
              })
            };
          });
          this.ntp.messaging.notify("activity_addFavorite", { url: url8 });
        }
        /**
         * @param {string} url
         */
        removeFavorite(url8) {
          this.dataService.update((old) => {
            return {
              ...old,
              activity: old.activity.map((item) => {
                if (item.url === url8) return { ...item, favorite: false };
                return item;
              })
            };
          });
          this.ntp.messaging.notify("activity_removeFavorite", { url: url8 });
        }
        /**
         * @param {string} url
         * @return {Promise<import('../../types/new-tab.js').ConfirmBurnResponse>}
         */
        confirmBurn(url8) {
          return this.ntp.messaging.request("activity_confirmBurn", { url: url8 });
        }
        /**
         * @param {string} url
         */
        remove(url8) {
          this.dataService.update((old) => {
            return {
              ...old,
              activity: old.activity.filter((item) => {
                return item.url !== url8;
              }),
              urls: old.urls.filter((x3) => x3 !== url8)
            };
          });
          this.ntp.messaging.notify("activity_removeItem", { url: url8 });
        }
        /**
         * @param {string} url
         * @param {import('../../types/new-tab.js').OpenTarget} target
         */
        openUrl(url8, target) {
          this.ntp.messaging.notify("activity_open", { url: url8, target });
        }
        onBurnComplete(cb) {
          if (!this.burns) throw new Error("unreachable");
          this.burns.addEventListener("activity_onBurnComplete", cb);
          return () => {
            if (!this.burns) throw new Error("unreachable");
            this.burns.removeEventListener("activity_onBurnComplete", cb);
          };
        }
        enableBroadcast() {
          this.dataService.enableBroadcast();
          this.dataService.flush();
        }
        disableBroadcast() {
          this.dataService.disableBroadcast();
        }
      };
    }
  });

  // pages/new-tab/app/activity/ActivityProvider.js
  function ActivityProvider(props) {
    const initial = (
      /** @type {State} */
      {
        status: "idle",
        data: null,
        config: null
      }
    );
    const [state, dispatch] = h2(reducer, initial);
    const batched = useBatchedActivityApi();
    const service = useService6(batched);
    useInitialData({ dispatch, service });
    return /* @__PURE__ */ _(ActivityContext.Provider, { value: { state } }, /* @__PURE__ */ _(ActivityServiceContext.Provider, { value: service.current }, props.children));
  }
  function useService6(useBatched) {
    const service = A2(
      /** @type {BatchedActivityService|null} */
      null
    );
    const ntp = useMessaging();
    y2(() => {
      const stats = new BatchedActivityService(ntp, useBatched);
      service.current = stats;
      return () => {
        stats.destroy();
      };
    }, [ntp, useBatched]);
    return service;
  }
  var ActivityContext, ActivityServiceContext;
  var init_ActivityProvider = __esm({
    "pages/new-tab/app/activity/ActivityProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_types();
      init_service_hooks();
      init_settings_provider();
      init_batched_activity_service();
      ActivityContext = K({
        /** @type {State} */
        state: { status: "idle", data: null, config: null }
      });
      ActivityServiceContext = K(
        /** @type {BatchedActivityService|null} */
        {}
      );
    }
  });

  // pages/new-tab/app/activity/components/Activity.module.css
  var Activity_default;
  var init_Activity = __esm({
    "pages/new-tab/app/activity/components/Activity.module.css"() {
      Activity_default = {
        root: "Activity_root",
        activity: "Activity_activity",
        block: "Activity_block",
        loader: "Activity_loader",
        anim: "Activity_anim",
        item: "Activity_item",
        burning: "Activity_burning",
        heading: "Activity_heading",
        favicon: "Activity_favicon",
        title: "Activity_title",
        controls: "Activity_controls",
        icon: "Activity_icon",
        controlIcon: "Activity_controlIcon",
        disableWhenBusy: "Activity_disableWhenBusy",
        body: "Activity_body",
        otherIcon: "Activity_otherIcon",
        companiesIconRow: "Activity_companiesIconRow",
        companiesIcons: "Activity_companiesIcons",
        companiesText: "Activity_companiesText",
        history: "Activity_history",
        historyItem: "Activity_historyItem",
        historyLink: "Activity_historyLink",
        time: "Activity_time",
        historyBtn: "Activity_historyBtn"
      };
    }
  });

  // pages/new-tab/app/components/CompanyIcon.module.css
  var CompanyIcon_default;
  var init_CompanyIcon = __esm({
    "pages/new-tab/app/components/CompanyIcon.module.css"() {
      CompanyIcon_default = {
        icon: "CompanyIcon_icon",
        companyImgIcon: "CompanyIcon_companyImgIcon"
      };
    }
  });

  // pages/new-tab/app/privacy-stats/constants.js
  var DDG_STATS_OTHER_COMPANY_IDENTIFIER, DDG_STATS_DEFAULT_ROWS;
  var init_constants2 = __esm({
    "pages/new-tab/app/privacy-stats/constants.js"() {
      "use strict";
      DDG_STATS_OTHER_COMPANY_IDENTIFIER = "__other__";
      DDG_STATS_DEFAULT_ROWS = 5;
    }
  });

  // pages/new-tab/app/components/CompanyIcon.js
  function Other() {
    return /* @__PURE__ */ _("svg", { width: "32", height: "32", viewBox: "0 0 32 32", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M1 16C1 7.71573 7.71573 1 16 1C24.2843 1 31 7.71573 31 16C31 16.0648 30.9996 16.1295 30.9988 16.1941C30.9996 16.2126 31 16.2313 31 16.25C31 16.284 30.9986 16.3177 30.996 16.3511C30.8094 24.4732 24.1669 31 16 31C7.83308 31 1.19057 24.4732 1.00403 16.3511C1.00136 16.3177 1 16.284 1 16.25C1 16.2313 1.00041 16.2126 1.00123 16.1941C1.00041 16.1295 1 16.0648 1 16ZM3.58907 17.5C4.12835 22.0093 7.06824 25.781 11.0941 27.5006C10.8572 27.0971 10.6399 26.674 10.4426 26.24C9.37903 23.9001 8.69388 20.8489 8.53532 17.5H3.58907ZM8.51564 15H3.53942C3.91376 10.2707 6.92031 6.28219 11.0941 4.49944C10.8572 4.90292 10.6399 5.326 10.4426 5.76003C9.32633 8.21588 8.62691 11.4552 8.51564 15ZM11.0383 17.5C11.1951 20.5456 11.8216 23.2322 12.7185 25.2055C13.8114 27.6098 15.0657 28.5 16 28.5C16.9343 28.5 18.1886 27.6098 19.2815 25.2055C20.1784 23.2322 20.8049 20.5456 20.9617 17.5H11.0383ZM20.983 15H11.017C11.1277 11.7487 11.7728 8.87511 12.7185 6.79454C13.8114 4.39021 15.0657 3.5 16 3.5C16.9343 3.5 18.1886 4.39021 19.2815 6.79454C20.2272 8.87511 20.8723 11.7487 20.983 15ZM23.4647 17.5C23.3061 20.8489 22.621 23.9001 21.5574 26.24C21.3601 26.674 21.1428 27.0971 20.9059 27.5006C24.9318 25.781 27.8717 22.0093 28.4109 17.5H23.4647ZM28.4606 15H23.4844C23.3731 11.4552 22.6737 8.21588 21.5574 5.76003C21.3601 5.326 21.1428 4.90291 20.9059 4.49944C25.0797 6.28219 28.0862 10.2707 28.4606 15Z",
        fill: "currentColor"
      }
    ));
  }
  var mappings, CompanyIcon, names;
  var init_CompanyIcon2 = __esm({
    "pages/new-tab/app/components/CompanyIcon.js"() {
      "use strict";
      init_CompanyIcon();
      init_constants2();
      init_preact_module();
      init_compat_module();
      mappings = {
        "google-analytics-google": "google-analytics",
        "google-ads-google": "google-ads"
      };
      CompanyIcon = M2(
        /**
         * @param {object} props
         * @param {string} props.displayName
         */
        function CompanyIcon2({ displayName }) {
          const icon = displayName.toLowerCase().split(".")[0];
          const cleaned = icon.replace(/[^a-z ]/g, "").replace(/ /g, "-");
          const id = cleaned in mappings ? mappings[cleaned] : cleaned;
          const firstChar = id[0];
          if (icon === DDG_STATS_OTHER_COMPANY_IDENTIFIER) {
            return /* @__PURE__ */ _("span", { className: CompanyIcon_default.icon }, /* @__PURE__ */ _(Other, null));
          }
          const src = names.has(id) ? `./company-icons/${id}.svg` : `./company-icons/${firstChar}.svg`;
          return /* @__PURE__ */ _("span", { className: CompanyIcon_default.icon, title: displayName }, /* @__PURE__ */ _("img", { src, alt: "", class: CompanyIcon_default.companyImgIcon, "data-loaded": "true" }));
        }
      );
      names = /* @__PURE__ */ new Set([
        "33across",
        "a",
        "acuityads",
        "adform",
        "adjust",
        "adobe",
        "akamai",
        "amazon",
        "amplitude",
        "appsflyer",
        "automattic",
        "b",
        "beeswax",
        "bidtellect",
        "branch-metrics",
        "braze",
        "bugsnag",
        "bytedance",
        "c",
        "chartbeat",
        "cloudflare",
        "cognitiv",
        "comscore",
        "crimtan-holdings",
        "criteo",
        "d",
        "deepintent",
        "e",
        "exoclick",
        "eyeota",
        "f",
        "facebook",
        "g",
        "google",
        "google-ads",
        "google-analytics",
        "gumgum",
        "h",
        "hotjar",
        "i",
        "id5",
        "improve-digital",
        "index-exchange",
        "inmar",
        "instagram",
        "intent-iq",
        "iponweb",
        "j",
        "k",
        "kargo",
        "kochava",
        "l",
        "line",
        "linkedin",
        "liveintent",
        "liveramp",
        "loopme-ltd",
        "lotame-solutions",
        "m",
        "magnite",
        "mediamath",
        "medianet-advertising",
        "mediavine",
        "merkle",
        "microsoft",
        "mixpanel",
        "n",
        "narrative",
        "nativo",
        "neustar",
        "new-relic",
        "o",
        "onetrust",
        "openjs-foundation",
        "openx",
        "opera-software",
        "oracle",
        "other",
        "other-dark",
        "outbrain",
        "p",
        "pinterest",
        "prospect-one",
        "pubmatic",
        "pulsepoint",
        "q",
        "quantcast",
        "r",
        "rhythmone",
        "roku",
        "rtb-house",
        "rubicon",
        "s",
        "salesforce",
        "semasio",
        "sharethrough",
        "simplifi-holdings",
        "smaato",
        "snap",
        "sonobi",
        "sovrn-holdings",
        "spotx",
        "supership",
        "synacor",
        "t",
        "taboola",
        "tapad",
        "teads",
        "the-nielsen-company",
        "the-trade-desk",
        "triplelift",
        "twitter",
        "u",
        "unruly-group",
        "urban-airship",
        "v",
        "verizon-media",
        "w",
        "warnermedia",
        "wpp",
        "x",
        "xaxis",
        "y",
        "yahoo-japan",
        "yandex",
        "yieldmo",
        "youtube",
        "z",
        "zeotap",
        "zeta-global"
      ]);
    }
  });

  // pages/new-tab/app/activity/constants.js
  var ACTION_ADD_FAVORITE, ACTION_REMOVE_FAVORITE, ACTION_REMOVE;
  var init_constants3 = __esm({
    "pages/new-tab/app/activity/constants.js"() {
      "use strict";
      ACTION_ADD_FAVORITE = "add-favorite";
      ACTION_REMOVE_FAVORITE = "remove-favorite";
      ACTION_REMOVE = "remove";
    }
  });

  // pages/new-tab/app/components/icons/Star.js
  function Star() {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ _("g", { "clip-path": "url(#clip0_22408_13762)" }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M6.45094 1.23706C7.08238 -0.0497198 8.9167 -0.0497265 9.54814 1.23706L10.9707 4.13602C11.0397 4.27659 11.1735 4.37414 11.3284 4.39678L14.5197 4.86316C15.9315 5.06949 16.4967 6.80298 15.4779 7.80183L13.1606 10.0735C13.0494 10.1825 12.9987 10.3391 13.0249 10.4926L13.5708 13.6939C13.8114 15.1044 12.329 16.1776 11.0641 15.5088L8.22157 14.0058C8.08266 13.9324 7.91642 13.9324 7.77751 14.0058L4.93501 15.5088C3.67009 16.1776 2.1877 15.1044 2.42824 13.6939L2.97417 10.4926C3.00034 10.3391 2.94964 10.1825 2.83846 10.0735L0.521231 7.80183C-0.497628 6.80298 0.0675747 5.06949 1.47939 4.86316L4.67065 4.39678C4.82559 4.37414 4.95941 4.27659 5.02839 4.13602L6.45094 1.23706ZM8.42597 1.78772C8.25209 1.43339 7.74699 1.43339 7.57311 1.78772L6.15056 4.68669C5.90006 5.19717 5.41407 5.55141 4.85141 5.63364L1.66014 6.10003C1.27139 6.15684 1.11575 6.63418 1.39631 6.90922L3.71353 9.18094C4.11729 9.57677 4.30143 10.1453 4.20638 10.7027L3.66045 13.904C3.59422 14.2924 4.00241 14.5879 4.35072 14.4038L7.19322 12.9008C7.69768 12.6341 8.3014 12.6341 8.80586 12.9008L11.6484 14.4038C11.9967 14.5879 12.4049 14.2924 12.3386 13.904L11.7927 10.7027C11.6977 10.1453 11.8818 9.57677 12.2856 9.18094L14.6028 6.90922C14.8833 6.63418 14.7277 6.15684 14.3389 6.10003L11.1477 5.63364C10.585 5.55141 10.099 5.19717 9.84852 4.68669L8.42597 1.78772Z",
        fill: "currentColor"
      }
    )), /* @__PURE__ */ _("defs", null, /* @__PURE__ */ _("clipPath", { id: "clip0_22408_13762" }, /* @__PURE__ */ _("rect", { width: "16", height: "16", fill: "white" }))));
  }
  function StarFilled() {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ _(
      "path",
      {
        "fill-rule": "evenodd",
        "clip-rule": "evenodd",
        d: "M6.34112 1.36682C7.01973 -0.00818121 8.98044 -0.00817835 9.65904 1.36683L11.025 4.13454C11.076 4.23784 11.1745 4.30944 11.2885 4.32601L14.3429 4.76983C15.8603 4.99032 16.4662 6.85507 15.3682 7.92536L13.158 10.0797C13.0755 10.1601 13.0379 10.276 13.0574 10.3895L13.5791 13.4315C13.8383 14.9428 12.2521 16.0953 10.8948 15.3818L8.16295 13.9455C8.06099 13.8919 7.93918 13.8919 7.83721 13.9455L5.10531 15.3818C3.7481 16.0953 2.16185 14.9428 2.42106 13.4315L2.9428 10.3895C2.96227 10.276 2.92463 10.1601 2.84214 10.0797L0.631989 7.92536C-0.466019 6.85507 0.139879 4.99032 1.65728 4.76983L4.71164 4.32601C4.82564 4.30944 4.92419 4.23784 4.97517 4.13454L6.34112 1.36682Z",
        fill: "currentColor"
      }
    ));
  }
  var init_Star = __esm({
    "pages/new-tab/app/components/icons/Star.js"() {
      "use strict";
      init_preact_module();
    }
  });

  // pages/new-tab/app/components/icons/Fire.js
  function Fire() {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg" }, /* @__PURE__ */ _(
      "path",
      {
        d: "M6.51 15.53C5.52169 15.1832 4.62813 14.6102 3.90063 13.8566C3.17314 13.1031 2.63187 12.1899 2.32 11.19C2.00656 10.2021 1.95796 9.14927 2.17908 8.1367C2.4002 7.12413 2.88327 6.18736 3.58 5.42005C3.55086 5.89155 3.62952 6.36349 3.81 6.80005C4.02338 7.25295 4.32218 7.6604 4.69 8.00005C4.69 8.00005 4.12 6.49005 5.5 4.00005C6.05366 3.11404 6.78294 2.35083 7.64287 1.75747C8.50281 1.16412 9.47517 0.7532 10.5 0.550049C9.98683 1.37608 9.80801 2.36673 10 3.32005C10.3 4.32005 10.79 4.86005 11.34 6.32005C11.6531 7.02128 11.81 7.78217 11.8 8.55005C11.8924 8.00549 12.0785 7.48106 12.35 7.00005C12.8052 6.23481 13.5122 5.65154 14.35 5.35005C13.9622 6.24354 13.8041 7.21983 13.89 8.19005C14.13 9.57207 14.0024 10.9929 13.52 12.31C13.1426 13.1433 12.5797 13.8792 11.8743 14.4616C11.1689 15.0439 10.3396 15.4573 9.45 15.67C10.0363 15.44 10.5353 15.0313 10.8763 14.5018C11.2173 13.9723 11.383 13.349 11.35 12.72C11.2519 11.9769 10.8983 11.2911 10.35 10.78C10 12.67 9 12.89 9 12.89C9.38734 12.0753 9.6277 11.1985 9.71 10.3C9.76437 9.73167 9.71007 9.15813 9.55 8.61005C9.35788 7.62829 8.80485 6.75416 8 6.16005C8.05802 6.68407 8.01002 7.21441 7.85883 7.7195C7.70765 8.22458 7.45639 8.69408 7.12 9.10005C6.31 10.36 4.94 11.29 5 13.17C5.02619 13.6604 5.17907 14.1356 5.44372 14.5492C5.70838 14.9628 6.07576 15.3008 6.51 15.53Z",
        fill: "currentColor"
      }
    ));
  }
  var init_Fire = __esm({
    "pages/new-tab/app/components/icons/Fire.js"() {
      "use strict";
      init_preact_module();
    }
  });

  // pages/new-tab/app/burning/ActivityInteractionsContext.js
  var ActivityInteractionsContext;
  var init_ActivityInteractionsContext = __esm({
    "pages/new-tab/app/burning/ActivityInteractionsContext.js"() {
      "use strict";
      init_preact_module();
      ActivityInteractionsContext = K({
        /**
         * @type {(evt: MouseEvent) => void} _event
         */
        didClick(_event) {
        }
      });
    }
  });

  // pages/new-tab/app/burning/BurnProvider.js
  function BurnProvider({ children, service, showBurnAnimation = true }) {
    const burning = useSignal(
      /** @type {string[]} */
      []
    );
    const exiting = useSignal(
      /** @type {string[]} */
      []
    );
    const animation = useSignal({ state: (
      /** @type {'loading' | 'ready' | 'error'} */
      "loading"
    ), data: null });
    const { didClick: originalDidClick } = x2(ActivityInteractionsContext);
    const { isReducedMotion } = useEnv();
    async function didClick(e4) {
      const button = (
        /** @type {HTMLButtonElement|null} */
        e4.target?.closest(`button[value][data-action="${ACTION_BURN}"]`)
      );
      if (!button) return originalDidClick(e4);
      if (!service) throw new Error("unreachable");
      e4.preventDefault();
      e4.stopImmediatePropagation();
      if (burning.value.length > 0 || exiting.value.length > 0) return;
      const value2 = button.value;
      const response = await service?.confirmBurn(value2);
      if (response && response.action === "none") return;
      service.disableBroadcast();
      burning.value = burning.value.concat(value2);
      const feSignals = any(reducedMotion(isReducedMotion), animationExit(), didChangeDocumentVisibility());
      const nativeSignal = didCompleteNatively(service);
      const required = all(feSignals, nativeSignal);
      const withTimer = any(required, timer(3e3));
      await toPromise(withTimer);
      r3(() => {
        exiting.value = [];
        burning.value = [];
      });
      service?.enableBroadcast();
    }
    useSignalEffect(() => {
      let cancelled = false;
      async function fetchAnimation() {
        const resp = await fetch("burn.json");
        if (!resp.ok) {
          animation.value = { state: (
            /** @type {const} */
            "error"
          ), data: null };
          return;
        }
        const json = await resp.json();
        if (!cancelled) animation.value = { state: "ready", data: json };
      }
      fetchAnimation().catch((_5) => {
        animation.value = { state: (
          /** @type {const} */
          "error"
        ), data: null };
      });
      return () => {
        cancelled = true;
      };
    });
    const doneBurning = q2(
      (url8) => {
        if (url8) {
          r3(() => {
            burning.value = burning.value.filter((x3) => x3 !== url8);
            exiting.value = exiting.value.concat(url8);
          });
        }
      },
      [burning, exiting]
    );
    return /* @__PURE__ */ _(ActivityBurningSignalContext.Provider, { value: { burning, exiting, animation, showBurnAnimation, doneBurning } }, /* @__PURE__ */ _(ActivityInteractionsContext.Provider, { value: { didClick } }, children));
  }
  function toPromise(fn2) {
    return new Promise((resolve) => {
      const cleanup = fn2({
        next: (v4) => {
          resolve(v4);
          cleanup();
        }
      });
    });
  }
  function reducedMotion(isReducedMotion) {
    return (subject) => {
      if (isReducedMotion) {
        subject.next();
      }
    };
  }
  function animationExit() {
    return (subject) => {
      const handler = () => {
        subject.next();
      };
      window.addEventListener("done-exiting", handler, { once: true });
      return () => {
        window.removeEventListener("done-exiting", handler);
      };
    };
  }
  function timer(ms) {
    return (subject) => {
      const int = setTimeout(() => {
        return subject.next();
      }, ms);
      return () => {
        clearTimeout(int);
      };
    };
  }
  function didCompleteNatively(service) {
    return (subject) => {
      const unsub = service?.onBurnComplete(() => {
        subject.next();
      });
      return () => {
        unsub();
      };
    };
  }
  function didChangeDocumentVisibility() {
    return (subject) => {
      const handler = () => {
        return subject.next(document.visibilityState);
      };
      document.addEventListener("visibilitychange", handler, { once: true });
      return () => {
        window.removeEventListener("visibilitychange", handler);
      };
    };
  }
  function any(...fns) {
    return (subject) => {
      const jobs = fns.map((factory11) => {
        const subject2 = {
          /** @type {any} */
          next: void 0
        };
        const promise = new Promise((resolve) => subject2.next = resolve);
        const cleanup = factory11(subject2);
        return {
          promise,
          cleanup
        };
      });
      Promise.any(jobs.map((x3) => x3.promise)).then((d5) => subject.next(d5)).catch(console.error);
      return () => {
        for (const job of jobs) {
          job.cleanup?.();
        }
      };
    };
  }
  function all(...fns) {
    return (subject) => {
      const jobs = fns.map((factory11) => {
        const subject2 = {
          /** @type {any} */
          next: void 0
        };
        const promise = new Promise((resolve) => subject2.next = resolve);
        const cleanup = factory11(subject2);
        return {
          promise,
          cleanup
        };
      });
      Promise.all(jobs.map((x3) => x3.promise)).then((d5) => subject.next(d5)).catch(console.error);
      return () => {
        for (const job of jobs) {
          job.cleanup?.();
        }
      };
    };
  }
  var ACTION_BURN, ActivityBurningSignalContext;
  var init_BurnProvider = __esm({
    "pages/new-tab/app/burning/BurnProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_signals_module();
      init_EnvironmentProvider();
      init_ActivityInteractionsContext();
      ACTION_BURN = "burn";
      ActivityBurningSignalContext = K({
        /** @type {import("@preact/signals").Signal<string[]>} */
        burning: d3([]),
        /** @type {import("@preact/signals").Signal<string[]>} */
        exiting: d3([]),
        /** @type {import("@preact/signals").Signal<{state: 'loading' | 'ready' | 'error', data: null | Record<string, any>}>} */
        animation: d3({ state: "loading", data: null }),
        /** @type {boolean} */
        showBurnAnimation: true,
        /** @type {(url: string) => void} */
        doneBurning: (_url) => {
        }
      });
    }
  });

  // pages/new-tab/app/activity/NormalizeDataProvider.js
  function normalizeData(prev, incoming) {
    const output = {
      favorites: {},
      items: {},
      history: {},
      trackingStatus: {},
      urls: [],
      totalTrackers: incoming.totalTrackers
    };
    if (shallowDiffers(prev.urls, incoming.urls)) {
      output.urls = [...incoming.urls];
    } else {
      output.urls = prev.urls;
    }
    for (const item of incoming.activity) {
      const id = item.url;
      output.favorites[id] = item.favorite;
      const next = {
        etldPlusOne: item.etldPlusOne,
        title: item.title,
        url: id,
        faviconMax: item.favicon?.maxAvailableSize ?? DDG_DEFAULT_ICON_SIZE,
        favoriteSrc: item.favicon?.src,
        trackersFound: item.trackersFound
      };
      const differs = shallowDiffers(next, prev.items[id] || {});
      output.items[id] = differs ? next : prev.items[id] || {};
      const historyDiff = shallowDiffers(item.history, prev.history[id] || []);
      output.history[id] = historyDiff ? [...item.history] : prev.history[id] || [];
      const prevItem = prev.trackingStatus[id] || {
        totalCount: 0,
        trackerCompanies: []
      };
      const trackersDiffer = shallowDiffers(item.trackingStatus.trackerCompanies, prevItem.trackerCompanies);
      if (prevItem.totalCount !== item.trackingStatus.totalCount || trackersDiffer) {
        const next2 = {
          totalCount: item.trackingStatus.totalCount,
          trackerCompanies: [...item.trackingStatus.trackerCompanies]
        };
        output.trackingStatus[id] = next2;
      } else {
        output.trackingStatus[id] = prevItem;
      }
    }
    return output;
  }
  function normalizeKeys(prev, data2) {
    const next = shallowDiffers(prev, data2) ? [...data2] : prev;
    return next;
  }
  function shallowDiffers(a4, b4) {
    for (const i5 in a4) if (i5 !== "__source" && !(i5 in b4)) return true;
    for (const i5 in b4) if (i5 !== "__source" && a4[i5] !== b4[i5]) return true;
    return false;
  }
  function SignalStateProvider({ children }) {
    const { state } = x2(ActivityContext);
    const batched = useBatchedActivityApi();
    const platformName = usePlatformName();
    const service = (
      /** @type {import("./batched-activity.service.js").BatchedActivityService} */
      x2(ActivityServiceContext)
    );
    if (state.status !== "ready") throw new Error("must have ready status here");
    if (!service) throw new Error("must have service here");
    function didClick_(event) {
      const target = (
        /** @type {HTMLElement|null} */
        event.target
      );
      if (!target) return;
      if (!service) return;
      const anchor = (
        /** @type {HTMLAnchorElement|null} */
        target.closest("a[href][data-url]")
      );
      const button = (
        /** @type {HTMLButtonElement|null} */
        target.closest("button[value][data-action]")
      );
      if (anchor) {
        const url8 = anchor.dataset.url;
        if (!url8) return;
        event.preventDefault();
        event.stopImmediatePropagation();
        const openTarget = eventToTarget(event, platformName);
        service.openUrl(url8, openTarget);
      } else if (button) {
        event.preventDefault();
        event.stopImmediatePropagation();
        const action = button.dataset.action;
        const value2 = button.value;
        if (!action) return console.warn('expected clicked button to have data-action="<value>"');
        if (typeof value2 !== "string") return console.warn("expected clicked button to have a value");
        if (action === ACTION_ADD_FAVORITE) {
          service.addFavorite(button.value);
        } else if (action === ACTION_REMOVE_FAVORITE) {
          service.removeFavorite(button.value);
        } else if (action === ACTION_BURN) {
          console.warn("Should not get here... Burning should be captured elsewhere?");
        } else if (action === ACTION_REMOVE) {
          service.remove(button.value);
        } else {
          console.warn("unhandled action:", action);
        }
      }
    }
    const didClick = q2(didClick_, [service, batched]);
    const firstUrls = state.data.activity.map((x3) => x3.url);
    const keys = useSignal(normalizeKeys([], firstUrls));
    const activity = useSignal(
      normalizeData(
        {
          items: {},
          history: {},
          trackingStatus: {},
          favorites: {},
          urls: [],
          totalTrackers: 0
        },
        { activity: state.data.activity, urls: state.data.urls, totalTrackers: state.data.totalTrackers }
      )
    );
    function setVisibleRange(nextVisibleRange) {
      keys.value = normalizeKeys(keys.value, nextVisibleRange);
    }
    function fillHoles() {
      const visible = keys.value;
      const data2 = Object.keys(activity.value.items);
      const missing = visible.filter((x3) => !data2.includes(x3));
      service.next(missing);
    }
    function showNextChunk() {
      if (service.isFetchingNext) return;
      if (!batched) return;
      const visibleLength = keys.value.length;
      const end = visibleLength + service.CHUNK_SIZE;
      const nextVisibleRange = activity.value.urls.slice(0, end);
      setVisibleRange(nextVisibleRange);
      fillHoles();
    }
    y2(() => {
      if (!service) return console.warn("could not access service");
      const src = (
        /** @type {import("./batched-activity.service.js").BatchedActivityService} */
        service
      );
      const unsub = src.onData((evt) => {
        r3(() => {
          activity.value = normalizeData(activity.value, {
            activity: evt.data.activity,
            urls: evt.data.urls,
            totalTrackers: evt.data.totalTrackers
          });
          const visible = keys.value;
          const all2 = activity.value.urls;
          const nextVisibleRange = batched ? all2.slice(0, Math.max(service.INITIAL, Math.max(service.INITIAL, visible.length))) : all2;
          setVisibleRange(nextVisibleRange);
          fillHoles();
        });
      });
      return () => {
        unsub();
      };
    }, [service, batched, activity, keys]);
    y2(() => {
      window.addEventListener("activity.next", showNextChunk);
      return () => {
        window.removeEventListener("activity.next", showNextChunk);
      };
    }, []);
    y2(() => {
      const handler = () => {
        if (document.visibilityState === "visible") {
          if (batched) {
            const visible = keys.value;
            service.triggerDataFetch(visible);
          } else {
            service.triggerDataFetch();
          }
        }
      };
      $INTEGRATION: (() => {
        if (window.__playwright_01) {
          window.__trigger_document_visibilty__ = handler;
        }
      })();
      document.addEventListener("visibilitychange", handler);
      return () => {
        document.removeEventListener("visibilitychange", handler);
      };
    }, [batched]);
    return /* @__PURE__ */ _(NormalizedDataContext.Provider, { value: { activity, keys } }, /* @__PURE__ */ _(ActivityInteractionsContext.Provider, { value: { didClick } }, children));
  }
  var NormalizedDataContext;
  var init_NormalizeDataProvider = __esm({
    "pages/new-tab/app/activity/NormalizeDataProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_utils2();
      init_settings_provider();
      init_constants3();
      init_signals_module();
      init_constants();
      init_ActivityProvider();
      init_ActivityInteractionsContext();
      init_BurnProvider();
      NormalizedDataContext = K({
        activity: d3(
          /** @type {NormalizedActivity} */
          {}
        ),
        keys: d3(
          /** @type {string[]} */
          []
        )
      });
    }
  });

  // pages/new-tab/app/activity/components/ActivityItem.js
  function Controls({ canBurn, url: url8, title }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    const { activity } = x2(NormalizedDataContext);
    const favorite = useComputed(() => activity.value.favorites[url8]);
    const favoriteTitle = favorite.value ? t4("activity_favoriteRemove", { domain: title }) : t4("activity_favoriteAdd", { domain: title });
    const secondaryTitle = canBurn ? t4("activity_burn", { domain: title }) : t4("activity_itemRemove", { domain: title });
    return /* @__PURE__ */ _("div", { className: Activity_default.controls }, /* @__PURE__ */ _(
      "button",
      {
        class: (0, import_classnames10.default)(Activity_default.icon, Activity_default.controlIcon, Activity_default.disableWhenBusy),
        title: favoriteTitle,
        "data-action": favorite.value ? ACTION_REMOVE_FAVORITE : ACTION_ADD_FAVORITE,
        "data-title": title,
        value: url8,
        type: "button"
      },
      favorite.value ? /* @__PURE__ */ _(StarFilled, null) : /* @__PURE__ */ _(Star, null)
    ), /* @__PURE__ */ _(
      "button",
      {
        class: (0, import_classnames10.default)(Activity_default.icon, Activity_default.controlIcon, Activity_default.disableWhenBusy),
        title: secondaryTitle,
        "data-action": canBurn ? ACTION_BURN : ACTION_REMOVE,
        value: url8,
        type: "button"
      },
      canBurn ? /* @__PURE__ */ _(Fire, null) : /* @__PURE__ */ _(Cross, null)
    ));
  }
  var import_classnames10, ActivityItem;
  var init_ActivityItem = __esm({
    "pages/new-tab/app/activity/components/ActivityItem.js"() {
      "use strict";
      init_preact_module();
      init_types();
      import_classnames10 = __toESM(require_classnames(), 1);
      init_Activity();
      init_FaviconWithState2();
      init_constants3();
      init_Star();
      init_Fire();
      init_Icons2();
      init_hooks_module();
      init_compat_module();
      init_signals_module();
      init_NormalizeDataProvider();
      init_BurnProvider();
      init_constants();
      ActivityItem = M2(
        /**
         * @param {object} props
         * @param {boolean} props.canBurn
         * @param {"visible"|"hidden"} props.documentVisibility
         * @param {import("preact").ComponentChild} props.children
         * @param {string} props.title
         * @param {string} props.url
         * @param {string|null|undefined} props.favoriteSrc
         * @param {number} props.faviconMax
         * @param {string} props.etldPlusOne
         */
        function ActivityItem2({ canBurn, documentVisibility, title, url: url8, favoriteSrc, faviconMax, etldPlusOne, children }) {
          return /* @__PURE__ */ _("li", { key: url8, class: (0, import_classnames10.default)(Activity_default.item), "data-testid": "ActivityItem" }, /* @__PURE__ */ _("div", { class: Activity_default.heading }, /* @__PURE__ */ _("a", { class: Activity_default.title, href: url8, "data-url": url8 }, /* @__PURE__ */ _("span", { className: Activity_default.favicon, "data-url": url8 }, documentVisibility === "visible" && /* @__PURE__ */ _(
            FaviconWithState,
            {
              faviconSrc: favoriteSrc,
              faviconMax,
              etldPlusOne,
              theme: "light",
              displayKind: "history-favicon",
              key: `${favoriteSrc}:${faviconMax}`,
              fallback: DDG_FALLBACK_ICON,
              fallbackDark: DDG_FALLBACK_ICON_DARK
            }
          )), title), /* @__PURE__ */ _(Controls, { canBurn, url: url8, title })), /* @__PURE__ */ _("div", { class: Activity_default.body }, children));
        }
      );
    }
  });

  // ../node_modules/lottie-web/build/player/lottie.js
  var require_lottie = __commonJS({
    "../node_modules/lottie-web/build/player/lottie.js"(exports, module) {
      typeof document !== "undefined" && typeof navigator !== "undefined" && (function(global, factory11) {
        typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory11() : typeof define === "function" && define.amd ? define(factory11) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, global.lottie = factory11());
      })(exports, (function() {
        "use strict";
        var svgNS = "http://www.w3.org/2000/svg";
        var locationHref = "";
        var _useWebWorker = false;
        var initialDefaultFrame = -999999;
        var setWebWorker = function setWebWorker2(flag) {
          _useWebWorker = !!flag;
        };
        var getWebWorker = function getWebWorker2() {
          return _useWebWorker;
        };
        var setLocationHref = function setLocationHref2(value2) {
          locationHref = value2;
        };
        var getLocationHref = function getLocationHref2() {
          return locationHref;
        };
        function createTag(type) {
          return document.createElement(type);
        }
        function extendPrototype(sources, destination) {
          var i5;
          var len = sources.length;
          var sourcePrototype;
          for (i5 = 0; i5 < len; i5 += 1) {
            sourcePrototype = sources[i5].prototype;
            for (var attr in sourcePrototype) {
              if (Object.prototype.hasOwnProperty.call(sourcePrototype, attr)) destination.prototype[attr] = sourcePrototype[attr];
            }
          }
        }
        function getDescriptor(object, prop) {
          return Object.getOwnPropertyDescriptor(object, prop);
        }
        function createProxyFunction(prototype) {
          function ProxyFunction() {
          }
          ProxyFunction.prototype = prototype;
          return ProxyFunction;
        }
        var audioControllerFactory = (function() {
          function AudioController(audioFactory) {
            this.audios = [];
            this.audioFactory = audioFactory;
            this._volume = 1;
            this._isMuted = false;
          }
          AudioController.prototype = {
            addAudio: function addAudio(audio) {
              this.audios.push(audio);
            },
            pause: function pause() {
              var i5;
              var len = this.audios.length;
              for (i5 = 0; i5 < len; i5 += 1) {
                this.audios[i5].pause();
              }
            },
            resume: function resume() {
              var i5;
              var len = this.audios.length;
              for (i5 = 0; i5 < len; i5 += 1) {
                this.audios[i5].resume();
              }
            },
            setRate: function setRate(rateValue) {
              var i5;
              var len = this.audios.length;
              for (i5 = 0; i5 < len; i5 += 1) {
                this.audios[i5].setRate(rateValue);
              }
            },
            createAudio: function createAudio(assetPath) {
              if (this.audioFactory) {
                return this.audioFactory(assetPath);
              }
              if (window.Howl) {
                return new window.Howl({
                  src: [assetPath]
                });
              }
              return {
                isPlaying: false,
                play: function play() {
                  this.isPlaying = true;
                },
                seek: function seek() {
                  this.isPlaying = false;
                },
                playing: function playing() {
                },
                rate: function rate() {
                },
                setVolume: function setVolume() {
                }
              };
            },
            setAudioFactory: function setAudioFactory(audioFactory) {
              this.audioFactory = audioFactory;
            },
            setVolume: function setVolume(value2) {
              this._volume = value2;
              this._updateVolume();
            },
            mute: function mute() {
              this._isMuted = true;
              this._updateVolume();
            },
            unmute: function unmute() {
              this._isMuted = false;
              this._updateVolume();
            },
            getVolume: function getVolume() {
              return this._volume;
            },
            _updateVolume: function _updateVolume() {
              var i5;
              var len = this.audios.length;
              for (i5 = 0; i5 < len; i5 += 1) {
                this.audios[i5].volume(this._volume * (this._isMuted ? 0 : 1));
              }
            }
          };
          return function() {
            return new AudioController();
          };
        })();
        var createTypedArray = (function() {
          function createRegularArray(type, len) {
            var i5 = 0;
            var arr = [];
            var value2;
            switch (type) {
              case "int16":
              case "uint8c":
                value2 = 1;
                break;
              default:
                value2 = 1.1;
                break;
            }
            for (i5 = 0; i5 < len; i5 += 1) {
              arr.push(value2);
            }
            return arr;
          }
          function createTypedArrayFactory(type, len) {
            if (type === "float32") {
              return new Float32Array(len);
            }
            if (type === "int16") {
              return new Int16Array(len);
            }
            if (type === "uint8c") {
              return new Uint8ClampedArray(len);
            }
            return createRegularArray(type, len);
          }
          if (typeof Uint8ClampedArray === "function" && typeof Float32Array === "function") {
            return createTypedArrayFactory;
          }
          return createRegularArray;
        })();
        function createSizedArray(len) {
          return Array.apply(null, {
            length: len
          });
        }
        function _typeof$6(o4) {
          "@babel/helpers - typeof";
          return _typeof$6 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o5) {
            return typeof o5;
          } : function(o5) {
            return o5 && "function" == typeof Symbol && o5.constructor === Symbol && o5 !== Symbol.prototype ? "symbol" : typeof o5;
          }, _typeof$6(o4);
        }
        var subframeEnabled = true;
        var expressionsPlugin = null;
        var expressionsInterfaces = null;
        var idPrefix$1 = "";
        var isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
        var _shouldRoundValues = false;
        var bmPow = Math.pow;
        var bmSqrt = Math.sqrt;
        var bmFloor = Math.floor;
        var bmMax = Math.max;
        var bmMin = Math.min;
        var BMMath = {};
        (function() {
          var propertyNames = ["abs", "acos", "acosh", "asin", "asinh", "atan", "atanh", "atan2", "ceil", "cbrt", "expm1", "clz32", "cos", "cosh", "exp", "floor", "fround", "hypot", "imul", "log", "log1p", "log2", "log10", "max", "min", "pow", "random", "round", "sign", "sin", "sinh", "sqrt", "tan", "tanh", "trunc", "E", "LN10", "LN2", "LOG10E", "LOG2E", "PI", "SQRT1_2", "SQRT2"];
          var i5;
          var len = propertyNames.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            BMMath[propertyNames[i5]] = Math[propertyNames[i5]];
          }
        })();
        function ProjectInterface$1() {
          return {};
        }
        BMMath.random = Math.random;
        BMMath.abs = function(val2) {
          var tOfVal = _typeof$6(val2);
          if (tOfVal === "object" && val2.length) {
            var absArr = createSizedArray(val2.length);
            var i5;
            var len = val2.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              absArr[i5] = Math.abs(val2[i5]);
            }
            return absArr;
          }
          return Math.abs(val2);
        };
        var defaultCurveSegments = 150;
        var degToRads = Math.PI / 180;
        var roundCorner = 0.5519;
        function roundValues(flag) {
          _shouldRoundValues = !!flag;
        }
        function bmRnd(value2) {
          if (_shouldRoundValues) {
            return Math.round(value2);
          }
          return value2;
        }
        function styleDiv(element) {
          element.style.position = "absolute";
          element.style.top = 0;
          element.style.left = 0;
          element.style.display = "block";
          element.style.transformOrigin = "0 0";
          element.style.webkitTransformOrigin = "0 0";
          element.style.backfaceVisibility = "visible";
          element.style.webkitBackfaceVisibility = "visible";
          element.style.transformStyle = "preserve-3d";
          element.style.webkitTransformStyle = "preserve-3d";
          element.style.mozTransformStyle = "preserve-3d";
        }
        function BMEnterFrameEvent(type, currentTime, totalTime, frameMultiplier) {
          this.type = type;
          this.currentTime = currentTime;
          this.totalTime = totalTime;
          this.direction = frameMultiplier < 0 ? -1 : 1;
        }
        function BMCompleteEvent(type, frameMultiplier) {
          this.type = type;
          this.direction = frameMultiplier < 0 ? -1 : 1;
        }
        function BMCompleteLoopEvent(type, totalLoops, currentLoop, frameMultiplier) {
          this.type = type;
          this.currentLoop = currentLoop;
          this.totalLoops = totalLoops;
          this.direction = frameMultiplier < 0 ? -1 : 1;
        }
        function BMSegmentStartEvent(type, firstFrame, totalFrames) {
          this.type = type;
          this.firstFrame = firstFrame;
          this.totalFrames = totalFrames;
        }
        function BMDestroyEvent(type, target) {
          this.type = type;
          this.target = target;
        }
        function BMRenderFrameErrorEvent(nativeError, currentTime) {
          this.type = "renderFrameError";
          this.nativeError = nativeError;
          this.currentTime = currentTime;
        }
        function BMConfigErrorEvent(nativeError) {
          this.type = "configError";
          this.nativeError = nativeError;
        }
        function BMAnimationConfigErrorEvent(type, nativeError) {
          this.type = type;
          this.nativeError = nativeError;
        }
        var createElementID = /* @__PURE__ */ (function() {
          var _count = 0;
          return function createID() {
            _count += 1;
            return idPrefix$1 + "__lottie_element_" + _count;
          };
        })();
        function HSVtoRGB(h5, s4, v4) {
          var r4;
          var g6;
          var b4;
          var i5;
          var f4;
          var p5;
          var q5;
          var t4;
          i5 = Math.floor(h5 * 6);
          f4 = h5 * 6 - i5;
          p5 = v4 * (1 - s4);
          q5 = v4 * (1 - f4 * s4);
          t4 = v4 * (1 - (1 - f4) * s4);
          switch (i5 % 6) {
            case 0:
              r4 = v4;
              g6 = t4;
              b4 = p5;
              break;
            case 1:
              r4 = q5;
              g6 = v4;
              b4 = p5;
              break;
            case 2:
              r4 = p5;
              g6 = v4;
              b4 = t4;
              break;
            case 3:
              r4 = p5;
              g6 = q5;
              b4 = v4;
              break;
            case 4:
              r4 = t4;
              g6 = p5;
              b4 = v4;
              break;
            case 5:
              r4 = v4;
              g6 = p5;
              b4 = q5;
              break;
            default:
              break;
          }
          return [r4, g6, b4];
        }
        function RGBtoHSV(r4, g6, b4) {
          var max = Math.max(r4, g6, b4);
          var min = Math.min(r4, g6, b4);
          var d5 = max - min;
          var h5;
          var s4 = max === 0 ? 0 : d5 / max;
          var v4 = max / 255;
          switch (max) {
            case min:
              h5 = 0;
              break;
            case r4:
              h5 = g6 - b4 + d5 * (g6 < b4 ? 6 : 0);
              h5 /= 6 * d5;
              break;
            case g6:
              h5 = b4 - r4 + d5 * 2;
              h5 /= 6 * d5;
              break;
            case b4:
              h5 = r4 - g6 + d5 * 4;
              h5 /= 6 * d5;
              break;
            default:
              break;
          }
          return [h5, s4, v4];
        }
        function addSaturationToRGB(color, offset) {
          var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
          hsv[1] += offset;
          if (hsv[1] > 1) {
            hsv[1] = 1;
          } else if (hsv[1] <= 0) {
            hsv[1] = 0;
          }
          return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
        }
        function addBrightnessToRGB(color, offset) {
          var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
          hsv[2] += offset;
          if (hsv[2] > 1) {
            hsv[2] = 1;
          } else if (hsv[2] < 0) {
            hsv[2] = 0;
          }
          return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
        }
        function addHueToRGB(color, offset) {
          var hsv = RGBtoHSV(color[0] * 255, color[1] * 255, color[2] * 255);
          hsv[0] += offset / 360;
          if (hsv[0] > 1) {
            hsv[0] -= 1;
          } else if (hsv[0] < 0) {
            hsv[0] += 1;
          }
          return HSVtoRGB(hsv[0], hsv[1], hsv[2]);
        }
        var rgbToHex = (function() {
          var colorMap = [];
          var i5;
          var hex;
          for (i5 = 0; i5 < 256; i5 += 1) {
            hex = i5.toString(16);
            colorMap[i5] = hex.length === 1 ? "0" + hex : hex;
          }
          return function(r4, g6, b4) {
            if (r4 < 0) {
              r4 = 0;
            }
            if (g6 < 0) {
              g6 = 0;
            }
            if (b4 < 0) {
              b4 = 0;
            }
            return "#" + colorMap[r4] + colorMap[g6] + colorMap[b4];
          };
        })();
        var setSubframeEnabled = function setSubframeEnabled2(flag) {
          subframeEnabled = !!flag;
        };
        var getSubframeEnabled = function getSubframeEnabled2() {
          return subframeEnabled;
        };
        var setExpressionsPlugin = function setExpressionsPlugin2(value2) {
          expressionsPlugin = value2;
        };
        var getExpressionsPlugin = function getExpressionsPlugin2() {
          return expressionsPlugin;
        };
        var setExpressionInterfaces = function setExpressionInterfaces2(value2) {
          expressionsInterfaces = value2;
        };
        var getExpressionInterfaces = function getExpressionInterfaces2() {
          return expressionsInterfaces;
        };
        var setDefaultCurveSegments = function setDefaultCurveSegments2(value2) {
          defaultCurveSegments = value2;
        };
        var getDefaultCurveSegments = function getDefaultCurveSegments2() {
          return defaultCurveSegments;
        };
        var setIdPrefix = function setIdPrefix2(value2) {
          idPrefix$1 = value2;
        };
        var getIdPrefix = function getIdPrefix2() {
          return idPrefix$1;
        };
        function createNS(type) {
          return document.createElementNS(svgNS, type);
        }
        function _typeof$5(o4) {
          "@babel/helpers - typeof";
          return _typeof$5 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o5) {
            return typeof o5;
          } : function(o5) {
            return o5 && "function" == typeof Symbol && o5.constructor === Symbol && o5 !== Symbol.prototype ? "symbol" : typeof o5;
          }, _typeof$5(o4);
        }
        var dataManager = /* @__PURE__ */ (function() {
          var _counterId = 1;
          var processes = [];
          var workerFn;
          var workerInstance;
          var workerProxy = {
            onmessage: function onmessage() {
            },
            postMessage: function postMessage(path) {
              workerFn({
                data: path
              });
            }
          };
          var _workerSelf = {
            postMessage: function postMessage(data2) {
              workerProxy.onmessage({
                data: data2
              });
            }
          };
          function createWorker(fn2) {
            if (window.Worker && window.Blob && getWebWorker()) {
              var blob = new Blob(["var _workerSelf = self; self.onmessage = ", fn2.toString()], {
                type: "text/javascript"
              });
              var url8 = URL.createObjectURL(blob);
              return new Worker(url8);
            }
            workerFn = fn2;
            return workerProxy;
          }
          function setupWorker() {
            if (!workerInstance) {
              workerInstance = createWorker(function workerStart(e4) {
                function dataFunctionManager() {
                  function completeLayers(layers, comps) {
                    var layerData;
                    var i5;
                    var len = layers.length;
                    var j4;
                    var jLen;
                    var k4;
                    var kLen;
                    for (i5 = 0; i5 < len; i5 += 1) {
                      layerData = layers[i5];
                      if ("ks" in layerData && !layerData.completed) {
                        layerData.completed = true;
                        if (layerData.hasMask) {
                          var maskProps = layerData.masksProperties;
                          jLen = maskProps.length;
                          for (j4 = 0; j4 < jLen; j4 += 1) {
                            if (maskProps[j4].pt.k.i) {
                              convertPathsToAbsoluteValues(maskProps[j4].pt.k);
                            } else {
                              kLen = maskProps[j4].pt.k.length;
                              for (k4 = 0; k4 < kLen; k4 += 1) {
                                if (maskProps[j4].pt.k[k4].s) {
                                  convertPathsToAbsoluteValues(maskProps[j4].pt.k[k4].s[0]);
                                }
                                if (maskProps[j4].pt.k[k4].e) {
                                  convertPathsToAbsoluteValues(maskProps[j4].pt.k[k4].e[0]);
                                }
                              }
                            }
                          }
                        }
                        if (layerData.ty === 0) {
                          layerData.layers = findCompLayers(layerData.refId, comps);
                          completeLayers(layerData.layers, comps);
                        } else if (layerData.ty === 4) {
                          completeShapes(layerData.shapes);
                        } else if (layerData.ty === 5) {
                          completeText(layerData);
                        }
                      }
                    }
                  }
                  function completeChars(chars, assets) {
                    if (chars) {
                      var i5 = 0;
                      var len = chars.length;
                      for (i5 = 0; i5 < len; i5 += 1) {
                        if (chars[i5].t === 1) {
                          chars[i5].data.layers = findCompLayers(chars[i5].data.refId, assets);
                          completeLayers(chars[i5].data.layers, assets);
                        }
                      }
                    }
                  }
                  function findComp(id, comps) {
                    var i5 = 0;
                    var len = comps.length;
                    while (i5 < len) {
                      if (comps[i5].id === id) {
                        return comps[i5];
                      }
                      i5 += 1;
                    }
                    return null;
                  }
                  function findCompLayers(id, comps) {
                    var comp2 = findComp(id, comps);
                    if (comp2) {
                      if (!comp2.layers.__used) {
                        comp2.layers.__used = true;
                        return comp2.layers;
                      }
                      return JSON.parse(JSON.stringify(comp2.layers));
                    }
                    return null;
                  }
                  function completeShapes(arr) {
                    var i5;
                    var len = arr.length;
                    var j4;
                    var jLen;
                    for (i5 = len - 1; i5 >= 0; i5 -= 1) {
                      if (arr[i5].ty === "sh") {
                        if (arr[i5].ks.k.i) {
                          convertPathsToAbsoluteValues(arr[i5].ks.k);
                        } else {
                          jLen = arr[i5].ks.k.length;
                          for (j4 = 0; j4 < jLen; j4 += 1) {
                            if (arr[i5].ks.k[j4].s) {
                              convertPathsToAbsoluteValues(arr[i5].ks.k[j4].s[0]);
                            }
                            if (arr[i5].ks.k[j4].e) {
                              convertPathsToAbsoluteValues(arr[i5].ks.k[j4].e[0]);
                            }
                          }
                        }
                      } else if (arr[i5].ty === "gr") {
                        completeShapes(arr[i5].it);
                      }
                    }
                  }
                  function convertPathsToAbsoluteValues(path) {
                    var i5;
                    var len = path.i.length;
                    for (i5 = 0; i5 < len; i5 += 1) {
                      path.i[i5][0] += path.v[i5][0];
                      path.i[i5][1] += path.v[i5][1];
                      path.o[i5][0] += path.v[i5][0];
                      path.o[i5][1] += path.v[i5][1];
                    }
                  }
                  function checkVersion(minimum, animVersionString) {
                    var animVersion = animVersionString ? animVersionString.split(".") : [100, 100, 100];
                    if (minimum[0] > animVersion[0]) {
                      return true;
                    }
                    if (animVersion[0] > minimum[0]) {
                      return false;
                    }
                    if (minimum[1] > animVersion[1]) {
                      return true;
                    }
                    if (animVersion[1] > minimum[1]) {
                      return false;
                    }
                    if (minimum[2] > animVersion[2]) {
                      return true;
                    }
                    if (animVersion[2] > minimum[2]) {
                      return false;
                    }
                    return null;
                  }
                  var checkText = /* @__PURE__ */ (function() {
                    var minimumVersion = [4, 4, 14];
                    function updateTextLayer(textLayer) {
                      var documentData = textLayer.t.d;
                      textLayer.t.d = {
                        k: [{
                          s: documentData,
                          t: 0
                        }]
                      };
                    }
                    function iterateLayers(layers) {
                      var i5;
                      var len = layers.length;
                      for (i5 = 0; i5 < len; i5 += 1) {
                        if (layers[i5].ty === 5) {
                          updateTextLayer(layers[i5]);
                        }
                      }
                    }
                    return function(animationData2) {
                      if (checkVersion(minimumVersion, animationData2.v)) {
                        iterateLayers(animationData2.layers);
                        if (animationData2.assets) {
                          var i5;
                          var len = animationData2.assets.length;
                          for (i5 = 0; i5 < len; i5 += 1) {
                            if (animationData2.assets[i5].layers) {
                              iterateLayers(animationData2.assets[i5].layers);
                            }
                          }
                        }
                      }
                    };
                  })();
                  var checkChars = /* @__PURE__ */ (function() {
                    var minimumVersion = [4, 7, 99];
                    return function(animationData2) {
                      if (animationData2.chars && !checkVersion(minimumVersion, animationData2.v)) {
                        var i5;
                        var len = animationData2.chars.length;
                        for (i5 = 0; i5 < len; i5 += 1) {
                          var charData = animationData2.chars[i5];
                          if (charData.data && charData.data.shapes) {
                            completeShapes(charData.data.shapes);
                            charData.data.ip = 0;
                            charData.data.op = 99999;
                            charData.data.st = 0;
                            charData.data.sr = 1;
                            charData.data.ks = {
                              p: {
                                k: [0, 0],
                                a: 0
                              },
                              s: {
                                k: [100, 100],
                                a: 0
                              },
                              a: {
                                k: [0, 0],
                                a: 0
                              },
                              r: {
                                k: 0,
                                a: 0
                              },
                              o: {
                                k: 100,
                                a: 0
                              }
                            };
                            if (!animationData2.chars[i5].t) {
                              charData.data.shapes.push({
                                ty: "no"
                              });
                              charData.data.shapes[0].it.push({
                                p: {
                                  k: [0, 0],
                                  a: 0
                                },
                                s: {
                                  k: [100, 100],
                                  a: 0
                                },
                                a: {
                                  k: [0, 0],
                                  a: 0
                                },
                                r: {
                                  k: 0,
                                  a: 0
                                },
                                o: {
                                  k: 100,
                                  a: 0
                                },
                                sk: {
                                  k: 0,
                                  a: 0
                                },
                                sa: {
                                  k: 0,
                                  a: 0
                                },
                                ty: "tr"
                              });
                            }
                          }
                        }
                      }
                    };
                  })();
                  var checkPathProperties = /* @__PURE__ */ (function() {
                    var minimumVersion = [5, 7, 15];
                    function updateTextLayer(textLayer) {
                      var pathData = textLayer.t.p;
                      if (typeof pathData.a === "number") {
                        pathData.a = {
                          a: 0,
                          k: pathData.a
                        };
                      }
                      if (typeof pathData.p === "number") {
                        pathData.p = {
                          a: 0,
                          k: pathData.p
                        };
                      }
                      if (typeof pathData.r === "number") {
                        pathData.r = {
                          a: 0,
                          k: pathData.r
                        };
                      }
                    }
                    function iterateLayers(layers) {
                      var i5;
                      var len = layers.length;
                      for (i5 = 0; i5 < len; i5 += 1) {
                        if (layers[i5].ty === 5) {
                          updateTextLayer(layers[i5]);
                        }
                      }
                    }
                    return function(animationData2) {
                      if (checkVersion(minimumVersion, animationData2.v)) {
                        iterateLayers(animationData2.layers);
                        if (animationData2.assets) {
                          var i5;
                          var len = animationData2.assets.length;
                          for (i5 = 0; i5 < len; i5 += 1) {
                            if (animationData2.assets[i5].layers) {
                              iterateLayers(animationData2.assets[i5].layers);
                            }
                          }
                        }
                      }
                    };
                  })();
                  var checkColors = /* @__PURE__ */ (function() {
                    var minimumVersion = [4, 1, 9];
                    function iterateShapes(shapes) {
                      var i5;
                      var len = shapes.length;
                      var j4;
                      var jLen;
                      for (i5 = 0; i5 < len; i5 += 1) {
                        if (shapes[i5].ty === "gr") {
                          iterateShapes(shapes[i5].it);
                        } else if (shapes[i5].ty === "fl" || shapes[i5].ty === "st") {
                          if (shapes[i5].c.k && shapes[i5].c.k[0].i) {
                            jLen = shapes[i5].c.k.length;
                            for (j4 = 0; j4 < jLen; j4 += 1) {
                              if (shapes[i5].c.k[j4].s) {
                                shapes[i5].c.k[j4].s[0] /= 255;
                                shapes[i5].c.k[j4].s[1] /= 255;
                                shapes[i5].c.k[j4].s[2] /= 255;
                                shapes[i5].c.k[j4].s[3] /= 255;
                              }
                              if (shapes[i5].c.k[j4].e) {
                                shapes[i5].c.k[j4].e[0] /= 255;
                                shapes[i5].c.k[j4].e[1] /= 255;
                                shapes[i5].c.k[j4].e[2] /= 255;
                                shapes[i5].c.k[j4].e[3] /= 255;
                              }
                            }
                          } else {
                            shapes[i5].c.k[0] /= 255;
                            shapes[i5].c.k[1] /= 255;
                            shapes[i5].c.k[2] /= 255;
                            shapes[i5].c.k[3] /= 255;
                          }
                        }
                      }
                    }
                    function iterateLayers(layers) {
                      var i5;
                      var len = layers.length;
                      for (i5 = 0; i5 < len; i5 += 1) {
                        if (layers[i5].ty === 4) {
                          iterateShapes(layers[i5].shapes);
                        }
                      }
                    }
                    return function(animationData2) {
                      if (checkVersion(minimumVersion, animationData2.v)) {
                        iterateLayers(animationData2.layers);
                        if (animationData2.assets) {
                          var i5;
                          var len = animationData2.assets.length;
                          for (i5 = 0; i5 < len; i5 += 1) {
                            if (animationData2.assets[i5].layers) {
                              iterateLayers(animationData2.assets[i5].layers);
                            }
                          }
                        }
                      }
                    };
                  })();
                  var checkShapes = /* @__PURE__ */ (function() {
                    var minimumVersion = [4, 4, 18];
                    function completeClosingShapes(arr) {
                      var i5;
                      var len = arr.length;
                      var j4;
                      var jLen;
                      for (i5 = len - 1; i5 >= 0; i5 -= 1) {
                        if (arr[i5].ty === "sh") {
                          if (arr[i5].ks.k.i) {
                            arr[i5].ks.k.c = arr[i5].closed;
                          } else {
                            jLen = arr[i5].ks.k.length;
                            for (j4 = 0; j4 < jLen; j4 += 1) {
                              if (arr[i5].ks.k[j4].s) {
                                arr[i5].ks.k[j4].s[0].c = arr[i5].closed;
                              }
                              if (arr[i5].ks.k[j4].e) {
                                arr[i5].ks.k[j4].e[0].c = arr[i5].closed;
                              }
                            }
                          }
                        } else if (arr[i5].ty === "gr") {
                          completeClosingShapes(arr[i5].it);
                        }
                      }
                    }
                    function iterateLayers(layers) {
                      var layerData;
                      var i5;
                      var len = layers.length;
                      var j4;
                      var jLen;
                      var k4;
                      var kLen;
                      for (i5 = 0; i5 < len; i5 += 1) {
                        layerData = layers[i5];
                        if (layerData.hasMask) {
                          var maskProps = layerData.masksProperties;
                          jLen = maskProps.length;
                          for (j4 = 0; j4 < jLen; j4 += 1) {
                            if (maskProps[j4].pt.k.i) {
                              maskProps[j4].pt.k.c = maskProps[j4].cl;
                            } else {
                              kLen = maskProps[j4].pt.k.length;
                              for (k4 = 0; k4 < kLen; k4 += 1) {
                                if (maskProps[j4].pt.k[k4].s) {
                                  maskProps[j4].pt.k[k4].s[0].c = maskProps[j4].cl;
                                }
                                if (maskProps[j4].pt.k[k4].e) {
                                  maskProps[j4].pt.k[k4].e[0].c = maskProps[j4].cl;
                                }
                              }
                            }
                          }
                        }
                        if (layerData.ty === 4) {
                          completeClosingShapes(layerData.shapes);
                        }
                      }
                    }
                    return function(animationData2) {
                      if (checkVersion(minimumVersion, animationData2.v)) {
                        iterateLayers(animationData2.layers);
                        if (animationData2.assets) {
                          var i5;
                          var len = animationData2.assets.length;
                          for (i5 = 0; i5 < len; i5 += 1) {
                            if (animationData2.assets[i5].layers) {
                              iterateLayers(animationData2.assets[i5].layers);
                            }
                          }
                        }
                      }
                    };
                  })();
                  function completeData(animationData2) {
                    if (animationData2.__complete) {
                      return;
                    }
                    checkColors(animationData2);
                    checkText(animationData2);
                    checkChars(animationData2);
                    checkPathProperties(animationData2);
                    checkShapes(animationData2);
                    completeLayers(animationData2.layers, animationData2.assets);
                    completeChars(animationData2.chars, animationData2.assets);
                    animationData2.__complete = true;
                  }
                  function completeText(data2) {
                    if (data2.t.a.length === 0 && !("m" in data2.t.p)) {
                    }
                  }
                  var moduleOb = {};
                  moduleOb.completeData = completeData;
                  moduleOb.checkColors = checkColors;
                  moduleOb.checkChars = checkChars;
                  moduleOb.checkPathProperties = checkPathProperties;
                  moduleOb.checkShapes = checkShapes;
                  moduleOb.completeLayers = completeLayers;
                  return moduleOb;
                }
                if (!_workerSelf.dataManager) {
                  _workerSelf.dataManager = dataFunctionManager();
                }
                if (!_workerSelf.assetLoader) {
                  _workerSelf.assetLoader = /* @__PURE__ */ (function() {
                    function formatResponse(xhr) {
                      var contentTypeHeader = xhr.getResponseHeader("content-type");
                      if (contentTypeHeader && xhr.responseType === "json" && contentTypeHeader.indexOf("json") !== -1) {
                        return xhr.response;
                      }
                      if (xhr.response && _typeof$5(xhr.response) === "object") {
                        return xhr.response;
                      }
                      if (xhr.response && typeof xhr.response === "string") {
                        return JSON.parse(xhr.response);
                      }
                      if (xhr.responseText) {
                        return JSON.parse(xhr.responseText);
                      }
                      return null;
                    }
                    function loadAsset(path, fullPath, callback, errorCallback) {
                      var response;
                      var xhr = new XMLHttpRequest();
                      try {
                        xhr.responseType = "json";
                      } catch (err) {
                      }
                      xhr.onreadystatechange = function() {
                        if (xhr.readyState === 4) {
                          if (xhr.status === 200) {
                            response = formatResponse(xhr);
                            callback(response);
                          } else {
                            try {
                              response = formatResponse(xhr);
                              callback(response);
                            } catch (err) {
                              if (errorCallback) {
                                errorCallback(err);
                              }
                            }
                          }
                        }
                      };
                      try {
                        xhr.open(["G", "E", "T"].join(""), path, true);
                      } catch (error) {
                        xhr.open(["G", "E", "T"].join(""), fullPath + "/" + path, true);
                      }
                      xhr.send();
                    }
                    return {
                      load: loadAsset
                    };
                  })();
                }
                if (e4.data.type === "loadAnimation") {
                  _workerSelf.assetLoader.load(e4.data.path, e4.data.fullPath, function(data2) {
                    _workerSelf.dataManager.completeData(data2);
                    _workerSelf.postMessage({
                      id: e4.data.id,
                      payload: data2,
                      status: "success"
                    });
                  }, function() {
                    _workerSelf.postMessage({
                      id: e4.data.id,
                      status: "error"
                    });
                  });
                } else if (e4.data.type === "complete") {
                  var animation = e4.data.animation;
                  _workerSelf.dataManager.completeData(animation);
                  _workerSelf.postMessage({
                    id: e4.data.id,
                    payload: animation,
                    status: "success"
                  });
                } else if (e4.data.type === "loadData") {
                  _workerSelf.assetLoader.load(e4.data.path, e4.data.fullPath, function(data2) {
                    _workerSelf.postMessage({
                      id: e4.data.id,
                      payload: data2,
                      status: "success"
                    });
                  }, function() {
                    _workerSelf.postMessage({
                      id: e4.data.id,
                      status: "error"
                    });
                  });
                }
              });
              workerInstance.onmessage = function(event) {
                var data2 = event.data;
                var id = data2.id;
                var process2 = processes[id];
                processes[id] = null;
                if (data2.status === "success") {
                  process2.onComplete(data2.payload);
                } else if (process2.onError) {
                  process2.onError();
                }
              };
            }
          }
          function createProcess(onComplete, onError) {
            _counterId += 1;
            var id = "processId_" + _counterId;
            processes[id] = {
              onComplete,
              onError
            };
            return id;
          }
          function loadAnimation2(path, onComplete, onError) {
            setupWorker();
            var processId = createProcess(onComplete, onError);
            workerInstance.postMessage({
              type: "loadAnimation",
              path,
              fullPath: window.location.origin + window.location.pathname,
              id: processId
            });
          }
          function loadData(path, onComplete, onError) {
            setupWorker();
            var processId = createProcess(onComplete, onError);
            workerInstance.postMessage({
              type: "loadData",
              path,
              fullPath: window.location.origin + window.location.pathname,
              id: processId
            });
          }
          function completeAnimation(anim, onComplete, onError) {
            setupWorker();
            var processId = createProcess(onComplete, onError);
            workerInstance.postMessage({
              type: "complete",
              animation: anim,
              id: processId
            });
          }
          return {
            loadAnimation: loadAnimation2,
            loadData,
            completeAnimation
          };
        })();
        var ImagePreloader = (function() {
          var proxyImage = (function() {
            var canvas = createTag("canvas");
            canvas.width = 1;
            canvas.height = 1;
            var ctx = canvas.getContext("2d");
            ctx.fillStyle = "rgba(0,0,0,0)";
            ctx.fillRect(0, 0, 1, 1);
            return canvas;
          })();
          function imageLoaded() {
            this.loadedAssets += 1;
            if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
              if (this.imagesLoadedCb) {
                this.imagesLoadedCb(null);
              }
            }
          }
          function footageLoaded() {
            this.loadedFootagesCount += 1;
            if (this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages) {
              if (this.imagesLoadedCb) {
                this.imagesLoadedCb(null);
              }
            }
          }
          function getAssetsPath(assetData, assetsPath, originalPath) {
            var path = "";
            if (assetData.e) {
              path = assetData.p;
            } else if (assetsPath) {
              var imagePath = assetData.p;
              if (imagePath.indexOf("images/") !== -1) {
                imagePath = imagePath.split("/")[1];
              }
              path = assetsPath + imagePath;
            } else {
              path = originalPath;
              path += assetData.u ? assetData.u : "";
              path += assetData.p;
            }
            return path;
          }
          function testImageLoaded(img) {
            var _count = 0;
            var intervalId = setInterval((function() {
              var box = img.getBBox();
              if (box.width || _count > 500) {
                this._imageLoaded();
                clearInterval(intervalId);
              }
              _count += 1;
            }).bind(this), 50);
          }
          function createImageData(assetData) {
            var path = getAssetsPath(assetData, this.assetsPath, this.path);
            var img = createNS("image");
            if (isSafari) {
              this.testImageLoaded(img);
            } else {
              img.addEventListener("load", this._imageLoaded, false);
            }
            img.addEventListener("error", (function() {
              ob2.img = proxyImage;
              this._imageLoaded();
            }).bind(this), false);
            img.setAttributeNS("http://www.w3.org/1999/xlink", "href", path);
            if (this._elementHelper.append) {
              this._elementHelper.append(img);
            } else {
              this._elementHelper.appendChild(img);
            }
            var ob2 = {
              img,
              assetData
            };
            return ob2;
          }
          function createImgData(assetData) {
            var path = getAssetsPath(assetData, this.assetsPath, this.path);
            var img = createTag("img");
            img.crossOrigin = "anonymous";
            img.addEventListener("load", this._imageLoaded, false);
            img.addEventListener("error", (function() {
              ob2.img = proxyImage;
              this._imageLoaded();
            }).bind(this), false);
            img.src = path;
            var ob2 = {
              img,
              assetData
            };
            return ob2;
          }
          function createFootageData(data2) {
            var ob2 = {
              assetData: data2
            };
            var path = getAssetsPath(data2, this.assetsPath, this.path);
            dataManager.loadData(path, (function(footageData) {
              ob2.img = footageData;
              this._footageLoaded();
            }).bind(this), (function() {
              ob2.img = {};
              this._footageLoaded();
            }).bind(this));
            return ob2;
          }
          function loadAssets(assets, cb) {
            this.imagesLoadedCb = cb;
            var i5;
            var len = assets.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              if (!assets[i5].layers) {
                if (!assets[i5].t || assets[i5].t === "seq") {
                  this.totalImages += 1;
                  this.images.push(this._createImageData(assets[i5]));
                } else if (assets[i5].t === 3) {
                  this.totalFootages += 1;
                  this.images.push(this.createFootageData(assets[i5]));
                }
              }
            }
          }
          function setPath(path) {
            this.path = path || "";
          }
          function setAssetsPath(path) {
            this.assetsPath = path || "";
          }
          function getAsset(assetData) {
            var i5 = 0;
            var len = this.images.length;
            while (i5 < len) {
              if (this.images[i5].assetData === assetData) {
                return this.images[i5].img;
              }
              i5 += 1;
            }
            return null;
          }
          function destroy() {
            this.imagesLoadedCb = null;
            this.images.length = 0;
          }
          function loadedImages() {
            return this.totalImages === this.loadedAssets;
          }
          function loadedFootages() {
            return this.totalFootages === this.loadedFootagesCount;
          }
          function setCacheType(type, elementHelper) {
            if (type === "svg") {
              this._elementHelper = elementHelper;
              this._createImageData = this.createImageData.bind(this);
            } else {
              this._createImageData = this.createImgData.bind(this);
            }
          }
          function ImagePreloaderFactory() {
            this._imageLoaded = imageLoaded.bind(this);
            this._footageLoaded = footageLoaded.bind(this);
            this.testImageLoaded = testImageLoaded.bind(this);
            this.createFootageData = createFootageData.bind(this);
            this.assetsPath = "";
            this.path = "";
            this.totalImages = 0;
            this.totalFootages = 0;
            this.loadedAssets = 0;
            this.loadedFootagesCount = 0;
            this.imagesLoadedCb = null;
            this.images = [];
          }
          ImagePreloaderFactory.prototype = {
            loadAssets,
            setAssetsPath,
            setPath,
            loadedImages,
            loadedFootages,
            destroy,
            getAsset,
            createImgData,
            createImageData,
            imageLoaded,
            footageLoaded,
            setCacheType
          };
          return ImagePreloaderFactory;
        })();
        function BaseEvent() {
        }
        BaseEvent.prototype = {
          triggerEvent: function triggerEvent(eventName, args) {
            if (this._cbs[eventName]) {
              var callbacks = this._cbs[eventName];
              for (var i5 = 0; i5 < callbacks.length; i5 += 1) {
                callbacks[i5](args);
              }
            }
          },
          addEventListener: function addEventListener2(eventName, callback) {
            if (!this._cbs[eventName]) {
              this._cbs[eventName] = [];
            }
            this._cbs[eventName].push(callback);
            return (function() {
              this.removeEventListener(eventName, callback);
            }).bind(this);
          },
          removeEventListener: function removeEventListener2(eventName, callback) {
            if (!callback) {
              this._cbs[eventName] = null;
            } else if (this._cbs[eventName]) {
              var i5 = 0;
              var len = this._cbs[eventName].length;
              while (i5 < len) {
                if (this._cbs[eventName][i5] === callback) {
                  this._cbs[eventName].splice(i5, 1);
                  i5 -= 1;
                  len -= 1;
                }
                i5 += 1;
              }
              if (!this._cbs[eventName].length) {
                this._cbs[eventName] = null;
              }
            }
          }
        };
        var markerParser = /* @__PURE__ */ (function() {
          function parsePayloadLines(payload) {
            var lines = payload.split("\r\n");
            var keys = {};
            var line;
            var keysCount = 0;
            for (var i5 = 0; i5 < lines.length; i5 += 1) {
              line = lines[i5].split(":");
              if (line.length === 2) {
                keys[line[0]] = line[1].trim();
                keysCount += 1;
              }
            }
            if (keysCount === 0) {
              throw new Error();
            }
            return keys;
          }
          return function(_markers) {
            var markers = [];
            for (var i5 = 0; i5 < _markers.length; i5 += 1) {
              var _marker = _markers[i5];
              var markerData = {
                time: _marker.tm,
                duration: _marker.dr
              };
              try {
                markerData.payload = JSON.parse(_markers[i5].cm);
              } catch (_5) {
                try {
                  markerData.payload = parsePayloadLines(_markers[i5].cm);
                } catch (__) {
                  markerData.payload = {
                    name: _markers[i5].cm
                  };
                }
              }
              markers.push(markerData);
            }
            return markers;
          };
        })();
        var ProjectInterface = /* @__PURE__ */ (function() {
          function registerComposition(comp2) {
            this.compositions.push(comp2);
          }
          return function() {
            function _thisProjectFunction(name2) {
              var i5 = 0;
              var len = this.compositions.length;
              while (i5 < len) {
                if (this.compositions[i5].data && this.compositions[i5].data.nm === name2) {
                  if (this.compositions[i5].prepareFrame && this.compositions[i5].data.xt) {
                    this.compositions[i5].prepareFrame(this.currentFrame);
                  }
                  return this.compositions[i5].compInterface;
                }
                i5 += 1;
              }
              return null;
            }
            _thisProjectFunction.compositions = [];
            _thisProjectFunction.currentFrame = 0;
            _thisProjectFunction.registerComposition = registerComposition;
            return _thisProjectFunction;
          };
        })();
        var renderers = {};
        var registerRenderer = function registerRenderer2(key2, value2) {
          renderers[key2] = value2;
        };
        function getRenderer(key2) {
          return renderers[key2];
        }
        function getRegisteredRenderer() {
          if (renderers.canvas) {
            return "canvas";
          }
          for (var key2 in renderers) {
            if (renderers[key2]) {
              return key2;
            }
          }
          return "";
        }
        function _typeof$4(o4) {
          "@babel/helpers - typeof";
          return _typeof$4 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o5) {
            return typeof o5;
          } : function(o5) {
            return o5 && "function" == typeof Symbol && o5.constructor === Symbol && o5 !== Symbol.prototype ? "symbol" : typeof o5;
          }, _typeof$4(o4);
        }
        var AnimationItem = function AnimationItem2() {
          this._cbs = [];
          this.name = "";
          this.path = "";
          this.isLoaded = false;
          this.currentFrame = 0;
          this.currentRawFrame = 0;
          this.firstFrame = 0;
          this.totalFrames = 0;
          this.frameRate = 0;
          this.frameMult = 0;
          this.playSpeed = 1;
          this.playDirection = 1;
          this.playCount = 0;
          this.animationData = {};
          this.assets = [];
          this.isPaused = true;
          this.autoplay = false;
          this.loop = true;
          this.renderer = null;
          this.animationID = createElementID();
          this.assetsPath = "";
          this.timeCompleted = 0;
          this.segmentPos = 0;
          this.isSubframeEnabled = getSubframeEnabled();
          this.segments = [];
          this._idle = true;
          this._completedLoop = false;
          this.projectInterface = ProjectInterface();
          this.imagePreloader = new ImagePreloader();
          this.audioController = audioControllerFactory();
          this.markers = [];
          this.configAnimation = this.configAnimation.bind(this);
          this.onSetupError = this.onSetupError.bind(this);
          this.onSegmentComplete = this.onSegmentComplete.bind(this);
          this.drawnFrameEvent = new BMEnterFrameEvent("drawnFrame", 0, 0, 0);
          this.expressionsPlugin = getExpressionsPlugin();
        };
        extendPrototype([BaseEvent], AnimationItem);
        AnimationItem.prototype.setParams = function(params) {
          if (params.wrapper || params.container) {
            this.wrapper = params.wrapper || params.container;
          }
          var animType = "svg";
          if (params.animType) {
            animType = params.animType;
          } else if (params.renderer) {
            animType = params.renderer;
          }
          var RendererClass = getRenderer(animType);
          this.renderer = new RendererClass(this, params.rendererSettings);
          this.imagePreloader.setCacheType(animType, this.renderer.globalData.defs);
          this.renderer.setProjectInterface(this.projectInterface);
          this.animType = animType;
          if (params.loop === "" || params.loop === null || params.loop === void 0 || params.loop === true) {
            this.loop = true;
          } else if (params.loop === false) {
            this.loop = false;
          } else {
            this.loop = parseInt(params.loop, 10);
          }
          this.autoplay = "autoplay" in params ? params.autoplay : true;
          this.name = params.name ? params.name : "";
          this.autoloadSegments = Object.prototype.hasOwnProperty.call(params, "autoloadSegments") ? params.autoloadSegments : true;
          this.assetsPath = params.assetsPath;
          this.initialSegment = params.initialSegment;
          if (params.audioFactory) {
            this.audioController.setAudioFactory(params.audioFactory);
          }
          if (params.animationData) {
            this.setupAnimation(params.animationData);
          } else if (params.path) {
            if (params.path.lastIndexOf("\\") !== -1) {
              this.path = params.path.substr(0, params.path.lastIndexOf("\\") + 1);
            } else {
              this.path = params.path.substr(0, params.path.lastIndexOf("/") + 1);
            }
            this.fileName = params.path.substr(params.path.lastIndexOf("/") + 1);
            this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf(".json"));
            dataManager.loadAnimation(params.path, this.configAnimation, this.onSetupError);
          }
        };
        AnimationItem.prototype.onSetupError = function() {
          this.trigger("data_failed");
        };
        AnimationItem.prototype.setupAnimation = function(data2) {
          dataManager.completeAnimation(data2, this.configAnimation);
        };
        AnimationItem.prototype.setData = function(wrapper, animationData2) {
          if (animationData2) {
            if (_typeof$4(animationData2) !== "object") {
              animationData2 = JSON.parse(animationData2);
            }
          }
          var params = {
            wrapper,
            animationData: animationData2
          };
          var wrapperAttributes = wrapper.attributes;
          params.path = wrapperAttributes.getNamedItem("data-animation-path") ? wrapperAttributes.getNamedItem("data-animation-path").value : wrapperAttributes.getNamedItem("data-bm-path") ? wrapperAttributes.getNamedItem("data-bm-path").value : wrapperAttributes.getNamedItem("bm-path") ? wrapperAttributes.getNamedItem("bm-path").value : "";
          params.animType = wrapperAttributes.getNamedItem("data-anim-type") ? wrapperAttributes.getNamedItem("data-anim-type").value : wrapperAttributes.getNamedItem("data-bm-type") ? wrapperAttributes.getNamedItem("data-bm-type").value : wrapperAttributes.getNamedItem("bm-type") ? wrapperAttributes.getNamedItem("bm-type").value : wrapperAttributes.getNamedItem("data-bm-renderer") ? wrapperAttributes.getNamedItem("data-bm-renderer").value : wrapperAttributes.getNamedItem("bm-renderer") ? wrapperAttributes.getNamedItem("bm-renderer").value : getRegisteredRenderer() || "canvas";
          var loop = wrapperAttributes.getNamedItem("data-anim-loop") ? wrapperAttributes.getNamedItem("data-anim-loop").value : wrapperAttributes.getNamedItem("data-bm-loop") ? wrapperAttributes.getNamedItem("data-bm-loop").value : wrapperAttributes.getNamedItem("bm-loop") ? wrapperAttributes.getNamedItem("bm-loop").value : "";
          if (loop === "false") {
            params.loop = false;
          } else if (loop === "true") {
            params.loop = true;
          } else if (loop !== "") {
            params.loop = parseInt(loop, 10);
          }
          var autoplay = wrapperAttributes.getNamedItem("data-anim-autoplay") ? wrapperAttributes.getNamedItem("data-anim-autoplay").value : wrapperAttributes.getNamedItem("data-bm-autoplay") ? wrapperAttributes.getNamedItem("data-bm-autoplay").value : wrapperAttributes.getNamedItem("bm-autoplay") ? wrapperAttributes.getNamedItem("bm-autoplay").value : true;
          params.autoplay = autoplay !== "false";
          params.name = wrapperAttributes.getNamedItem("data-name") ? wrapperAttributes.getNamedItem("data-name").value : wrapperAttributes.getNamedItem("data-bm-name") ? wrapperAttributes.getNamedItem("data-bm-name").value : wrapperAttributes.getNamedItem("bm-name") ? wrapperAttributes.getNamedItem("bm-name").value : "";
          var prerender = wrapperAttributes.getNamedItem("data-anim-prerender") ? wrapperAttributes.getNamedItem("data-anim-prerender").value : wrapperAttributes.getNamedItem("data-bm-prerender") ? wrapperAttributes.getNamedItem("data-bm-prerender").value : wrapperAttributes.getNamedItem("bm-prerender") ? wrapperAttributes.getNamedItem("bm-prerender").value : "";
          if (prerender === "false") {
            params.prerender = false;
          }
          if (!params.path) {
            this.trigger("destroy");
          } else {
            this.setParams(params);
          }
        };
        AnimationItem.prototype.includeLayers = function(data2) {
          if (data2.op > this.animationData.op) {
            this.animationData.op = data2.op;
            this.totalFrames = Math.floor(data2.op - this.animationData.ip);
          }
          var layers = this.animationData.layers;
          var i5;
          var len = layers.length;
          var newLayers = data2.layers;
          var j4;
          var jLen = newLayers.length;
          for (j4 = 0; j4 < jLen; j4 += 1) {
            i5 = 0;
            while (i5 < len) {
              if (layers[i5].id === newLayers[j4].id) {
                layers[i5] = newLayers[j4];
                break;
              }
              i5 += 1;
            }
          }
          if (data2.chars || data2.fonts) {
            this.renderer.globalData.fontManager.addChars(data2.chars);
            this.renderer.globalData.fontManager.addFonts(data2.fonts, this.renderer.globalData.defs);
          }
          if (data2.assets) {
            len = data2.assets.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              this.animationData.assets.push(data2.assets[i5]);
            }
          }
          this.animationData.__complete = false;
          dataManager.completeAnimation(this.animationData, this.onSegmentComplete);
        };
        AnimationItem.prototype.onSegmentComplete = function(data2) {
          this.animationData = data2;
          var expressionsPlugin2 = getExpressionsPlugin();
          if (expressionsPlugin2) {
            expressionsPlugin2.initExpressions(this);
          }
          this.loadNextSegment();
        };
        AnimationItem.prototype.loadNextSegment = function() {
          var segments = this.animationData.segments;
          if (!segments || segments.length === 0 || !this.autoloadSegments) {
            this.trigger("data_ready");
            this.timeCompleted = this.totalFrames;
            return;
          }
          var segment = segments.shift();
          this.timeCompleted = segment.time * this.frameRate;
          var segmentPath = this.path + this.fileName + "_" + this.segmentPos + ".json";
          this.segmentPos += 1;
          dataManager.loadData(segmentPath, this.includeLayers.bind(this), (function() {
            this.trigger("data_failed");
          }).bind(this));
        };
        AnimationItem.prototype.loadSegments = function() {
          var segments = this.animationData.segments;
          if (!segments) {
            this.timeCompleted = this.totalFrames;
          }
          this.loadNextSegment();
        };
        AnimationItem.prototype.imagesLoaded = function() {
          this.trigger("loaded_images");
          this.checkLoaded();
        };
        AnimationItem.prototype.preloadImages = function() {
          this.imagePreloader.setAssetsPath(this.assetsPath);
          this.imagePreloader.setPath(this.path);
          this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));
        };
        AnimationItem.prototype.configAnimation = function(animData) {
          if (!this.renderer) {
            return;
          }
          try {
            this.animationData = animData;
            if (this.initialSegment) {
              this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]);
              this.firstFrame = Math.round(this.initialSegment[0]);
            } else {
              this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip);
              this.firstFrame = Math.round(this.animationData.ip);
            }
            this.renderer.configAnimation(animData);
            if (!animData.assets) {
              animData.assets = [];
            }
            this.assets = this.animationData.assets;
            this.frameRate = this.animationData.fr;
            this.frameMult = this.animationData.fr / 1e3;
            this.renderer.searchExtraCompositions(animData.assets);
            this.markers = markerParser(animData.markers || []);
            this.trigger("config_ready");
            this.preloadImages();
            this.loadSegments();
            this.updaFrameModifier();
            this.waitForFontsLoaded();
            if (this.isPaused) {
              this.audioController.pause();
            }
          } catch (error) {
            this.triggerConfigError(error);
          }
        };
        AnimationItem.prototype.waitForFontsLoaded = function() {
          if (!this.renderer) {
            return;
          }
          if (this.renderer.globalData.fontManager.isLoaded) {
            this.checkLoaded();
          } else {
            setTimeout(this.waitForFontsLoaded.bind(this), 20);
          }
        };
        AnimationItem.prototype.checkLoaded = function() {
          if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || this.renderer.rendererType !== "canvas") && this.imagePreloader.loadedFootages()) {
            this.isLoaded = true;
            var expressionsPlugin2 = getExpressionsPlugin();
            if (expressionsPlugin2) {
              expressionsPlugin2.initExpressions(this);
            }
            this.renderer.initItems();
            setTimeout((function() {
              this.trigger("DOMLoaded");
            }).bind(this), 0);
            this.gotoFrame();
            if (this.autoplay) {
              this.play();
            }
          }
        };
        AnimationItem.prototype.resize = function(width2, height2) {
          var _width = typeof width2 === "number" ? width2 : void 0;
          var _height = typeof height2 === "number" ? height2 : void 0;
          this.renderer.updateContainerSize(_width, _height);
        };
        AnimationItem.prototype.setSubframe = function(flag) {
          this.isSubframeEnabled = !!flag;
        };
        AnimationItem.prototype.gotoFrame = function() {
          this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame;
          if (this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted) {
            this.currentFrame = this.timeCompleted;
          }
          this.trigger("enterFrame");
          this.renderFrame();
          this.trigger("drawnFrame");
        };
        AnimationItem.prototype.renderFrame = function() {
          if (this.isLoaded === false || !this.renderer) {
            return;
          }
          try {
            if (this.expressionsPlugin) {
              this.expressionsPlugin.resetFrame();
            }
            this.renderer.renderFrame(this.currentFrame + this.firstFrame);
          } catch (error) {
            this.triggerRenderFrameError(error);
          }
        };
        AnimationItem.prototype.play = function(name2) {
          if (name2 && this.name !== name2) {
            return;
          }
          if (this.isPaused === true) {
            this.isPaused = false;
            this.trigger("_play");
            this.audioController.resume();
            if (this._idle) {
              this._idle = false;
              this.trigger("_active");
            }
          }
        };
        AnimationItem.prototype.pause = function(name2) {
          if (name2 && this.name !== name2) {
            return;
          }
          if (this.isPaused === false) {
            this.isPaused = true;
            this.trigger("_pause");
            this._idle = true;
            this.trigger("_idle");
            this.audioController.pause();
          }
        };
        AnimationItem.prototype.togglePause = function(name2) {
          if (name2 && this.name !== name2) {
            return;
          }
          if (this.isPaused === true) {
            this.play();
          } else {
            this.pause();
          }
        };
        AnimationItem.prototype.stop = function(name2) {
          if (name2 && this.name !== name2) {
            return;
          }
          this.pause();
          this.playCount = 0;
          this._completedLoop = false;
          this.setCurrentRawFrameValue(0);
        };
        AnimationItem.prototype.getMarkerData = function(markerName) {
          var marker;
          for (var i5 = 0; i5 < this.markers.length; i5 += 1) {
            marker = this.markers[i5];
            if (marker.payload && marker.payload.name === markerName) {
              return marker;
            }
          }
          return null;
        };
        AnimationItem.prototype.goToAndStop = function(value2, isFrame, name2) {
          if (name2 && this.name !== name2) {
            return;
          }
          var numValue = Number(value2);
          if (isNaN(numValue)) {
            var marker = this.getMarkerData(value2);
            if (marker) {
              this.goToAndStop(marker.time, true);
            }
          } else if (isFrame) {
            this.setCurrentRawFrameValue(value2);
          } else {
            this.setCurrentRawFrameValue(value2 * this.frameModifier);
          }
          this.pause();
        };
        AnimationItem.prototype.goToAndPlay = function(value2, isFrame, name2) {
          if (name2 && this.name !== name2) {
            return;
          }
          var numValue = Number(value2);
          if (isNaN(numValue)) {
            var marker = this.getMarkerData(value2);
            if (marker) {
              if (!marker.duration) {
                this.goToAndStop(marker.time, true);
              } else {
                this.playSegments([marker.time, marker.time + marker.duration], true);
              }
            }
          } else {
            this.goToAndStop(numValue, isFrame, name2);
          }
          this.play();
        };
        AnimationItem.prototype.advanceTime = function(value2) {
          if (this.isPaused === true || this.isLoaded === false) {
            return;
          }
          var nextValue = this.currentRawFrame + value2 * this.frameModifier;
          var _isComplete = false;
          if (nextValue >= this.totalFrames - 1 && this.frameModifier > 0) {
            if (!this.loop || this.playCount === this.loop) {
              if (!this.checkSegments(nextValue > this.totalFrames ? nextValue % this.totalFrames : 0)) {
                _isComplete = true;
                nextValue = this.totalFrames - 1;
              }
            } else if (nextValue >= this.totalFrames) {
              this.playCount += 1;
              if (!this.checkSegments(nextValue % this.totalFrames)) {
                this.setCurrentRawFrameValue(nextValue % this.totalFrames);
                this._completedLoop = true;
                this.trigger("loopComplete");
              }
            } else {
              this.setCurrentRawFrameValue(nextValue);
            }
          } else if (nextValue < 0) {
            if (!this.checkSegments(nextValue % this.totalFrames)) {
              if (this.loop && !(this.playCount-- <= 0 && this.loop !== true)) {
                this.setCurrentRawFrameValue(this.totalFrames + nextValue % this.totalFrames);
                if (!this._completedLoop) {
                  this._completedLoop = true;
                } else {
                  this.trigger("loopComplete");
                }
              } else {
                _isComplete = true;
                nextValue = 0;
              }
            }
          } else {
            this.setCurrentRawFrameValue(nextValue);
          }
          if (_isComplete) {
            this.setCurrentRawFrameValue(nextValue);
            this.pause();
            this.trigger("complete");
          }
        };
        AnimationItem.prototype.adjustSegment = function(arr, offset) {
          this.playCount = 0;
          if (arr[1] < arr[0]) {
            if (this.frameModifier > 0) {
              if (this.playSpeed < 0) {
                this.setSpeed(-this.playSpeed);
              } else {
                this.setDirection(-1);
              }
            }
            this.totalFrames = arr[0] - arr[1];
            this.timeCompleted = this.totalFrames;
            this.firstFrame = arr[1];
            this.setCurrentRawFrameValue(this.totalFrames - 1e-3 - offset);
          } else if (arr[1] > arr[0]) {
            if (this.frameModifier < 0) {
              if (this.playSpeed < 0) {
                this.setSpeed(-this.playSpeed);
              } else {
                this.setDirection(1);
              }
            }
            this.totalFrames = arr[1] - arr[0];
            this.timeCompleted = this.totalFrames;
            this.firstFrame = arr[0];
            this.setCurrentRawFrameValue(1e-3 + offset);
          }
          this.trigger("segmentStart");
        };
        AnimationItem.prototype.setSegment = function(init2, end) {
          var pendingFrame = -1;
          if (this.isPaused) {
            if (this.currentRawFrame + this.firstFrame < init2) {
              pendingFrame = init2;
            } else if (this.currentRawFrame + this.firstFrame > end) {
              pendingFrame = end - init2;
            }
          }
          this.firstFrame = init2;
          this.totalFrames = end - init2;
          this.timeCompleted = this.totalFrames;
          if (pendingFrame !== -1) {
            this.goToAndStop(pendingFrame, true);
          }
        };
        AnimationItem.prototype.playSegments = function(arr, forceFlag) {
          if (forceFlag) {
            this.segments.length = 0;
          }
          if (_typeof$4(arr[0]) === "object") {
            var i5;
            var len = arr.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              this.segments.push(arr[i5]);
            }
          } else {
            this.segments.push(arr);
          }
          if (this.segments.length && forceFlag) {
            this.adjustSegment(this.segments.shift(), 0);
          }
          if (this.isPaused) {
            this.play();
          }
        };
        AnimationItem.prototype.resetSegments = function(forceFlag) {
          this.segments.length = 0;
          this.segments.push([this.animationData.ip, this.animationData.op]);
          if (forceFlag) {
            this.checkSegments(0);
          }
        };
        AnimationItem.prototype.checkSegments = function(offset) {
          if (this.segments.length) {
            this.adjustSegment(this.segments.shift(), offset);
            return true;
          }
          return false;
        };
        AnimationItem.prototype.destroy = function(name2) {
          if (name2 && this.name !== name2 || !this.renderer) {
            return;
          }
          this.renderer.destroy();
          this.imagePreloader.destroy();
          this.trigger("destroy");
          this._cbs = null;
          this.onEnterFrame = null;
          this.onLoopComplete = null;
          this.onComplete = null;
          this.onSegmentStart = null;
          this.onDestroy = null;
          this.renderer = null;
          this.expressionsPlugin = null;
          this.imagePreloader = null;
          this.projectInterface = null;
        };
        AnimationItem.prototype.setCurrentRawFrameValue = function(value2) {
          this.currentRawFrame = value2;
          this.gotoFrame();
        };
        AnimationItem.prototype.setSpeed = function(val2) {
          this.playSpeed = val2;
          this.updaFrameModifier();
        };
        AnimationItem.prototype.setDirection = function(val2) {
          this.playDirection = val2 < 0 ? -1 : 1;
          this.updaFrameModifier();
        };
        AnimationItem.prototype.setLoop = function(isLooping) {
          this.loop = isLooping;
        };
        AnimationItem.prototype.setVolume = function(val2, name2) {
          if (name2 && this.name !== name2) {
            return;
          }
          this.audioController.setVolume(val2);
        };
        AnimationItem.prototype.getVolume = function() {
          return this.audioController.getVolume();
        };
        AnimationItem.prototype.mute = function(name2) {
          if (name2 && this.name !== name2) {
            return;
          }
          this.audioController.mute();
        };
        AnimationItem.prototype.unmute = function(name2) {
          if (name2 && this.name !== name2) {
            return;
          }
          this.audioController.unmute();
        };
        AnimationItem.prototype.updaFrameModifier = function() {
          this.frameModifier = this.frameMult * this.playSpeed * this.playDirection;
          this.audioController.setRate(this.playSpeed * this.playDirection);
        };
        AnimationItem.prototype.getPath = function() {
          return this.path;
        };
        AnimationItem.prototype.getAssetsPath = function(assetData) {
          var path = "";
          if (assetData.e) {
            path = assetData.p;
          } else if (this.assetsPath) {
            var imagePath = assetData.p;
            if (imagePath.indexOf("images/") !== -1) {
              imagePath = imagePath.split("/")[1];
            }
            path = this.assetsPath + imagePath;
          } else {
            path = this.path;
            path += assetData.u ? assetData.u : "";
            path += assetData.p;
          }
          return path;
        };
        AnimationItem.prototype.getAssetData = function(id) {
          var i5 = 0;
          var len = this.assets.length;
          while (i5 < len) {
            if (id === this.assets[i5].id) {
              return this.assets[i5];
            }
            i5 += 1;
          }
          return null;
        };
        AnimationItem.prototype.hide = function() {
          this.renderer.hide();
        };
        AnimationItem.prototype.show = function() {
          this.renderer.show();
        };
        AnimationItem.prototype.getDuration = function(isFrame) {
          return isFrame ? this.totalFrames : this.totalFrames / this.frameRate;
        };
        AnimationItem.prototype.updateDocumentData = function(path, documentData, index2) {
          try {
            var element = this.renderer.getElementByPath(path);
            element.updateDocumentData(documentData, index2);
          } catch (error) {
          }
        };
        AnimationItem.prototype.trigger = function(name2) {
          if (this._cbs && this._cbs[name2]) {
            switch (name2) {
              case "enterFrame":
                this.triggerEvent(name2, new BMEnterFrameEvent(name2, this.currentFrame, this.totalFrames, this.frameModifier));
                break;
              case "drawnFrame":
                this.drawnFrameEvent.currentTime = this.currentFrame;
                this.drawnFrameEvent.totalTime = this.totalFrames;
                this.drawnFrameEvent.direction = this.frameModifier;
                this.triggerEvent(name2, this.drawnFrameEvent);
                break;
              case "loopComplete":
                this.triggerEvent(name2, new BMCompleteLoopEvent(name2, this.loop, this.playCount, this.frameMult));
                break;
              case "complete":
                this.triggerEvent(name2, new BMCompleteEvent(name2, this.frameMult));
                break;
              case "segmentStart":
                this.triggerEvent(name2, new BMSegmentStartEvent(name2, this.firstFrame, this.totalFrames));
                break;
              case "destroy":
                this.triggerEvent(name2, new BMDestroyEvent(name2, this));
                break;
              default:
                this.triggerEvent(name2);
            }
          }
          if (name2 === "enterFrame" && this.onEnterFrame) {
            this.onEnterFrame.call(this, new BMEnterFrameEvent(name2, this.currentFrame, this.totalFrames, this.frameMult));
          }
          if (name2 === "loopComplete" && this.onLoopComplete) {
            this.onLoopComplete.call(this, new BMCompleteLoopEvent(name2, this.loop, this.playCount, this.frameMult));
          }
          if (name2 === "complete" && this.onComplete) {
            this.onComplete.call(this, new BMCompleteEvent(name2, this.frameMult));
          }
          if (name2 === "segmentStart" && this.onSegmentStart) {
            this.onSegmentStart.call(this, new BMSegmentStartEvent(name2, this.firstFrame, this.totalFrames));
          }
          if (name2 === "destroy" && this.onDestroy) {
            this.onDestroy.call(this, new BMDestroyEvent(name2, this));
          }
        };
        AnimationItem.prototype.triggerRenderFrameError = function(nativeError) {
          var error = new BMRenderFrameErrorEvent(nativeError, this.currentFrame);
          this.triggerEvent("error", error);
          if (this.onError) {
            this.onError.call(this, error);
          }
        };
        AnimationItem.prototype.triggerConfigError = function(nativeError) {
          var error = new BMConfigErrorEvent(nativeError, this.currentFrame);
          this.triggerEvent("error", error);
          if (this.onError) {
            this.onError.call(this, error);
          }
        };
        var animationManager = (function() {
          var moduleOb = {};
          var registeredAnimations = [];
          var initTime = 0;
          var len = 0;
          var playingAnimationsNum = 0;
          var _stopped = true;
          var _isFrozen = false;
          function removeElement(ev) {
            var i5 = 0;
            var animItem = ev.target;
            while (i5 < len) {
              if (registeredAnimations[i5].animation === animItem) {
                registeredAnimations.splice(i5, 1);
                i5 -= 1;
                len -= 1;
                if (!animItem.isPaused) {
                  subtractPlayingCount();
                }
              }
              i5 += 1;
            }
          }
          function registerAnimation(element, animationData2) {
            if (!element) {
              return null;
            }
            var i5 = 0;
            while (i5 < len) {
              if (registeredAnimations[i5].elem === element && registeredAnimations[i5].elem !== null) {
                return registeredAnimations[i5].animation;
              }
              i5 += 1;
            }
            var animItem = new AnimationItem();
            setupAnimation(animItem, element);
            animItem.setData(element, animationData2);
            return animItem;
          }
          function getRegisteredAnimations() {
            var i5;
            var lenAnims = registeredAnimations.length;
            var animations = [];
            for (i5 = 0; i5 < lenAnims; i5 += 1) {
              animations.push(registeredAnimations[i5].animation);
            }
            return animations;
          }
          function addPlayingCount() {
            playingAnimationsNum += 1;
            activate();
          }
          function subtractPlayingCount() {
            playingAnimationsNum -= 1;
          }
          function setupAnimation(animItem, element) {
            animItem.addEventListener("destroy", removeElement);
            animItem.addEventListener("_active", addPlayingCount);
            animItem.addEventListener("_idle", subtractPlayingCount);
            registeredAnimations.push({
              elem: element,
              animation: animItem
            });
            len += 1;
          }
          function loadAnimation2(params) {
            var animItem = new AnimationItem();
            setupAnimation(animItem, null);
            animItem.setParams(params);
            return animItem;
          }
          function setSpeed(val2, animation) {
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              registeredAnimations[i5].animation.setSpeed(val2, animation);
            }
          }
          function setDirection(val2, animation) {
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              registeredAnimations[i5].animation.setDirection(val2, animation);
            }
          }
          function play(animation) {
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              registeredAnimations[i5].animation.play(animation);
            }
          }
          function resume(nowTime) {
            var elapsedTime = nowTime - initTime;
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              registeredAnimations[i5].animation.advanceTime(elapsedTime);
            }
            initTime = nowTime;
            if (playingAnimationsNum && !_isFrozen) {
              window.requestAnimationFrame(resume);
            } else {
              _stopped = true;
            }
          }
          function first(nowTime) {
            initTime = nowTime;
            window.requestAnimationFrame(resume);
          }
          function pause(animation) {
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              registeredAnimations[i5].animation.pause(animation);
            }
          }
          function goToAndStop(value2, isFrame, animation) {
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              registeredAnimations[i5].animation.goToAndStop(value2, isFrame, animation);
            }
          }
          function stop(animation) {
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              registeredAnimations[i5].animation.stop(animation);
            }
          }
          function togglePause(animation) {
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              registeredAnimations[i5].animation.togglePause(animation);
            }
          }
          function destroy(animation) {
            var i5;
            for (i5 = len - 1; i5 >= 0; i5 -= 1) {
              registeredAnimations[i5].animation.destroy(animation);
            }
          }
          function searchAnimations2(animationData2, standalone2, renderer2) {
            var animElements = [].concat([].slice.call(document.getElementsByClassName("lottie")), [].slice.call(document.getElementsByClassName("bodymovin")));
            var i5;
            var lenAnims = animElements.length;
            for (i5 = 0; i5 < lenAnims; i5 += 1) {
              if (renderer2) {
                animElements[i5].setAttribute("data-bm-type", renderer2);
              }
              registerAnimation(animElements[i5], animationData2);
            }
            if (standalone2 && lenAnims === 0) {
              if (!renderer2) {
                renderer2 = "svg";
              }
              var body = document.getElementsByTagName("body")[0];
              body.innerText = "";
              var div2 = createTag("div");
              div2.style.width = "100%";
              div2.style.height = "100%";
              div2.setAttribute("data-bm-type", renderer2);
              body.appendChild(div2);
              registerAnimation(div2, animationData2);
            }
          }
          function resize() {
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              registeredAnimations[i5].animation.resize();
            }
          }
          function activate() {
            if (!_isFrozen && playingAnimationsNum) {
              if (_stopped) {
                window.requestAnimationFrame(first);
                _stopped = false;
              }
            }
          }
          function freeze() {
            _isFrozen = true;
          }
          function unfreeze() {
            _isFrozen = false;
            activate();
          }
          function setVolume(val2, animation) {
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              registeredAnimations[i5].animation.setVolume(val2, animation);
            }
          }
          function mute(animation) {
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              registeredAnimations[i5].animation.mute(animation);
            }
          }
          function unmute(animation) {
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              registeredAnimations[i5].animation.unmute(animation);
            }
          }
          moduleOb.registerAnimation = registerAnimation;
          moduleOb.loadAnimation = loadAnimation2;
          moduleOb.setSpeed = setSpeed;
          moduleOb.setDirection = setDirection;
          moduleOb.play = play;
          moduleOb.pause = pause;
          moduleOb.stop = stop;
          moduleOb.togglePause = togglePause;
          moduleOb.searchAnimations = searchAnimations2;
          moduleOb.resize = resize;
          moduleOb.goToAndStop = goToAndStop;
          moduleOb.destroy = destroy;
          moduleOb.freeze = freeze;
          moduleOb.unfreeze = unfreeze;
          moduleOb.setVolume = setVolume;
          moduleOb.mute = mute;
          moduleOb.unmute = unmute;
          moduleOb.getRegisteredAnimations = getRegisteredAnimations;
          return moduleOb;
        })();
        var BezierFactory = (function() {
          var ob2 = {};
          ob2.getBezierEasing = getBezierEasing;
          var beziers = {};
          function getBezierEasing(a4, b4, c4, d5, nm) {
            var str = nm || ("bez_" + a4 + "_" + b4 + "_" + c4 + "_" + d5).replace(/\./g, "p");
            if (beziers[str]) {
              return beziers[str];
            }
            var bezEasing = new BezierEasing([a4, b4, c4, d5]);
            beziers[str] = bezEasing;
            return bezEasing;
          }
          var NEWTON_ITERATIONS = 4;
          var NEWTON_MIN_SLOPE = 1e-3;
          var SUBDIVISION_PRECISION = 1e-7;
          var SUBDIVISION_MAX_ITERATIONS = 10;
          var kSplineTableSize = 11;
          var kSampleStepSize = 1 / (kSplineTableSize - 1);
          var float32ArraySupported = typeof Float32Array === "function";
          function A5(aA1, aA2) {
            return 1 - 3 * aA2 + 3 * aA1;
          }
          function B4(aA1, aA2) {
            return 3 * aA2 - 6 * aA1;
          }
          function C3(aA1) {
            return 3 * aA1;
          }
          function calcBezier(aT, aA1, aA2) {
            return ((A5(aA1, aA2) * aT + B4(aA1, aA2)) * aT + C3(aA1)) * aT;
          }
          function getSlope(aT, aA1, aA2) {
            return 3 * A5(aA1, aA2) * aT * aT + 2 * B4(aA1, aA2) * aT + C3(aA1);
          }
          function binarySubdivide(aX, aA, aB, mX1, mX2) {
            var currentX, currentT, i5 = 0;
            do {
              currentT = aA + (aB - aA) / 2;
              currentX = calcBezier(currentT, mX1, mX2) - aX;
              if (currentX > 0) {
                aB = currentT;
              } else {
                aA = currentT;
              }
            } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i5 < SUBDIVISION_MAX_ITERATIONS);
            return currentT;
          }
          function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
            for (var i5 = 0; i5 < NEWTON_ITERATIONS; ++i5) {
              var currentSlope = getSlope(aGuessT, mX1, mX2);
              if (currentSlope === 0) return aGuessT;
              var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
              aGuessT -= currentX / currentSlope;
            }
            return aGuessT;
          }
          function BezierEasing(points) {
            this._p = points;
            this._mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
            this._precomputed = false;
            this.get = this.get.bind(this);
          }
          BezierEasing.prototype = {
            get: function get(x3) {
              var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];
              if (!this._precomputed) this._precompute();
              if (mX1 === mY1 && mX2 === mY2) return x3;
              if (x3 === 0) return 0;
              if (x3 === 1) return 1;
              return calcBezier(this._getTForX(x3), mY1, mY2);
            },
            // Private part
            _precompute: function _precompute() {
              var mX1 = this._p[0], mY1 = this._p[1], mX2 = this._p[2], mY2 = this._p[3];
              this._precomputed = true;
              if (mX1 !== mY1 || mX2 !== mY2) {
                this._calcSampleValues();
              }
            },
            _calcSampleValues: function _calcSampleValues() {
              var mX1 = this._p[0], mX2 = this._p[2];
              for (var i5 = 0; i5 < kSplineTableSize; ++i5) {
                this._mSampleValues[i5] = calcBezier(i5 * kSampleStepSize, mX1, mX2);
              }
            },
            /**
                 * getTForX chose the fastest heuristic to determine the percentage value precisely from a given X projection.
                 */
            _getTForX: function _getTForX(aX) {
              var mX1 = this._p[0], mX2 = this._p[2], mSampleValues = this._mSampleValues;
              var intervalStart = 0;
              var currentSample = 1;
              var lastSample = kSplineTableSize - 1;
              for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
                intervalStart += kSampleStepSize;
              }
              --currentSample;
              var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]);
              var guessForT = intervalStart + dist * kSampleStepSize;
              var initialSlope = getSlope(guessForT, mX1, mX2);
              if (initialSlope >= NEWTON_MIN_SLOPE) {
                return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
              }
              if (initialSlope === 0) {
                return guessForT;
              }
              return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
            }
          };
          return ob2;
        })();
        var pooling = /* @__PURE__ */ (function() {
          function _double(arr) {
            return arr.concat(createSizedArray(arr.length));
          }
          return {
            "double": _double
          };
        })();
        var poolFactory = /* @__PURE__ */ (function() {
          return function(initialLength, _create, _release) {
            var _length = 0;
            var _maxLength = initialLength;
            var pool = createSizedArray(_maxLength);
            var ob2 = {
              newElement,
              release
            };
            function newElement() {
              var element;
              if (_length) {
                _length -= 1;
                element = pool[_length];
              } else {
                element = _create();
              }
              return element;
            }
            function release(element) {
              if (_length === _maxLength) {
                pool = pooling["double"](pool);
                _maxLength *= 2;
              }
              if (_release) {
                _release(element);
              }
              pool[_length] = element;
              _length += 1;
            }
            return ob2;
          };
        })();
        var bezierLengthPool = (function() {
          function create() {
            return {
              addedLength: 0,
              percents: createTypedArray("float32", getDefaultCurveSegments()),
              lengths: createTypedArray("float32", getDefaultCurveSegments())
            };
          }
          return poolFactory(8, create);
        })();
        var segmentsLengthPool = (function() {
          function create() {
            return {
              lengths: [],
              totalLength: 0
            };
          }
          function release(element) {
            var i5;
            var len = element.lengths.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              bezierLengthPool.release(element.lengths[i5]);
            }
            element.lengths.length = 0;
          }
          return poolFactory(8, create, release);
        })();
        function bezFunction() {
          var math = Math;
          function pointOnLine2D(x1, y1, x22, y22, x3, y32) {
            var det1 = x1 * y22 + y1 * x3 + x22 * y32 - x3 * y22 - y32 * x1 - x22 * y1;
            return det1 > -1e-3 && det1 < 1e-3;
          }
          function pointOnLine3D(x1, y1, z1, x22, y22, z22, x3, y32, z32) {
            if (z1 === 0 && z22 === 0 && z32 === 0) {
              return pointOnLine2D(x1, y1, x22, y22, x3, y32);
            }
            var dist1 = math.sqrt(math.pow(x22 - x1, 2) + math.pow(y22 - y1, 2) + math.pow(z22 - z1, 2));
            var dist2 = math.sqrt(math.pow(x3 - x1, 2) + math.pow(y32 - y1, 2) + math.pow(z32 - z1, 2));
            var dist3 = math.sqrt(math.pow(x3 - x22, 2) + math.pow(y32 - y22, 2) + math.pow(z32 - z22, 2));
            var diffDist;
            if (dist1 > dist2) {
              if (dist1 > dist3) {
                diffDist = dist1 - dist2 - dist3;
              } else {
                diffDist = dist3 - dist2 - dist1;
              }
            } else if (dist3 > dist2) {
              diffDist = dist3 - dist2 - dist1;
            } else {
              diffDist = dist2 - dist1 - dist3;
            }
            return diffDist > -1e-4 && diffDist < 1e-4;
          }
          var getBezierLength = /* @__PURE__ */ (function() {
            return function(pt1, pt2, pt3, pt4) {
              var curveSegments = getDefaultCurveSegments();
              var k4;
              var i5;
              var len;
              var ptCoord;
              var perc;
              var addedLength = 0;
              var ptDistance;
              var point = [];
              var lastPoint = [];
              var lengthData = bezierLengthPool.newElement();
              len = pt3.length;
              for (k4 = 0; k4 < curveSegments; k4 += 1) {
                perc = k4 / (curveSegments - 1);
                ptDistance = 0;
                for (i5 = 0; i5 < len; i5 += 1) {
                  ptCoord = bmPow(1 - perc, 3) * pt1[i5] + 3 * bmPow(1 - perc, 2) * perc * pt3[i5] + 3 * (1 - perc) * bmPow(perc, 2) * pt4[i5] + bmPow(perc, 3) * pt2[i5];
                  point[i5] = ptCoord;
                  if (lastPoint[i5] !== null) {
                    ptDistance += bmPow(point[i5] - lastPoint[i5], 2);
                  }
                  lastPoint[i5] = point[i5];
                }
                if (ptDistance) {
                  ptDistance = bmSqrt(ptDistance);
                  addedLength += ptDistance;
                }
                lengthData.percents[k4] = perc;
                lengthData.lengths[k4] = addedLength;
              }
              lengthData.addedLength = addedLength;
              return lengthData;
            };
          })();
          function getSegmentsLength(shapeData) {
            var segmentsLength = segmentsLengthPool.newElement();
            var closed = shapeData.c;
            var pathV = shapeData.v;
            var pathO = shapeData.o;
            var pathI = shapeData.i;
            var i5;
            var len = shapeData._length;
            var lengths = segmentsLength.lengths;
            var totalLength = 0;
            for (i5 = 0; i5 < len - 1; i5 += 1) {
              lengths[i5] = getBezierLength(pathV[i5], pathV[i5 + 1], pathO[i5], pathI[i5 + 1]);
              totalLength += lengths[i5].addedLength;
            }
            if (closed && len) {
              lengths[i5] = getBezierLength(pathV[i5], pathV[0], pathO[i5], pathI[0]);
              totalLength += lengths[i5].addedLength;
            }
            segmentsLength.totalLength = totalLength;
            return segmentsLength;
          }
          function BezierData(length2) {
            this.segmentLength = 0;
            this.points = new Array(length2);
          }
          function PointData(partial, point) {
            this.partialLength = partial;
            this.point = point;
          }
          var buildBezierData = /* @__PURE__ */ (function() {
            var storedData = {};
            return function(pt1, pt2, pt3, pt4) {
              var bezierName = (pt1[0] + "_" + pt1[1] + "_" + pt2[0] + "_" + pt2[1] + "_" + pt3[0] + "_" + pt3[1] + "_" + pt4[0] + "_" + pt4[1]).replace(/\./g, "p");
              if (!storedData[bezierName]) {
                var curveSegments = getDefaultCurveSegments();
                var k4;
                var i5;
                var len;
                var ptCoord;
                var perc;
                var addedLength = 0;
                var ptDistance;
                var point;
                var lastPoint = null;
                if (pt1.length === 2 && (pt1[0] !== pt2[0] || pt1[1] !== pt2[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt1[0] + pt3[0], pt1[1] + pt3[1]) && pointOnLine2D(pt1[0], pt1[1], pt2[0], pt2[1], pt2[0] + pt4[0], pt2[1] + pt4[1])) {
                  curveSegments = 2;
                }
                var bezierData = new BezierData(curveSegments);
                len = pt3.length;
                for (k4 = 0; k4 < curveSegments; k4 += 1) {
                  point = createSizedArray(len);
                  perc = k4 / (curveSegments - 1);
                  ptDistance = 0;
                  for (i5 = 0; i5 < len; i5 += 1) {
                    ptCoord = bmPow(1 - perc, 3) * pt1[i5] + 3 * bmPow(1 - perc, 2) * perc * (pt1[i5] + pt3[i5]) + 3 * (1 - perc) * bmPow(perc, 2) * (pt2[i5] + pt4[i5]) + bmPow(perc, 3) * pt2[i5];
                    point[i5] = ptCoord;
                    if (lastPoint !== null) {
                      ptDistance += bmPow(point[i5] - lastPoint[i5], 2);
                    }
                  }
                  ptDistance = bmSqrt(ptDistance);
                  addedLength += ptDistance;
                  bezierData.points[k4] = new PointData(ptDistance, point);
                  lastPoint = point;
                }
                bezierData.segmentLength = addedLength;
                storedData[bezierName] = bezierData;
              }
              return storedData[bezierName];
            };
          })();
          function getDistancePerc(perc, bezierData) {
            var percents = bezierData.percents;
            var lengths = bezierData.lengths;
            var len = percents.length;
            var initPos = bmFloor((len - 1) * perc);
            var lengthPos = perc * bezierData.addedLength;
            var lPerc = 0;
            if (initPos === len - 1 || initPos === 0 || lengthPos === lengths[initPos]) {
              return percents[initPos];
            }
            var dir = lengths[initPos] > lengthPos ? -1 : 1;
            var flag = true;
            while (flag) {
              if (lengths[initPos] <= lengthPos && lengths[initPos + 1] > lengthPos) {
                lPerc = (lengthPos - lengths[initPos]) / (lengths[initPos + 1] - lengths[initPos]);
                flag = false;
              } else {
                initPos += dir;
              }
              if (initPos < 0 || initPos >= len - 1) {
                if (initPos === len - 1) {
                  return percents[initPos];
                }
                flag = false;
              }
            }
            return percents[initPos] + (percents[initPos + 1] - percents[initPos]) * lPerc;
          }
          function getPointInSegment(pt1, pt2, pt3, pt4, percent, bezierData) {
            var t1 = getDistancePerc(percent, bezierData);
            var u1 = 1 - t1;
            var ptX = math.round((u1 * u1 * u1 * pt1[0] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[0] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[0] + t1 * t1 * t1 * pt2[0]) * 1e3) / 1e3;
            var ptY = math.round((u1 * u1 * u1 * pt1[1] + (t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1) * pt3[1] + (t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1) * pt4[1] + t1 * t1 * t1 * pt2[1]) * 1e3) / 1e3;
            return [ptX, ptY];
          }
          var bezierSegmentPoints = createTypedArray("float32", 8);
          function getNewSegment(pt1, pt2, pt3, pt4, startPerc, endPerc, bezierData) {
            if (startPerc < 0) {
              startPerc = 0;
            } else if (startPerc > 1) {
              startPerc = 1;
            }
            var t0 = getDistancePerc(startPerc, bezierData);
            endPerc = endPerc > 1 ? 1 : endPerc;
            var t1 = getDistancePerc(endPerc, bezierData);
            var i5;
            var len = pt1.length;
            var u0 = 1 - t0;
            var u1 = 1 - t1;
            var u0u0u0 = u0 * u0 * u0;
            var t0u0u0_3 = t0 * u0 * u0 * 3;
            var t0t0u0_3 = t0 * t0 * u0 * 3;
            var t0t0t0 = t0 * t0 * t0;
            var u0u0u1 = u0 * u0 * u1;
            var t0u0u1_3 = t0 * u0 * u1 + u0 * t0 * u1 + u0 * u0 * t1;
            var t0t0u1_3 = t0 * t0 * u1 + u0 * t0 * t1 + t0 * u0 * t1;
            var t0t0t1 = t0 * t0 * t1;
            var u0u1u1 = u0 * u1 * u1;
            var t0u1u1_3 = t0 * u1 * u1 + u0 * t1 * u1 + u0 * u1 * t1;
            var t0t1u1_3 = t0 * t1 * u1 + u0 * t1 * t1 + t0 * u1 * t1;
            var t0t1t1 = t0 * t1 * t1;
            var u1u1u1 = u1 * u1 * u1;
            var t1u1u1_3 = t1 * u1 * u1 + u1 * t1 * u1 + u1 * u1 * t1;
            var t1t1u1_3 = t1 * t1 * u1 + u1 * t1 * t1 + t1 * u1 * t1;
            var t1t1t1 = t1 * t1 * t1;
            for (i5 = 0; i5 < len; i5 += 1) {
              bezierSegmentPoints[i5 * 4] = math.round((u0u0u0 * pt1[i5] + t0u0u0_3 * pt3[i5] + t0t0u0_3 * pt4[i5] + t0t0t0 * pt2[i5]) * 1e3) / 1e3;
              bezierSegmentPoints[i5 * 4 + 1] = math.round((u0u0u1 * pt1[i5] + t0u0u1_3 * pt3[i5] + t0t0u1_3 * pt4[i5] + t0t0t1 * pt2[i5]) * 1e3) / 1e3;
              bezierSegmentPoints[i5 * 4 + 2] = math.round((u0u1u1 * pt1[i5] + t0u1u1_3 * pt3[i5] + t0t1u1_3 * pt4[i5] + t0t1t1 * pt2[i5]) * 1e3) / 1e3;
              bezierSegmentPoints[i5 * 4 + 3] = math.round((u1u1u1 * pt1[i5] + t1u1u1_3 * pt3[i5] + t1t1u1_3 * pt4[i5] + t1t1t1 * pt2[i5]) * 1e3) / 1e3;
            }
            return bezierSegmentPoints;
          }
          return {
            getSegmentsLength,
            getNewSegment,
            getPointInSegment,
            buildBezierData,
            pointOnLine2D,
            pointOnLine3D
          };
        }
        var bez = bezFunction();
        var initFrame = initialDefaultFrame;
        var mathAbs = Math.abs;
        function interpolateValue(frameNum, caching) {
          var offsetTime = this.offsetTime;
          var newValue;
          if (this.propType === "multidimensional") {
            newValue = createTypedArray("float32", this.pv.length);
          }
          var iterationIndex = caching.lastIndex;
          var i5 = iterationIndex;
          var len = this.keyframes.length - 1;
          var flag = true;
          var keyData;
          var nextKeyData;
          var keyframeMetadata;
          while (flag) {
            keyData = this.keyframes[i5];
            nextKeyData = this.keyframes[i5 + 1];
            if (i5 === len - 1 && frameNum >= nextKeyData.t - offsetTime) {
              if (keyData.h) {
                keyData = nextKeyData;
              }
              iterationIndex = 0;
              break;
            }
            if (nextKeyData.t - offsetTime > frameNum) {
              iterationIndex = i5;
              break;
            }
            if (i5 < len - 1) {
              i5 += 1;
            } else {
              iterationIndex = 0;
              flag = false;
            }
          }
          keyframeMetadata = this.keyframesMetadata[i5] || {};
          var k4;
          var kLen;
          var perc;
          var jLen;
          var j4;
          var fnc;
          var nextKeyTime = nextKeyData.t - offsetTime;
          var keyTime = keyData.t - offsetTime;
          var endValue;
          if (keyData.to) {
            if (!keyframeMetadata.bezierData) {
              keyframeMetadata.bezierData = bez.buildBezierData(keyData.s, nextKeyData.s || keyData.e, keyData.to, keyData.ti);
            }
            var bezierData = keyframeMetadata.bezierData;
            if (frameNum >= nextKeyTime || frameNum < keyTime) {
              var ind = frameNum >= nextKeyTime ? bezierData.points.length - 1 : 0;
              kLen = bezierData.points[ind].point.length;
              for (k4 = 0; k4 < kLen; k4 += 1) {
                newValue[k4] = bezierData.points[ind].point[k4];
              }
            } else {
              if (keyframeMetadata.__fnct) {
                fnc = keyframeMetadata.__fnct;
              } else {
                fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y, keyData.n).get;
                keyframeMetadata.__fnct = fnc;
              }
              perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
              var distanceInLine = bezierData.segmentLength * perc;
              var segmentPerc;
              var addedLength = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i5 ? caching._lastAddedLength : 0;
              j4 = caching.lastFrame < frameNum && caching._lastKeyframeIndex === i5 ? caching._lastPoint : 0;
              flag = true;
              jLen = bezierData.points.length;
              while (flag) {
                addedLength += bezierData.points[j4].partialLength;
                if (distanceInLine === 0 || perc === 0 || j4 === bezierData.points.length - 1) {
                  kLen = bezierData.points[j4].point.length;
                  for (k4 = 0; k4 < kLen; k4 += 1) {
                    newValue[k4] = bezierData.points[j4].point[k4];
                  }
                  break;
                } else if (distanceInLine >= addedLength && distanceInLine < addedLength + bezierData.points[j4 + 1].partialLength) {
                  segmentPerc = (distanceInLine - addedLength) / bezierData.points[j4 + 1].partialLength;
                  kLen = bezierData.points[j4].point.length;
                  for (k4 = 0; k4 < kLen; k4 += 1) {
                    newValue[k4] = bezierData.points[j4].point[k4] + (bezierData.points[j4 + 1].point[k4] - bezierData.points[j4].point[k4]) * segmentPerc;
                  }
                  break;
                }
                if (j4 < jLen - 1) {
                  j4 += 1;
                } else {
                  flag = false;
                }
              }
              caching._lastPoint = j4;
              caching._lastAddedLength = addedLength - bezierData.points[j4].partialLength;
              caching._lastKeyframeIndex = i5;
            }
          } else {
            var outX;
            var outY;
            var inX;
            var inY;
            var keyValue;
            len = keyData.s.length;
            endValue = nextKeyData.s || keyData.e;
            if (this.sh && keyData.h !== 1) {
              if (frameNum >= nextKeyTime) {
                newValue[0] = endValue[0];
                newValue[1] = endValue[1];
                newValue[2] = endValue[2];
              } else if (frameNum <= keyTime) {
                newValue[0] = keyData.s[0];
                newValue[1] = keyData.s[1];
                newValue[2] = keyData.s[2];
              } else {
                var quatStart = createQuaternion(keyData.s);
                var quatEnd = createQuaternion(endValue);
                var time2 = (frameNum - keyTime) / (nextKeyTime - keyTime);
                quaternionToEuler(newValue, slerp(quatStart, quatEnd, time2));
              }
            } else {
              for (i5 = 0; i5 < len; i5 += 1) {
                if (keyData.h !== 1) {
                  if (frameNum >= nextKeyTime) {
                    perc = 1;
                  } else if (frameNum < keyTime) {
                    perc = 0;
                  } else {
                    if (keyData.o.x.constructor === Array) {
                      if (!keyframeMetadata.__fnct) {
                        keyframeMetadata.__fnct = [];
                      }
                      if (!keyframeMetadata.__fnct[i5]) {
                        outX = keyData.o.x[i5] === void 0 ? keyData.o.x[0] : keyData.o.x[i5];
                        outY = keyData.o.y[i5] === void 0 ? keyData.o.y[0] : keyData.o.y[i5];
                        inX = keyData.i.x[i5] === void 0 ? keyData.i.x[0] : keyData.i.x[i5];
                        inY = keyData.i.y[i5] === void 0 ? keyData.i.y[0] : keyData.i.y[i5];
                        fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                        keyframeMetadata.__fnct[i5] = fnc;
                      } else {
                        fnc = keyframeMetadata.__fnct[i5];
                      }
                    } else if (!keyframeMetadata.__fnct) {
                      outX = keyData.o.x;
                      outY = keyData.o.y;
                      inX = keyData.i.x;
                      inY = keyData.i.y;
                      fnc = BezierFactory.getBezierEasing(outX, outY, inX, inY).get;
                      keyData.keyframeMetadata = fnc;
                    } else {
                      fnc = keyframeMetadata.__fnct;
                    }
                    perc = fnc((frameNum - keyTime) / (nextKeyTime - keyTime));
                  }
                }
                endValue = nextKeyData.s || keyData.e;
                keyValue = keyData.h === 1 ? keyData.s[i5] : keyData.s[i5] + (endValue[i5] - keyData.s[i5]) * perc;
                if (this.propType === "multidimensional") {
                  newValue[i5] = keyValue;
                } else {
                  newValue = keyValue;
                }
              }
            }
          }
          caching.lastIndex = iterationIndex;
          return newValue;
        }
        function slerp(a4, b4, t4) {
          var out = [];
          var ax = a4[0];
          var ay = a4[1];
          var az = a4[2];
          var aw = a4[3];
          var bx = b4[0];
          var by = b4[1];
          var bz = b4[2];
          var bw = b4[3];
          var omega;
          var cosom;
          var sinom;
          var scale0;
          var scale1;
          cosom = ax * bx + ay * by + az * bz + aw * bw;
          if (cosom < 0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
          }
          if (1 - cosom > 1e-6) {
            omega = Math.acos(cosom);
            sinom = Math.sin(omega);
            scale0 = Math.sin((1 - t4) * omega) / sinom;
            scale1 = Math.sin(t4 * omega) / sinom;
          } else {
            scale0 = 1 - t4;
            scale1 = t4;
          }
          out[0] = scale0 * ax + scale1 * bx;
          out[1] = scale0 * ay + scale1 * by;
          out[2] = scale0 * az + scale1 * bz;
          out[3] = scale0 * aw + scale1 * bw;
          return out;
        }
        function quaternionToEuler(out, quat) {
          var qx = quat[0];
          var qy = quat[1];
          var qz = quat[2];
          var qw = quat[3];
          var heading = Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy * qy - 2 * qz * qz);
          var attitude = Math.asin(2 * qx * qy + 2 * qz * qw);
          var bank = Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx * qx - 2 * qz * qz);
          out[0] = heading / degToRads;
          out[1] = attitude / degToRads;
          out[2] = bank / degToRads;
        }
        function createQuaternion(values2) {
          var heading = values2[0] * degToRads;
          var attitude = values2[1] * degToRads;
          var bank = values2[2] * degToRads;
          var c1 = Math.cos(heading / 2);
          var c22 = Math.cos(attitude / 2);
          var c32 = Math.cos(bank / 2);
          var s1 = Math.sin(heading / 2);
          var s22 = Math.sin(attitude / 2);
          var s32 = Math.sin(bank / 2);
          var w5 = c1 * c22 * c32 - s1 * s22 * s32;
          var x3 = s1 * s22 * c32 + c1 * c22 * s32;
          var y5 = s1 * c22 * c32 + c1 * s22 * s32;
          var z4 = c1 * s22 * c32 - s1 * c22 * s32;
          return [x3, y5, z4, w5];
        }
        function getValueAtCurrentTime() {
          var frameNum = this.comp.renderedFrame - this.offsetTime;
          var initTime = this.keyframes[0].t - this.offsetTime;
          var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
          if (!(frameNum === this._caching.lastFrame || this._caching.lastFrame !== initFrame && (this._caching.lastFrame >= endTime && frameNum >= endTime || this._caching.lastFrame < initTime && frameNum < initTime))) {
            if (this._caching.lastFrame >= frameNum) {
              this._caching._lastKeyframeIndex = -1;
              this._caching.lastIndex = 0;
            }
            var renderResult = this.interpolateValue(frameNum, this._caching);
            this.pv = renderResult;
          }
          this._caching.lastFrame = frameNum;
          return this.pv;
        }
        function setVValue(val2) {
          var multipliedValue;
          if (this.propType === "unidimensional") {
            multipliedValue = val2 * this.mult;
            if (mathAbs(this.v - multipliedValue) > 1e-5) {
              this.v = multipliedValue;
              this._mdf = true;
            }
          } else {
            var i5 = 0;
            var len = this.v.length;
            while (i5 < len) {
              multipliedValue = val2[i5] * this.mult;
              if (mathAbs(this.v[i5] - multipliedValue) > 1e-5) {
                this.v[i5] = multipliedValue;
                this._mdf = true;
              }
              i5 += 1;
            }
          }
        }
        function processEffectsSequence() {
          if (this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) {
            return;
          }
          if (this.lock) {
            this.setVValue(this.pv);
            return;
          }
          this.lock = true;
          this._mdf = this._isFirstFrame;
          var i5;
          var len = this.effectsSequence.length;
          var finalValue = this.kf ? this.pv : this.data.k;
          for (i5 = 0; i5 < len; i5 += 1) {
            finalValue = this.effectsSequence[i5](finalValue);
          }
          this.setVValue(finalValue);
          this._isFirstFrame = false;
          this.lock = false;
          this.frameId = this.elem.globalData.frameId;
        }
        function addEffect(effectFunction) {
          this.effectsSequence.push(effectFunction);
          this.container.addDynamicProperty(this);
        }
        function ValueProperty(elem2, data2, mult, container) {
          this.propType = "unidimensional";
          this.mult = mult || 1;
          this.data = data2;
          this.v = mult ? data2.k * mult : data2.k;
          this.pv = data2.k;
          this._mdf = false;
          this.elem = elem2;
          this.container = container;
          this.comp = elem2.comp;
          this.k = false;
          this.kf = false;
          this.vel = 0;
          this.effectsSequence = [];
          this._isFirstFrame = true;
          this.getValue = processEffectsSequence;
          this.setVValue = setVValue;
          this.addEffect = addEffect;
        }
        function MultiDimensionalProperty(elem2, data2, mult, container) {
          this.propType = "multidimensional";
          this.mult = mult || 1;
          this.data = data2;
          this._mdf = false;
          this.elem = elem2;
          this.container = container;
          this.comp = elem2.comp;
          this.k = false;
          this.kf = false;
          this.frameId = -1;
          var i5;
          var len = data2.k.length;
          this.v = createTypedArray("float32", len);
          this.pv = createTypedArray("float32", len);
          this.vel = createTypedArray("float32", len);
          for (i5 = 0; i5 < len; i5 += 1) {
            this.v[i5] = data2.k[i5] * this.mult;
            this.pv[i5] = data2.k[i5];
          }
          this._isFirstFrame = true;
          this.effectsSequence = [];
          this.getValue = processEffectsSequence;
          this.setVValue = setVValue;
          this.addEffect = addEffect;
        }
        function KeyframedValueProperty(elem2, data2, mult, container) {
          this.propType = "unidimensional";
          this.keyframes = data2.k;
          this.keyframesMetadata = [];
          this.offsetTime = elem2.data.st;
          this.frameId = -1;
          this._caching = {
            lastFrame: initFrame,
            lastIndex: 0,
            value: 0,
            _lastKeyframeIndex: -1
          };
          this.k = true;
          this.kf = true;
          this.data = data2;
          this.mult = mult || 1;
          this.elem = elem2;
          this.container = container;
          this.comp = elem2.comp;
          this.v = initFrame;
          this.pv = initFrame;
          this._isFirstFrame = true;
          this.getValue = processEffectsSequence;
          this.setVValue = setVValue;
          this.interpolateValue = interpolateValue;
          this.effectsSequence = [getValueAtCurrentTime.bind(this)];
          this.addEffect = addEffect;
        }
        function KeyframedMultidimensionalProperty(elem2, data2, mult, container) {
          this.propType = "multidimensional";
          var i5;
          var len = data2.k.length;
          var s4;
          var e4;
          var to;
          var ti;
          for (i5 = 0; i5 < len - 1; i5 += 1) {
            if (data2.k[i5].to && data2.k[i5].s && data2.k[i5 + 1] && data2.k[i5 + 1].s) {
              s4 = data2.k[i5].s;
              e4 = data2.k[i5 + 1].s;
              to = data2.k[i5].to;
              ti = data2.k[i5].ti;
              if (s4.length === 2 && !(s4[0] === e4[0] && s4[1] === e4[1]) && bez.pointOnLine2D(s4[0], s4[1], e4[0], e4[1], s4[0] + to[0], s4[1] + to[1]) && bez.pointOnLine2D(s4[0], s4[1], e4[0], e4[1], e4[0] + ti[0], e4[1] + ti[1]) || s4.length === 3 && !(s4[0] === e4[0] && s4[1] === e4[1] && s4[2] === e4[2]) && bez.pointOnLine3D(s4[0], s4[1], s4[2], e4[0], e4[1], e4[2], s4[0] + to[0], s4[1] + to[1], s4[2] + to[2]) && bez.pointOnLine3D(s4[0], s4[1], s4[2], e4[0], e4[1], e4[2], e4[0] + ti[0], e4[1] + ti[1], e4[2] + ti[2])) {
                data2.k[i5].to = null;
                data2.k[i5].ti = null;
              }
              if (s4[0] === e4[0] && s4[1] === e4[1] && to[0] === 0 && to[1] === 0 && ti[0] === 0 && ti[1] === 0) {
                if (s4.length === 2 || s4[2] === e4[2] && to[2] === 0 && ti[2] === 0) {
                  data2.k[i5].to = null;
                  data2.k[i5].ti = null;
                }
              }
            }
          }
          this.effectsSequence = [getValueAtCurrentTime.bind(this)];
          this.data = data2;
          this.keyframes = data2.k;
          this.keyframesMetadata = [];
          this.offsetTime = elem2.data.st;
          this.k = true;
          this.kf = true;
          this._isFirstFrame = true;
          this.mult = mult || 1;
          this.elem = elem2;
          this.container = container;
          this.comp = elem2.comp;
          this.getValue = processEffectsSequence;
          this.setVValue = setVValue;
          this.interpolateValue = interpolateValue;
          this.frameId = -1;
          var arrLen = data2.k[0].s.length;
          this.v = createTypedArray("float32", arrLen);
          this.pv = createTypedArray("float32", arrLen);
          for (i5 = 0; i5 < arrLen; i5 += 1) {
            this.v[i5] = initFrame;
            this.pv[i5] = initFrame;
          }
          this._caching = {
            lastFrame: initFrame,
            lastIndex: 0,
            value: createTypedArray("float32", arrLen)
          };
          this.addEffect = addEffect;
        }
        var PropertyFactory = /* @__PURE__ */ (function() {
          function getProp(elem2, data2, type, mult, container) {
            if (data2.sid) {
              data2 = elem2.globalData.slotManager.getProp(data2);
            }
            var p5;
            if (!data2.k.length) {
              p5 = new ValueProperty(elem2, data2, mult, container);
            } else if (typeof data2.k[0] === "number") {
              p5 = new MultiDimensionalProperty(elem2, data2, mult, container);
            } else {
              switch (type) {
                case 0:
                  p5 = new KeyframedValueProperty(elem2, data2, mult, container);
                  break;
                case 1:
                  p5 = new KeyframedMultidimensionalProperty(elem2, data2, mult, container);
                  break;
                default:
                  break;
              }
            }
            if (p5.effectsSequence.length) {
              container.addDynamicProperty(p5);
            }
            return p5;
          }
          var ob2 = {
            getProp
          };
          return ob2;
        })();
        function DynamicPropertyContainer() {
        }
        DynamicPropertyContainer.prototype = {
          addDynamicProperty: function addDynamicProperty(prop) {
            if (this.dynamicProperties.indexOf(prop) === -1) {
              this.dynamicProperties.push(prop);
              this.container.addDynamicProperty(this);
              this._isAnimated = true;
            }
          },
          iterateDynamicProperties: function iterateDynamicProperties() {
            this._mdf = false;
            var i5;
            var len = this.dynamicProperties.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              this.dynamicProperties[i5].getValue();
              if (this.dynamicProperties[i5]._mdf) {
                this._mdf = true;
              }
            }
          },
          initDynamicPropertyContainer: function initDynamicPropertyContainer(container) {
            this.container = container;
            this.dynamicProperties = [];
            this._mdf = false;
            this._isAnimated = false;
          }
        };
        var pointPool = (function() {
          function create() {
            return createTypedArray("float32", 2);
          }
          return poolFactory(8, create);
        })();
        function ShapePath() {
          this.c = false;
          this._length = 0;
          this._maxLength = 8;
          this.v = createSizedArray(this._maxLength);
          this.o = createSizedArray(this._maxLength);
          this.i = createSizedArray(this._maxLength);
        }
        ShapePath.prototype.setPathData = function(closed, len) {
          this.c = closed;
          this.setLength(len);
          var i5 = 0;
          while (i5 < len) {
            this.v[i5] = pointPool.newElement();
            this.o[i5] = pointPool.newElement();
            this.i[i5] = pointPool.newElement();
            i5 += 1;
          }
        };
        ShapePath.prototype.setLength = function(len) {
          while (this._maxLength < len) {
            this.doubleArrayLength();
          }
          this._length = len;
        };
        ShapePath.prototype.doubleArrayLength = function() {
          this.v = this.v.concat(createSizedArray(this._maxLength));
          this.i = this.i.concat(createSizedArray(this._maxLength));
          this.o = this.o.concat(createSizedArray(this._maxLength));
          this._maxLength *= 2;
        };
        ShapePath.prototype.setXYAt = function(x3, y5, type, pos, replace) {
          var arr;
          this._length = Math.max(this._length, pos + 1);
          if (this._length >= this._maxLength) {
            this.doubleArrayLength();
          }
          switch (type) {
            case "v":
              arr = this.v;
              break;
            case "i":
              arr = this.i;
              break;
            case "o":
              arr = this.o;
              break;
            default:
              arr = [];
              break;
          }
          if (!arr[pos] || arr[pos] && !replace) {
            arr[pos] = pointPool.newElement();
          }
          arr[pos][0] = x3;
          arr[pos][1] = y5;
        };
        ShapePath.prototype.setTripleAt = function(vX, vY, oX, oY, iX, iY, pos, replace) {
          this.setXYAt(vX, vY, "v", pos, replace);
          this.setXYAt(oX, oY, "o", pos, replace);
          this.setXYAt(iX, iY, "i", pos, replace);
        };
        ShapePath.prototype.reverse = function() {
          var newPath = new ShapePath();
          newPath.setPathData(this.c, this._length);
          var vertices = this.v;
          var outPoints = this.o;
          var inPoints = this.i;
          var init2 = 0;
          if (this.c) {
            newPath.setTripleAt(vertices[0][0], vertices[0][1], inPoints[0][0], inPoints[0][1], outPoints[0][0], outPoints[0][1], 0, false);
            init2 = 1;
          }
          var cnt = this._length - 1;
          var len = this._length;
          var i5;
          for (i5 = init2; i5 < len; i5 += 1) {
            newPath.setTripleAt(vertices[cnt][0], vertices[cnt][1], inPoints[cnt][0], inPoints[cnt][1], outPoints[cnt][0], outPoints[cnt][1], i5, false);
            cnt -= 1;
          }
          return newPath;
        };
        ShapePath.prototype.length = function() {
          return this._length;
        };
        var shapePool = (function() {
          function create() {
            return new ShapePath();
          }
          function release(shapePath) {
            var len = shapePath._length;
            var i5;
            for (i5 = 0; i5 < len; i5 += 1) {
              pointPool.release(shapePath.v[i5]);
              pointPool.release(shapePath.i[i5]);
              pointPool.release(shapePath.o[i5]);
              shapePath.v[i5] = null;
              shapePath.i[i5] = null;
              shapePath.o[i5] = null;
            }
            shapePath._length = 0;
            shapePath.c = false;
          }
          function clone3(shape) {
            var cloned = factory11.newElement();
            var i5;
            var len = shape._length === void 0 ? shape.v.length : shape._length;
            cloned.setLength(len);
            cloned.c = shape.c;
            for (i5 = 0; i5 < len; i5 += 1) {
              cloned.setTripleAt(shape.v[i5][0], shape.v[i5][1], shape.o[i5][0], shape.o[i5][1], shape.i[i5][0], shape.i[i5][1], i5);
            }
            return cloned;
          }
          var factory11 = poolFactory(4, create, release);
          factory11.clone = clone3;
          return factory11;
        })();
        function ShapeCollection() {
          this._length = 0;
          this._maxLength = 4;
          this.shapes = createSizedArray(this._maxLength);
        }
        ShapeCollection.prototype.addShape = function(shapeData) {
          if (this._length === this._maxLength) {
            this.shapes = this.shapes.concat(createSizedArray(this._maxLength));
            this._maxLength *= 2;
          }
          this.shapes[this._length] = shapeData;
          this._length += 1;
        };
        ShapeCollection.prototype.releaseShapes = function() {
          var i5;
          for (i5 = 0; i5 < this._length; i5 += 1) {
            shapePool.release(this.shapes[i5]);
          }
          this._length = 0;
        };
        var shapeCollectionPool = (function() {
          var ob2 = {
            newShapeCollection,
            release
          };
          var _length = 0;
          var _maxLength = 4;
          var pool = createSizedArray(_maxLength);
          function newShapeCollection() {
            var shapeCollection;
            if (_length) {
              _length -= 1;
              shapeCollection = pool[_length];
            } else {
              shapeCollection = new ShapeCollection();
            }
            return shapeCollection;
          }
          function release(shapeCollection) {
            var i5;
            var len = shapeCollection._length;
            for (i5 = 0; i5 < len; i5 += 1) {
              shapePool.release(shapeCollection.shapes[i5]);
            }
            shapeCollection._length = 0;
            if (_length === _maxLength) {
              pool = pooling["double"](pool);
              _maxLength *= 2;
            }
            pool[_length] = shapeCollection;
            _length += 1;
          }
          return ob2;
        })();
        var ShapePropertyFactory = (function() {
          var initFrame2 = -999999;
          function interpolateShape(frameNum, previousValue, caching) {
            var iterationIndex = caching.lastIndex;
            var keyPropS;
            var keyPropE;
            var isHold;
            var j4;
            var k4;
            var jLen;
            var kLen;
            var perc;
            var vertexValue;
            var kf = this.keyframes;
            if (frameNum < kf[0].t - this.offsetTime) {
              keyPropS = kf[0].s[0];
              isHold = true;
              iterationIndex = 0;
            } else if (frameNum >= kf[kf.length - 1].t - this.offsetTime) {
              keyPropS = kf[kf.length - 1].s ? kf[kf.length - 1].s[0] : kf[kf.length - 2].e[0];
              isHold = true;
            } else {
              var i5 = iterationIndex;
              var len = kf.length - 1;
              var flag = true;
              var keyData;
              var nextKeyData;
              var keyframeMetadata;
              while (flag) {
                keyData = kf[i5];
                nextKeyData = kf[i5 + 1];
                if (nextKeyData.t - this.offsetTime > frameNum) {
                  break;
                }
                if (i5 < len - 1) {
                  i5 += 1;
                } else {
                  flag = false;
                }
              }
              keyframeMetadata = this.keyframesMetadata[i5] || {};
              isHold = keyData.h === 1;
              iterationIndex = i5;
              if (!isHold) {
                if (frameNum >= nextKeyData.t - this.offsetTime) {
                  perc = 1;
                } else if (frameNum < keyData.t - this.offsetTime) {
                  perc = 0;
                } else {
                  var fnc;
                  if (keyframeMetadata.__fnct) {
                    fnc = keyframeMetadata.__fnct;
                  } else {
                    fnc = BezierFactory.getBezierEasing(keyData.o.x, keyData.o.y, keyData.i.x, keyData.i.y).get;
                    keyframeMetadata.__fnct = fnc;
                  }
                  perc = fnc((frameNum - (keyData.t - this.offsetTime)) / (nextKeyData.t - this.offsetTime - (keyData.t - this.offsetTime)));
                }
                keyPropE = nextKeyData.s ? nextKeyData.s[0] : keyData.e[0];
              }
              keyPropS = keyData.s[0];
            }
            jLen = previousValue._length;
            kLen = keyPropS.i[0].length;
            caching.lastIndex = iterationIndex;
            for (j4 = 0; j4 < jLen; j4 += 1) {
              for (k4 = 0; k4 < kLen; k4 += 1) {
                vertexValue = isHold ? keyPropS.i[j4][k4] : keyPropS.i[j4][k4] + (keyPropE.i[j4][k4] - keyPropS.i[j4][k4]) * perc;
                previousValue.i[j4][k4] = vertexValue;
                vertexValue = isHold ? keyPropS.o[j4][k4] : keyPropS.o[j4][k4] + (keyPropE.o[j4][k4] - keyPropS.o[j4][k4]) * perc;
                previousValue.o[j4][k4] = vertexValue;
                vertexValue = isHold ? keyPropS.v[j4][k4] : keyPropS.v[j4][k4] + (keyPropE.v[j4][k4] - keyPropS.v[j4][k4]) * perc;
                previousValue.v[j4][k4] = vertexValue;
              }
            }
          }
          function interpolateShapeCurrentTime() {
            var frameNum = this.comp.renderedFrame - this.offsetTime;
            var initTime = this.keyframes[0].t - this.offsetTime;
            var endTime = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;
            var lastFrame = this._caching.lastFrame;
            if (!(lastFrame !== initFrame2 && (lastFrame < initTime && frameNum < initTime || lastFrame > endTime && frameNum > endTime))) {
              this._caching.lastIndex = lastFrame < frameNum ? this._caching.lastIndex : 0;
              this.interpolateShape(frameNum, this.pv, this._caching);
            }
            this._caching.lastFrame = frameNum;
            return this.pv;
          }
          function resetShape() {
            this.paths = this.localShapeCollection;
          }
          function shapesEqual(shape1, shape2) {
            if (shape1._length !== shape2._length || shape1.c !== shape2.c) {
              return false;
            }
            var i5;
            var len = shape1._length;
            for (i5 = 0; i5 < len; i5 += 1) {
              if (shape1.v[i5][0] !== shape2.v[i5][0] || shape1.v[i5][1] !== shape2.v[i5][1] || shape1.o[i5][0] !== shape2.o[i5][0] || shape1.o[i5][1] !== shape2.o[i5][1] || shape1.i[i5][0] !== shape2.i[i5][0] || shape1.i[i5][1] !== shape2.i[i5][1]) {
                return false;
              }
            }
            return true;
          }
          function setVValue2(newPath) {
            if (!shapesEqual(this.v, newPath)) {
              this.v = shapePool.clone(newPath);
              this.localShapeCollection.releaseShapes();
              this.localShapeCollection.addShape(this.v);
              this._mdf = true;
              this.paths = this.localShapeCollection;
            }
          }
          function processEffectsSequence2() {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            if (!this.effectsSequence.length) {
              this._mdf = false;
              return;
            }
            if (this.lock) {
              this.setVValue(this.pv);
              return;
            }
            this.lock = true;
            this._mdf = false;
            var finalValue;
            if (this.kf) {
              finalValue = this.pv;
            } else if (this.data.ks) {
              finalValue = this.data.ks.k;
            } else {
              finalValue = this.data.pt.k;
            }
            var i5;
            var len = this.effectsSequence.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              finalValue = this.effectsSequence[i5](finalValue);
            }
            this.setVValue(finalValue);
            this.lock = false;
            this.frameId = this.elem.globalData.frameId;
          }
          function ShapeProperty(elem2, data2, type) {
            this.propType = "shape";
            this.comp = elem2.comp;
            this.container = elem2;
            this.elem = elem2;
            this.data = data2;
            this.k = false;
            this.kf = false;
            this._mdf = false;
            var pathData = type === 3 ? data2.pt.k : data2.ks.k;
            this.v = shapePool.clone(pathData);
            this.pv = shapePool.clone(this.v);
            this.localShapeCollection = shapeCollectionPool.newShapeCollection();
            this.paths = this.localShapeCollection;
            this.paths.addShape(this.v);
            this.reset = resetShape;
            this.effectsSequence = [];
          }
          function addEffect2(effectFunction) {
            this.effectsSequence.push(effectFunction);
            this.container.addDynamicProperty(this);
          }
          ShapeProperty.prototype.interpolateShape = interpolateShape;
          ShapeProperty.prototype.getValue = processEffectsSequence2;
          ShapeProperty.prototype.setVValue = setVValue2;
          ShapeProperty.prototype.addEffect = addEffect2;
          function KeyframedShapeProperty(elem2, data2, type) {
            this.propType = "shape";
            this.comp = elem2.comp;
            this.elem = elem2;
            this.container = elem2;
            this.offsetTime = elem2.data.st;
            this.keyframes = type === 3 ? data2.pt.k : data2.ks.k;
            this.keyframesMetadata = [];
            this.k = true;
            this.kf = true;
            var len = this.keyframes[0].s[0].i.length;
            this.v = shapePool.newElement();
            this.v.setPathData(this.keyframes[0].s[0].c, len);
            this.pv = shapePool.clone(this.v);
            this.localShapeCollection = shapeCollectionPool.newShapeCollection();
            this.paths = this.localShapeCollection;
            this.paths.addShape(this.v);
            this.lastFrame = initFrame2;
            this.reset = resetShape;
            this._caching = {
              lastFrame: initFrame2,
              lastIndex: 0
            };
            this.effectsSequence = [interpolateShapeCurrentTime.bind(this)];
          }
          KeyframedShapeProperty.prototype.getValue = processEffectsSequence2;
          KeyframedShapeProperty.prototype.interpolateShape = interpolateShape;
          KeyframedShapeProperty.prototype.setVValue = setVValue2;
          KeyframedShapeProperty.prototype.addEffect = addEffect2;
          var EllShapeProperty = (function() {
            var cPoint = roundCorner;
            function EllShapePropertyFactory(elem2, data2) {
              this.v = shapePool.newElement();
              this.v.setPathData(true, 4);
              this.localShapeCollection = shapeCollectionPool.newShapeCollection();
              this.paths = this.localShapeCollection;
              this.localShapeCollection.addShape(this.v);
              this.d = data2.d;
              this.elem = elem2;
              this.comp = elem2.comp;
              this.frameId = -1;
              this.initDynamicPropertyContainer(elem2);
              this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
              this.s = PropertyFactory.getProp(elem2, data2.s, 1, 0, this);
              if (this.dynamicProperties.length) {
                this.k = true;
              } else {
                this.k = false;
                this.convertEllToPath();
              }
            }
            EllShapePropertyFactory.prototype = {
              reset: resetShape,
              getValue: function getValue() {
                if (this.elem.globalData.frameId === this.frameId) {
                  return;
                }
                this.frameId = this.elem.globalData.frameId;
                this.iterateDynamicProperties();
                if (this._mdf) {
                  this.convertEllToPath();
                }
              },
              convertEllToPath: function convertEllToPath() {
                var p0 = this.p.v[0];
                var p1 = this.p.v[1];
                var s0 = this.s.v[0] / 2;
                var s1 = this.s.v[1] / 2;
                var _cw = this.d !== 3;
                var _v = this.v;
                _v.v[0][0] = p0;
                _v.v[0][1] = p1 - s1;
                _v.v[1][0] = _cw ? p0 + s0 : p0 - s0;
                _v.v[1][1] = p1;
                _v.v[2][0] = p0;
                _v.v[2][1] = p1 + s1;
                _v.v[3][0] = _cw ? p0 - s0 : p0 + s0;
                _v.v[3][1] = p1;
                _v.i[0][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
                _v.i[0][1] = p1 - s1;
                _v.i[1][0] = _cw ? p0 + s0 : p0 - s0;
                _v.i[1][1] = p1 - s1 * cPoint;
                _v.i[2][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
                _v.i[2][1] = p1 + s1;
                _v.i[3][0] = _cw ? p0 - s0 : p0 + s0;
                _v.i[3][1] = p1 + s1 * cPoint;
                _v.o[0][0] = _cw ? p0 + s0 * cPoint : p0 - s0 * cPoint;
                _v.o[0][1] = p1 - s1;
                _v.o[1][0] = _cw ? p0 + s0 : p0 - s0;
                _v.o[1][1] = p1 + s1 * cPoint;
                _v.o[2][0] = _cw ? p0 - s0 * cPoint : p0 + s0 * cPoint;
                _v.o[2][1] = p1 + s1;
                _v.o[3][0] = _cw ? p0 - s0 : p0 + s0;
                _v.o[3][1] = p1 - s1 * cPoint;
              }
            };
            extendPrototype([DynamicPropertyContainer], EllShapePropertyFactory);
            return EllShapePropertyFactory;
          })();
          var StarShapeProperty = (function() {
            function StarShapePropertyFactory(elem2, data2) {
              this.v = shapePool.newElement();
              this.v.setPathData(true, 0);
              this.elem = elem2;
              this.comp = elem2.comp;
              this.data = data2;
              this.frameId = -1;
              this.d = data2.d;
              this.initDynamicPropertyContainer(elem2);
              if (data2.sy === 1) {
                this.ir = PropertyFactory.getProp(elem2, data2.ir, 0, 0, this);
                this.is = PropertyFactory.getProp(elem2, data2.is, 0, 0.01, this);
                this.convertToPath = this.convertStarToPath;
              } else {
                this.convertToPath = this.convertPolygonToPath;
              }
              this.pt = PropertyFactory.getProp(elem2, data2.pt, 0, 0, this);
              this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
              this.r = PropertyFactory.getProp(elem2, data2.r, 0, degToRads, this);
              this.or = PropertyFactory.getProp(elem2, data2.or, 0, 0, this);
              this.os = PropertyFactory.getProp(elem2, data2.os, 0, 0.01, this);
              this.localShapeCollection = shapeCollectionPool.newShapeCollection();
              this.localShapeCollection.addShape(this.v);
              this.paths = this.localShapeCollection;
              if (this.dynamicProperties.length) {
                this.k = true;
              } else {
                this.k = false;
                this.convertToPath();
              }
            }
            StarShapePropertyFactory.prototype = {
              reset: resetShape,
              getValue: function getValue() {
                if (this.elem.globalData.frameId === this.frameId) {
                  return;
                }
                this.frameId = this.elem.globalData.frameId;
                this.iterateDynamicProperties();
                if (this._mdf) {
                  this.convertToPath();
                }
              },
              convertStarToPath: function convertStarToPath() {
                var numPts = Math.floor(this.pt.v) * 2;
                var angle = Math.PI * 2 / numPts;
                var longFlag = true;
                var longRad = this.or.v;
                var shortRad = this.ir.v;
                var longRound = this.os.v;
                var shortRound = this.is.v;
                var longPerimSegment = 2 * Math.PI * longRad / (numPts * 2);
                var shortPerimSegment = 2 * Math.PI * shortRad / (numPts * 2);
                var i5;
                var rad;
                var roundness;
                var perimSegment;
                var currentAng = -Math.PI / 2;
                currentAng += this.r.v;
                var dir = this.data.d === 3 ? -1 : 1;
                this.v._length = 0;
                for (i5 = 0; i5 < numPts; i5 += 1) {
                  rad = longFlag ? longRad : shortRad;
                  roundness = longFlag ? longRound : shortRound;
                  perimSegment = longFlag ? longPerimSegment : shortPerimSegment;
                  var x3 = rad * Math.cos(currentAng);
                  var y5 = rad * Math.sin(currentAng);
                  var ox = x3 === 0 && y5 === 0 ? 0 : y5 / Math.sqrt(x3 * x3 + y5 * y5);
                  var oy = x3 === 0 && y5 === 0 ? 0 : -x3 / Math.sqrt(x3 * x3 + y5 * y5);
                  x3 += +this.p.v[0];
                  y5 += +this.p.v[1];
                  this.v.setTripleAt(x3, y5, x3 - ox * perimSegment * roundness * dir, y5 - oy * perimSegment * roundness * dir, x3 + ox * perimSegment * roundness * dir, y5 + oy * perimSegment * roundness * dir, i5, true);
                  longFlag = !longFlag;
                  currentAng += angle * dir;
                }
              },
              convertPolygonToPath: function convertPolygonToPath() {
                var numPts = Math.floor(this.pt.v);
                var angle = Math.PI * 2 / numPts;
                var rad = this.or.v;
                var roundness = this.os.v;
                var perimSegment = 2 * Math.PI * rad / (numPts * 4);
                var i5;
                var currentAng = -Math.PI * 0.5;
                var dir = this.data.d === 3 ? -1 : 1;
                currentAng += this.r.v;
                this.v._length = 0;
                for (i5 = 0; i5 < numPts; i5 += 1) {
                  var x3 = rad * Math.cos(currentAng);
                  var y5 = rad * Math.sin(currentAng);
                  var ox = x3 === 0 && y5 === 0 ? 0 : y5 / Math.sqrt(x3 * x3 + y5 * y5);
                  var oy = x3 === 0 && y5 === 0 ? 0 : -x3 / Math.sqrt(x3 * x3 + y5 * y5);
                  x3 += +this.p.v[0];
                  y5 += +this.p.v[1];
                  this.v.setTripleAt(x3, y5, x3 - ox * perimSegment * roundness * dir, y5 - oy * perimSegment * roundness * dir, x3 + ox * perimSegment * roundness * dir, y5 + oy * perimSegment * roundness * dir, i5, true);
                  currentAng += angle * dir;
                }
                this.paths.length = 0;
                this.paths[0] = this.v;
              }
            };
            extendPrototype([DynamicPropertyContainer], StarShapePropertyFactory);
            return StarShapePropertyFactory;
          })();
          var RectShapeProperty = (function() {
            function RectShapePropertyFactory(elem2, data2) {
              this.v = shapePool.newElement();
              this.v.c = true;
              this.localShapeCollection = shapeCollectionPool.newShapeCollection();
              this.localShapeCollection.addShape(this.v);
              this.paths = this.localShapeCollection;
              this.elem = elem2;
              this.comp = elem2.comp;
              this.frameId = -1;
              this.d = data2.d;
              this.initDynamicPropertyContainer(elem2);
              this.p = PropertyFactory.getProp(elem2, data2.p, 1, 0, this);
              this.s = PropertyFactory.getProp(elem2, data2.s, 1, 0, this);
              this.r = PropertyFactory.getProp(elem2, data2.r, 0, 0, this);
              if (this.dynamicProperties.length) {
                this.k = true;
              } else {
                this.k = false;
                this.convertRectToPath();
              }
            }
            RectShapePropertyFactory.prototype = {
              convertRectToPath: function convertRectToPath() {
                var p0 = this.p.v[0];
                var p1 = this.p.v[1];
                var v0 = this.s.v[0] / 2;
                var v1 = this.s.v[1] / 2;
                var round = bmMin(v0, v1, this.r.v);
                var cPoint = round * (1 - roundCorner);
                this.v._length = 0;
                if (this.d === 2 || this.d === 1) {
                  this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, 0, true);
                  this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, p0 + v0, p1 + v1 - round, 1, true);
                  if (round !== 0) {
                    this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, 2, true);
                    this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0 + round, p1 + v1, 3, true);
                    this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, 4, true);
                    this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1 + round, 5, true);
                    this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, 6, true);
                    this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, p0 + v0 - round, p1 - v1, 7, true);
                  } else {
                    this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0 + cPoint, p1 + v1, p0 - v0, p1 + v1, 2);
                    this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0, p1 - v1 + cPoint, p0 - v0, p1 - v1, 3);
                  }
                } else {
                  this.v.setTripleAt(p0 + v0, p1 - v1 + round, p0 + v0, p1 - v1 + cPoint, p0 + v0, p1 - v1 + round, 0, true);
                  if (round !== 0) {
                    this.v.setTripleAt(p0 + v0 - round, p1 - v1, p0 + v0 - round, p1 - v1, p0 + v0 - cPoint, p1 - v1, 1, true);
                    this.v.setTripleAt(p0 - v0 + round, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0 + round, p1 - v1, 2, true);
                    this.v.setTripleAt(p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + round, p0 - v0, p1 - v1 + cPoint, 3, true);
                    this.v.setTripleAt(p0 - v0, p1 + v1 - round, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1 - round, 4, true);
                    this.v.setTripleAt(p0 - v0 + round, p1 + v1, p0 - v0 + round, p1 + v1, p0 - v0 + cPoint, p1 + v1, 5, true);
                    this.v.setTripleAt(p0 + v0 - round, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0 - round, p1 + v1, 6, true);
                    this.v.setTripleAt(p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - round, p0 + v0, p1 + v1 - cPoint, 7, true);
                  } else {
                    this.v.setTripleAt(p0 - v0, p1 - v1, p0 - v0 + cPoint, p1 - v1, p0 - v0, p1 - v1, 1, true);
                    this.v.setTripleAt(p0 - v0, p1 + v1, p0 - v0, p1 + v1 - cPoint, p0 - v0, p1 + v1, 2, true);
                    this.v.setTripleAt(p0 + v0, p1 + v1, p0 + v0 - cPoint, p1 + v1, p0 + v0, p1 + v1, 3, true);
                  }
                }
              },
              getValue: function getValue() {
                if (this.elem.globalData.frameId === this.frameId) {
                  return;
                }
                this.frameId = this.elem.globalData.frameId;
                this.iterateDynamicProperties();
                if (this._mdf) {
                  this.convertRectToPath();
                }
              },
              reset: resetShape
            };
            extendPrototype([DynamicPropertyContainer], RectShapePropertyFactory);
            return RectShapePropertyFactory;
          })();
          function getShapeProp(elem2, data2, type) {
            var prop;
            if (type === 3 || type === 4) {
              var dataProp = type === 3 ? data2.pt : data2.ks;
              var keys = dataProp.k;
              if (keys.length) {
                prop = new KeyframedShapeProperty(elem2, data2, type);
              } else {
                prop = new ShapeProperty(elem2, data2, type);
              }
            } else if (type === 5) {
              prop = new RectShapeProperty(elem2, data2);
            } else if (type === 6) {
              prop = new EllShapeProperty(elem2, data2);
            } else if (type === 7) {
              prop = new StarShapeProperty(elem2, data2);
            }
            if (prop.k) {
              elem2.addDynamicProperty(prop);
            }
            return prop;
          }
          function getConstructorFunction() {
            return ShapeProperty;
          }
          function getKeyframedConstructorFunction() {
            return KeyframedShapeProperty;
          }
          var ob2 = {};
          ob2.getShapeProp = getShapeProp;
          ob2.getConstructorFunction = getConstructorFunction;
          ob2.getKeyframedConstructorFunction = getKeyframedConstructorFunction;
          return ob2;
        })();
        var Matrix = /* @__PURE__ */ (function() {
          var _cos = Math.cos;
          var _sin = Math.sin;
          var _tan = Math.tan;
          var _rnd = Math.round;
          function reset() {
            this.props[0] = 1;
            this.props[1] = 0;
            this.props[2] = 0;
            this.props[3] = 0;
            this.props[4] = 0;
            this.props[5] = 1;
            this.props[6] = 0;
            this.props[7] = 0;
            this.props[8] = 0;
            this.props[9] = 0;
            this.props[10] = 1;
            this.props[11] = 0;
            this.props[12] = 0;
            this.props[13] = 0;
            this.props[14] = 0;
            this.props[15] = 1;
            return this;
          }
          function rotate(angle) {
            if (angle === 0) {
              return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
          }
          function rotateX(angle) {
            if (angle === 0) {
              return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(1, 0, 0, 0, 0, mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1);
          }
          function rotateY(angle) {
            if (angle === 0) {
              return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, 0, mSin, 0, 0, 1, 0, 0, -mSin, 0, mCos, 0, 0, 0, 0, 1);
          }
          function rotateZ(angle) {
            if (angle === 0) {
              return this;
            }
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
          }
          function shear(sx, sy) {
            return this._t(1, sy, sx, 1, 0, 0);
          }
          function skew(ax, ay) {
            return this.shear(_tan(ax), _tan(ay));
          }
          function skewFromAxis(ax, angle) {
            var mCos = _cos(angle);
            var mSin = _sin(angle);
            return this._t(mCos, mSin, 0, 0, -mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, _tan(ax), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(mCos, -mSin, 0, 0, mSin, mCos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
          }
          function scale2(sx, sy, sz) {
            if (!sz && sz !== 0) {
              sz = 1;
            }
            if (sx === 1 && sy === 1 && sz === 1) {
              return this;
            }
            return this._t(sx, 0, 0, 0, 0, sy, 0, 0, 0, 0, sz, 0, 0, 0, 0, 1);
          }
          function setTransform(a4, b4, c4, d5, e4, f4, g6, h5, i5, j4, k4, l5, m4, n3, o4, p5) {
            this.props[0] = a4;
            this.props[1] = b4;
            this.props[2] = c4;
            this.props[3] = d5;
            this.props[4] = e4;
            this.props[5] = f4;
            this.props[6] = g6;
            this.props[7] = h5;
            this.props[8] = i5;
            this.props[9] = j4;
            this.props[10] = k4;
            this.props[11] = l5;
            this.props[12] = m4;
            this.props[13] = n3;
            this.props[14] = o4;
            this.props[15] = p5;
            return this;
          }
          function translate(tx, ty, tz) {
            tz = tz || 0;
            if (tx !== 0 || ty !== 0 || tz !== 0) {
              return this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, tx, ty, tz, 1);
            }
            return this;
          }
          function transform2(a22, b22, c22, d22, e22, f22, g22, h22, i22, j22, k22, l22, m22, n22, o22, p22) {
            var _p = this.props;
            if (a22 === 1 && b22 === 0 && c22 === 0 && d22 === 0 && e22 === 0 && f22 === 1 && g22 === 0 && h22 === 0 && i22 === 0 && j22 === 0 && k22 === 1 && l22 === 0) {
              _p[12] = _p[12] * a22 + _p[15] * m22;
              _p[13] = _p[13] * f22 + _p[15] * n22;
              _p[14] = _p[14] * k22 + _p[15] * o22;
              _p[15] *= p22;
              this._identityCalculated = false;
              return this;
            }
            var a1 = _p[0];
            var b1 = _p[1];
            var c1 = _p[2];
            var d1 = _p[3];
            var e1 = _p[4];
            var f1 = _p[5];
            var g1 = _p[6];
            var h1 = _p[7];
            var i1 = _p[8];
            var j1 = _p[9];
            var k1 = _p[10];
            var l1 = _p[11];
            var m1 = _p[12];
            var n1 = _p[13];
            var o1 = _p[14];
            var p1 = _p[15];
            _p[0] = a1 * a22 + b1 * e22 + c1 * i22 + d1 * m22;
            _p[1] = a1 * b22 + b1 * f22 + c1 * j22 + d1 * n22;
            _p[2] = a1 * c22 + b1 * g22 + c1 * k22 + d1 * o22;
            _p[3] = a1 * d22 + b1 * h22 + c1 * l22 + d1 * p22;
            _p[4] = e1 * a22 + f1 * e22 + g1 * i22 + h1 * m22;
            _p[5] = e1 * b22 + f1 * f22 + g1 * j22 + h1 * n22;
            _p[6] = e1 * c22 + f1 * g22 + g1 * k22 + h1 * o22;
            _p[7] = e1 * d22 + f1 * h22 + g1 * l22 + h1 * p22;
            _p[8] = i1 * a22 + j1 * e22 + k1 * i22 + l1 * m22;
            _p[9] = i1 * b22 + j1 * f22 + k1 * j22 + l1 * n22;
            _p[10] = i1 * c22 + j1 * g22 + k1 * k22 + l1 * o22;
            _p[11] = i1 * d22 + j1 * h22 + k1 * l22 + l1 * p22;
            _p[12] = m1 * a22 + n1 * e22 + o1 * i22 + p1 * m22;
            _p[13] = m1 * b22 + n1 * f22 + o1 * j22 + p1 * n22;
            _p[14] = m1 * c22 + n1 * g22 + o1 * k22 + p1 * o22;
            _p[15] = m1 * d22 + n1 * h22 + o1 * l22 + p1 * p22;
            this._identityCalculated = false;
            return this;
          }
          function multiply(matrix) {
            var matrixProps = matrix.props;
            return this.transform(matrixProps[0], matrixProps[1], matrixProps[2], matrixProps[3], matrixProps[4], matrixProps[5], matrixProps[6], matrixProps[7], matrixProps[8], matrixProps[9], matrixProps[10], matrixProps[11], matrixProps[12], matrixProps[13], matrixProps[14], matrixProps[15]);
          }
          function isIdentity() {
            if (!this._identityCalculated) {
              this._identity = !(this.props[0] !== 1 || this.props[1] !== 0 || this.props[2] !== 0 || this.props[3] !== 0 || this.props[4] !== 0 || this.props[5] !== 1 || this.props[6] !== 0 || this.props[7] !== 0 || this.props[8] !== 0 || this.props[9] !== 0 || this.props[10] !== 1 || this.props[11] !== 0 || this.props[12] !== 0 || this.props[13] !== 0 || this.props[14] !== 0 || this.props[15] !== 1);
              this._identityCalculated = true;
            }
            return this._identity;
          }
          function equals(matr) {
            var i5 = 0;
            while (i5 < 16) {
              if (matr.props[i5] !== this.props[i5]) {
                return false;
              }
              i5 += 1;
            }
            return true;
          }
          function clone3(matr) {
            var i5;
            for (i5 = 0; i5 < 16; i5 += 1) {
              matr.props[i5] = this.props[i5];
            }
            return matr;
          }
          function cloneFromProps(props) {
            var i5;
            for (i5 = 0; i5 < 16; i5 += 1) {
              this.props[i5] = props[i5];
            }
          }
          function applyToPoint(x3, y5, z4) {
            return {
              x: x3 * this.props[0] + y5 * this.props[4] + z4 * this.props[8] + this.props[12],
              y: x3 * this.props[1] + y5 * this.props[5] + z4 * this.props[9] + this.props[13],
              z: x3 * this.props[2] + y5 * this.props[6] + z4 * this.props[10] + this.props[14]
            };
          }
          function applyToX(x3, y5, z4) {
            return x3 * this.props[0] + y5 * this.props[4] + z4 * this.props[8] + this.props[12];
          }
          function applyToY(x3, y5, z4) {
            return x3 * this.props[1] + y5 * this.props[5] + z4 * this.props[9] + this.props[13];
          }
          function applyToZ(x3, y5, z4) {
            return x3 * this.props[2] + y5 * this.props[6] + z4 * this.props[10] + this.props[14];
          }
          function getInverseMatrix() {
            var determinant = this.props[0] * this.props[5] - this.props[1] * this.props[4];
            var a4 = this.props[5] / determinant;
            var b4 = -this.props[1] / determinant;
            var c4 = -this.props[4] / determinant;
            var d5 = this.props[0] / determinant;
            var e4 = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / determinant;
            var f4 = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / determinant;
            var inverseMatrix = new Matrix();
            inverseMatrix.props[0] = a4;
            inverseMatrix.props[1] = b4;
            inverseMatrix.props[4] = c4;
            inverseMatrix.props[5] = d5;
            inverseMatrix.props[12] = e4;
            inverseMatrix.props[13] = f4;
            return inverseMatrix;
          }
          function inversePoint(pt) {
            var inverseMatrix = this.getInverseMatrix();
            return inverseMatrix.applyToPointArray(pt[0], pt[1], pt[2] || 0);
          }
          function inversePoints(pts) {
            var i5;
            var len = pts.length;
            var retPts = [];
            for (i5 = 0; i5 < len; i5 += 1) {
              retPts[i5] = inversePoint(pts[i5]);
            }
            return retPts;
          }
          function applyToTriplePoints(pt1, pt2, pt3) {
            var arr = createTypedArray("float32", 6);
            if (this.isIdentity()) {
              arr[0] = pt1[0];
              arr[1] = pt1[1];
              arr[2] = pt2[0];
              arr[3] = pt2[1];
              arr[4] = pt3[0];
              arr[5] = pt3[1];
            } else {
              var p0 = this.props[0];
              var p1 = this.props[1];
              var p42 = this.props[4];
              var p5 = this.props[5];
              var p12 = this.props[12];
              var p13 = this.props[13];
              arr[0] = pt1[0] * p0 + pt1[1] * p42 + p12;
              arr[1] = pt1[0] * p1 + pt1[1] * p5 + p13;
              arr[2] = pt2[0] * p0 + pt2[1] * p42 + p12;
              arr[3] = pt2[0] * p1 + pt2[1] * p5 + p13;
              arr[4] = pt3[0] * p0 + pt3[1] * p42 + p12;
              arr[5] = pt3[0] * p1 + pt3[1] * p5 + p13;
            }
            return arr;
          }
          function applyToPointArray(x3, y5, z4) {
            var arr;
            if (this.isIdentity()) {
              arr = [x3, y5, z4];
            } else {
              arr = [x3 * this.props[0] + y5 * this.props[4] + z4 * this.props[8] + this.props[12], x3 * this.props[1] + y5 * this.props[5] + z4 * this.props[9] + this.props[13], x3 * this.props[2] + y5 * this.props[6] + z4 * this.props[10] + this.props[14]];
            }
            return arr;
          }
          function applyToPointStringified(x3, y5) {
            if (this.isIdentity()) {
              return x3 + "," + y5;
            }
            var _p = this.props;
            return Math.round((x3 * _p[0] + y5 * _p[4] + _p[12]) * 100) / 100 + "," + Math.round((x3 * _p[1] + y5 * _p[5] + _p[13]) * 100) / 100;
          }
          function toCSS() {
            var i5 = 0;
            var props = this.props;
            var cssValue = "matrix3d(";
            var v4 = 1e4;
            while (i5 < 16) {
              cssValue += _rnd(props[i5] * v4) / v4;
              cssValue += i5 === 15 ? ")" : ",";
              i5 += 1;
            }
            return cssValue;
          }
          function roundMatrixProperty(val2) {
            var v4 = 1e4;
            if (val2 < 1e-6 && val2 > 0 || val2 > -1e-6 && val2 < 0) {
              return _rnd(val2 * v4) / v4;
            }
            return val2;
          }
          function to2dCSS() {
            var props = this.props;
            var _a = roundMatrixProperty(props[0]);
            var _b = roundMatrixProperty(props[1]);
            var _c = roundMatrixProperty(props[4]);
            var _d = roundMatrixProperty(props[5]);
            var _e = roundMatrixProperty(props[12]);
            var _f = roundMatrixProperty(props[13]);
            return "matrix(" + _a + "," + _b + "," + _c + "," + _d + "," + _e + "," + _f + ")";
          }
          return function() {
            this.reset = reset;
            this.rotate = rotate;
            this.rotateX = rotateX;
            this.rotateY = rotateY;
            this.rotateZ = rotateZ;
            this.skew = skew;
            this.skewFromAxis = skewFromAxis;
            this.shear = shear;
            this.scale = scale2;
            this.setTransform = setTransform;
            this.translate = translate;
            this.transform = transform2;
            this.multiply = multiply;
            this.applyToPoint = applyToPoint;
            this.applyToX = applyToX;
            this.applyToY = applyToY;
            this.applyToZ = applyToZ;
            this.applyToPointArray = applyToPointArray;
            this.applyToTriplePoints = applyToTriplePoints;
            this.applyToPointStringified = applyToPointStringified;
            this.toCSS = toCSS;
            this.to2dCSS = to2dCSS;
            this.clone = clone3;
            this.cloneFromProps = cloneFromProps;
            this.equals = equals;
            this.inversePoints = inversePoints;
            this.inversePoint = inversePoint;
            this.getInverseMatrix = getInverseMatrix;
            this._t = this.transform;
            this.isIdentity = isIdentity;
            this._identity = true;
            this._identityCalculated = false;
            this.props = createTypedArray("float32", 16);
            this.reset();
          };
        })();
        function _typeof$3(o4) {
          "@babel/helpers - typeof";
          return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o5) {
            return typeof o5;
          } : function(o5) {
            return o5 && "function" == typeof Symbol && o5.constructor === Symbol && o5 !== Symbol.prototype ? "symbol" : typeof o5;
          }, _typeof$3(o4);
        }
        var lottie = {};
        var standalone = "__[STANDALONE]__";
        var animationData = "__[ANIMATIONDATA]__";
        var renderer = "";
        function setLocation(href) {
          setLocationHref(href);
        }
        function searchAnimations() {
          if (standalone === true) {
            animationManager.searchAnimations(animationData, standalone, renderer);
          } else {
            animationManager.searchAnimations();
          }
        }
        function setSubframeRendering(flag) {
          setSubframeEnabled(flag);
        }
        function setPrefix(prefix) {
          setIdPrefix(prefix);
        }
        function loadAnimation(params) {
          if (standalone === true) {
            params.animationData = JSON.parse(animationData);
          }
          return animationManager.loadAnimation(params);
        }
        function setQuality(value2) {
          if (typeof value2 === "string") {
            switch (value2) {
              case "high":
                setDefaultCurveSegments(200);
                break;
              default:
              case "medium":
                setDefaultCurveSegments(50);
                break;
              case "low":
                setDefaultCurveSegments(10);
                break;
            }
          } else if (!isNaN(value2) && value2 > 1) {
            setDefaultCurveSegments(value2);
          }
          if (getDefaultCurveSegments() >= 50) {
            roundValues(false);
          } else {
            roundValues(true);
          }
        }
        function inBrowser() {
          return typeof navigator !== "undefined";
        }
        function installPlugin(type, plugin) {
          if (type === "expressions") {
            setExpressionsPlugin(plugin);
          }
        }
        function getFactory(name2) {
          switch (name2) {
            case "propertyFactory":
              return PropertyFactory;
            case "shapePropertyFactory":
              return ShapePropertyFactory;
            case "matrix":
              return Matrix;
            default:
              return null;
          }
        }
        lottie.play = animationManager.play;
        lottie.pause = animationManager.pause;
        lottie.setLocationHref = setLocation;
        lottie.togglePause = animationManager.togglePause;
        lottie.setSpeed = animationManager.setSpeed;
        lottie.setDirection = animationManager.setDirection;
        lottie.stop = animationManager.stop;
        lottie.searchAnimations = searchAnimations;
        lottie.registerAnimation = animationManager.registerAnimation;
        lottie.loadAnimation = loadAnimation;
        lottie.setSubframeRendering = setSubframeRendering;
        lottie.resize = animationManager.resize;
        lottie.goToAndStop = animationManager.goToAndStop;
        lottie.destroy = animationManager.destroy;
        lottie.setQuality = setQuality;
        lottie.inBrowser = inBrowser;
        lottie.installPlugin = installPlugin;
        lottie.freeze = animationManager.freeze;
        lottie.unfreeze = animationManager.unfreeze;
        lottie.setVolume = animationManager.setVolume;
        lottie.mute = animationManager.mute;
        lottie.unmute = animationManager.unmute;
        lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations;
        lottie.useWebWorker = setWebWorker;
        lottie.setIDPrefix = setPrefix;
        lottie.__getFactory = getFactory;
        lottie.version = "5.13.0";
        function checkReady() {
          if (document.readyState === "complete") {
            clearInterval(readyStateCheckInterval);
            searchAnimations();
          }
        }
        function getQueryVariable(variable) {
          var vars = queryString.split("&");
          for (var i5 = 0; i5 < vars.length; i5 += 1) {
            var pair = vars[i5].split("=");
            if (decodeURIComponent(pair[0]) == variable) {
              return decodeURIComponent(pair[1]);
            }
          }
          return null;
        }
        var queryString = "";
        if (standalone) {
          var scripts = document.getElementsByTagName("script");
          var index = scripts.length - 1;
          var myScript = scripts[index] || {
            src: ""
          };
          queryString = myScript.src ? myScript.src.replace(/^[^\?]+\??/, "") : "";
          renderer = getQueryVariable("renderer");
        }
        var readyStateCheckInterval = setInterval(checkReady, 100);
        try {
          if (!((typeof exports === "undefined" ? "undefined" : _typeof$3(exports)) === "object" && typeof module !== "undefined") && !(typeof define === "function" && define.amd)) {
            window.bodymovin = lottie;
          }
        } catch (err) {
        }
        var ShapeModifiers = (function() {
          var ob2 = {};
          var modifiers = {};
          ob2.registerModifier = registerModifier;
          ob2.getModifier = getModifier;
          function registerModifier(nm, factory11) {
            if (!modifiers[nm]) {
              modifiers[nm] = factory11;
            }
          }
          function getModifier(nm, elem2, data2) {
            return new modifiers[nm](elem2, data2);
          }
          return ob2;
        })();
        function ShapeModifier() {
        }
        ShapeModifier.prototype.initModifierProperties = function() {
        };
        ShapeModifier.prototype.addShapeToModifier = function() {
        };
        ShapeModifier.prototype.addShape = function(data2) {
          if (!this.closed) {
            data2.sh.container.addDynamicProperty(data2.sh);
            var shapeData = {
              shape: data2.sh,
              data: data2,
              localShapeCollection: shapeCollectionPool.newShapeCollection()
            };
            this.shapes.push(shapeData);
            this.addShapeToModifier(shapeData);
            if (this._isAnimated) {
              data2.setAsAnimated();
            }
          }
        };
        ShapeModifier.prototype.init = function(elem2, data2) {
          this.shapes = [];
          this.elem = elem2;
          this.initDynamicPropertyContainer(elem2);
          this.initModifierProperties(elem2, data2);
          this.frameId = initialDefaultFrame;
          this.closed = false;
          this.k = false;
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.getValue(true);
          }
        };
        ShapeModifier.prototype.processKeys = function() {
          if (this.elem.globalData.frameId === this.frameId) {
            return;
          }
          this.frameId = this.elem.globalData.frameId;
          this.iterateDynamicProperties();
        };
        extendPrototype([DynamicPropertyContainer], ShapeModifier);
        function TrimModifier() {
        }
        extendPrototype([ShapeModifier], TrimModifier);
        TrimModifier.prototype.initModifierProperties = function(elem2, data2) {
          this.s = PropertyFactory.getProp(elem2, data2.s, 0, 0.01, this);
          this.e = PropertyFactory.getProp(elem2, data2.e, 0, 0.01, this);
          this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0, this);
          this.sValue = 0;
          this.eValue = 0;
          this.getValue = this.processKeys;
          this.m = data2.m;
          this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;
        };
        TrimModifier.prototype.addShapeToModifier = function(shapeData) {
          shapeData.pathsData = [];
        };
        TrimModifier.prototype.calculateShapeEdges = function(s4, e4, shapeLength, addedLength, totalModifierLength) {
          var segments = [];
          if (e4 <= 1) {
            segments.push({
              s: s4,
              e: e4
            });
          } else if (s4 >= 1) {
            segments.push({
              s: s4 - 1,
              e: e4 - 1
            });
          } else {
            segments.push({
              s: s4,
              e: 1
            });
            segments.push({
              s: 0,
              e: e4 - 1
            });
          }
          var shapeSegments = [];
          var i5;
          var len = segments.length;
          var segmentOb;
          for (i5 = 0; i5 < len; i5 += 1) {
            segmentOb = segments[i5];
            if (!(segmentOb.e * totalModifierLength < addedLength || segmentOb.s * totalModifierLength > addedLength + shapeLength)) {
              var shapeS;
              var shapeE;
              if (segmentOb.s * totalModifierLength <= addedLength) {
                shapeS = 0;
              } else {
                shapeS = (segmentOb.s * totalModifierLength - addedLength) / shapeLength;
              }
              if (segmentOb.e * totalModifierLength >= addedLength + shapeLength) {
                shapeE = 1;
              } else {
                shapeE = (segmentOb.e * totalModifierLength - addedLength) / shapeLength;
              }
              shapeSegments.push([shapeS, shapeE]);
            }
          }
          if (!shapeSegments.length) {
            shapeSegments.push([0, 0]);
          }
          return shapeSegments;
        };
        TrimModifier.prototype.releasePathsData = function(pathsData) {
          var i5;
          var len = pathsData.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            segmentsLengthPool.release(pathsData[i5]);
          }
          pathsData.length = 0;
          return pathsData;
        };
        TrimModifier.prototype.processShapes = function(_isFirstFrame) {
          var s4;
          var e4;
          if (this._mdf || _isFirstFrame) {
            var o4 = this.o.v % 360 / 360;
            if (o4 < 0) {
              o4 += 1;
            }
            if (this.s.v > 1) {
              s4 = 1 + o4;
            } else if (this.s.v < 0) {
              s4 = 0 + o4;
            } else {
              s4 = this.s.v + o4;
            }
            if (this.e.v > 1) {
              e4 = 1 + o4;
            } else if (this.e.v < 0) {
              e4 = 0 + o4;
            } else {
              e4 = this.e.v + o4;
            }
            if (s4 > e4) {
              var _s = s4;
              s4 = e4;
              e4 = _s;
            }
            s4 = Math.round(s4 * 1e4) * 1e-4;
            e4 = Math.round(e4 * 1e4) * 1e-4;
            this.sValue = s4;
            this.eValue = e4;
          } else {
            s4 = this.sValue;
            e4 = this.eValue;
          }
          var shapePaths;
          var i5;
          var len = this.shapes.length;
          var j4;
          var jLen;
          var pathsData;
          var pathData;
          var totalShapeLength;
          var totalModifierLength = 0;
          if (e4 === s4) {
            for (i5 = 0; i5 < len; i5 += 1) {
              this.shapes[i5].localShapeCollection.releaseShapes();
              this.shapes[i5].shape._mdf = true;
              this.shapes[i5].shape.paths = this.shapes[i5].localShapeCollection;
              if (this._mdf) {
                this.shapes[i5].pathsData.length = 0;
              }
            }
          } else if (!(e4 === 1 && s4 === 0 || e4 === 0 && s4 === 1)) {
            var segments = [];
            var shapeData;
            var localShapeCollection;
            for (i5 = 0; i5 < len; i5 += 1) {
              shapeData = this.shapes[i5];
              if (!shapeData.shape._mdf && !this._mdf && !_isFirstFrame && this.m !== 2) {
                shapeData.shape.paths = shapeData.localShapeCollection;
              } else {
                shapePaths = shapeData.shape.paths;
                jLen = shapePaths._length;
                totalShapeLength = 0;
                if (!shapeData.shape._mdf && shapeData.pathsData.length) {
                  totalShapeLength = shapeData.totalShapeLength;
                } else {
                  pathsData = this.releasePathsData(shapeData.pathsData);
                  for (j4 = 0; j4 < jLen; j4 += 1) {
                    pathData = bez.getSegmentsLength(shapePaths.shapes[j4]);
                    pathsData.push(pathData);
                    totalShapeLength += pathData.totalLength;
                  }
                  shapeData.totalShapeLength = totalShapeLength;
                  shapeData.pathsData = pathsData;
                }
                totalModifierLength += totalShapeLength;
                shapeData.shape._mdf = true;
              }
            }
            var shapeS = s4;
            var shapeE = e4;
            var addedLength = 0;
            var edges;
            for (i5 = len - 1; i5 >= 0; i5 -= 1) {
              shapeData = this.shapes[i5];
              if (shapeData.shape._mdf) {
                localShapeCollection = shapeData.localShapeCollection;
                localShapeCollection.releaseShapes();
                if (this.m === 2 && len > 1) {
                  edges = this.calculateShapeEdges(s4, e4, shapeData.totalShapeLength, addedLength, totalModifierLength);
                  addedLength += shapeData.totalShapeLength;
                } else {
                  edges = [[shapeS, shapeE]];
                }
                jLen = edges.length;
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  shapeS = edges[j4][0];
                  shapeE = edges[j4][1];
                  segments.length = 0;
                  if (shapeE <= 1) {
                    segments.push({
                      s: shapeData.totalShapeLength * shapeS,
                      e: shapeData.totalShapeLength * shapeE
                    });
                  } else if (shapeS >= 1) {
                    segments.push({
                      s: shapeData.totalShapeLength * (shapeS - 1),
                      e: shapeData.totalShapeLength * (shapeE - 1)
                    });
                  } else {
                    segments.push({
                      s: shapeData.totalShapeLength * shapeS,
                      e: shapeData.totalShapeLength
                    });
                    segments.push({
                      s: 0,
                      e: shapeData.totalShapeLength * (shapeE - 1)
                    });
                  }
                  var newShapesData = this.addShapes(shapeData, segments[0]);
                  if (segments[0].s !== segments[0].e) {
                    if (segments.length > 1) {
                      var lastShapeInCollection = shapeData.shape.paths.shapes[shapeData.shape.paths._length - 1];
                      if (lastShapeInCollection.c) {
                        var lastShape = newShapesData.pop();
                        this.addPaths(newShapesData, localShapeCollection);
                        newShapesData = this.addShapes(shapeData, segments[1], lastShape);
                      } else {
                        this.addPaths(newShapesData, localShapeCollection);
                        newShapesData = this.addShapes(shapeData, segments[1]);
                      }
                    }
                    this.addPaths(newShapesData, localShapeCollection);
                  }
                }
                shapeData.shape.paths = localShapeCollection;
              }
            }
          } else if (this._mdf) {
            for (i5 = 0; i5 < len; i5 += 1) {
              this.shapes[i5].pathsData.length = 0;
              this.shapes[i5].shape._mdf = true;
            }
          }
        };
        TrimModifier.prototype.addPaths = function(newPaths, localShapeCollection) {
          var i5;
          var len = newPaths.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            localShapeCollection.addShape(newPaths[i5]);
          }
        };
        TrimModifier.prototype.addSegment = function(pt1, pt2, pt3, pt4, shapePath, pos, newShape) {
          shapePath.setXYAt(pt2[0], pt2[1], "o", pos);
          shapePath.setXYAt(pt3[0], pt3[1], "i", pos + 1);
          if (newShape) {
            shapePath.setXYAt(pt1[0], pt1[1], "v", pos);
          }
          shapePath.setXYAt(pt4[0], pt4[1], "v", pos + 1);
        };
        TrimModifier.prototype.addSegmentFromArray = function(points, shapePath, pos, newShape) {
          shapePath.setXYAt(points[1], points[5], "o", pos);
          shapePath.setXYAt(points[2], points[6], "i", pos + 1);
          if (newShape) {
            shapePath.setXYAt(points[0], points[4], "v", pos);
          }
          shapePath.setXYAt(points[3], points[7], "v", pos + 1);
        };
        TrimModifier.prototype.addShapes = function(shapeData, shapeSegment, shapePath) {
          var pathsData = shapeData.pathsData;
          var shapePaths = shapeData.shape.paths.shapes;
          var i5;
          var len = shapeData.shape.paths._length;
          var j4;
          var jLen;
          var addedLength = 0;
          var currentLengthData;
          var segmentCount;
          var lengths;
          var segment;
          var shapes = [];
          var initPos;
          var newShape = true;
          if (!shapePath) {
            shapePath = shapePool.newElement();
            segmentCount = 0;
            initPos = 0;
          } else {
            segmentCount = shapePath._length;
            initPos = shapePath._length;
          }
          shapes.push(shapePath);
          for (i5 = 0; i5 < len; i5 += 1) {
            lengths = pathsData[i5].lengths;
            shapePath.c = shapePaths[i5].c;
            jLen = shapePaths[i5].c ? lengths.length : lengths.length + 1;
            for (j4 = 1; j4 < jLen; j4 += 1) {
              currentLengthData = lengths[j4 - 1];
              if (addedLength + currentLengthData.addedLength < shapeSegment.s) {
                addedLength += currentLengthData.addedLength;
                shapePath.c = false;
              } else if (addedLength > shapeSegment.e) {
                shapePath.c = false;
                break;
              } else {
                if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + currentLengthData.addedLength) {
                  this.addSegment(shapePaths[i5].v[j4 - 1], shapePaths[i5].o[j4 - 1], shapePaths[i5].i[j4], shapePaths[i5].v[j4], shapePath, segmentCount, newShape);
                  newShape = false;
                } else {
                  segment = bez.getNewSegment(shapePaths[i5].v[j4 - 1], shapePaths[i5].v[j4], shapePaths[i5].o[j4 - 1], shapePaths[i5].i[j4], (shapeSegment.s - addedLength) / currentLengthData.addedLength, (shapeSegment.e - addedLength) / currentLengthData.addedLength, lengths[j4 - 1]);
                  this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
                  newShape = false;
                  shapePath.c = false;
                }
                addedLength += currentLengthData.addedLength;
                segmentCount += 1;
              }
            }
            if (shapePaths[i5].c && lengths.length) {
              currentLengthData = lengths[j4 - 1];
              if (addedLength <= shapeSegment.e) {
                var segmentLength = lengths[j4 - 1].addedLength;
                if (shapeSegment.s <= addedLength && shapeSegment.e >= addedLength + segmentLength) {
                  this.addSegment(shapePaths[i5].v[j4 - 1], shapePaths[i5].o[j4 - 1], shapePaths[i5].i[0], shapePaths[i5].v[0], shapePath, segmentCount, newShape);
                  newShape = false;
                } else {
                  segment = bez.getNewSegment(shapePaths[i5].v[j4 - 1], shapePaths[i5].v[0], shapePaths[i5].o[j4 - 1], shapePaths[i5].i[0], (shapeSegment.s - addedLength) / segmentLength, (shapeSegment.e - addedLength) / segmentLength, lengths[j4 - 1]);
                  this.addSegmentFromArray(segment, shapePath, segmentCount, newShape);
                  newShape = false;
                  shapePath.c = false;
                }
              } else {
                shapePath.c = false;
              }
              addedLength += currentLengthData.addedLength;
              segmentCount += 1;
            }
            if (shapePath._length) {
              shapePath.setXYAt(shapePath.v[initPos][0], shapePath.v[initPos][1], "i", initPos);
              shapePath.setXYAt(shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1], "o", shapePath._length - 1);
            }
            if (addedLength > shapeSegment.e) {
              break;
            }
            if (i5 < len - 1) {
              shapePath = shapePool.newElement();
              newShape = true;
              shapes.push(shapePath);
              segmentCount = 0;
            }
          }
          return shapes;
        };
        function PuckerAndBloatModifier() {
        }
        extendPrototype([ShapeModifier], PuckerAndBloatModifier);
        PuckerAndBloatModifier.prototype.initModifierProperties = function(elem2, data2) {
          this.getValue = this.processKeys;
          this.amount = PropertyFactory.getProp(elem2, data2.a, 0, null, this);
          this._isAnimated = !!this.amount.effectsSequence.length;
        };
        PuckerAndBloatModifier.prototype.processPath = function(path, amount) {
          var percent = amount / 100;
          var centerPoint = [0, 0];
          var pathLength = path._length;
          var i5 = 0;
          for (i5 = 0; i5 < pathLength; i5 += 1) {
            centerPoint[0] += path.v[i5][0];
            centerPoint[1] += path.v[i5][1];
          }
          centerPoint[0] /= pathLength;
          centerPoint[1] /= pathLength;
          var clonedPath = shapePool.newElement();
          clonedPath.c = path.c;
          var vX;
          var vY;
          var oX;
          var oY;
          var iX;
          var iY;
          for (i5 = 0; i5 < pathLength; i5 += 1) {
            vX = path.v[i5][0] + (centerPoint[0] - path.v[i5][0]) * percent;
            vY = path.v[i5][1] + (centerPoint[1] - path.v[i5][1]) * percent;
            oX = path.o[i5][0] + (centerPoint[0] - path.o[i5][0]) * -percent;
            oY = path.o[i5][1] + (centerPoint[1] - path.o[i5][1]) * -percent;
            iX = path.i[i5][0] + (centerPoint[0] - path.i[i5][0]) * -percent;
            iY = path.i[i5][1] + (centerPoint[1] - path.i[i5][1]) * -percent;
            clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, i5);
          }
          return clonedPath;
        };
        PuckerAndBloatModifier.prototype.processShapes = function(_isFirstFrame) {
          var shapePaths;
          var i5;
          var len = this.shapes.length;
          var j4;
          var jLen;
          var amount = this.amount.v;
          if (amount !== 0) {
            var shapeData;
            var localShapeCollection;
            for (i5 = 0; i5 < len; i5 += 1) {
              shapeData = this.shapes[i5];
              localShapeCollection = shapeData.localShapeCollection;
              if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
                localShapeCollection.releaseShapes();
                shapeData.shape._mdf = true;
                shapePaths = shapeData.shape.paths.shapes;
                jLen = shapeData.shape.paths._length;
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  localShapeCollection.addShape(this.processPath(shapePaths[j4], amount));
                }
              }
              shapeData.shape.paths = shapeData.localShapeCollection;
            }
          }
          if (!this.dynamicProperties.length) {
            this._mdf = false;
          }
        };
        var TransformPropertyFactory = (function() {
          var defaultVector = [0, 0];
          function applyToMatrix(mat) {
            var _mdf = this._mdf;
            this.iterateDynamicProperties();
            this._mdf = this._mdf || _mdf;
            if (this.a) {
              mat.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
            }
            if (this.s) {
              mat.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
            }
            if (this.sk) {
              mat.skewFromAxis(-this.sk.v, this.sa.v);
            }
            if (this.r) {
              mat.rotate(-this.r.v);
            } else {
              mat.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
            }
            if (this.data.p.s) {
              if (this.data.p.z) {
                mat.translate(this.px.v, this.py.v, -this.pz.v);
              } else {
                mat.translate(this.px.v, this.py.v, 0);
              }
            } else {
              mat.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
            }
          }
          function processKeys(forceRender) {
            if (this.elem.globalData.frameId === this.frameId) {
              return;
            }
            if (this._isDirty) {
              this.precalculateMatrix();
              this._isDirty = false;
            }
            this.iterateDynamicProperties();
            if (this._mdf || forceRender) {
              var frameRate;
              this.v.cloneFromProps(this.pre.props);
              if (this.appliedTransformations < 1) {
                this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
              }
              if (this.appliedTransformations < 2) {
                this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
              }
              if (this.sk && this.appliedTransformations < 3) {
                this.v.skewFromAxis(-this.sk.v, this.sa.v);
              }
              if (this.r && this.appliedTransformations < 4) {
                this.v.rotate(-this.r.v);
              } else if (!this.r && this.appliedTransformations < 4) {
                this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
              }
              if (this.autoOriented) {
                var v1;
                var v22;
                frameRate = this.elem.globalData.frameRate;
                if (this.p && this.p.keyframes && this.p.getValueAtTime) {
                  if (this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t) {
                    v1 = this.p.getValueAtTime((this.p.keyframes[0].t + 0.01) / frameRate, 0);
                    v22 = this.p.getValueAtTime(this.p.keyframes[0].t / frameRate, 0);
                  } else if (this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t) {
                    v1 = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / frameRate, 0);
                    v22 = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - 0.05) / frameRate, 0);
                  } else {
                    v1 = this.p.pv;
                    v22 = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - 0.01) / frameRate, this.p.offsetTime);
                  }
                } else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {
                  v1 = [];
                  v22 = [];
                  var px = this.px;
                  var py = this.py;
                  if (px._caching.lastFrame + px.offsetTime <= px.keyframes[0].t) {
                    v1[0] = px.getValueAtTime((px.keyframes[0].t + 0.01) / frameRate, 0);
                    v1[1] = py.getValueAtTime((py.keyframes[0].t + 0.01) / frameRate, 0);
                    v22[0] = px.getValueAtTime(px.keyframes[0].t / frameRate, 0);
                    v22[1] = py.getValueAtTime(py.keyframes[0].t / frameRate, 0);
                  } else if (px._caching.lastFrame + px.offsetTime >= px.keyframes[px.keyframes.length - 1].t) {
                    v1[0] = px.getValueAtTime(px.keyframes[px.keyframes.length - 1].t / frameRate, 0);
                    v1[1] = py.getValueAtTime(py.keyframes[py.keyframes.length - 1].t / frameRate, 0);
                    v22[0] = px.getValueAtTime((px.keyframes[px.keyframes.length - 1].t - 0.01) / frameRate, 0);
                    v22[1] = py.getValueAtTime((py.keyframes[py.keyframes.length - 1].t - 0.01) / frameRate, 0);
                  } else {
                    v1 = [px.pv, py.pv];
                    v22[0] = px.getValueAtTime((px._caching.lastFrame + px.offsetTime - 0.01) / frameRate, px.offsetTime);
                    v22[1] = py.getValueAtTime((py._caching.lastFrame + py.offsetTime - 0.01) / frameRate, py.offsetTime);
                  }
                } else {
                  v22 = defaultVector;
                  v1 = v22;
                }
                this.v.rotate(-Math.atan2(v1[1] - v22[1], v1[0] - v22[0]));
              }
              if (this.data.p && this.data.p.s) {
                if (this.data.p.z) {
                  this.v.translate(this.px.v, this.py.v, -this.pz.v);
                } else {
                  this.v.translate(this.px.v, this.py.v, 0);
                }
              } else {
                this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);
              }
            }
            this.frameId = this.elem.globalData.frameId;
          }
          function precalculateMatrix() {
            this.appliedTransformations = 0;
            this.pre.reset();
            if (!this.a.effectsSequence.length) {
              this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]);
              this.appliedTransformations = 1;
            } else {
              return;
            }
            if (!this.s.effectsSequence.length) {
              this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]);
              this.appliedTransformations = 2;
            } else {
              return;
            }
            if (this.sk) {
              if (!this.sk.effectsSequence.length && !this.sa.effectsSequence.length) {
                this.pre.skewFromAxis(-this.sk.v, this.sa.v);
                this.appliedTransformations = 3;
              } else {
                return;
              }
            }
            if (this.r) {
              if (!this.r.effectsSequence.length) {
                this.pre.rotate(-this.r.v);
                this.appliedTransformations = 4;
              }
            } else if (!this.rz.effectsSequence.length && !this.ry.effectsSequence.length && !this.rx.effectsSequence.length && !this.or.effectsSequence.length) {
              this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]);
              this.appliedTransformations = 4;
            }
          }
          function autoOrient() {
          }
          function addDynamicProperty(prop) {
            this._addDynamicProperty(prop);
            this.elem.addDynamicProperty(prop);
            this._isDirty = true;
          }
          function TransformProperty(elem2, data2, container) {
            this.elem = elem2;
            this.frameId = -1;
            this.propType = "transform";
            this.data = data2;
            this.v = new Matrix();
            this.pre = new Matrix();
            this.appliedTransformations = 0;
            this.initDynamicPropertyContainer(container || elem2);
            if (data2.p && data2.p.s) {
              this.px = PropertyFactory.getProp(elem2, data2.p.x, 0, 0, this);
              this.py = PropertyFactory.getProp(elem2, data2.p.y, 0, 0, this);
              if (data2.p.z) {
                this.pz = PropertyFactory.getProp(elem2, data2.p.z, 0, 0, this);
              }
            } else {
              this.p = PropertyFactory.getProp(elem2, data2.p || {
                k: [0, 0, 0]
              }, 1, 0, this);
            }
            if (data2.rx) {
              this.rx = PropertyFactory.getProp(elem2, data2.rx, 0, degToRads, this);
              this.ry = PropertyFactory.getProp(elem2, data2.ry, 0, degToRads, this);
              this.rz = PropertyFactory.getProp(elem2, data2.rz, 0, degToRads, this);
              if (data2.or.k[0].ti) {
                var i5;
                var len = data2.or.k.length;
                for (i5 = 0; i5 < len; i5 += 1) {
                  data2.or.k[i5].to = null;
                  data2.or.k[i5].ti = null;
                }
              }
              this.or = PropertyFactory.getProp(elem2, data2.or, 1, degToRads, this);
              this.or.sh = true;
            } else {
              this.r = PropertyFactory.getProp(elem2, data2.r || {
                k: 0
              }, 0, degToRads, this);
            }
            if (data2.sk) {
              this.sk = PropertyFactory.getProp(elem2, data2.sk, 0, degToRads, this);
              this.sa = PropertyFactory.getProp(elem2, data2.sa, 0, degToRads, this);
            }
            this.a = PropertyFactory.getProp(elem2, data2.a || {
              k: [0, 0, 0]
            }, 1, 0, this);
            this.s = PropertyFactory.getProp(elem2, data2.s || {
              k: [100, 100, 100]
            }, 1, 0.01, this);
            if (data2.o) {
              this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, elem2);
            } else {
              this.o = {
                _mdf: false,
                v: 1
              };
            }
            this._isDirty = true;
            if (!this.dynamicProperties.length) {
              this.getValue(true);
            }
          }
          TransformProperty.prototype = {
            applyToMatrix,
            getValue: processKeys,
            precalculateMatrix,
            autoOrient
          };
          extendPrototype([DynamicPropertyContainer], TransformProperty);
          TransformProperty.prototype.addDynamicProperty = addDynamicProperty;
          TransformProperty.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty;
          function getTransformProperty(elem2, data2, container) {
            return new TransformProperty(elem2, data2, container);
          }
          return {
            getTransformProperty
          };
        })();
        function RepeaterModifier() {
        }
        extendPrototype([ShapeModifier], RepeaterModifier);
        RepeaterModifier.prototype.initModifierProperties = function(elem2, data2) {
          this.getValue = this.processKeys;
          this.c = PropertyFactory.getProp(elem2, data2.c, 0, null, this);
          this.o = PropertyFactory.getProp(elem2, data2.o, 0, null, this);
          this.tr = TransformPropertyFactory.getTransformProperty(elem2, data2.tr, this);
          this.so = PropertyFactory.getProp(elem2, data2.tr.so, 0, 0.01, this);
          this.eo = PropertyFactory.getProp(elem2, data2.tr.eo, 0, 0.01, this);
          this.data = data2;
          if (!this.dynamicProperties.length) {
            this.getValue(true);
          }
          this._isAnimated = !!this.dynamicProperties.length;
          this.pMatrix = new Matrix();
          this.rMatrix = new Matrix();
          this.sMatrix = new Matrix();
          this.tMatrix = new Matrix();
          this.matrix = new Matrix();
        };
        RepeaterModifier.prototype.applyTransforms = function(pMatrix, rMatrix, sMatrix, transform2, perc, inv) {
          var dir = inv ? -1 : 1;
          var scaleX = transform2.s.v[0] + (1 - transform2.s.v[0]) * (1 - perc);
          var scaleY = transform2.s.v[1] + (1 - transform2.s.v[1]) * (1 - perc);
          pMatrix.translate(transform2.p.v[0] * dir * perc, transform2.p.v[1] * dir * perc, transform2.p.v[2]);
          rMatrix.translate(-transform2.a.v[0], -transform2.a.v[1], transform2.a.v[2]);
          rMatrix.rotate(-transform2.r.v * dir * perc);
          rMatrix.translate(transform2.a.v[0], transform2.a.v[1], transform2.a.v[2]);
          sMatrix.translate(-transform2.a.v[0], -transform2.a.v[1], transform2.a.v[2]);
          sMatrix.scale(inv ? 1 / scaleX : scaleX, inv ? 1 / scaleY : scaleY);
          sMatrix.translate(transform2.a.v[0], transform2.a.v[1], transform2.a.v[2]);
        };
        RepeaterModifier.prototype.init = function(elem2, arr, pos, elemsData) {
          this.elem = elem2;
          this.arr = arr;
          this.pos = pos;
          this.elemsData = elemsData;
          this._currentCopies = 0;
          this._elements = [];
          this._groups = [];
          this.frameId = -1;
          this.initDynamicPropertyContainer(elem2);
          this.initModifierProperties(elem2, arr[pos]);
          while (pos > 0) {
            pos -= 1;
            this._elements.unshift(arr[pos]);
          }
          if (this.dynamicProperties.length) {
            this.k = true;
          } else {
            this.getValue(true);
          }
        };
        RepeaterModifier.prototype.resetElements = function(elements) {
          var i5;
          var len = elements.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            elements[i5]._processed = false;
            if (elements[i5].ty === "gr") {
              this.resetElements(elements[i5].it);
            }
          }
        };
        RepeaterModifier.prototype.cloneElements = function(elements) {
          var newElements = JSON.parse(JSON.stringify(elements));
          this.resetElements(newElements);
          return newElements;
        };
        RepeaterModifier.prototype.changeGroupRender = function(elements, renderFlag) {
          var i5;
          var len = elements.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            elements[i5]._render = renderFlag;
            if (elements[i5].ty === "gr") {
              this.changeGroupRender(elements[i5].it, renderFlag);
            }
          }
        };
        RepeaterModifier.prototype.processShapes = function(_isFirstFrame) {
          var items;
          var itemsTransform;
          var i5;
          var dir;
          var cont;
          var hasReloaded = false;
          if (this._mdf || _isFirstFrame) {
            var copies = Math.ceil(this.c.v);
            if (this._groups.length < copies) {
              while (this._groups.length < copies) {
                var group = {
                  it: this.cloneElements(this._elements),
                  ty: "gr"
                };
                group.it.push({
                  a: {
                    a: 0,
                    ix: 1,
                    k: [0, 0]
                  },
                  nm: "Transform",
                  o: {
                    a: 0,
                    ix: 7,
                    k: 100
                  },
                  p: {
                    a: 0,
                    ix: 2,
                    k: [0, 0]
                  },
                  r: {
                    a: 1,
                    ix: 6,
                    k: [{
                      s: 0,
                      e: 0,
                      t: 0
                    }, {
                      s: 0,
                      e: 0,
                      t: 1
                    }]
                  },
                  s: {
                    a: 0,
                    ix: 3,
                    k: [100, 100]
                  },
                  sa: {
                    a: 0,
                    ix: 5,
                    k: 0
                  },
                  sk: {
                    a: 0,
                    ix: 4,
                    k: 0
                  },
                  ty: "tr"
                });
                this.arr.splice(0, 0, group);
                this._groups.splice(0, 0, group);
                this._currentCopies += 1;
              }
              this.elem.reloadShapes();
              hasReloaded = true;
            }
            cont = 0;
            var renderFlag;
            for (i5 = 0; i5 <= this._groups.length - 1; i5 += 1) {
              renderFlag = cont < copies;
              this._groups[i5]._render = renderFlag;
              this.changeGroupRender(this._groups[i5].it, renderFlag);
              if (!renderFlag) {
                var elems = this.elemsData[i5].it;
                var transformData = elems[elems.length - 1];
                if (transformData.transform.op.v !== 0) {
                  transformData.transform.op._mdf = true;
                  transformData.transform.op.v = 0;
                } else {
                  transformData.transform.op._mdf = false;
                }
              }
              cont += 1;
            }
            this._currentCopies = copies;
            var offset = this.o.v;
            var offsetModulo = offset % 1;
            var roundOffset = offset > 0 ? Math.floor(offset) : Math.ceil(offset);
            var pProps = this.pMatrix.props;
            var rProps = this.rMatrix.props;
            var sProps = this.sMatrix.props;
            this.pMatrix.reset();
            this.rMatrix.reset();
            this.sMatrix.reset();
            this.tMatrix.reset();
            this.matrix.reset();
            var iteration = 0;
            if (offset > 0) {
              while (iteration < roundOffset) {
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
                iteration += 1;
              }
              if (offsetModulo) {
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, offsetModulo, false);
                iteration += offsetModulo;
              }
            } else if (offset < 0) {
              while (iteration > roundOffset) {
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, true);
                iteration -= 1;
              }
              if (offsetModulo) {
                this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -offsetModulo, true);
                iteration -= offsetModulo;
              }
            }
            i5 = this.data.m === 1 ? 0 : this._currentCopies - 1;
            dir = this.data.m === 1 ? 1 : -1;
            cont = this._currentCopies;
            var j4;
            var jLen;
            while (cont) {
              items = this.elemsData[i5].it;
              itemsTransform = items[items.length - 1].transform.mProps.v.props;
              jLen = itemsTransform.length;
              items[items.length - 1].transform.mProps._mdf = true;
              items[items.length - 1].transform.op._mdf = true;
              items[items.length - 1].transform.op.v = this._currentCopies === 1 ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i5 / (this._currentCopies - 1));
              if (iteration !== 0) {
                if (i5 !== 0 && dir === 1 || i5 !== this._currentCopies - 1 && dir === -1) {
                  this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, false);
                }
                this.matrix.transform(rProps[0], rProps[1], rProps[2], rProps[3], rProps[4], rProps[5], rProps[6], rProps[7], rProps[8], rProps[9], rProps[10], rProps[11], rProps[12], rProps[13], rProps[14], rProps[15]);
                this.matrix.transform(sProps[0], sProps[1], sProps[2], sProps[3], sProps[4], sProps[5], sProps[6], sProps[7], sProps[8], sProps[9], sProps[10], sProps[11], sProps[12], sProps[13], sProps[14], sProps[15]);
                this.matrix.transform(pProps[0], pProps[1], pProps[2], pProps[3], pProps[4], pProps[5], pProps[6], pProps[7], pProps[8], pProps[9], pProps[10], pProps[11], pProps[12], pProps[13], pProps[14], pProps[15]);
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  itemsTransform[j4] = this.matrix.props[j4];
                }
                this.matrix.reset();
              } else {
                this.matrix.reset();
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  itemsTransform[j4] = this.matrix.props[j4];
                }
              }
              iteration += 1;
              cont -= 1;
              i5 += dir;
            }
          } else {
            cont = this._currentCopies;
            i5 = 0;
            dir = 1;
            while (cont) {
              items = this.elemsData[i5].it;
              itemsTransform = items[items.length - 1].transform.mProps.v.props;
              items[items.length - 1].transform.mProps._mdf = false;
              items[items.length - 1].transform.op._mdf = false;
              cont -= 1;
              i5 += dir;
            }
          }
          return hasReloaded;
        };
        RepeaterModifier.prototype.addShape = function() {
        };
        function RoundCornersModifier() {
        }
        extendPrototype([ShapeModifier], RoundCornersModifier);
        RoundCornersModifier.prototype.initModifierProperties = function(elem2, data2) {
          this.getValue = this.processKeys;
          this.rd = PropertyFactory.getProp(elem2, data2.r, 0, null, this);
          this._isAnimated = !!this.rd.effectsSequence.length;
        };
        RoundCornersModifier.prototype.processPath = function(path, round) {
          var clonedPath = shapePool.newElement();
          clonedPath.c = path.c;
          var i5;
          var len = path._length;
          var currentV;
          var currentI;
          var currentO;
          var closerV;
          var distance;
          var newPosPerc;
          var index2 = 0;
          var vX;
          var vY;
          var oX;
          var oY;
          var iX;
          var iY;
          for (i5 = 0; i5 < len; i5 += 1) {
            currentV = path.v[i5];
            currentO = path.o[i5];
            currentI = path.i[i5];
            if (currentV[0] === currentO[0] && currentV[1] === currentO[1] && currentV[0] === currentI[0] && currentV[1] === currentI[1]) {
              if ((i5 === 0 || i5 === len - 1) && !path.c) {
                clonedPath.setTripleAt(currentV[0], currentV[1], currentO[0], currentO[1], currentI[0], currentI[1], index2);
                index2 += 1;
              } else {
                if (i5 === 0) {
                  closerV = path.v[len - 1];
                } else {
                  closerV = path.v[i5 - 1];
                }
                distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
                newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
                iX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
                vX = iX;
                iY = currentV[1] - (currentV[1] - closerV[1]) * newPosPerc;
                vY = iY;
                oX = vX - (vX - currentV[0]) * roundCorner;
                oY = vY - (vY - currentV[1]) * roundCorner;
                clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
                index2 += 1;
                if (i5 === len - 1) {
                  closerV = path.v[0];
                } else {
                  closerV = path.v[i5 + 1];
                }
                distance = Math.sqrt(Math.pow(currentV[0] - closerV[0], 2) + Math.pow(currentV[1] - closerV[1], 2));
                newPosPerc = distance ? Math.min(distance / 2, round) / distance : 0;
                oX = currentV[0] + (closerV[0] - currentV[0]) * newPosPerc;
                vX = oX;
                oY = currentV[1] + (closerV[1] - currentV[1]) * newPosPerc;
                vY = oY;
                iX = vX - (vX - currentV[0]) * roundCorner;
                iY = vY - (vY - currentV[1]) * roundCorner;
                clonedPath.setTripleAt(vX, vY, oX, oY, iX, iY, index2);
                index2 += 1;
              }
            } else {
              clonedPath.setTripleAt(path.v[i5][0], path.v[i5][1], path.o[i5][0], path.o[i5][1], path.i[i5][0], path.i[i5][1], index2);
              index2 += 1;
            }
          }
          return clonedPath;
        };
        RoundCornersModifier.prototype.processShapes = function(_isFirstFrame) {
          var shapePaths;
          var i5;
          var len = this.shapes.length;
          var j4;
          var jLen;
          var rd = this.rd.v;
          if (rd !== 0) {
            var shapeData;
            var localShapeCollection;
            for (i5 = 0; i5 < len; i5 += 1) {
              shapeData = this.shapes[i5];
              localShapeCollection = shapeData.localShapeCollection;
              if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
                localShapeCollection.releaseShapes();
                shapeData.shape._mdf = true;
                shapePaths = shapeData.shape.paths.shapes;
                jLen = shapeData.shape.paths._length;
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  localShapeCollection.addShape(this.processPath(shapePaths[j4], rd));
                }
              }
              shapeData.shape.paths = shapeData.localShapeCollection;
            }
          }
          if (!this.dynamicProperties.length) {
            this._mdf = false;
          }
        };
        function floatEqual(a4, b4) {
          return Math.abs(a4 - b4) * 1e5 <= Math.min(Math.abs(a4), Math.abs(b4));
        }
        function floatZero(f4) {
          return Math.abs(f4) <= 1e-5;
        }
        function lerp(p0, p1, amount) {
          return p0 * (1 - amount) + p1 * amount;
        }
        function lerpPoint(p0, p1, amount) {
          return [lerp(p0[0], p1[0], amount), lerp(p0[1], p1[1], amount)];
        }
        function quadRoots(a4, b4, c4) {
          if (a4 === 0) return [];
          var s4 = b4 * b4 - 4 * a4 * c4;
          if (s4 < 0) return [];
          var singleRoot = -b4 / (2 * a4);
          if (s4 === 0) return [singleRoot];
          var delta = Math.sqrt(s4) / (2 * a4);
          return [singleRoot - delta, singleRoot + delta];
        }
        function polynomialCoefficients(p0, p1, p22, p32) {
          return [-p0 + 3 * p1 - 3 * p22 + p32, 3 * p0 - 6 * p1 + 3 * p22, -3 * p0 + 3 * p1, p0];
        }
        function singlePoint(p5) {
          return new PolynomialBezier(p5, p5, p5, p5, false);
        }
        function PolynomialBezier(p0, p1, p22, p32, linearize) {
          if (linearize && pointEqual(p0, p1)) {
            p1 = lerpPoint(p0, p32, 1 / 3);
          }
          if (linearize && pointEqual(p22, p32)) {
            p22 = lerpPoint(p0, p32, 2 / 3);
          }
          var coeffx = polynomialCoefficients(p0[0], p1[0], p22[0], p32[0]);
          var coeffy = polynomialCoefficients(p0[1], p1[1], p22[1], p32[1]);
          this.a = [coeffx[0], coeffy[0]];
          this.b = [coeffx[1], coeffy[1]];
          this.c = [coeffx[2], coeffy[2]];
          this.d = [coeffx[3], coeffy[3]];
          this.points = [p0, p1, p22, p32];
        }
        PolynomialBezier.prototype.point = function(t4) {
          return [((this.a[0] * t4 + this.b[0]) * t4 + this.c[0]) * t4 + this.d[0], ((this.a[1] * t4 + this.b[1]) * t4 + this.c[1]) * t4 + this.d[1]];
        };
        PolynomialBezier.prototype.derivative = function(t4) {
          return [(3 * t4 * this.a[0] + 2 * this.b[0]) * t4 + this.c[0], (3 * t4 * this.a[1] + 2 * this.b[1]) * t4 + this.c[1]];
        };
        PolynomialBezier.prototype.tangentAngle = function(t4) {
          var p5 = this.derivative(t4);
          return Math.atan2(p5[1], p5[0]);
        };
        PolynomialBezier.prototype.normalAngle = function(t4) {
          var p5 = this.derivative(t4);
          return Math.atan2(p5[0], p5[1]);
        };
        PolynomialBezier.prototype.inflectionPoints = function() {
          var denom = this.a[1] * this.b[0] - this.a[0] * this.b[1];
          if (floatZero(denom)) return [];
          var tcusp = -0.5 * (this.a[1] * this.c[0] - this.a[0] * this.c[1]) / denom;
          var square = tcusp * tcusp - 1 / 3 * (this.b[1] * this.c[0] - this.b[0] * this.c[1]) / denom;
          if (square < 0) return [];
          var root2 = Math.sqrt(square);
          if (floatZero(root2)) {
            if (root2 > 0 && root2 < 1) return [tcusp];
            return [];
          }
          return [tcusp - root2, tcusp + root2].filter(function(r4) {
            return r4 > 0 && r4 < 1;
          });
        };
        PolynomialBezier.prototype.split = function(t4) {
          if (t4 <= 0) return [singlePoint(this.points[0]), this];
          if (t4 >= 1) return [this, singlePoint(this.points[this.points.length - 1])];
          var p10 = lerpPoint(this.points[0], this.points[1], t4);
          var p11 = lerpPoint(this.points[1], this.points[2], t4);
          var p12 = lerpPoint(this.points[2], this.points[3], t4);
          var p20 = lerpPoint(p10, p11, t4);
          var p21 = lerpPoint(p11, p12, t4);
          var p32 = lerpPoint(p20, p21, t4);
          return [new PolynomialBezier(this.points[0], p10, p20, p32, true), new PolynomialBezier(p32, p21, p12, this.points[3], true)];
        };
        function extrema(bez2, comp2) {
          var min = bez2.points[0][comp2];
          var max = bez2.points[bez2.points.length - 1][comp2];
          if (min > max) {
            var e4 = max;
            max = min;
            min = e4;
          }
          var f4 = quadRoots(3 * bez2.a[comp2], 2 * bez2.b[comp2], bez2.c[comp2]);
          for (var i5 = 0; i5 < f4.length; i5 += 1) {
            if (f4[i5] > 0 && f4[i5] < 1) {
              var val2 = bez2.point(f4[i5])[comp2];
              if (val2 < min) min = val2;
              else if (val2 > max) max = val2;
            }
          }
          return {
            min,
            max
          };
        }
        PolynomialBezier.prototype.bounds = function() {
          return {
            x: extrema(this, 0),
            y: extrema(this, 1)
          };
        };
        PolynomialBezier.prototype.boundingBox = function() {
          var bounds = this.bounds();
          return {
            left: bounds.x.min,
            right: bounds.x.max,
            top: bounds.y.min,
            bottom: bounds.y.max,
            width: bounds.x.max - bounds.x.min,
            height: bounds.y.max - bounds.y.min,
            cx: (bounds.x.max + bounds.x.min) / 2,
            cy: (bounds.y.max + bounds.y.min) / 2
          };
        };
        function intersectData(bez2, t1, t22) {
          var box = bez2.boundingBox();
          return {
            cx: box.cx,
            cy: box.cy,
            width: box.width,
            height: box.height,
            bez: bez2,
            t: (t1 + t22) / 2,
            t1,
            t2: t22
          };
        }
        function splitData(data2) {
          var split = data2.bez.split(0.5);
          return [intersectData(split[0], data2.t1, data2.t), intersectData(split[1], data2.t, data2.t2)];
        }
        function boxIntersect(b1, b22) {
          return Math.abs(b1.cx - b22.cx) * 2 < b1.width + b22.width && Math.abs(b1.cy - b22.cy) * 2 < b1.height + b22.height;
        }
        function intersectsImpl(d1, d22, depth, tolerance, intersections, maxRecursion) {
          if (!boxIntersect(d1, d22)) return;
          if (depth >= maxRecursion || d1.width <= tolerance && d1.height <= tolerance && d22.width <= tolerance && d22.height <= tolerance) {
            intersections.push([d1.t, d22.t]);
            return;
          }
          var d1s = splitData(d1);
          var d2s = splitData(d22);
          intersectsImpl(d1s[0], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
          intersectsImpl(d1s[0], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
          intersectsImpl(d1s[1], d2s[0], depth + 1, tolerance, intersections, maxRecursion);
          intersectsImpl(d1s[1], d2s[1], depth + 1, tolerance, intersections, maxRecursion);
        }
        PolynomialBezier.prototype.intersections = function(other, tolerance, maxRecursion) {
          if (tolerance === void 0) tolerance = 2;
          if (maxRecursion === void 0) maxRecursion = 7;
          var intersections = [];
          intersectsImpl(intersectData(this, 0, 1), intersectData(other, 0, 1), 0, tolerance, intersections, maxRecursion);
          return intersections;
        };
        PolynomialBezier.shapeSegment = function(shapePath, index2) {
          var nextIndex = (index2 + 1) % shapePath.length();
          return new PolynomialBezier(shapePath.v[index2], shapePath.o[index2], shapePath.i[nextIndex], shapePath.v[nextIndex], true);
        };
        PolynomialBezier.shapeSegmentInverted = function(shapePath, index2) {
          var nextIndex = (index2 + 1) % shapePath.length();
          return new PolynomialBezier(shapePath.v[nextIndex], shapePath.i[nextIndex], shapePath.o[index2], shapePath.v[index2], true);
        };
        function crossProduct(a4, b4) {
          return [a4[1] * b4[2] - a4[2] * b4[1], a4[2] * b4[0] - a4[0] * b4[2], a4[0] * b4[1] - a4[1] * b4[0]];
        }
        function lineIntersection(start1, end1, start2, end2) {
          var v1 = [start1[0], start1[1], 1];
          var v22 = [end1[0], end1[1], 1];
          var v32 = [start2[0], start2[1], 1];
          var v4 = [end2[0], end2[1], 1];
          var r4 = crossProduct(crossProduct(v1, v22), crossProduct(v32, v4));
          if (floatZero(r4[2])) return null;
          return [r4[0] / r4[2], r4[1] / r4[2]];
        }
        function polarOffset(p5, angle, length2) {
          return [p5[0] + Math.cos(angle) * length2, p5[1] - Math.sin(angle) * length2];
        }
        function pointDistance(p1, p22) {
          return Math.hypot(p1[0] - p22[0], p1[1] - p22[1]);
        }
        function pointEqual(p1, p22) {
          return floatEqual(p1[0], p22[0]) && floatEqual(p1[1], p22[1]);
        }
        function ZigZagModifier() {
        }
        extendPrototype([ShapeModifier], ZigZagModifier);
        ZigZagModifier.prototype.initModifierProperties = function(elem2, data2) {
          this.getValue = this.processKeys;
          this.amplitude = PropertyFactory.getProp(elem2, data2.s, 0, null, this);
          this.frequency = PropertyFactory.getProp(elem2, data2.r, 0, null, this);
          this.pointsType = PropertyFactory.getProp(elem2, data2.pt, 0, null, this);
          this._isAnimated = this.amplitude.effectsSequence.length !== 0 || this.frequency.effectsSequence.length !== 0 || this.pointsType.effectsSequence.length !== 0;
        };
        function setPoint(outputBezier, point, angle, direction, amplitude, outAmplitude, inAmplitude) {
          var angO = angle - Math.PI / 2;
          var angI = angle + Math.PI / 2;
          var px = point[0] + Math.cos(angle) * direction * amplitude;
          var py = point[1] - Math.sin(angle) * direction * amplitude;
          outputBezier.setTripleAt(px, py, px + Math.cos(angO) * outAmplitude, py - Math.sin(angO) * outAmplitude, px + Math.cos(angI) * inAmplitude, py - Math.sin(angI) * inAmplitude, outputBezier.length());
        }
        function getPerpendicularVector(pt1, pt2) {
          var vector = [pt2[0] - pt1[0], pt2[1] - pt1[1]];
          var rot = -Math.PI * 0.5;
          var rotatedVector = [Math.cos(rot) * vector[0] - Math.sin(rot) * vector[1], Math.sin(rot) * vector[0] + Math.cos(rot) * vector[1]];
          return rotatedVector;
        }
        function getProjectingAngle(path, cur) {
          var prevIndex = cur === 0 ? path.length() - 1 : cur - 1;
          var nextIndex = (cur + 1) % path.length();
          var prevPoint = path.v[prevIndex];
          var nextPoint = path.v[nextIndex];
          var pVector = getPerpendicularVector(prevPoint, nextPoint);
          return Math.atan2(0, 1) - Math.atan2(pVector[1], pVector[0]);
        }
        function zigZagCorner(outputBezier, path, cur, amplitude, frequency, pointType, direction) {
          var angle = getProjectingAngle(path, cur);
          var point = path.v[cur % path._length];
          var prevPoint = path.v[cur === 0 ? path._length - 1 : cur - 1];
          var nextPoint = path.v[(cur + 1) % path._length];
          var prevDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - prevPoint[0], 2) + Math.pow(point[1] - prevPoint[1], 2)) : 0;
          var nextDist = pointType === 2 ? Math.sqrt(Math.pow(point[0] - nextPoint[0], 2) + Math.pow(point[1] - nextPoint[1], 2)) : 0;
          setPoint(outputBezier, path.v[cur % path._length], angle, direction, amplitude, nextDist / ((frequency + 1) * 2), prevDist / ((frequency + 1) * 2), pointType);
        }
        function zigZagSegment(outputBezier, segment, amplitude, frequency, pointType, direction) {
          for (var i5 = 0; i5 < frequency; i5 += 1) {
            var t4 = (i5 + 1) / (frequency + 1);
            var dist = pointType === 2 ? Math.sqrt(Math.pow(segment.points[3][0] - segment.points[0][0], 2) + Math.pow(segment.points[3][1] - segment.points[0][1], 2)) : 0;
            var angle = segment.normalAngle(t4);
            var point = segment.point(t4);
            setPoint(outputBezier, point, angle, direction, amplitude, dist / ((frequency + 1) * 2), dist / ((frequency + 1) * 2), pointType);
            direction = -direction;
          }
          return direction;
        }
        ZigZagModifier.prototype.processPath = function(path, amplitude, frequency, pointType) {
          var count = path._length;
          var clonedPath = shapePool.newElement();
          clonedPath.c = path.c;
          if (!path.c) {
            count -= 1;
          }
          if (count === 0) return clonedPath;
          var direction = -1;
          var segment = PolynomialBezier.shapeSegment(path, 0);
          zigZagCorner(clonedPath, path, 0, amplitude, frequency, pointType, direction);
          for (var i5 = 0; i5 < count; i5 += 1) {
            direction = zigZagSegment(clonedPath, segment, amplitude, frequency, pointType, -direction);
            if (i5 === count - 1 && !path.c) {
              segment = null;
            } else {
              segment = PolynomialBezier.shapeSegment(path, (i5 + 1) % count);
            }
            zigZagCorner(clonedPath, path, i5 + 1, amplitude, frequency, pointType, direction);
          }
          return clonedPath;
        };
        ZigZagModifier.prototype.processShapes = function(_isFirstFrame) {
          var shapePaths;
          var i5;
          var len = this.shapes.length;
          var j4;
          var jLen;
          var amplitude = this.amplitude.v;
          var frequency = Math.max(0, Math.round(this.frequency.v));
          var pointType = this.pointsType.v;
          if (amplitude !== 0) {
            var shapeData;
            var localShapeCollection;
            for (i5 = 0; i5 < len; i5 += 1) {
              shapeData = this.shapes[i5];
              localShapeCollection = shapeData.localShapeCollection;
              if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
                localShapeCollection.releaseShapes();
                shapeData.shape._mdf = true;
                shapePaths = shapeData.shape.paths.shapes;
                jLen = shapeData.shape.paths._length;
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  localShapeCollection.addShape(this.processPath(shapePaths[j4], amplitude, frequency, pointType));
                }
              }
              shapeData.shape.paths = shapeData.localShapeCollection;
            }
          }
          if (!this.dynamicProperties.length) {
            this._mdf = false;
          }
        };
        function linearOffset(p1, p22, amount) {
          var angle = Math.atan2(p22[0] - p1[0], p22[1] - p1[1]);
          return [polarOffset(p1, angle, amount), polarOffset(p22, angle, amount)];
        }
        function offsetSegment(segment, amount) {
          var p0;
          var p1a;
          var p1b;
          var p2b;
          var p2a;
          var p32;
          var e4;
          e4 = linearOffset(segment.points[0], segment.points[1], amount);
          p0 = e4[0];
          p1a = e4[1];
          e4 = linearOffset(segment.points[1], segment.points[2], amount);
          p1b = e4[0];
          p2b = e4[1];
          e4 = linearOffset(segment.points[2], segment.points[3], amount);
          p2a = e4[0];
          p32 = e4[1];
          var p1 = lineIntersection(p0, p1a, p1b, p2b);
          if (p1 === null) p1 = p1a;
          var p22 = lineIntersection(p2a, p32, p1b, p2b);
          if (p22 === null) p22 = p2a;
          return new PolynomialBezier(p0, p1, p22, p32);
        }
        function joinLines(outputBezier, seg1, seg2, lineJoin, miterLimit) {
          var p0 = seg1.points[3];
          var p1 = seg2.points[0];
          if (lineJoin === 3) return p0;
          if (pointEqual(p0, p1)) return p0;
          if (lineJoin === 2) {
            var angleOut = -seg1.tangentAngle(1);
            var angleIn = -seg2.tangentAngle(0) + Math.PI;
            var center = lineIntersection(p0, polarOffset(p0, angleOut + Math.PI / 2, 100), p1, polarOffset(p1, angleOut + Math.PI / 2, 100));
            var radius = center ? pointDistance(center, p0) : pointDistance(p0, p1) / 2;
            var tan = polarOffset(p0, angleOut, 2 * radius * roundCorner);
            outputBezier.setXYAt(tan[0], tan[1], "o", outputBezier.length() - 1);
            tan = polarOffset(p1, angleIn, 2 * radius * roundCorner);
            outputBezier.setTripleAt(p1[0], p1[1], p1[0], p1[1], tan[0], tan[1], outputBezier.length());
            return p1;
          }
          var t0 = pointEqual(p0, seg1.points[2]) ? seg1.points[0] : seg1.points[2];
          var t1 = pointEqual(p1, seg2.points[1]) ? seg2.points[3] : seg2.points[1];
          var intersection = lineIntersection(t0, p0, p1, t1);
          if (intersection && pointDistance(intersection, p0) < miterLimit) {
            outputBezier.setTripleAt(intersection[0], intersection[1], intersection[0], intersection[1], intersection[0], intersection[1], outputBezier.length());
            return intersection;
          }
          return p0;
        }
        function getIntersection(a4, b4) {
          var intersect = a4.intersections(b4);
          if (intersect.length && floatEqual(intersect[0][0], 1)) intersect.shift();
          if (intersect.length) return intersect[0];
          return null;
        }
        function pruneSegmentIntersection(a4, b4) {
          var outa = a4.slice();
          var outb = b4.slice();
          var intersect = getIntersection(a4[a4.length - 1], b4[0]);
          if (intersect) {
            outa[a4.length - 1] = a4[a4.length - 1].split(intersect[0])[0];
            outb[0] = b4[0].split(intersect[1])[1];
          }
          if (a4.length > 1 && b4.length > 1) {
            intersect = getIntersection(a4[0], b4[b4.length - 1]);
            if (intersect) {
              return [[a4[0].split(intersect[0])[0]], [b4[b4.length - 1].split(intersect[1])[1]]];
            }
          }
          return [outa, outb];
        }
        function pruneIntersections(segments) {
          var e4;
          for (var i5 = 1; i5 < segments.length; i5 += 1) {
            e4 = pruneSegmentIntersection(segments[i5 - 1], segments[i5]);
            segments[i5 - 1] = e4[0];
            segments[i5] = e4[1];
          }
          if (segments.length > 1) {
            e4 = pruneSegmentIntersection(segments[segments.length - 1], segments[0]);
            segments[segments.length - 1] = e4[0];
            segments[0] = e4[1];
          }
          return segments;
        }
        function offsetSegmentSplit(segment, amount) {
          var flex = segment.inflectionPoints();
          var left2;
          var right2;
          var split;
          var mid;
          if (flex.length === 0) {
            return [offsetSegment(segment, amount)];
          }
          if (flex.length === 1 || floatEqual(flex[1], 1)) {
            split = segment.split(flex[0]);
            left2 = split[0];
            right2 = split[1];
            return [offsetSegment(left2, amount), offsetSegment(right2, amount)];
          }
          split = segment.split(flex[0]);
          left2 = split[0];
          var t4 = (flex[1] - flex[0]) / (1 - flex[0]);
          split = split[1].split(t4);
          mid = split[0];
          right2 = split[1];
          return [offsetSegment(left2, amount), offsetSegment(mid, amount), offsetSegment(right2, amount)];
        }
        function OffsetPathModifier() {
        }
        extendPrototype([ShapeModifier], OffsetPathModifier);
        OffsetPathModifier.prototype.initModifierProperties = function(elem2, data2) {
          this.getValue = this.processKeys;
          this.amount = PropertyFactory.getProp(elem2, data2.a, 0, null, this);
          this.miterLimit = PropertyFactory.getProp(elem2, data2.ml, 0, null, this);
          this.lineJoin = data2.lj;
          this._isAnimated = this.amount.effectsSequence.length !== 0;
        };
        OffsetPathModifier.prototype.processPath = function(inputBezier, amount, lineJoin, miterLimit) {
          var outputBezier = shapePool.newElement();
          outputBezier.c = inputBezier.c;
          var count = inputBezier.length();
          if (!inputBezier.c) {
            count -= 1;
          }
          var i5;
          var j4;
          var segment;
          var multiSegments = [];
          for (i5 = 0; i5 < count; i5 += 1) {
            segment = PolynomialBezier.shapeSegment(inputBezier, i5);
            multiSegments.push(offsetSegmentSplit(segment, amount));
          }
          if (!inputBezier.c) {
            for (i5 = count - 1; i5 >= 0; i5 -= 1) {
              segment = PolynomialBezier.shapeSegmentInverted(inputBezier, i5);
              multiSegments.push(offsetSegmentSplit(segment, amount));
            }
          }
          multiSegments = pruneIntersections(multiSegments);
          var lastPoint = null;
          var lastSeg = null;
          for (i5 = 0; i5 < multiSegments.length; i5 += 1) {
            var multiSegment = multiSegments[i5];
            if (lastSeg) lastPoint = joinLines(outputBezier, lastSeg, multiSegment[0], lineJoin, miterLimit);
            lastSeg = multiSegment[multiSegment.length - 1];
            for (j4 = 0; j4 < multiSegment.length; j4 += 1) {
              segment = multiSegment[j4];
              if (lastPoint && pointEqual(segment.points[0], lastPoint)) {
                outputBezier.setXYAt(segment.points[1][0], segment.points[1][1], "o", outputBezier.length() - 1);
              } else {
                outputBezier.setTripleAt(segment.points[0][0], segment.points[0][1], segment.points[1][0], segment.points[1][1], segment.points[0][0], segment.points[0][1], outputBezier.length());
              }
              outputBezier.setTripleAt(segment.points[3][0], segment.points[3][1], segment.points[3][0], segment.points[3][1], segment.points[2][0], segment.points[2][1], outputBezier.length());
              lastPoint = segment.points[3];
            }
          }
          if (multiSegments.length) joinLines(outputBezier, lastSeg, multiSegments[0][0], lineJoin, miterLimit);
          return outputBezier;
        };
        OffsetPathModifier.prototype.processShapes = function(_isFirstFrame) {
          var shapePaths;
          var i5;
          var len = this.shapes.length;
          var j4;
          var jLen;
          var amount = this.amount.v;
          var miterLimit = this.miterLimit.v;
          var lineJoin = this.lineJoin;
          if (amount !== 0) {
            var shapeData;
            var localShapeCollection;
            for (i5 = 0; i5 < len; i5 += 1) {
              shapeData = this.shapes[i5];
              localShapeCollection = shapeData.localShapeCollection;
              if (!(!shapeData.shape._mdf && !this._mdf && !_isFirstFrame)) {
                localShapeCollection.releaseShapes();
                shapeData.shape._mdf = true;
                shapePaths = shapeData.shape.paths.shapes;
                jLen = shapeData.shape.paths._length;
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  localShapeCollection.addShape(this.processPath(shapePaths[j4], amount, lineJoin, miterLimit));
                }
              }
              shapeData.shape.paths = shapeData.localShapeCollection;
            }
          }
          if (!this.dynamicProperties.length) {
            this._mdf = false;
          }
        };
        function getFontProperties(fontData) {
          var styles = fontData.fStyle ? fontData.fStyle.split(" ") : [];
          var fWeight = "normal";
          var fStyle = "normal";
          var len = styles.length;
          var styleName;
          for (var i5 = 0; i5 < len; i5 += 1) {
            styleName = styles[i5].toLowerCase();
            switch (styleName) {
              case "italic":
                fStyle = "italic";
                break;
              case "bold":
                fWeight = "700";
                break;
              case "black":
                fWeight = "900";
                break;
              case "medium":
                fWeight = "500";
                break;
              case "regular":
              case "normal":
                fWeight = "400";
                break;
              case "light":
              case "thin":
                fWeight = "200";
                break;
              default:
                break;
            }
          }
          return {
            style: fStyle,
            weight: fontData.fWeight || fWeight
          };
        }
        var FontManager = (function() {
          var maxWaitingTime = 5e3;
          var emptyChar = {
            w: 0,
            size: 0,
            shapes: [],
            data: {
              shapes: []
            }
          };
          var combinedCharacters = [];
          combinedCharacters = combinedCharacters.concat([2304, 2305, 2306, 2307, 2362, 2363, 2364, 2364, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376, 2377, 2378, 2379, 2380, 2381, 2382, 2383, 2387, 2388, 2389, 2390, 2391, 2402, 2403]);
          var BLACK_FLAG_CODE_POINT = 127988;
          var CANCEL_TAG_CODE_POINT = 917631;
          var A_TAG_CODE_POINT = 917601;
          var Z_TAG_CODE_POINT = 917626;
          var VARIATION_SELECTOR_16_CODE_POINT = 65039;
          var ZERO_WIDTH_JOINER_CODE_POINT = 8205;
          var REGIONAL_CHARACTER_A_CODE_POINT = 127462;
          var REGIONAL_CHARACTER_Z_CODE_POINT = 127487;
          var surrogateModifiers = ["d83cdffb", "d83cdffc", "d83cdffd", "d83cdffe", "d83cdfff"];
          function trimFontOptions(font) {
            var familyArray = font.split(",");
            var i5;
            var len = familyArray.length;
            var enabledFamilies = [];
            for (i5 = 0; i5 < len; i5 += 1) {
              if (familyArray[i5] !== "sans-serif" && familyArray[i5] !== "monospace") {
                enabledFamilies.push(familyArray[i5]);
              }
            }
            return enabledFamilies.join(",");
          }
          function setUpNode(font, family) {
            var parentNode = createTag("span");
            parentNode.setAttribute("aria-hidden", true);
            parentNode.style.fontFamily = family;
            var node = createTag("span");
            node.innerText = "giItT1WQy@!-/#";
            parentNode.style.position = "absolute";
            parentNode.style.left = "-10000px";
            parentNode.style.top = "-10000px";
            parentNode.style.fontSize = "300px";
            parentNode.style.fontVariant = "normal";
            parentNode.style.fontStyle = "normal";
            parentNode.style.fontWeight = "normal";
            parentNode.style.letterSpacing = "0";
            parentNode.appendChild(node);
            document.body.appendChild(parentNode);
            var width2 = node.offsetWidth;
            node.style.fontFamily = trimFontOptions(font) + ", " + family;
            return {
              node,
              w: width2,
              parent: parentNode
            };
          }
          function checkLoadedFonts() {
            var i5;
            var len = this.fonts.length;
            var node;
            var w5;
            var loadedCount = len;
            for (i5 = 0; i5 < len; i5 += 1) {
              if (this.fonts[i5].loaded) {
                loadedCount -= 1;
              } else if (this.fonts[i5].fOrigin === "n" || this.fonts[i5].origin === 0) {
                this.fonts[i5].loaded = true;
              } else {
                node = this.fonts[i5].monoCase.node;
                w5 = this.fonts[i5].monoCase.w;
                if (node.offsetWidth !== w5) {
                  loadedCount -= 1;
                  this.fonts[i5].loaded = true;
                } else {
                  node = this.fonts[i5].sansCase.node;
                  w5 = this.fonts[i5].sansCase.w;
                  if (node.offsetWidth !== w5) {
                    loadedCount -= 1;
                    this.fonts[i5].loaded = true;
                  }
                }
                if (this.fonts[i5].loaded) {
                  this.fonts[i5].sansCase.parent.parentNode.removeChild(this.fonts[i5].sansCase.parent);
                  this.fonts[i5].monoCase.parent.parentNode.removeChild(this.fonts[i5].monoCase.parent);
                }
              }
            }
            if (loadedCount !== 0 && Date.now() - this.initTime < maxWaitingTime) {
              setTimeout(this.checkLoadedFontsBinded, 20);
            } else {
              setTimeout(this.setIsLoadedBinded, 10);
            }
          }
          function createHelper(fontData, def) {
            var engine = document.body && def ? "svg" : "canvas";
            var helper;
            var fontProps = getFontProperties(fontData);
            if (engine === "svg") {
              var tHelper = createNS("text");
              tHelper.style.fontSize = "100px";
              tHelper.setAttribute("font-family", fontData.fFamily);
              tHelper.setAttribute("font-style", fontProps.style);
              tHelper.setAttribute("font-weight", fontProps.weight);
              tHelper.textContent = "1";
              if (fontData.fClass) {
                tHelper.style.fontFamily = "inherit";
                tHelper.setAttribute("class", fontData.fClass);
              } else {
                tHelper.style.fontFamily = fontData.fFamily;
              }
              def.appendChild(tHelper);
              helper = tHelper;
            } else {
              var tCanvasHelper = new OffscreenCanvas(500, 500).getContext("2d");
              tCanvasHelper.font = fontProps.style + " " + fontProps.weight + " 100px " + fontData.fFamily;
              helper = tCanvasHelper;
            }
            function measure(text2) {
              if (engine === "svg") {
                helper.textContent = text2;
                return helper.getComputedTextLength();
              }
              return helper.measureText(text2).width;
            }
            return {
              measureText: measure
            };
          }
          function addFonts(fontData, defs) {
            if (!fontData) {
              this.isLoaded = true;
              return;
            }
            if (this.chars) {
              this.isLoaded = true;
              this.fonts = fontData.list;
              return;
            }
            if (!document.body) {
              this.isLoaded = true;
              fontData.list.forEach(function(data2) {
                data2.helper = createHelper(data2);
                data2.cache = {};
              });
              this.fonts = fontData.list;
              return;
            }
            var fontArr = fontData.list;
            var i5;
            var len = fontArr.length;
            var _pendingFonts = len;
            for (i5 = 0; i5 < len; i5 += 1) {
              var shouldLoadFont = true;
              var loadedSelector;
              var j4;
              fontArr[i5].loaded = false;
              fontArr[i5].monoCase = setUpNode(fontArr[i5].fFamily, "monospace");
              fontArr[i5].sansCase = setUpNode(fontArr[i5].fFamily, "sans-serif");
              if (!fontArr[i5].fPath) {
                fontArr[i5].loaded = true;
                _pendingFonts -= 1;
              } else if (fontArr[i5].fOrigin === "p" || fontArr[i5].origin === 3) {
                loadedSelector = document.querySelectorAll('style[f-forigin="p"][f-family="' + fontArr[i5].fFamily + '"], style[f-origin="3"][f-family="' + fontArr[i5].fFamily + '"]');
                if (loadedSelector.length > 0) {
                  shouldLoadFont = false;
                }
                if (shouldLoadFont) {
                  var s4 = createTag("style");
                  s4.setAttribute("f-forigin", fontArr[i5].fOrigin);
                  s4.setAttribute("f-origin", fontArr[i5].origin);
                  s4.setAttribute("f-family", fontArr[i5].fFamily);
                  s4.type = "text/css";
                  s4.innerText = "@font-face {font-family: " + fontArr[i5].fFamily + "; font-style: normal; src: url('" + fontArr[i5].fPath + "');}";
                  defs.appendChild(s4);
                }
              } else if (fontArr[i5].fOrigin === "g" || fontArr[i5].origin === 1) {
                loadedSelector = document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]');
                for (j4 = 0; j4 < loadedSelector.length; j4 += 1) {
                  if (loadedSelector[j4].href.indexOf(fontArr[i5].fPath) !== -1) {
                    shouldLoadFont = false;
                  }
                }
                if (shouldLoadFont) {
                  var l5 = createTag("link");
                  l5.setAttribute("f-forigin", fontArr[i5].fOrigin);
                  l5.setAttribute("f-origin", fontArr[i5].origin);
                  l5.type = "text/css";
                  l5.rel = "stylesheet";
                  l5.href = fontArr[i5].fPath;
                  document.body.appendChild(l5);
                }
              } else if (fontArr[i5].fOrigin === "t" || fontArr[i5].origin === 2) {
                loadedSelector = document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]');
                for (j4 = 0; j4 < loadedSelector.length; j4 += 1) {
                  if (fontArr[i5].fPath === loadedSelector[j4].src) {
                    shouldLoadFont = false;
                  }
                }
                if (shouldLoadFont) {
                  var sc = createTag("link");
                  sc.setAttribute("f-forigin", fontArr[i5].fOrigin);
                  sc.setAttribute("f-origin", fontArr[i5].origin);
                  sc.setAttribute("rel", "stylesheet");
                  sc.setAttribute("href", fontArr[i5].fPath);
                  defs.appendChild(sc);
                }
              }
              fontArr[i5].helper = createHelper(fontArr[i5], defs);
              fontArr[i5].cache = {};
              this.fonts.push(fontArr[i5]);
            }
            if (_pendingFonts === 0) {
              this.isLoaded = true;
            } else {
              setTimeout(this.checkLoadedFonts.bind(this), 100);
            }
          }
          function addChars(chars) {
            if (!chars) {
              return;
            }
            if (!this.chars) {
              this.chars = [];
            }
            var i5;
            var len = chars.length;
            var j4;
            var jLen = this.chars.length;
            var found;
            for (i5 = 0; i5 < len; i5 += 1) {
              j4 = 0;
              found = false;
              while (j4 < jLen) {
                if (this.chars[j4].style === chars[i5].style && this.chars[j4].fFamily === chars[i5].fFamily && this.chars[j4].ch === chars[i5].ch) {
                  found = true;
                }
                j4 += 1;
              }
              if (!found) {
                this.chars.push(chars[i5]);
                jLen += 1;
              }
            }
          }
          function getCharData(_char, style, font) {
            var i5 = 0;
            var len = this.chars.length;
            while (i5 < len) {
              if (this.chars[i5].ch === _char && this.chars[i5].style === style && this.chars[i5].fFamily === font) {
                return this.chars[i5];
              }
              i5 += 1;
            }
            if ((typeof _char === "string" && _char.charCodeAt(0) !== 13 || !_char) && console && console.warn && !this._warned) {
              this._warned = true;
              console.warn("Missing character from exported characters list: ", _char, style, font);
            }
            return emptyChar;
          }
          function measureText2(_char2, fontName, size) {
            var fontData = this.getFontByName(fontName);
            var index2 = _char2;
            if (!fontData.cache[index2]) {
              var tHelper = fontData.helper;
              if (_char2 === " ") {
                var doubleSize = tHelper.measureText("|" + _char2 + "|");
                var singleSize = tHelper.measureText("||");
                fontData.cache[index2] = (doubleSize - singleSize) / 100;
              } else {
                fontData.cache[index2] = tHelper.measureText(_char2) / 100;
              }
            }
            return fontData.cache[index2] * size;
          }
          function getFontByName(name2) {
            var i5 = 0;
            var len = this.fonts.length;
            while (i5 < len) {
              if (this.fonts[i5].fName === name2) {
                return this.fonts[i5];
              }
              i5 += 1;
            }
            return this.fonts[0];
          }
          function getCodePoint(string2) {
            var codePoint = 0;
            var first = string2.charCodeAt(0);
            if (first >= 55296 && first <= 56319) {
              var second = string2.charCodeAt(1);
              if (second >= 56320 && second <= 57343) {
                codePoint = (first - 55296) * 1024 + second - 56320 + 65536;
              }
            }
            return codePoint;
          }
          function isModifier(firstCharCode, secondCharCode) {
            var sum2 = firstCharCode.toString(16) + secondCharCode.toString(16);
            return surrogateModifiers.indexOf(sum2) !== -1;
          }
          function isZeroWidthJoiner(charCode) {
            return charCode === ZERO_WIDTH_JOINER_CODE_POINT;
          }
          function isVariationSelector(charCode) {
            return charCode === VARIATION_SELECTOR_16_CODE_POINT;
          }
          function isRegionalCode(string2) {
            var codePoint = getCodePoint(string2);
            if (codePoint >= REGIONAL_CHARACTER_A_CODE_POINT && codePoint <= REGIONAL_CHARACTER_Z_CODE_POINT) {
              return true;
            }
            return false;
          }
          function isFlagEmoji(string2) {
            return isRegionalCode(string2.substr(0, 2)) && isRegionalCode(string2.substr(2, 2));
          }
          function isCombinedCharacter(_char3) {
            return combinedCharacters.indexOf(_char3) !== -1;
          }
          function isRegionalFlag(text2, index2) {
            var codePoint = getCodePoint(text2.substr(index2, 2));
            if (codePoint !== BLACK_FLAG_CODE_POINT) {
              return false;
            }
            var count = 0;
            index2 += 2;
            while (count < 5) {
              codePoint = getCodePoint(text2.substr(index2, 2));
              if (codePoint < A_TAG_CODE_POINT || codePoint > Z_TAG_CODE_POINT) {
                return false;
              }
              count += 1;
              index2 += 2;
            }
            return getCodePoint(text2.substr(index2, 2)) === CANCEL_TAG_CODE_POINT;
          }
          function setIsLoaded() {
            this.isLoaded = true;
          }
          var Font = function Font2() {
            this.fonts = [];
            this.chars = null;
            this.typekitLoaded = 0;
            this.isLoaded = false;
            this._warned = false;
            this.initTime = Date.now();
            this.setIsLoadedBinded = this.setIsLoaded.bind(this);
            this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);
          };
          Font.isModifier = isModifier;
          Font.isZeroWidthJoiner = isZeroWidthJoiner;
          Font.isFlagEmoji = isFlagEmoji;
          Font.isRegionalCode = isRegionalCode;
          Font.isCombinedCharacter = isCombinedCharacter;
          Font.isRegionalFlag = isRegionalFlag;
          Font.isVariationSelector = isVariationSelector;
          Font.BLACK_FLAG_CODE_POINT = BLACK_FLAG_CODE_POINT;
          var fontPrototype = {
            addChars,
            addFonts,
            getCharData,
            getFontByName,
            measureText: measureText2,
            checkLoadedFonts,
            setIsLoaded
          };
          Font.prototype = fontPrototype;
          return Font;
        })();
        function SlotManager(animationData2) {
          this.animationData = animationData2;
        }
        SlotManager.prototype.getProp = function(data2) {
          if (this.animationData.slots && this.animationData.slots[data2.sid]) {
            return Object.assign(data2, this.animationData.slots[data2.sid].p);
          }
          return data2;
        };
        function slotFactory(animationData2) {
          return new SlotManager(animationData2);
        }
        function RenderableElement() {
        }
        RenderableElement.prototype = {
          initRenderable: function initRenderable() {
            this.isInRange = false;
            this.hidden = false;
            this.isTransparent = false;
            this.renderableComponents = [];
          },
          addRenderableComponent: function addRenderableComponent(component) {
            if (this.renderableComponents.indexOf(component) === -1) {
              this.renderableComponents.push(component);
            }
          },
          removeRenderableComponent: function removeRenderableComponent(component) {
            if (this.renderableComponents.indexOf(component) !== -1) {
              this.renderableComponents.splice(this.renderableComponents.indexOf(component), 1);
            }
          },
          prepareRenderableFrame: function prepareRenderableFrame(num) {
            this.checkLayerLimits(num);
          },
          checkTransparency: function checkTransparency() {
            if (this.finalTransform.mProp.o.v <= 0) {
              if (!this.isTransparent && this.globalData.renderConfig.hideOnTransparent) {
                this.isTransparent = true;
                this.hide();
              }
            } else if (this.isTransparent) {
              this.isTransparent = false;
              this.show();
            }
          },
          /**
             * @function
             * Initializes frame related properties.
             *
             * @param {number} num
             * current frame number in Layer's time
             *
             */
          checkLayerLimits: function checkLayerLimits(num) {
            if (this.data.ip - this.data.st <= num && this.data.op - this.data.st > num) {
              if (this.isInRange !== true) {
                this.globalData._mdf = true;
                this._mdf = true;
                this.isInRange = true;
                this.show();
              }
            } else if (this.isInRange !== false) {
              this.globalData._mdf = true;
              this.isInRange = false;
              this.hide();
            }
          },
          renderRenderable: function renderRenderable() {
            var i5;
            var len = this.renderableComponents.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              this.renderableComponents[i5].renderFrame(this._isFirstFrame);
            }
          },
          sourceRectAtTime: function sourceRectAtTime2() {
            return {
              top: 0,
              left: 0,
              width: 100,
              height: 100
            };
          },
          getLayerSize: function getLayerSize() {
            if (this.data.ty === 5) {
              return {
                w: this.data.textData.width,
                h: this.data.textData.height
              };
            }
            return {
              w: this.data.width,
              h: this.data.height
            };
          }
        };
        var getBlendMode = /* @__PURE__ */ (function() {
          var blendModeEnums = {
            0: "source-over",
            1: "multiply",
            2: "screen",
            3: "overlay",
            4: "darken",
            5: "lighten",
            6: "color-dodge",
            7: "color-burn",
            8: "hard-light",
            9: "soft-light",
            10: "difference",
            11: "exclusion",
            12: "hue",
            13: "saturation",
            14: "color",
            15: "luminosity"
          };
          return function(mode) {
            return blendModeEnums[mode] || "";
          };
        })();
        function SliderEffect(data2, elem2, container) {
          this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
        }
        function AngleEffect(data2, elem2, container) {
          this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
        }
        function ColorEffect(data2, elem2, container) {
          this.p = PropertyFactory.getProp(elem2, data2.v, 1, 0, container);
        }
        function PointEffect(data2, elem2, container) {
          this.p = PropertyFactory.getProp(elem2, data2.v, 1, 0, container);
        }
        function LayerIndexEffect(data2, elem2, container) {
          this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
        }
        function MaskIndexEffect(data2, elem2, container) {
          this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
        }
        function CheckboxEffect(data2, elem2, container) {
          this.p = PropertyFactory.getProp(elem2, data2.v, 0, 0, container);
        }
        function NoValueEffect() {
          this.p = {};
        }
        function EffectsManager(data2, element) {
          var effects = data2.ef || [];
          this.effectElements = [];
          var i5;
          var len = effects.length;
          var effectItem;
          for (i5 = 0; i5 < len; i5 += 1) {
            effectItem = new GroupEffect(effects[i5], element);
            this.effectElements.push(effectItem);
          }
        }
        function GroupEffect(data2, element) {
          this.init(data2, element);
        }
        extendPrototype([DynamicPropertyContainer], GroupEffect);
        GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties;
        GroupEffect.prototype.init = function(data2, element) {
          this.data = data2;
          this.effectElements = [];
          this.initDynamicPropertyContainer(element);
          var i5;
          var len = this.data.ef.length;
          var eff;
          var effects = this.data.ef;
          for (i5 = 0; i5 < len; i5 += 1) {
            eff = null;
            switch (effects[i5].ty) {
              case 0:
                eff = new SliderEffect(effects[i5], element, this);
                break;
              case 1:
                eff = new AngleEffect(effects[i5], element, this);
                break;
              case 2:
                eff = new ColorEffect(effects[i5], element, this);
                break;
              case 3:
                eff = new PointEffect(effects[i5], element, this);
                break;
              case 4:
              case 7:
                eff = new CheckboxEffect(effects[i5], element, this);
                break;
              case 10:
                eff = new LayerIndexEffect(effects[i5], element, this);
                break;
              case 11:
                eff = new MaskIndexEffect(effects[i5], element, this);
                break;
              case 5:
                eff = new EffectsManager(effects[i5], element, this);
                break;
              // case 6:
              default:
                eff = new NoValueEffect(effects[i5], element, this);
                break;
            }
            if (eff) {
              this.effectElements.push(eff);
            }
          }
        };
        function BaseElement() {
        }
        BaseElement.prototype = {
          checkMasks: function checkMasks() {
            if (!this.data.hasMask) {
              return false;
            }
            var i5 = 0;
            var len = this.data.masksProperties.length;
            while (i5 < len) {
              if (this.data.masksProperties[i5].mode !== "n" && this.data.masksProperties[i5].cl !== false) {
                return true;
              }
              i5 += 1;
            }
            return false;
          },
          initExpressions: function initExpressions() {
            var expressionsInterfaces2 = getExpressionInterfaces();
            if (!expressionsInterfaces2) {
              return;
            }
            var LayerExpressionInterface2 = expressionsInterfaces2("layer");
            var EffectsExpressionInterface2 = expressionsInterfaces2("effects");
            var ShapeExpressionInterface2 = expressionsInterfaces2("shape");
            var TextExpressionInterface2 = expressionsInterfaces2("text");
            var CompExpressionInterface2 = expressionsInterfaces2("comp");
            this.layerInterface = LayerExpressionInterface2(this);
            if (this.data.hasMask && this.maskManager) {
              this.layerInterface.registerMaskInterface(this.maskManager);
            }
            var effectsInterface = EffectsExpressionInterface2.createEffectsInterface(this, this.layerInterface);
            this.layerInterface.registerEffectsInterface(effectsInterface);
            if (this.data.ty === 0 || this.data.xt) {
              this.compInterface = CompExpressionInterface2(this);
            } else if (this.data.ty === 4) {
              this.layerInterface.shapeInterface = ShapeExpressionInterface2(this.shapesData, this.itemsData, this.layerInterface);
              this.layerInterface.content = this.layerInterface.shapeInterface;
            } else if (this.data.ty === 5) {
              this.layerInterface.textInterface = TextExpressionInterface2(this);
              this.layerInterface.text = this.layerInterface.textInterface;
            }
          },
          setBlendMode: function setBlendMode() {
            var blendModeValue = getBlendMode(this.data.bm);
            var elem2 = this.baseElement || this.layerElement;
            elem2.style["mix-blend-mode"] = blendModeValue;
          },
          initBaseData: function initBaseData(data2, globalData2, comp2) {
            this.globalData = globalData2;
            this.comp = comp2;
            this.data = data2;
            this.layerId = createElementID();
            if (!this.data.sr) {
              this.data.sr = 1;
            }
            this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);
          },
          getType: function getType() {
            return this.type;
          },
          sourceRectAtTime: function sourceRectAtTime2() {
          }
        };
        function FrameElement() {
        }
        FrameElement.prototype = {
          /**
             * @function
             * Initializes frame related properties.
             *
             */
          initFrame: function initFrame2() {
            this._isFirstFrame = false;
            this.dynamicProperties = [];
            this._mdf = false;
          },
          /**
             * @function
             * Calculates all dynamic values
             *
             * @param {number} num
             * current frame number in Layer's time
             * @param {boolean} isVisible
             * if layers is currently in range
             *
             */
          prepareProperties: function prepareProperties(num, isVisible) {
            var i5;
            var len = this.dynamicProperties.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              if (isVisible || this._isParent && this.dynamicProperties[i5].propType === "transform") {
                this.dynamicProperties[i5].getValue();
                if (this.dynamicProperties[i5]._mdf) {
                  this.globalData._mdf = true;
                  this._mdf = true;
                }
              }
            }
          },
          addDynamicProperty: function addDynamicProperty(prop) {
            if (this.dynamicProperties.indexOf(prop) === -1) {
              this.dynamicProperties.push(prop);
            }
          }
        };
        function FootageElement(data2, globalData2, comp2) {
          this.initFrame();
          this.initRenderable();
          this.assetData = globalData2.getAssetData(data2.refId);
          this.footageData = globalData2.imageLoader.getAsset(this.assetData);
          this.initBaseData(data2, globalData2, comp2);
        }
        FootageElement.prototype.prepareFrame = function() {
        };
        extendPrototype([RenderableElement, BaseElement, FrameElement], FootageElement);
        FootageElement.prototype.getBaseElement = function() {
          return null;
        };
        FootageElement.prototype.renderFrame = function() {
        };
        FootageElement.prototype.destroy = function() {
        };
        FootageElement.prototype.initExpressions = function() {
          var expressionsInterfaces2 = getExpressionInterfaces();
          if (!expressionsInterfaces2) {
            return;
          }
          var FootageInterface2 = expressionsInterfaces2("footage");
          this.layerInterface = FootageInterface2(this);
        };
        FootageElement.prototype.getFootageData = function() {
          return this.footageData;
        };
        function AudioElement(data2, globalData2, comp2) {
          this.initFrame();
          this.initRenderable();
          this.assetData = globalData2.getAssetData(data2.refId);
          this.initBaseData(data2, globalData2, comp2);
          this._isPlaying = false;
          this._canPlay = false;
          var assetPath = this.globalData.getAssetsPath(this.assetData);
          this.audio = this.globalData.audioController.createAudio(assetPath);
          this._currentTime = 0;
          this.globalData.audioController.addAudio(this);
          this._volumeMultiplier = 1;
          this._volume = 1;
          this._previousVolume = null;
          this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
            _placeholder: true
          };
          this.lv = PropertyFactory.getProp(this, data2.au && data2.au.lv ? data2.au.lv : {
            k: [100]
          }, 1, 0.01, this);
        }
        AudioElement.prototype.prepareFrame = function(num) {
          this.prepareRenderableFrame(num, true);
          this.prepareProperties(num, true);
          if (!this.tm._placeholder) {
            var timeRemapped = this.tm.v;
            this._currentTime = timeRemapped;
          } else {
            this._currentTime = num / this.data.sr;
          }
          this._volume = this.lv.v[0];
          var totalVolume = this._volume * this._volumeMultiplier;
          if (this._previousVolume !== totalVolume) {
            this._previousVolume = totalVolume;
            this.audio.volume(totalVolume);
          }
        };
        extendPrototype([RenderableElement, BaseElement, FrameElement], AudioElement);
        AudioElement.prototype.renderFrame = function() {
          if (this.isInRange && this._canPlay) {
            if (!this._isPlaying) {
              this.audio.play();
              this.audio.seek(this._currentTime / this.globalData.frameRate);
              this._isPlaying = true;
            } else if (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > 0.1) {
              this.audio.seek(this._currentTime / this.globalData.frameRate);
            }
          }
        };
        AudioElement.prototype.show = function() {
        };
        AudioElement.prototype.hide = function() {
          this.audio.pause();
          this._isPlaying = false;
        };
        AudioElement.prototype.pause = function() {
          this.audio.pause();
          this._isPlaying = false;
          this._canPlay = false;
        };
        AudioElement.prototype.resume = function() {
          this._canPlay = true;
        };
        AudioElement.prototype.setRate = function(rateValue) {
          this.audio.rate(rateValue);
        };
        AudioElement.prototype.volume = function(volumeValue) {
          this._volumeMultiplier = volumeValue;
          this._previousVolume = volumeValue * this._volume;
          this.audio.volume(this._previousVolume);
        };
        AudioElement.prototype.getBaseElement = function() {
          return null;
        };
        AudioElement.prototype.destroy = function() {
        };
        AudioElement.prototype.sourceRectAtTime = function() {
        };
        AudioElement.prototype.initExpressions = function() {
        };
        function BaseRenderer() {
        }
        BaseRenderer.prototype.checkLayers = function(num) {
          var i5;
          var len = this.layers.length;
          var data2;
          this.completeLayers = true;
          for (i5 = len - 1; i5 >= 0; i5 -= 1) {
            if (!this.elements[i5]) {
              data2 = this.layers[i5];
              if (data2.ip - data2.st <= num - this.layers[i5].st && data2.op - data2.st > num - this.layers[i5].st) {
                this.buildItem(i5);
              }
            }
            this.completeLayers = this.elements[i5] ? this.completeLayers : false;
          }
          this.checkPendingElements();
        };
        BaseRenderer.prototype.createItem = function(layer) {
          switch (layer.ty) {
            case 2:
              return this.createImage(layer);
            case 0:
              return this.createComp(layer);
            case 1:
              return this.createSolid(layer);
            case 3:
              return this.createNull(layer);
            case 4:
              return this.createShape(layer);
            case 5:
              return this.createText(layer);
            case 6:
              return this.createAudio(layer);
            case 13:
              return this.createCamera(layer);
            case 15:
              return this.createFootage(layer);
            default:
              return this.createNull(layer);
          }
        };
        BaseRenderer.prototype.createCamera = function() {
          throw new Error("You're using a 3d camera. Try the html renderer.");
        };
        BaseRenderer.prototype.createAudio = function(data2) {
          return new AudioElement(data2, this.globalData, this);
        };
        BaseRenderer.prototype.createFootage = function(data2) {
          return new FootageElement(data2, this.globalData, this);
        };
        BaseRenderer.prototype.buildAllItems = function() {
          var i5;
          var len = this.layers.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            this.buildItem(i5);
          }
          this.checkPendingElements();
        };
        BaseRenderer.prototype.includeLayers = function(newLayers) {
          this.completeLayers = false;
          var i5;
          var len = newLayers.length;
          var j4;
          var jLen = this.layers.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            j4 = 0;
            while (j4 < jLen) {
              if (this.layers[j4].id === newLayers[i5].id) {
                this.layers[j4] = newLayers[i5];
                break;
              }
              j4 += 1;
            }
          }
        };
        BaseRenderer.prototype.setProjectInterface = function(pInterface) {
          this.globalData.projectInterface = pInterface;
        };
        BaseRenderer.prototype.initItems = function() {
          if (!this.globalData.progressiveLoad) {
            this.buildAllItems();
          }
        };
        BaseRenderer.prototype.buildElementParenting = function(element, parentName, hierarchy) {
          var elements = this.elements;
          var layers = this.layers;
          var i5 = 0;
          var len = layers.length;
          while (i5 < len) {
            if (layers[i5].ind == parentName) {
              if (!elements[i5] || elements[i5] === true) {
                this.buildItem(i5);
                this.addPendingElement(element);
              } else {
                hierarchy.push(elements[i5]);
                elements[i5].setAsParent();
                if (layers[i5].parent !== void 0) {
                  this.buildElementParenting(element, layers[i5].parent, hierarchy);
                } else {
                  element.setHierarchy(hierarchy);
                }
              }
            }
            i5 += 1;
          }
        };
        BaseRenderer.prototype.addPendingElement = function(element) {
          this.pendingElements.push(element);
        };
        BaseRenderer.prototype.searchExtraCompositions = function(assets) {
          var i5;
          var len = assets.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (assets[i5].xt) {
              var comp2 = this.createComp(assets[i5]);
              comp2.initExpressions();
              this.globalData.projectInterface.registerComposition(comp2);
            }
          }
        };
        BaseRenderer.prototype.getElementById = function(ind) {
          var i5;
          var len = this.elements.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.elements[i5].data.ind === ind) {
              return this.elements[i5];
            }
          }
          return null;
        };
        BaseRenderer.prototype.getElementByPath = function(path) {
          var pathValue = path.shift();
          var element;
          if (typeof pathValue === "number") {
            element = this.elements[pathValue];
          } else {
            var i5;
            var len = this.elements.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              if (this.elements[i5].data.nm === pathValue) {
                element = this.elements[i5];
                break;
              }
            }
          }
          if (path.length === 0) {
            return element;
          }
          return element.getElementByPath(path);
        };
        BaseRenderer.prototype.setupGlobalData = function(animData, fontsContainer) {
          this.globalData.fontManager = new FontManager();
          this.globalData.slotManager = slotFactory(animData);
          this.globalData.fontManager.addChars(animData.chars);
          this.globalData.fontManager.addFonts(animData.fonts, fontsContainer);
          this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem);
          this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem);
          this.globalData.imageLoader = this.animationItem.imagePreloader;
          this.globalData.audioController = this.animationItem.audioController;
          this.globalData.frameId = 0;
          this.globalData.frameRate = animData.fr;
          this.globalData.nm = animData.nm;
          this.globalData.compSize = {
            w: animData.w,
            h: animData.h
          };
        };
        var effectTypes = {
          TRANSFORM_EFFECT: "transformEFfect"
        };
        function TransformElement() {
        }
        TransformElement.prototype = {
          initTransform: function initTransform() {
            var mat = new Matrix();
            this.finalTransform = {
              mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {
                o: 0
              },
              _matMdf: false,
              _localMatMdf: false,
              _opMdf: false,
              mat,
              localMat: mat,
              localOpacity: 1
            };
            if (this.data.ao) {
              this.finalTransform.mProp.autoOriented = true;
            }
            if (this.data.ty !== 11) {
            }
          },
          renderTransform: function renderTransform() {
            this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame;
            this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame;
            if (this.hierarchy) {
              var mat;
              var finalMat = this.finalTransform.mat;
              var i5 = 0;
              var len = this.hierarchy.length;
              if (!this.finalTransform._matMdf) {
                while (i5 < len) {
                  if (this.hierarchy[i5].finalTransform.mProp._mdf) {
                    this.finalTransform._matMdf = true;
                    break;
                  }
                  i5 += 1;
                }
              }
              if (this.finalTransform._matMdf) {
                mat = this.finalTransform.mProp.v.props;
                finalMat.cloneFromProps(mat);
                for (i5 = 0; i5 < len; i5 += 1) {
                  finalMat.multiply(this.hierarchy[i5].finalTransform.mProp.v);
                }
              }
            }
            if (!this.localTransforms || this.finalTransform._matMdf) {
              this.finalTransform._localMatMdf = this.finalTransform._matMdf;
            }
            if (this.finalTransform._opMdf) {
              this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
            }
          },
          renderLocalTransform: function renderLocalTransform() {
            if (this.localTransforms) {
              var i5 = 0;
              var len = this.localTransforms.length;
              this.finalTransform._localMatMdf = this.finalTransform._matMdf;
              if (!this.finalTransform._localMatMdf || !this.finalTransform._opMdf) {
                while (i5 < len) {
                  if (this.localTransforms[i5]._mdf) {
                    this.finalTransform._localMatMdf = true;
                  }
                  if (this.localTransforms[i5]._opMdf && !this.finalTransform._opMdf) {
                    this.finalTransform.localOpacity = this.finalTransform.mProp.o.v;
                    this.finalTransform._opMdf = true;
                  }
                  i5 += 1;
                }
              }
              if (this.finalTransform._localMatMdf) {
                var localMat = this.finalTransform.localMat;
                this.localTransforms[0].matrix.clone(localMat);
                for (i5 = 1; i5 < len; i5 += 1) {
                  var lmat = this.localTransforms[i5].matrix;
                  localMat.multiply(lmat);
                }
                localMat.multiply(this.finalTransform.mat);
              }
              if (this.finalTransform._opMdf) {
                var localOp = this.finalTransform.localOpacity;
                for (i5 = 0; i5 < len; i5 += 1) {
                  localOp *= this.localTransforms[i5].opacity * 0.01;
                }
                this.finalTransform.localOpacity = localOp;
              }
            }
          },
          searchEffectTransforms: function searchEffectTransforms() {
            if (this.renderableEffectsManager) {
              var transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
              if (transformEffects.length) {
                this.localTransforms = [];
                this.finalTransform.localMat = new Matrix();
                var i5 = 0;
                var len = transformEffects.length;
                for (i5 = 0; i5 < len; i5 += 1) {
                  this.localTransforms.push(transformEffects[i5]);
                }
              }
            }
          },
          globalToLocal: function globalToLocal(pt) {
            var transforms = [];
            transforms.push(this.finalTransform);
            var flag = true;
            var comp2 = this.comp;
            while (flag) {
              if (comp2.finalTransform) {
                if (comp2.data.hasMask) {
                  transforms.splice(0, 0, comp2.finalTransform);
                }
                comp2 = comp2.comp;
              } else {
                flag = false;
              }
            }
            var i5;
            var len = transforms.length;
            var ptNew;
            for (i5 = 0; i5 < len; i5 += 1) {
              ptNew = transforms[i5].mat.applyToPointArray(0, 0, 0);
              pt = [pt[0] - ptNew[0], pt[1] - ptNew[1], 0];
            }
            return pt;
          },
          mHelper: new Matrix()
        };
        function MaskElement(data2, element, globalData2) {
          this.data = data2;
          this.element = element;
          this.globalData = globalData2;
          this.storedData = [];
          this.masksProperties = this.data.masksProperties || [];
          this.maskElement = null;
          var defs = this.globalData.defs;
          var i5;
          var len = this.masksProperties ? this.masksProperties.length : 0;
          this.viewData = createSizedArray(len);
          this.solidPath = "";
          var path;
          var properties = this.masksProperties;
          var count = 0;
          var currentMasks = [];
          var j4;
          var jLen;
          var layerId = createElementID();
          var rect;
          var expansor;
          var feMorph;
          var x3;
          var maskType = "clipPath";
          var maskRef = "clip-path";
          for (i5 = 0; i5 < len; i5 += 1) {
            if (properties[i5].mode !== "a" && properties[i5].mode !== "n" || properties[i5].inv || properties[i5].o.k !== 100 || properties[i5].o.x) {
              maskType = "mask";
              maskRef = "mask";
            }
            if ((properties[i5].mode === "s" || properties[i5].mode === "i") && count === 0) {
              rect = createNS("rect");
              rect.setAttribute("fill", "#ffffff");
              rect.setAttribute("width", this.element.comp.data.w || 0);
              rect.setAttribute("height", this.element.comp.data.h || 0);
              currentMasks.push(rect);
            } else {
              rect = null;
            }
            path = createNS("path");
            if (properties[i5].mode === "n") {
              this.viewData[i5] = {
                op: PropertyFactory.getProp(this.element, properties[i5].o, 0, 0.01, this.element),
                prop: ShapePropertyFactory.getShapeProp(this.element, properties[i5], 3),
                elem: path,
                lastPath: ""
              };
              defs.appendChild(path);
            } else {
              count += 1;
              path.setAttribute("fill", properties[i5].mode === "s" ? "#000000" : "#ffffff");
              path.setAttribute("clip-rule", "nonzero");
              var filterID;
              if (properties[i5].x.k !== 0) {
                maskType = "mask";
                maskRef = "mask";
                x3 = PropertyFactory.getProp(this.element, properties[i5].x, 0, null, this.element);
                filterID = createElementID();
                expansor = createNS("filter");
                expansor.setAttribute("id", filterID);
                feMorph = createNS("feMorphology");
                feMorph.setAttribute("operator", "erode");
                feMorph.setAttribute("in", "SourceGraphic");
                feMorph.setAttribute("radius", "0");
                expansor.appendChild(feMorph);
                defs.appendChild(expansor);
                path.setAttribute("stroke", properties[i5].mode === "s" ? "#000000" : "#ffffff");
              } else {
                feMorph = null;
                x3 = null;
              }
              this.storedData[i5] = {
                elem: path,
                x: x3,
                expan: feMorph,
                lastPath: "",
                lastOperator: "",
                filterId: filterID,
                lastRadius: 0
              };
              if (properties[i5].mode === "i") {
                jLen = currentMasks.length;
                var g6 = createNS("g");
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  g6.appendChild(currentMasks[j4]);
                }
                var mask2 = createNS("mask");
                mask2.setAttribute("mask-type", "alpha");
                mask2.setAttribute("id", layerId + "_" + count);
                mask2.appendChild(path);
                defs.appendChild(mask2);
                g6.setAttribute("mask", "url(" + getLocationHref() + "#" + layerId + "_" + count + ")");
                currentMasks.length = 0;
                currentMasks.push(g6);
              } else {
                currentMasks.push(path);
              }
              if (properties[i5].inv && !this.solidPath) {
                this.solidPath = this.createLayerSolidPath();
              }
              this.viewData[i5] = {
                elem: path,
                lastPath: "",
                op: PropertyFactory.getProp(this.element, properties[i5].o, 0, 0.01, this.element),
                prop: ShapePropertyFactory.getShapeProp(this.element, properties[i5], 3),
                invRect: rect
              };
              if (!this.viewData[i5].prop.k) {
                this.drawPath(properties[i5], this.viewData[i5].prop.v, this.viewData[i5]);
              }
            }
          }
          this.maskElement = createNS(maskType);
          len = currentMasks.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            this.maskElement.appendChild(currentMasks[i5]);
          }
          if (count > 0) {
            this.maskElement.setAttribute("id", layerId);
            this.element.maskedElement.setAttribute(maskRef, "url(" + getLocationHref() + "#" + layerId + ")");
            defs.appendChild(this.maskElement);
          }
          if (this.viewData.length) {
            this.element.addRenderableComponent(this);
          }
        }
        MaskElement.prototype.getMaskProperty = function(pos) {
          return this.viewData[pos].prop;
        };
        MaskElement.prototype.renderFrame = function(isFirstFrame) {
          var finalMat = this.element.finalTransform.mat;
          var i5;
          var len = this.masksProperties.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.viewData[i5].prop._mdf || isFirstFrame) {
              this.drawPath(this.masksProperties[i5], this.viewData[i5].prop.v, this.viewData[i5]);
            }
            if (this.viewData[i5].op._mdf || isFirstFrame) {
              this.viewData[i5].elem.setAttribute("fill-opacity", this.viewData[i5].op.v);
            }
            if (this.masksProperties[i5].mode !== "n") {
              if (this.viewData[i5].invRect && (this.element.finalTransform.mProp._mdf || isFirstFrame)) {
                this.viewData[i5].invRect.setAttribute("transform", finalMat.getInverseMatrix().to2dCSS());
              }
              if (this.storedData[i5].x && (this.storedData[i5].x._mdf || isFirstFrame)) {
                var feMorph = this.storedData[i5].expan;
                if (this.storedData[i5].x.v < 0) {
                  if (this.storedData[i5].lastOperator !== "erode") {
                    this.storedData[i5].lastOperator = "erode";
                    this.storedData[i5].elem.setAttribute("filter", "url(" + getLocationHref() + "#" + this.storedData[i5].filterId + ")");
                  }
                  feMorph.setAttribute("radius", -this.storedData[i5].x.v);
                } else {
                  if (this.storedData[i5].lastOperator !== "dilate") {
                    this.storedData[i5].lastOperator = "dilate";
                    this.storedData[i5].elem.setAttribute("filter", null);
                  }
                  this.storedData[i5].elem.setAttribute("stroke-width", this.storedData[i5].x.v * 2);
                }
              }
            }
          }
        };
        MaskElement.prototype.getMaskelement = function() {
          return this.maskElement;
        };
        MaskElement.prototype.createLayerSolidPath = function() {
          var path = "M0,0 ";
          path += " h" + this.globalData.compSize.w;
          path += " v" + this.globalData.compSize.h;
          path += " h-" + this.globalData.compSize.w;
          path += " v-" + this.globalData.compSize.h + " ";
          return path;
        };
        MaskElement.prototype.drawPath = function(pathData, pathNodes, viewData) {
          var pathString = " M" + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
          var i5;
          var len;
          len = pathNodes._length;
          for (i5 = 1; i5 < len; i5 += 1) {
            pathString += " C" + pathNodes.o[i5 - 1][0] + "," + pathNodes.o[i5 - 1][1] + " " + pathNodes.i[i5][0] + "," + pathNodes.i[i5][1] + " " + pathNodes.v[i5][0] + "," + pathNodes.v[i5][1];
          }
          if (pathNodes.c && len > 1) {
            pathString += " C" + pathNodes.o[i5 - 1][0] + "," + pathNodes.o[i5 - 1][1] + " " + pathNodes.i[0][0] + "," + pathNodes.i[0][1] + " " + pathNodes.v[0][0] + "," + pathNodes.v[0][1];
          }
          if (viewData.lastPath !== pathString) {
            var pathShapeValue = "";
            if (viewData.elem) {
              if (pathNodes.c) {
                pathShapeValue = pathData.inv ? this.solidPath + pathString : pathString;
              }
              viewData.elem.setAttribute("d", pathShapeValue);
            }
            viewData.lastPath = pathString;
          }
        };
        MaskElement.prototype.destroy = function() {
          this.element = null;
          this.globalData = null;
          this.maskElement = null;
          this.data = null;
          this.masksProperties = null;
        };
        var filtersFactory = (function() {
          var ob2 = {};
          ob2.createFilter = createFilter;
          ob2.createAlphaToLuminanceFilter = createAlphaToLuminanceFilter;
          function createFilter(filId, skipCoordinates) {
            var fil = createNS("filter");
            fil.setAttribute("id", filId);
            if (skipCoordinates !== true) {
              fil.setAttribute("filterUnits", "objectBoundingBox");
              fil.setAttribute("x", "0%");
              fil.setAttribute("y", "0%");
              fil.setAttribute("width", "100%");
              fil.setAttribute("height", "100%");
            }
            return fil;
          }
          function createAlphaToLuminanceFilter() {
            var feColorMatrix = createNS("feColorMatrix");
            feColorMatrix.setAttribute("type", "matrix");
            feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
            feColorMatrix.setAttribute("values", "0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1");
            return feColorMatrix;
          }
          return ob2;
        })();
        var featureSupport = (function() {
          var ob2 = {
            maskType: true,
            svgLumaHidden: true,
            offscreenCanvas: typeof OffscreenCanvas !== "undefined"
          };
          if (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\/\d./i.test(navigator.userAgent)) {
            ob2.maskType = false;
          }
          if (/firefox/i.test(navigator.userAgent)) {
            ob2.svgLumaHidden = false;
          }
          return ob2;
        })();
        var registeredEffects$1 = {};
        var idPrefix = "filter_result_";
        function SVGEffects(elem2) {
          var i5;
          var source = "SourceGraphic";
          var len = elem2.data.ef ? elem2.data.ef.length : 0;
          var filId = createElementID();
          var fil = filtersFactory.createFilter(filId, true);
          var count = 0;
          this.filters = [];
          var filterManager;
          for (i5 = 0; i5 < len; i5 += 1) {
            filterManager = null;
            var type = elem2.data.ef[i5].ty;
            if (registeredEffects$1[type]) {
              var Effect = registeredEffects$1[type].effect;
              filterManager = new Effect(fil, elem2.effectsManager.effectElements[i5], elem2, idPrefix + count, source);
              source = idPrefix + count;
              if (registeredEffects$1[type].countsAsEffect) {
                count += 1;
              }
            }
            if (filterManager) {
              this.filters.push(filterManager);
            }
          }
          if (count) {
            elem2.globalData.defs.appendChild(fil);
            elem2.layerElement.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
          }
          if (this.filters.length) {
            elem2.addRenderableComponent(this);
          }
        }
        SVGEffects.prototype.renderFrame = function(_isFirstFrame) {
          var i5;
          var len = this.filters.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            this.filters[i5].renderFrame(_isFirstFrame);
          }
        };
        SVGEffects.prototype.getEffects = function(type) {
          var i5;
          var len = this.filters.length;
          var effects = [];
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.filters[i5].type === type) {
              effects.push(this.filters[i5]);
            }
          }
          return effects;
        };
        function registerEffect$1(id, effect2, countsAsEffect) {
          registeredEffects$1[id] = {
            effect: effect2,
            countsAsEffect
          };
        }
        function SVGBaseElement() {
        }
        SVGBaseElement.prototype = {
          initRendererElement: function initRendererElement() {
            this.layerElement = createNS("g");
          },
          createContainerElements: function createContainerElements() {
            this.matteElement = createNS("g");
            this.transformedElement = this.layerElement;
            this.maskedElement = this.layerElement;
            this._sizeChanged = false;
            var layerElementParent = null;
            if (this.data.td) {
              this.matteMasks = {};
              var gg = createNS("g");
              gg.setAttribute("id", this.layerId);
              gg.appendChild(this.layerElement);
              layerElementParent = gg;
              this.globalData.defs.appendChild(gg);
            } else if (this.data.tt) {
              this.matteElement.appendChild(this.layerElement);
              layerElementParent = this.matteElement;
              this.baseElement = this.matteElement;
            } else {
              this.baseElement = this.layerElement;
            }
            if (this.data.ln) {
              this.layerElement.setAttribute("id", this.data.ln);
            }
            if (this.data.cl) {
              this.layerElement.setAttribute("class", this.data.cl);
            }
            if (this.data.ty === 0 && !this.data.hd) {
              var cp = createNS("clipPath");
              var pt = createNS("path");
              pt.setAttribute("d", "M0,0 L" + this.data.w + ",0 L" + this.data.w + "," + this.data.h + " L0," + this.data.h + "z");
              var clipId = createElementID();
              cp.setAttribute("id", clipId);
              cp.appendChild(pt);
              this.globalData.defs.appendChild(cp);
              if (this.checkMasks()) {
                var cpGroup = createNS("g");
                cpGroup.setAttribute("clip-path", "url(" + getLocationHref() + "#" + clipId + ")");
                cpGroup.appendChild(this.layerElement);
                this.transformedElement = cpGroup;
                if (layerElementParent) {
                  layerElementParent.appendChild(this.transformedElement);
                } else {
                  this.baseElement = this.transformedElement;
                }
              } else {
                this.layerElement.setAttribute("clip-path", "url(" + getLocationHref() + "#" + clipId + ")");
              }
            }
            if (this.data.bm !== 0) {
              this.setBlendMode();
            }
          },
          renderElement: function renderElement() {
            if (this.finalTransform._localMatMdf) {
              this.transformedElement.setAttribute("transform", this.finalTransform.localMat.to2dCSS());
            }
            if (this.finalTransform._opMdf) {
              this.transformedElement.setAttribute("opacity", this.finalTransform.localOpacity);
            }
          },
          destroyBaseElement: function destroyBaseElement() {
            this.layerElement = null;
            this.matteElement = null;
            this.maskManager.destroy();
          },
          getBaseElement: function getBaseElement() {
            if (this.data.hd) {
              return null;
            }
            return this.baseElement;
          },
          createRenderableComponents: function createRenderableComponents() {
            this.maskManager = new MaskElement(this.data, this, this.globalData);
            this.renderableEffectsManager = new SVGEffects(this);
            this.searchEffectTransforms();
          },
          getMatte: function getMatte(matteType) {
            if (!this.matteMasks) {
              this.matteMasks = {};
            }
            if (!this.matteMasks[matteType]) {
              var id = this.layerId + "_" + matteType;
              var filId;
              var fil;
              var useElement;
              var gg;
              if (matteType === 1 || matteType === 3) {
                var masker = createNS("mask");
                masker.setAttribute("id", id);
                masker.setAttribute("mask-type", matteType === 3 ? "luminance" : "alpha");
                useElement = createNS("use");
                useElement.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#" + this.layerId);
                masker.appendChild(useElement);
                this.globalData.defs.appendChild(masker);
                if (!featureSupport.maskType && matteType === 1) {
                  masker.setAttribute("mask-type", "luminance");
                  filId = createElementID();
                  fil = filtersFactory.createFilter(filId);
                  this.globalData.defs.appendChild(fil);
                  fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                  gg = createNS("g");
                  gg.appendChild(useElement);
                  masker.appendChild(gg);
                  gg.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
                }
              } else if (matteType === 2) {
                var maskGroup = createNS("mask");
                maskGroup.setAttribute("id", id);
                maskGroup.setAttribute("mask-type", "alpha");
                var maskGrouper = createNS("g");
                maskGroup.appendChild(maskGrouper);
                filId = createElementID();
                fil = filtersFactory.createFilter(filId);
                var feCTr = createNS("feComponentTransfer");
                feCTr.setAttribute("in", "SourceGraphic");
                fil.appendChild(feCTr);
                var feFunc = createNS("feFuncA");
                feFunc.setAttribute("type", "table");
                feFunc.setAttribute("tableValues", "1.0 0.0");
                feCTr.appendChild(feFunc);
                this.globalData.defs.appendChild(fil);
                var alphaRect = createNS("rect");
                alphaRect.setAttribute("width", this.comp.data.w);
                alphaRect.setAttribute("height", this.comp.data.h);
                alphaRect.setAttribute("x", "0");
                alphaRect.setAttribute("y", "0");
                alphaRect.setAttribute("fill", "#ffffff");
                alphaRect.setAttribute("opacity", "0");
                maskGrouper.setAttribute("filter", "url(" + getLocationHref() + "#" + filId + ")");
                maskGrouper.appendChild(alphaRect);
                useElement = createNS("use");
                useElement.setAttributeNS("http://www.w3.org/1999/xlink", "href", "#" + this.layerId);
                maskGrouper.appendChild(useElement);
                if (!featureSupport.maskType) {
                  maskGroup.setAttribute("mask-type", "luminance");
                  fil.appendChild(filtersFactory.createAlphaToLuminanceFilter());
                  gg = createNS("g");
                  maskGrouper.appendChild(alphaRect);
                  gg.appendChild(this.layerElement);
                  maskGrouper.appendChild(gg);
                }
                this.globalData.defs.appendChild(maskGroup);
              }
              this.matteMasks[matteType] = id;
            }
            return this.matteMasks[matteType];
          },
          setMatte: function setMatte(id) {
            if (!this.matteElement) {
              return;
            }
            this.matteElement.setAttribute("mask", "url(" + getLocationHref() + "#" + id + ")");
          }
        };
        function HierarchyElement() {
        }
        HierarchyElement.prototype = {
          /**
             * @function
             * Initializes hierarchy properties
             *
             */
          initHierarchy: function initHierarchy() {
            this.hierarchy = [];
            this._isParent = false;
            this.checkParenting();
          },
          /**
             * @function
             * Sets layer's hierarchy.
             * @param {array} hierarch
             * layer's parent list
             *
             */
          setHierarchy: function setHierarchy(hierarchy) {
            this.hierarchy = hierarchy;
          },
          /**
             * @function
             * Sets layer as parent.
             *
             */
          setAsParent: function setAsParent() {
            this._isParent = true;
          },
          /**
             * @function
             * Searches layer's parenting chain
             *
             */
          checkParenting: function checkParenting() {
            if (this.data.parent !== void 0) {
              this.comp.buildElementParenting(this, this.data.parent, []);
            }
          }
        };
        function RenderableDOMElement() {
        }
        (function() {
          var _prototype = {
            initElement: function initElement(data2, globalData2, comp2) {
              this.initFrame();
              this.initBaseData(data2, globalData2, comp2);
              this.initTransform(data2, globalData2, comp2);
              this.initHierarchy();
              this.initRenderable();
              this.initRendererElement();
              this.createContainerElements();
              this.createRenderableComponents();
              this.createContent();
              this.hide();
            },
            hide: function hide() {
              if (!this.hidden && (!this.isInRange || this.isTransparent)) {
                var elem2 = this.baseElement || this.layerElement;
                elem2.style.display = "none";
                this.hidden = true;
              }
            },
            show: function show() {
              if (this.isInRange && !this.isTransparent) {
                if (!this.data.hd) {
                  var elem2 = this.baseElement || this.layerElement;
                  elem2.style.display = "block";
                }
                this.hidden = false;
                this._isFirstFrame = true;
              }
            },
            renderFrame: function renderFrame() {
              if (this.data.hd || this.hidden) {
                return;
              }
              this.renderTransform();
              this.renderRenderable();
              this.renderLocalTransform();
              this.renderElement();
              this.renderInnerContent();
              if (this._isFirstFrame) {
                this._isFirstFrame = false;
              }
            },
            renderInnerContent: function renderInnerContent() {
            },
            prepareFrame: function prepareFrame(num) {
              this._mdf = false;
              this.prepareRenderableFrame(num);
              this.prepareProperties(num, this.isInRange);
              this.checkTransparency();
            },
            destroy: function destroy() {
              this.innerElem = null;
              this.destroyBaseElement();
            }
          };
          extendPrototype([RenderableElement, createProxyFunction(_prototype)], RenderableDOMElement);
        })();
        function IImageElement(data2, globalData2, comp2) {
          this.assetData = globalData2.getAssetData(data2.refId);
          if (this.assetData && this.assetData.sid) {
            this.assetData = globalData2.slotManager.getProp(this.assetData);
          }
          this.initElement(data2, globalData2, comp2);
          this.sourceRect = {
            top: 0,
            left: 0,
            width: this.assetData.w,
            height: this.assetData.h
          };
        }
        extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], IImageElement);
        IImageElement.prototype.createContent = function() {
          var assetPath = this.globalData.getAssetsPath(this.assetData);
          this.innerElem = createNS("image");
          this.innerElem.setAttribute("width", this.assetData.w + "px");
          this.innerElem.setAttribute("height", this.assetData.h + "px");
          this.innerElem.setAttribute("preserveAspectRatio", this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio);
          this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", assetPath);
          this.layerElement.appendChild(this.innerElem);
        };
        IImageElement.prototype.sourceRectAtTime = function() {
          return this.sourceRect;
        };
        function ProcessedElement(element, position2) {
          this.elem = element;
          this.pos = position2;
        }
        function IShapeElement() {
        }
        IShapeElement.prototype = {
          addShapeToModifiers: function addShapeToModifiers(data2) {
            var i5;
            var len = this.shapeModifiers.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              this.shapeModifiers[i5].addShape(data2);
            }
          },
          isShapeInAnimatedModifiers: function isShapeInAnimatedModifiers(data2) {
            var i5 = 0;
            var len = this.shapeModifiers.length;
            while (i5 < len) {
              if (this.shapeModifiers[i5].isAnimatedWithShape(data2)) {
                return true;
              }
            }
            return false;
          },
          renderModifiers: function renderModifiers() {
            if (!this.shapeModifiers.length) {
              return;
            }
            var i5;
            var len = this.shapes.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              this.shapes[i5].sh.reset();
            }
            len = this.shapeModifiers.length;
            var shouldBreakProcess;
            for (i5 = len - 1; i5 >= 0; i5 -= 1) {
              shouldBreakProcess = this.shapeModifiers[i5].processShapes(this._isFirstFrame);
              if (shouldBreakProcess) {
                break;
              }
            }
          },
          searchProcessedElement: function searchProcessedElement(elem2) {
            var elements = this.processedElements;
            var i5 = 0;
            var len = elements.length;
            while (i5 < len) {
              if (elements[i5].elem === elem2) {
                return elements[i5].pos;
              }
              i5 += 1;
            }
            return 0;
          },
          addProcessedElement: function addProcessedElement(elem2, pos) {
            var elements = this.processedElements;
            var i5 = elements.length;
            while (i5) {
              i5 -= 1;
              if (elements[i5].elem === elem2) {
                elements[i5].pos = pos;
                return;
              }
            }
            elements.push(new ProcessedElement(elem2, pos));
          },
          prepareFrame: function prepareFrame(num) {
            this.prepareRenderableFrame(num);
            this.prepareProperties(num, this.isInRange);
          }
        };
        var lineCapEnum = {
          1: "butt",
          2: "round",
          3: "square"
        };
        var lineJoinEnum = {
          1: "miter",
          2: "round",
          3: "bevel"
        };
        function SVGShapeData(transformers, level, shape) {
          this.caches = [];
          this.styles = [];
          this.transformers = transformers;
          this.lStr = "";
          this.sh = shape;
          this.lvl = level;
          this._isAnimated = !!shape.k;
          var i5 = 0;
          var len = transformers.length;
          while (i5 < len) {
            if (transformers[i5].mProps.dynamicProperties.length) {
              this._isAnimated = true;
              break;
            }
            i5 += 1;
          }
        }
        SVGShapeData.prototype.setAsAnimated = function() {
          this._isAnimated = true;
        };
        function SVGStyleData(data2, level) {
          this.data = data2;
          this.type = data2.ty;
          this.d = "";
          this.lvl = level;
          this._mdf = false;
          this.closed = data2.hd === true;
          this.pElem = createNS("path");
          this.msElem = null;
        }
        SVGStyleData.prototype.reset = function() {
          this.d = "";
          this._mdf = false;
        };
        function DashProperty(elem2, data2, renderer2, container) {
          this.elem = elem2;
          this.frameId = -1;
          this.dataProps = createSizedArray(data2.length);
          this.renderer = renderer2;
          this.k = false;
          this.dashStr = "";
          this.dashArray = createTypedArray("float32", data2.length ? data2.length - 1 : 0);
          this.dashoffset = createTypedArray("float32", 1);
          this.initDynamicPropertyContainer(container);
          var i5;
          var len = data2.length || 0;
          var prop;
          for (i5 = 0; i5 < len; i5 += 1) {
            prop = PropertyFactory.getProp(elem2, data2[i5].v, 0, 0, this);
            this.k = prop.k || this.k;
            this.dataProps[i5] = {
              n: data2[i5].n,
              p: prop
            };
          }
          if (!this.k) {
            this.getValue(true);
          }
          this._isAnimated = this.k;
        }
        DashProperty.prototype.getValue = function(forceRender) {
          if (this.elem.globalData.frameId === this.frameId && !forceRender) {
            return;
          }
          this.frameId = this.elem.globalData.frameId;
          this.iterateDynamicProperties();
          this._mdf = this._mdf || forceRender;
          if (this._mdf) {
            var i5 = 0;
            var len = this.dataProps.length;
            if (this.renderer === "svg") {
              this.dashStr = "";
            }
            for (i5 = 0; i5 < len; i5 += 1) {
              if (this.dataProps[i5].n !== "o") {
                if (this.renderer === "svg") {
                  this.dashStr += " " + this.dataProps[i5].p.v;
                } else {
                  this.dashArray[i5] = this.dataProps[i5].p.v;
                }
              } else {
                this.dashoffset[0] = this.dataProps[i5].p.v;
              }
            }
          }
        };
        extendPrototype([DynamicPropertyContainer], DashProperty);
        function SVGStrokeStyleData(elem2, data2, styleOb) {
          this.initDynamicPropertyContainer(elem2);
          this.getValue = this.iterateDynamicProperties;
          this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
          this.w = PropertyFactory.getProp(elem2, data2.w, 0, null, this);
          this.d = new DashProperty(elem2, data2.d || {}, "svg", this);
          this.c = PropertyFactory.getProp(elem2, data2.c, 1, 255, this);
          this.style = styleOb;
          this._isAnimated = !!this._isAnimated;
        }
        extendPrototype([DynamicPropertyContainer], SVGStrokeStyleData);
        function SVGFillStyleData(elem2, data2, styleOb) {
          this.initDynamicPropertyContainer(elem2);
          this.getValue = this.iterateDynamicProperties;
          this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
          this.c = PropertyFactory.getProp(elem2, data2.c, 1, 255, this);
          this.style = styleOb;
        }
        extendPrototype([DynamicPropertyContainer], SVGFillStyleData);
        function SVGNoStyleData(elem2, data2, styleOb) {
          this.initDynamicPropertyContainer(elem2);
          this.getValue = this.iterateDynamicProperties;
          this.style = styleOb;
        }
        extendPrototype([DynamicPropertyContainer], SVGNoStyleData);
        function GradientProperty(elem2, data2, container) {
          this.data = data2;
          this.c = createTypedArray("uint8c", data2.p * 4);
          var cLength = data2.k.k[0].s ? data2.k.k[0].s.length - data2.p * 4 : data2.k.k.length - data2.p * 4;
          this.o = createTypedArray("float32", cLength);
          this._cmdf = false;
          this._omdf = false;
          this._collapsable = this.checkCollapsable();
          this._hasOpacity = cLength;
          this.initDynamicPropertyContainer(container);
          this.prop = PropertyFactory.getProp(elem2, data2.k, 1, null, this);
          this.k = this.prop.k;
          this.getValue(true);
        }
        GradientProperty.prototype.comparePoints = function(values2, points) {
          var i5 = 0;
          var len = this.o.length / 2;
          var diff;
          while (i5 < len) {
            diff = Math.abs(values2[i5 * 4] - values2[points * 4 + i5 * 2]);
            if (diff > 0.01) {
              return false;
            }
            i5 += 1;
          }
          return true;
        };
        GradientProperty.prototype.checkCollapsable = function() {
          if (this.o.length / 2 !== this.c.length / 4) {
            return false;
          }
          if (this.data.k.k[0].s) {
            var i5 = 0;
            var len = this.data.k.k.length;
            while (i5 < len) {
              if (!this.comparePoints(this.data.k.k[i5].s, this.data.p)) {
                return false;
              }
              i5 += 1;
            }
          } else if (!this.comparePoints(this.data.k.k, this.data.p)) {
            return false;
          }
          return true;
        };
        GradientProperty.prototype.getValue = function(forceRender) {
          this.prop.getValue();
          this._mdf = false;
          this._cmdf = false;
          this._omdf = false;
          if (this.prop._mdf || forceRender) {
            var i5;
            var len = this.data.p * 4;
            var mult;
            var val2;
            for (i5 = 0; i5 < len; i5 += 1) {
              mult = i5 % 4 === 0 ? 100 : 255;
              val2 = Math.round(this.prop.v[i5] * mult);
              if (this.c[i5] !== val2) {
                this.c[i5] = val2;
                this._cmdf = !forceRender;
              }
            }
            if (this.o.length) {
              len = this.prop.v.length;
              for (i5 = this.data.p * 4; i5 < len; i5 += 1) {
                mult = i5 % 2 === 0 ? 100 : 1;
                val2 = i5 % 2 === 0 ? Math.round(this.prop.v[i5] * 100) : this.prop.v[i5];
                if (this.o[i5 - this.data.p * 4] !== val2) {
                  this.o[i5 - this.data.p * 4] = val2;
                  this._omdf = !forceRender;
                }
              }
            }
            this._mdf = !forceRender;
          }
        };
        extendPrototype([DynamicPropertyContainer], GradientProperty);
        function SVGGradientFillStyleData(elem2, data2, styleOb) {
          this.initDynamicPropertyContainer(elem2);
          this.getValue = this.iterateDynamicProperties;
          this.initGradientData(elem2, data2, styleOb);
        }
        SVGGradientFillStyleData.prototype.initGradientData = function(elem2, data2, styleOb) {
          this.o = PropertyFactory.getProp(elem2, data2.o, 0, 0.01, this);
          this.s = PropertyFactory.getProp(elem2, data2.s, 1, null, this);
          this.e = PropertyFactory.getProp(elem2, data2.e, 1, null, this);
          this.h = PropertyFactory.getProp(elem2, data2.h || {
            k: 0
          }, 0, 0.01, this);
          this.a = PropertyFactory.getProp(elem2, data2.a || {
            k: 0
          }, 0, degToRads, this);
          this.g = new GradientProperty(elem2, data2.g, this);
          this.style = styleOb;
          this.stops = [];
          this.setGradientData(styleOb.pElem, data2);
          this.setGradientOpacity(data2, styleOb);
          this._isAnimated = !!this._isAnimated;
        };
        SVGGradientFillStyleData.prototype.setGradientData = function(pathElement, data2) {
          var gradientId = createElementID();
          var gfill = createNS(data2.t === 1 ? "linearGradient" : "radialGradient");
          gfill.setAttribute("id", gradientId);
          gfill.setAttribute("spreadMethod", "pad");
          gfill.setAttribute("gradientUnits", "userSpaceOnUse");
          var stops = [];
          var stop;
          var j4;
          var jLen;
          jLen = data2.g.p * 4;
          for (j4 = 0; j4 < jLen; j4 += 4) {
            stop = createNS("stop");
            gfill.appendChild(stop);
            stops.push(stop);
          }
          pathElement.setAttribute(data2.ty === "gf" ? "fill" : "stroke", "url(" + getLocationHref() + "#" + gradientId + ")");
          this.gf = gfill;
          this.cst = stops;
        };
        SVGGradientFillStyleData.prototype.setGradientOpacity = function(data2, styleOb) {
          if (this.g._hasOpacity && !this.g._collapsable) {
            var stop;
            var j4;
            var jLen;
            var mask2 = createNS("mask");
            var maskElement = createNS("path");
            mask2.appendChild(maskElement);
            var opacityId = createElementID();
            var maskId = createElementID();
            mask2.setAttribute("id", maskId);
            var opFill = createNS(data2.t === 1 ? "linearGradient" : "radialGradient");
            opFill.setAttribute("id", opacityId);
            opFill.setAttribute("spreadMethod", "pad");
            opFill.setAttribute("gradientUnits", "userSpaceOnUse");
            jLen = data2.g.k.k[0].s ? data2.g.k.k[0].s.length : data2.g.k.k.length;
            var stops = this.stops;
            for (j4 = data2.g.p * 4; j4 < jLen; j4 += 2) {
              stop = createNS("stop");
              stop.setAttribute("stop-color", "rgb(255,255,255)");
              opFill.appendChild(stop);
              stops.push(stop);
            }
            maskElement.setAttribute(data2.ty === "gf" ? "fill" : "stroke", "url(" + getLocationHref() + "#" + opacityId + ")");
            if (data2.ty === "gs") {
              maskElement.setAttribute("stroke-linecap", lineCapEnum[data2.lc || 2]);
              maskElement.setAttribute("stroke-linejoin", lineJoinEnum[data2.lj || 2]);
              if (data2.lj === 1) {
                maskElement.setAttribute("stroke-miterlimit", data2.ml);
              }
            }
            this.of = opFill;
            this.ms = mask2;
            this.ost = stops;
            this.maskId = maskId;
            styleOb.msElem = maskElement;
          }
        };
        extendPrototype([DynamicPropertyContainer], SVGGradientFillStyleData);
        function SVGGradientStrokeStyleData(elem2, data2, styleOb) {
          this.initDynamicPropertyContainer(elem2);
          this.getValue = this.iterateDynamicProperties;
          this.w = PropertyFactory.getProp(elem2, data2.w, 0, null, this);
          this.d = new DashProperty(elem2, data2.d || {}, "svg", this);
          this.initGradientData(elem2, data2, styleOb);
          this._isAnimated = !!this._isAnimated;
        }
        extendPrototype([SVGGradientFillStyleData, DynamicPropertyContainer], SVGGradientStrokeStyleData);
        function ShapeGroupData() {
          this.it = [];
          this.prevViewData = [];
          this.gr = createNS("g");
        }
        function SVGTransformData(mProps, op, container) {
          this.transform = {
            mProps,
            op,
            container
          };
          this.elements = [];
          this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;
        }
        var buildShapeString = function buildShapeString2(pathNodes, length2, closed, mat) {
          if (length2 === 0) {
            return "";
          }
          var _o = pathNodes.o;
          var _i = pathNodes.i;
          var _v = pathNodes.v;
          var i5;
          var shapeString = " M" + mat.applyToPointStringified(_v[0][0], _v[0][1]);
          for (i5 = 1; i5 < length2; i5 += 1) {
            shapeString += " C" + mat.applyToPointStringified(_o[i5 - 1][0], _o[i5 - 1][1]) + " " + mat.applyToPointStringified(_i[i5][0], _i[i5][1]) + " " + mat.applyToPointStringified(_v[i5][0], _v[i5][1]);
          }
          if (closed && length2) {
            shapeString += " C" + mat.applyToPointStringified(_o[i5 - 1][0], _o[i5 - 1][1]) + " " + mat.applyToPointStringified(_i[0][0], _i[0][1]) + " " + mat.applyToPointStringified(_v[0][0], _v[0][1]);
            shapeString += "z";
          }
          return shapeString;
        };
        var SVGElementsRenderer = (function() {
          var _identityMatrix = new Matrix();
          var _matrixHelper = new Matrix();
          var ob2 = {
            createRenderFunction
          };
          function createRenderFunction(data2) {
            switch (data2.ty) {
              case "fl":
                return renderFill;
              case "gf":
                return renderGradient;
              case "gs":
                return renderGradientStroke;
              case "st":
                return renderStroke;
              case "sh":
              case "el":
              case "rc":
              case "sr":
                return renderPath;
              case "tr":
                return renderContentTransform;
              case "no":
                return renderNoop;
              default:
                return null;
            }
          }
          function renderContentTransform(styleData, itemData, isFirstFrame) {
            if (isFirstFrame || itemData.transform.op._mdf) {
              itemData.transform.container.setAttribute("opacity", itemData.transform.op.v);
            }
            if (isFirstFrame || itemData.transform.mProps._mdf) {
              itemData.transform.container.setAttribute("transform", itemData.transform.mProps.v.to2dCSS());
            }
          }
          function renderNoop() {
          }
          function renderPath(styleData, itemData, isFirstFrame) {
            var j4;
            var jLen;
            var pathStringTransformed;
            var redraw;
            var pathNodes;
            var l5;
            var lLen = itemData.styles.length;
            var lvl = itemData.lvl;
            var paths;
            var mat;
            var iterations;
            var k4;
            for (l5 = 0; l5 < lLen; l5 += 1) {
              redraw = itemData.sh._mdf || isFirstFrame;
              if (itemData.styles[l5].lvl < lvl) {
                mat = _matrixHelper.reset();
                iterations = lvl - itemData.styles[l5].lvl;
                k4 = itemData.transformers.length - 1;
                while (!redraw && iterations > 0) {
                  redraw = itemData.transformers[k4].mProps._mdf || redraw;
                  iterations -= 1;
                  k4 -= 1;
                }
                if (redraw) {
                  iterations = lvl - itemData.styles[l5].lvl;
                  k4 = itemData.transformers.length - 1;
                  while (iterations > 0) {
                    mat.multiply(itemData.transformers[k4].mProps.v);
                    iterations -= 1;
                    k4 -= 1;
                  }
                }
              } else {
                mat = _identityMatrix;
              }
              paths = itemData.sh.paths;
              jLen = paths._length;
              if (redraw) {
                pathStringTransformed = "";
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  pathNodes = paths.shapes[j4];
                  if (pathNodes && pathNodes._length) {
                    pathStringTransformed += buildShapeString(pathNodes, pathNodes._length, pathNodes.c, mat);
                  }
                }
                itemData.caches[l5] = pathStringTransformed;
              } else {
                pathStringTransformed = itemData.caches[l5];
              }
              itemData.styles[l5].d += styleData.hd === true ? "" : pathStringTransformed;
              itemData.styles[l5]._mdf = redraw || itemData.styles[l5]._mdf;
            }
          }
          function renderFill(styleData, itemData, isFirstFrame) {
            var styleElem = itemData.style;
            if (itemData.c._mdf || isFirstFrame) {
              styleElem.pElem.setAttribute("fill", "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")");
            }
            if (itemData.o._mdf || isFirstFrame) {
              styleElem.pElem.setAttribute("fill-opacity", itemData.o.v);
            }
          }
          function renderGradientStroke(styleData, itemData, isFirstFrame) {
            renderGradient(styleData, itemData, isFirstFrame);
            renderStroke(styleData, itemData, isFirstFrame);
          }
          function renderGradient(styleData, itemData, isFirstFrame) {
            var gfill = itemData.gf;
            var hasOpacity = itemData.g._hasOpacity;
            var pt1 = itemData.s.v;
            var pt2 = itemData.e.v;
            if (itemData.o._mdf || isFirstFrame) {
              var attr = styleData.ty === "gf" ? "fill-opacity" : "stroke-opacity";
              itemData.style.pElem.setAttribute(attr, itemData.o.v);
            }
            if (itemData.s._mdf || isFirstFrame) {
              var attr1 = styleData.t === 1 ? "x1" : "cx";
              var attr2 = attr1 === "x1" ? "y1" : "cy";
              gfill.setAttribute(attr1, pt1[0]);
              gfill.setAttribute(attr2, pt1[1]);
              if (hasOpacity && !itemData.g._collapsable) {
                itemData.of.setAttribute(attr1, pt1[0]);
                itemData.of.setAttribute(attr2, pt1[1]);
              }
            }
            var stops;
            var i5;
            var len;
            var stop;
            if (itemData.g._cmdf || isFirstFrame) {
              stops = itemData.cst;
              var cValues = itemData.g.c;
              len = stops.length;
              for (i5 = 0; i5 < len; i5 += 1) {
                stop = stops[i5];
                stop.setAttribute("offset", cValues[i5 * 4] + "%");
                stop.setAttribute("stop-color", "rgb(" + cValues[i5 * 4 + 1] + "," + cValues[i5 * 4 + 2] + "," + cValues[i5 * 4 + 3] + ")");
              }
            }
            if (hasOpacity && (itemData.g._omdf || isFirstFrame)) {
              var oValues = itemData.g.o;
              if (itemData.g._collapsable) {
                stops = itemData.cst;
              } else {
                stops = itemData.ost;
              }
              len = stops.length;
              for (i5 = 0; i5 < len; i5 += 1) {
                stop = stops[i5];
                if (!itemData.g._collapsable) {
                  stop.setAttribute("offset", oValues[i5 * 2] + "%");
                }
                stop.setAttribute("stop-opacity", oValues[i5 * 2 + 1]);
              }
            }
            if (styleData.t === 1) {
              if (itemData.e._mdf || isFirstFrame) {
                gfill.setAttribute("x2", pt2[0]);
                gfill.setAttribute("y2", pt2[1]);
                if (hasOpacity && !itemData.g._collapsable) {
                  itemData.of.setAttribute("x2", pt2[0]);
                  itemData.of.setAttribute("y2", pt2[1]);
                }
              }
            } else {
              var rad;
              if (itemData.s._mdf || itemData.e._mdf || isFirstFrame) {
                rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
                gfill.setAttribute("r", rad);
                if (hasOpacity && !itemData.g._collapsable) {
                  itemData.of.setAttribute("r", rad);
                }
              }
              if (itemData.s._mdf || itemData.e._mdf || itemData.h._mdf || itemData.a._mdf || isFirstFrame) {
                if (!rad) {
                  rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
                }
                var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
                var percent = itemData.h.v;
                if (percent >= 1) {
                  percent = 0.99;
                } else if (percent <= -1) {
                  percent = -0.99;
                }
                var dist = rad * percent;
                var x3 = Math.cos(ang + itemData.a.v) * dist + pt1[0];
                var y5 = Math.sin(ang + itemData.a.v) * dist + pt1[1];
                gfill.setAttribute("fx", x3);
                gfill.setAttribute("fy", y5);
                if (hasOpacity && !itemData.g._collapsable) {
                  itemData.of.setAttribute("fx", x3);
                  itemData.of.setAttribute("fy", y5);
                }
              }
            }
          }
          function renderStroke(styleData, itemData, isFirstFrame) {
            var styleElem = itemData.style;
            var d5 = itemData.d;
            if (d5 && (d5._mdf || isFirstFrame) && d5.dashStr) {
              styleElem.pElem.setAttribute("stroke-dasharray", d5.dashStr);
              styleElem.pElem.setAttribute("stroke-dashoffset", d5.dashoffset[0]);
            }
            if (itemData.c && (itemData.c._mdf || isFirstFrame)) {
              styleElem.pElem.setAttribute("stroke", "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")");
            }
            if (itemData.o._mdf || isFirstFrame) {
              styleElem.pElem.setAttribute("stroke-opacity", itemData.o.v);
            }
            if (itemData.w._mdf || isFirstFrame) {
              styleElem.pElem.setAttribute("stroke-width", itemData.w.v);
              if (styleElem.msElem) {
                styleElem.msElem.setAttribute("stroke-width", itemData.w.v);
              }
            }
          }
          return ob2;
        })();
        function SVGShapeElement(data2, globalData2, comp2) {
          this.shapes = [];
          this.shapesData = data2.shapes;
          this.stylesList = [];
          this.shapeModifiers = [];
          this.itemsData = [];
          this.processedElements = [];
          this.animatedContents = [];
          this.initElement(data2, globalData2, comp2);
          this.prevViewData = [];
        }
        extendPrototype([BaseElement, TransformElement, SVGBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableDOMElement], SVGShapeElement);
        SVGShapeElement.prototype.initSecondaryElement = function() {
        };
        SVGShapeElement.prototype.identityMatrix = new Matrix();
        SVGShapeElement.prototype.buildExpressionInterface = function() {
        };
        SVGShapeElement.prototype.createContent = function() {
          this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
          this.filterUniqueShapes();
        };
        SVGShapeElement.prototype.filterUniqueShapes = function() {
          var i5;
          var len = this.shapes.length;
          var shape;
          var j4;
          var jLen = this.stylesList.length;
          var style;
          var tempShapes = [];
          var areAnimated = false;
          for (j4 = 0; j4 < jLen; j4 += 1) {
            style = this.stylesList[j4];
            areAnimated = false;
            tempShapes.length = 0;
            for (i5 = 0; i5 < len; i5 += 1) {
              shape = this.shapes[i5];
              if (shape.styles.indexOf(style) !== -1) {
                tempShapes.push(shape);
                areAnimated = shape._isAnimated || areAnimated;
              }
            }
            if (tempShapes.length > 1 && areAnimated) {
              this.setShapesAsAnimated(tempShapes);
            }
          }
        };
        SVGShapeElement.prototype.setShapesAsAnimated = function(shapes) {
          var i5;
          var len = shapes.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            shapes[i5].setAsAnimated();
          }
        };
        SVGShapeElement.prototype.createStyleElement = function(data2, level) {
          var elementData;
          var styleOb = new SVGStyleData(data2, level);
          var pathElement = styleOb.pElem;
          if (data2.ty === "st") {
            elementData = new SVGStrokeStyleData(this, data2, styleOb);
          } else if (data2.ty === "fl") {
            elementData = new SVGFillStyleData(this, data2, styleOb);
          } else if (data2.ty === "gf" || data2.ty === "gs") {
            var GradientConstructor = data2.ty === "gf" ? SVGGradientFillStyleData : SVGGradientStrokeStyleData;
            elementData = new GradientConstructor(this, data2, styleOb);
            this.globalData.defs.appendChild(elementData.gf);
            if (elementData.maskId) {
              this.globalData.defs.appendChild(elementData.ms);
              this.globalData.defs.appendChild(elementData.of);
              pathElement.setAttribute("mask", "url(" + getLocationHref() + "#" + elementData.maskId + ")");
            }
          } else if (data2.ty === "no") {
            elementData = new SVGNoStyleData(this, data2, styleOb);
          }
          if (data2.ty === "st" || data2.ty === "gs") {
            pathElement.setAttribute("stroke-linecap", lineCapEnum[data2.lc || 2]);
            pathElement.setAttribute("stroke-linejoin", lineJoinEnum[data2.lj || 2]);
            pathElement.setAttribute("fill-opacity", "0");
            if (data2.lj === 1) {
              pathElement.setAttribute("stroke-miterlimit", data2.ml);
            }
          }
          if (data2.r === 2) {
            pathElement.setAttribute("fill-rule", "evenodd");
          }
          if (data2.ln) {
            pathElement.setAttribute("id", data2.ln);
          }
          if (data2.cl) {
            pathElement.setAttribute("class", data2.cl);
          }
          if (data2.bm) {
            pathElement.style["mix-blend-mode"] = getBlendMode(data2.bm);
          }
          this.stylesList.push(styleOb);
          this.addToAnimatedContents(data2, elementData);
          return elementData;
        };
        SVGShapeElement.prototype.createGroupElement = function(data2) {
          var elementData = new ShapeGroupData();
          if (data2.ln) {
            elementData.gr.setAttribute("id", data2.ln);
          }
          if (data2.cl) {
            elementData.gr.setAttribute("class", data2.cl);
          }
          if (data2.bm) {
            elementData.gr.style["mix-blend-mode"] = getBlendMode(data2.bm);
          }
          return elementData;
        };
        SVGShapeElement.prototype.createTransformElement = function(data2, container) {
          var transformProperty = TransformPropertyFactory.getTransformProperty(this, data2, this);
          var elementData = new SVGTransformData(transformProperty, transformProperty.o, container);
          this.addToAnimatedContents(data2, elementData);
          return elementData;
        };
        SVGShapeElement.prototype.createShapeElement = function(data2, ownTransformers, level) {
          var ty = 4;
          if (data2.ty === "rc") {
            ty = 5;
          } else if (data2.ty === "el") {
            ty = 6;
          } else if (data2.ty === "sr") {
            ty = 7;
          }
          var shapeProperty = ShapePropertyFactory.getShapeProp(this, data2, ty, this);
          var elementData = new SVGShapeData(ownTransformers, level, shapeProperty);
          this.shapes.push(elementData);
          this.addShapeToModifiers(elementData);
          this.addToAnimatedContents(data2, elementData);
          return elementData;
        };
        SVGShapeElement.prototype.addToAnimatedContents = function(data2, element) {
          var i5 = 0;
          var len = this.animatedContents.length;
          while (i5 < len) {
            if (this.animatedContents[i5].element === element) {
              return;
            }
            i5 += 1;
          }
          this.animatedContents.push({
            fn: SVGElementsRenderer.createRenderFunction(data2),
            element,
            data: data2
          });
        };
        SVGShapeElement.prototype.setElementStyles = function(elementData) {
          var arr = elementData.styles;
          var j4;
          var jLen = this.stylesList.length;
          for (j4 = 0; j4 < jLen; j4 += 1) {
            if (arr.indexOf(this.stylesList[j4]) === -1 && !this.stylesList[j4].closed) {
              arr.push(this.stylesList[j4]);
            }
          }
        };
        SVGShapeElement.prototype.reloadShapes = function() {
          this._isFirstFrame = true;
          var i5;
          var len = this.itemsData.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            this.prevViewData[i5] = this.itemsData[i5];
          }
          this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], true);
          this.filterUniqueShapes();
          len = this.dynamicProperties.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            this.dynamicProperties[i5].getValue();
          }
          this.renderModifiers();
        };
        SVGShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, container, level, transformers, render) {
          var ownTransformers = [].concat(transformers);
          var i5;
          var len = arr.length - 1;
          var j4;
          var jLen;
          var ownStyles = [];
          var ownModifiers = [];
          var currentTransform;
          var modifier;
          var processedPos;
          for (i5 = len; i5 >= 0; i5 -= 1) {
            processedPos = this.searchProcessedElement(arr[i5]);
            if (!processedPos) {
              arr[i5]._render = render;
            } else {
              itemsData[i5] = prevViewData[processedPos - 1];
            }
            if (arr[i5].ty === "fl" || arr[i5].ty === "st" || arr[i5].ty === "gf" || arr[i5].ty === "gs" || arr[i5].ty === "no") {
              if (!processedPos) {
                itemsData[i5] = this.createStyleElement(arr[i5], level);
              } else {
                itemsData[i5].style.closed = arr[i5].hd;
              }
              if (arr[i5]._render) {
                if (itemsData[i5].style.pElem.parentNode !== container) {
                  container.appendChild(itemsData[i5].style.pElem);
                }
              }
              ownStyles.push(itemsData[i5].style);
            } else if (arr[i5].ty === "gr") {
              if (!processedPos) {
                itemsData[i5] = this.createGroupElement(arr[i5]);
              } else {
                jLen = itemsData[i5].it.length;
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  itemsData[i5].prevViewData[j4] = itemsData[i5].it[j4];
                }
              }
              this.searchShapes(arr[i5].it, itemsData[i5].it, itemsData[i5].prevViewData, itemsData[i5].gr, level + 1, ownTransformers, render);
              if (arr[i5]._render) {
                if (itemsData[i5].gr.parentNode !== container) {
                  container.appendChild(itemsData[i5].gr);
                }
              }
            } else if (arr[i5].ty === "tr") {
              if (!processedPos) {
                itemsData[i5] = this.createTransformElement(arr[i5], container);
              }
              currentTransform = itemsData[i5].transform;
              ownTransformers.push(currentTransform);
            } else if (arr[i5].ty === "sh" || arr[i5].ty === "rc" || arr[i5].ty === "el" || arr[i5].ty === "sr") {
              if (!processedPos) {
                itemsData[i5] = this.createShapeElement(arr[i5], ownTransformers, level);
              }
              this.setElementStyles(itemsData[i5]);
            } else if (arr[i5].ty === "tm" || arr[i5].ty === "rd" || arr[i5].ty === "ms" || arr[i5].ty === "pb" || arr[i5].ty === "zz" || arr[i5].ty === "op") {
              if (!processedPos) {
                modifier = ShapeModifiers.getModifier(arr[i5].ty);
                modifier.init(this, arr[i5]);
                itemsData[i5] = modifier;
                this.shapeModifiers.push(modifier);
              } else {
                modifier = itemsData[i5];
                modifier.closed = false;
              }
              ownModifiers.push(modifier);
            } else if (arr[i5].ty === "rp") {
              if (!processedPos) {
                modifier = ShapeModifiers.getModifier(arr[i5].ty);
                itemsData[i5] = modifier;
                modifier.init(this, arr, i5, itemsData);
                this.shapeModifiers.push(modifier);
                render = false;
              } else {
                modifier = itemsData[i5];
                modifier.closed = true;
              }
              ownModifiers.push(modifier);
            }
            this.addProcessedElement(arr[i5], i5 + 1);
          }
          len = ownStyles.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            ownStyles[i5].closed = true;
          }
          len = ownModifiers.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            ownModifiers[i5].closed = true;
          }
        };
        SVGShapeElement.prototype.renderInnerContent = function() {
          this.renderModifiers();
          var i5;
          var len = this.stylesList.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            this.stylesList[i5].reset();
          }
          this.renderShape();
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.stylesList[i5]._mdf || this._isFirstFrame) {
              if (this.stylesList[i5].msElem) {
                this.stylesList[i5].msElem.setAttribute("d", this.stylesList[i5].d);
                this.stylesList[i5].d = "M0 0" + this.stylesList[i5].d;
              }
              this.stylesList[i5].pElem.setAttribute("d", this.stylesList[i5].d || "M0 0");
            }
          }
        };
        SVGShapeElement.prototype.renderShape = function() {
          var i5;
          var len = this.animatedContents.length;
          var animatedContent;
          for (i5 = 0; i5 < len; i5 += 1) {
            animatedContent = this.animatedContents[i5];
            if ((this._isFirstFrame || animatedContent.element._isAnimated) && animatedContent.data !== true) {
              animatedContent.fn(animatedContent.data, animatedContent.element, this._isFirstFrame);
            }
          }
        };
        SVGShapeElement.prototype.destroy = function() {
          this.destroyBaseElement();
          this.shapesData = null;
          this.itemsData = null;
        };
        function LetterProps(o4, sw, sc, fc, m4, p5) {
          this.o = o4;
          this.sw = sw;
          this.sc = sc;
          this.fc = fc;
          this.m = m4;
          this.p = p5;
          this._mdf = {
            o: true,
            sw: !!sw,
            sc: !!sc,
            fc: !!fc,
            m: true,
            p: true
          };
        }
        LetterProps.prototype.update = function(o4, sw, sc, fc, m4, p5) {
          this._mdf.o = false;
          this._mdf.sw = false;
          this._mdf.sc = false;
          this._mdf.fc = false;
          this._mdf.m = false;
          this._mdf.p = false;
          var updated = false;
          if (this.o !== o4) {
            this.o = o4;
            this._mdf.o = true;
            updated = true;
          }
          if (this.sw !== sw) {
            this.sw = sw;
            this._mdf.sw = true;
            updated = true;
          }
          if (this.sc !== sc) {
            this.sc = sc;
            this._mdf.sc = true;
            updated = true;
          }
          if (this.fc !== fc) {
            this.fc = fc;
            this._mdf.fc = true;
            updated = true;
          }
          if (this.m !== m4) {
            this.m = m4;
            this._mdf.m = true;
            updated = true;
          }
          if (p5.length && (this.p[0] !== p5[0] || this.p[1] !== p5[1] || this.p[4] !== p5[4] || this.p[5] !== p5[5] || this.p[12] !== p5[12] || this.p[13] !== p5[13])) {
            this.p = p5;
            this._mdf.p = true;
            updated = true;
          }
          return updated;
        };
        function TextProperty(elem2, data2) {
          this._frameId = initialDefaultFrame;
          this.pv = "";
          this.v = "";
          this.kf = false;
          this._isFirstFrame = true;
          this._mdf = false;
          if (data2.d && data2.d.sid) {
            data2.d = elem2.globalData.slotManager.getProp(data2.d);
          }
          this.data = data2;
          this.elem = elem2;
          this.comp = this.elem.comp;
          this.keysIndex = 0;
          this.canResize = false;
          this.minimumFontSize = 1;
          this.effectsSequence = [];
          this.currentData = {
            ascent: 0,
            boxWidth: this.defaultBoxWidth,
            f: "",
            fStyle: "",
            fWeight: "",
            fc: "",
            j: "",
            justifyOffset: "",
            l: [],
            lh: 0,
            lineWidths: [],
            ls: "",
            of: "",
            s: "",
            sc: "",
            sw: 0,
            t: 0,
            tr: 0,
            sz: 0,
            ps: null,
            fillColorAnim: false,
            strokeColorAnim: false,
            strokeWidthAnim: false,
            yOffset: 0,
            finalSize: 0,
            finalText: [],
            finalLineHeight: 0,
            __complete: false
          };
          this.copyData(this.currentData, this.data.d.k[0].s);
          if (!this.searchProperty()) {
            this.completeTextData(this.currentData);
          }
        }
        TextProperty.prototype.defaultBoxWidth = [0, 0];
        TextProperty.prototype.copyData = function(obj, data2) {
          for (var s4 in data2) {
            if (Object.prototype.hasOwnProperty.call(data2, s4)) {
              obj[s4] = data2[s4];
            }
          }
          return obj;
        };
        TextProperty.prototype.setCurrentData = function(data2) {
          if (!data2.__complete) {
            this.completeTextData(data2);
          }
          this.currentData = data2;
          this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth;
          this._mdf = true;
        };
        TextProperty.prototype.searchProperty = function() {
          return this.searchKeyframes();
        };
        TextProperty.prototype.searchKeyframes = function() {
          this.kf = this.data.d.k.length > 1;
          if (this.kf) {
            this.addEffect(this.getKeyframeValue.bind(this));
          }
          return this.kf;
        };
        TextProperty.prototype.addEffect = function(effectFunction) {
          this.effectsSequence.push(effectFunction);
          this.elem.addDynamicProperty(this);
        };
        TextProperty.prototype.getValue = function(_finalValue) {
          if ((this.elem.globalData.frameId === this.frameId || !this.effectsSequence.length) && !_finalValue) {
            return;
          }
          this.currentData.t = this.data.d.k[this.keysIndex].s.t;
          var currentValue = this.currentData;
          var currentIndex = this.keysIndex;
          if (this.lock) {
            this.setCurrentData(this.currentData);
            return;
          }
          this.lock = true;
          this._mdf = false;
          var i5;
          var len = this.effectsSequence.length;
          var finalValue = _finalValue || this.data.d.k[this.keysIndex].s;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (currentIndex !== this.keysIndex) {
              finalValue = this.effectsSequence[i5](finalValue, finalValue.t);
            } else {
              finalValue = this.effectsSequence[i5](this.currentData, finalValue.t);
            }
          }
          if (currentValue !== finalValue) {
            this.setCurrentData(finalValue);
          }
          this.v = this.currentData;
          this.pv = this.v;
          this.lock = false;
          this.frameId = this.elem.globalData.frameId;
        };
        TextProperty.prototype.getKeyframeValue = function() {
          var textKeys = this.data.d.k;
          var frameNum = this.elem.comp.renderedFrame;
          var i5 = 0;
          var len = textKeys.length;
          while (i5 <= len - 1) {
            if (i5 === len - 1 || textKeys[i5 + 1].t > frameNum) {
              break;
            }
            i5 += 1;
          }
          if (this.keysIndex !== i5) {
            this.keysIndex = i5;
          }
          return this.data.d.k[this.keysIndex].s;
        };
        TextProperty.prototype.buildFinalText = function(text2) {
          var charactersArray = [];
          var i5 = 0;
          var len = text2.length;
          var charCode;
          var secondCharCode;
          var shouldCombine = false;
          var shouldCombineNext = false;
          var currentChars = "";
          while (i5 < len) {
            shouldCombine = shouldCombineNext;
            shouldCombineNext = false;
            charCode = text2.charCodeAt(i5);
            currentChars = text2.charAt(i5);
            if (FontManager.isCombinedCharacter(charCode)) {
              shouldCombine = true;
            } else if (charCode >= 55296 && charCode <= 56319) {
              if (FontManager.isRegionalFlag(text2, i5)) {
                currentChars = text2.substr(i5, 14);
              } else {
                secondCharCode = text2.charCodeAt(i5 + 1);
                if (secondCharCode >= 56320 && secondCharCode <= 57343) {
                  if (FontManager.isModifier(charCode, secondCharCode)) {
                    currentChars = text2.substr(i5, 2);
                    shouldCombine = true;
                  } else if (FontManager.isFlagEmoji(text2.substr(i5, 4))) {
                    currentChars = text2.substr(i5, 4);
                  } else {
                    currentChars = text2.substr(i5, 2);
                  }
                }
              }
            } else if (charCode > 56319) {
              secondCharCode = text2.charCodeAt(i5 + 1);
              if (FontManager.isVariationSelector(charCode)) {
                shouldCombine = true;
              }
            } else if (FontManager.isZeroWidthJoiner(charCode)) {
              shouldCombine = true;
              shouldCombineNext = true;
            }
            if (shouldCombine) {
              charactersArray[charactersArray.length - 1] += currentChars;
              shouldCombine = false;
            } else {
              charactersArray.push(currentChars);
            }
            i5 += currentChars.length;
          }
          return charactersArray;
        };
        TextProperty.prototype.completeTextData = function(documentData) {
          documentData.__complete = true;
          var fontManager = this.elem.globalData.fontManager;
          var data2 = this.data;
          var letters = [];
          var i5;
          var len;
          var newLineFlag;
          var index2 = 0;
          var val2;
          var anchorGrouping = data2.m.g;
          var currentSize = 0;
          var currentPos = 0;
          var currentLine = 0;
          var lineWidths = [];
          var lineWidth = 0;
          var maxLineWidth = 0;
          var j4;
          var jLen;
          var fontData = fontManager.getFontByName(documentData.f);
          var charData;
          var cLength = 0;
          var fontProps = getFontProperties(fontData);
          documentData.fWeight = fontProps.weight;
          documentData.fStyle = fontProps.style;
          documentData.finalSize = documentData.s;
          documentData.finalText = this.buildFinalText(documentData.t);
          len = documentData.finalText.length;
          documentData.finalLineHeight = documentData.lh;
          var trackingOffset = documentData.tr / 1e3 * documentData.finalSize;
          var charCode;
          if (documentData.sz) {
            var flag = true;
            var boxWidth = documentData.sz[0];
            var boxHeight = documentData.sz[1];
            var currentHeight;
            var finalText;
            while (flag) {
              finalText = this.buildFinalText(documentData.t);
              currentHeight = 0;
              lineWidth = 0;
              len = finalText.length;
              trackingOffset = documentData.tr / 1e3 * documentData.finalSize;
              var lastSpaceIndex = -1;
              for (i5 = 0; i5 < len; i5 += 1) {
                charCode = finalText[i5].charCodeAt(0);
                newLineFlag = false;
                if (finalText[i5] === " ") {
                  lastSpaceIndex = i5;
                } else if (charCode === 13 || charCode === 3) {
                  lineWidth = 0;
                  newLineFlag = true;
                  currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
                }
                if (fontManager.chars) {
                  charData = fontManager.getCharData(finalText[i5], fontData.fStyle, fontData.fFamily);
                  cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
                } else {
                  cLength = fontManager.measureText(finalText[i5], documentData.f, documentData.finalSize);
                }
                if (lineWidth + cLength > boxWidth && finalText[i5] !== " ") {
                  if (lastSpaceIndex === -1) {
                    len += 1;
                  } else {
                    i5 = lastSpaceIndex;
                  }
                  currentHeight += documentData.finalLineHeight || documentData.finalSize * 1.2;
                  finalText.splice(i5, lastSpaceIndex === i5 ? 1 : 0, "\r");
                  lastSpaceIndex = -1;
                  lineWidth = 0;
                } else {
                  lineWidth += cLength;
                  lineWidth += trackingOffset;
                }
              }
              currentHeight += fontData.ascent * documentData.finalSize / 100;
              if (this.canResize && documentData.finalSize > this.minimumFontSize && boxHeight < currentHeight) {
                documentData.finalSize -= 1;
                documentData.finalLineHeight = documentData.finalSize * documentData.lh / documentData.s;
              } else {
                documentData.finalText = finalText;
                len = documentData.finalText.length;
                flag = false;
              }
            }
          }
          lineWidth = -trackingOffset;
          cLength = 0;
          var uncollapsedSpaces = 0;
          var currentChar;
          for (i5 = 0; i5 < len; i5 += 1) {
            newLineFlag = false;
            currentChar = documentData.finalText[i5];
            charCode = currentChar.charCodeAt(0);
            if (charCode === 13 || charCode === 3) {
              uncollapsedSpaces = 0;
              lineWidths.push(lineWidth);
              maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
              lineWidth = -2 * trackingOffset;
              val2 = "";
              newLineFlag = true;
              currentLine += 1;
            } else {
              val2 = currentChar;
            }
            if (fontManager.chars) {
              charData = fontManager.getCharData(currentChar, fontData.fStyle, fontManager.getFontByName(documentData.f).fFamily);
              cLength = newLineFlag ? 0 : charData.w * documentData.finalSize / 100;
            } else {
              cLength = fontManager.measureText(val2, documentData.f, documentData.finalSize);
            }
            if (currentChar === " ") {
              uncollapsedSpaces += cLength + trackingOffset;
            } else {
              lineWidth += cLength + trackingOffset + uncollapsedSpaces;
              uncollapsedSpaces = 0;
            }
            letters.push({
              l: cLength,
              an: cLength,
              add: currentSize,
              n: newLineFlag,
              anIndexes: [],
              val: val2,
              line: currentLine,
              animatorJustifyOffset: 0
            });
            if (anchorGrouping == 2) {
              currentSize += cLength;
              if (val2 === "" || val2 === " " || i5 === len - 1) {
                if (val2 === "" || val2 === " ") {
                  currentSize -= cLength;
                }
                while (currentPos <= i5) {
                  letters[currentPos].an = currentSize;
                  letters[currentPos].ind = index2;
                  letters[currentPos].extra = cLength;
                  currentPos += 1;
                }
                index2 += 1;
                currentSize = 0;
              }
            } else if (anchorGrouping == 3) {
              currentSize += cLength;
              if (val2 === "" || i5 === len - 1) {
                if (val2 === "") {
                  currentSize -= cLength;
                }
                while (currentPos <= i5) {
                  letters[currentPos].an = currentSize;
                  letters[currentPos].ind = index2;
                  letters[currentPos].extra = cLength;
                  currentPos += 1;
                }
                currentSize = 0;
                index2 += 1;
              }
            } else {
              letters[index2].ind = index2;
              letters[index2].extra = 0;
              index2 += 1;
            }
          }
          documentData.l = letters;
          maxLineWidth = lineWidth > maxLineWidth ? lineWidth : maxLineWidth;
          lineWidths.push(lineWidth);
          if (documentData.sz) {
            documentData.boxWidth = documentData.sz[0];
            documentData.justifyOffset = 0;
          } else {
            documentData.boxWidth = maxLineWidth;
            switch (documentData.j) {
              case 1:
                documentData.justifyOffset = -documentData.boxWidth;
                break;
              case 2:
                documentData.justifyOffset = -documentData.boxWidth / 2;
                break;
              default:
                documentData.justifyOffset = 0;
            }
          }
          documentData.lineWidths = lineWidths;
          var animators = data2.a;
          var animatorData;
          var letterData;
          jLen = animators.length;
          var based;
          var ind;
          var indexes = [];
          for (j4 = 0; j4 < jLen; j4 += 1) {
            animatorData = animators[j4];
            if (animatorData.a.sc) {
              documentData.strokeColorAnim = true;
            }
            if (animatorData.a.sw) {
              documentData.strokeWidthAnim = true;
            }
            if (animatorData.a.fc || animatorData.a.fh || animatorData.a.fs || animatorData.a.fb) {
              documentData.fillColorAnim = true;
            }
            ind = 0;
            based = animatorData.s.b;
            for (i5 = 0; i5 < len; i5 += 1) {
              letterData = letters[i5];
              letterData.anIndexes[j4] = ind;
              if (based == 1 && letterData.val !== "" || based == 2 && letterData.val !== "" && letterData.val !== " " || based == 3 && (letterData.n || letterData.val == " " || i5 == len - 1) || based == 4 && (letterData.n || i5 == len - 1)) {
                if (animatorData.s.rn === 1) {
                  indexes.push(ind);
                }
                ind += 1;
              }
            }
            data2.a[j4].s.totalChars = ind;
            var currentInd = -1;
            var newInd;
            if (animatorData.s.rn === 1) {
              for (i5 = 0; i5 < len; i5 += 1) {
                letterData = letters[i5];
                if (currentInd != letterData.anIndexes[j4]) {
                  currentInd = letterData.anIndexes[j4];
                  newInd = indexes.splice(Math.floor(Math.random() * indexes.length), 1)[0];
                }
                letterData.anIndexes[j4] = newInd;
              }
            }
          }
          documentData.yOffset = documentData.finalLineHeight || documentData.finalSize * 1.2;
          documentData.ls = documentData.ls || 0;
          documentData.ascent = fontData.ascent * documentData.finalSize / 100;
        };
        TextProperty.prototype.updateDocumentData = function(newData, index2) {
          index2 = index2 === void 0 ? this.keysIndex : index2;
          var dData = this.copyData({}, this.data.d.k[index2].s);
          dData = this.copyData(dData, newData);
          this.data.d.k[index2].s = dData;
          this.recalculate(index2);
          this.setCurrentData(dData);
          this.elem.addDynamicProperty(this);
        };
        TextProperty.prototype.recalculate = function(index2) {
          var dData = this.data.d.k[index2].s;
          dData.__complete = false;
          this.keysIndex = 0;
          this._isFirstFrame = true;
          this.getValue(dData);
        };
        TextProperty.prototype.canResizeFont = function(_canResize) {
          this.canResize = _canResize;
          this.recalculate(this.keysIndex);
          this.elem.addDynamicProperty(this);
        };
        TextProperty.prototype.setMinimumFontSize = function(_fontValue) {
          this.minimumFontSize = Math.floor(_fontValue) || 1;
          this.recalculate(this.keysIndex);
          this.elem.addDynamicProperty(this);
        };
        var TextSelectorProp = (function() {
          var max = Math.max;
          var min = Math.min;
          var floor = Math.floor;
          function TextSelectorPropFactory(elem2, data2) {
            this._currentTextLength = -1;
            this.k = false;
            this.data = data2;
            this.elem = elem2;
            this.comp = elem2.comp;
            this.finalS = 0;
            this.finalE = 0;
            this.initDynamicPropertyContainer(elem2);
            this.s = PropertyFactory.getProp(elem2, data2.s || {
              k: 0
            }, 0, 0, this);
            if ("e" in data2) {
              this.e = PropertyFactory.getProp(elem2, data2.e, 0, 0, this);
            } else {
              this.e = {
                v: 100
              };
            }
            this.o = PropertyFactory.getProp(elem2, data2.o || {
              k: 0
            }, 0, 0, this);
            this.xe = PropertyFactory.getProp(elem2, data2.xe || {
              k: 0
            }, 0, 0, this);
            this.ne = PropertyFactory.getProp(elem2, data2.ne || {
              k: 0
            }, 0, 0, this);
            this.sm = PropertyFactory.getProp(elem2, data2.sm || {
              k: 100
            }, 0, 0, this);
            this.a = PropertyFactory.getProp(elem2, data2.a, 0, 0.01, this);
            if (!this.dynamicProperties.length) {
              this.getValue();
            }
          }
          TextSelectorPropFactory.prototype = {
            getMult: function getMult(ind) {
              if (this._currentTextLength !== this.elem.textProperty.currentData.l.length) {
                this.getValue();
              }
              var x1 = 0;
              var y1 = 0;
              var x22 = 1;
              var y22 = 1;
              if (this.ne.v > 0) {
                x1 = this.ne.v / 100;
              } else {
                y1 = -this.ne.v / 100;
              }
              if (this.xe.v > 0) {
                x22 = 1 - this.xe.v / 100;
              } else {
                y22 = 1 + this.xe.v / 100;
              }
              var easer = BezierFactory.getBezierEasing(x1, y1, x22, y22).get;
              var mult = 0;
              var s4 = this.finalS;
              var e4 = this.finalE;
              var type = this.data.sh;
              if (type === 2) {
                if (e4 === s4) {
                  mult = ind >= e4 ? 1 : 0;
                } else {
                  mult = max(0, min(0.5 / (e4 - s4) + (ind - s4) / (e4 - s4), 1));
                }
                mult = easer(mult);
              } else if (type === 3) {
                if (e4 === s4) {
                  mult = ind >= e4 ? 0 : 1;
                } else {
                  mult = 1 - max(0, min(0.5 / (e4 - s4) + (ind - s4) / (e4 - s4), 1));
                }
                mult = easer(mult);
              } else if (type === 4) {
                if (e4 === s4) {
                  mult = 0;
                } else {
                  mult = max(0, min(0.5 / (e4 - s4) + (ind - s4) / (e4 - s4), 1));
                  if (mult < 0.5) {
                    mult *= 2;
                  } else {
                    mult = 1 - 2 * (mult - 0.5);
                  }
                }
                mult = easer(mult);
              } else if (type === 5) {
                if (e4 === s4) {
                  mult = 0;
                } else {
                  var tot = e4 - s4;
                  ind = min(max(0, ind + 0.5 - s4), e4 - s4);
                  var x3 = -tot / 2 + ind;
                  var a4 = tot / 2;
                  mult = Math.sqrt(1 - x3 * x3 / (a4 * a4));
                }
                mult = easer(mult);
              } else if (type === 6) {
                if (e4 === s4) {
                  mult = 0;
                } else {
                  ind = min(max(0, ind + 0.5 - s4), e4 - s4);
                  mult = (1 + Math.cos(Math.PI + Math.PI * 2 * ind / (e4 - s4))) / 2;
                }
                mult = easer(mult);
              } else {
                if (ind >= floor(s4)) {
                  if (ind - s4 < 0) {
                    mult = max(0, min(min(e4, 1) - (s4 - ind), 1));
                  } else {
                    mult = max(0, min(e4 - ind, 1));
                  }
                }
                mult = easer(mult);
              }
              if (this.sm.v !== 100) {
                var smoothness = this.sm.v * 0.01;
                if (smoothness === 0) {
                  smoothness = 1e-8;
                }
                var threshold = 0.5 - smoothness * 0.5;
                if (mult < threshold) {
                  mult = 0;
                } else {
                  mult = (mult - threshold) / smoothness;
                  if (mult > 1) {
                    mult = 1;
                  }
                }
              }
              return mult * this.a.v;
            },
            getValue: function getValue(newCharsFlag) {
              this.iterateDynamicProperties();
              this._mdf = newCharsFlag || this._mdf;
              this._currentTextLength = this.elem.textProperty.currentData.l.length || 0;
              if (newCharsFlag && this.data.r === 2) {
                this.e.v = this._currentTextLength;
              }
              var divisor = this.data.r === 2 ? 1 : 100 / this.data.totalChars;
              var o4 = this.o.v / divisor;
              var s4 = this.s.v / divisor + o4;
              var e4 = this.e.v / divisor + o4;
              if (s4 > e4) {
                var _s = s4;
                s4 = e4;
                e4 = _s;
              }
              this.finalS = s4;
              this.finalE = e4;
            }
          };
          extendPrototype([DynamicPropertyContainer], TextSelectorPropFactory);
          function getTextSelectorProp(elem2, data2, arr) {
            return new TextSelectorPropFactory(elem2, data2, arr);
          }
          return {
            getTextSelectorProp
          };
        })();
        function TextAnimatorDataProperty(elem2, animatorProps, container) {
          var defaultData = {
            propType: false
          };
          var getProp = PropertyFactory.getProp;
          var textAnimatorAnimatables = animatorProps.a;
          this.a = {
            r: textAnimatorAnimatables.r ? getProp(elem2, textAnimatorAnimatables.r, 0, degToRads, container) : defaultData,
            rx: textAnimatorAnimatables.rx ? getProp(elem2, textAnimatorAnimatables.rx, 0, degToRads, container) : defaultData,
            ry: textAnimatorAnimatables.ry ? getProp(elem2, textAnimatorAnimatables.ry, 0, degToRads, container) : defaultData,
            sk: textAnimatorAnimatables.sk ? getProp(elem2, textAnimatorAnimatables.sk, 0, degToRads, container) : defaultData,
            sa: textAnimatorAnimatables.sa ? getProp(elem2, textAnimatorAnimatables.sa, 0, degToRads, container) : defaultData,
            s: textAnimatorAnimatables.s ? getProp(elem2, textAnimatorAnimatables.s, 1, 0.01, container) : defaultData,
            a: textAnimatorAnimatables.a ? getProp(elem2, textAnimatorAnimatables.a, 1, 0, container) : defaultData,
            o: textAnimatorAnimatables.o ? getProp(elem2, textAnimatorAnimatables.o, 0, 0.01, container) : defaultData,
            p: textAnimatorAnimatables.p ? getProp(elem2, textAnimatorAnimatables.p, 1, 0, container) : defaultData,
            sw: textAnimatorAnimatables.sw ? getProp(elem2, textAnimatorAnimatables.sw, 0, 0, container) : defaultData,
            sc: textAnimatorAnimatables.sc ? getProp(elem2, textAnimatorAnimatables.sc, 1, 0, container) : defaultData,
            fc: textAnimatorAnimatables.fc ? getProp(elem2, textAnimatorAnimatables.fc, 1, 0, container) : defaultData,
            fh: textAnimatorAnimatables.fh ? getProp(elem2, textAnimatorAnimatables.fh, 0, 0, container) : defaultData,
            fs: textAnimatorAnimatables.fs ? getProp(elem2, textAnimatorAnimatables.fs, 0, 0.01, container) : defaultData,
            fb: textAnimatorAnimatables.fb ? getProp(elem2, textAnimatorAnimatables.fb, 0, 0.01, container) : defaultData,
            t: textAnimatorAnimatables.t ? getProp(elem2, textAnimatorAnimatables.t, 0, 0, container) : defaultData
          };
          this.s = TextSelectorProp.getTextSelectorProp(elem2, animatorProps.s, container);
          this.s.t = animatorProps.s.t;
        }
        function TextAnimatorProperty(textData, renderType, elem2) {
          this._isFirstFrame = true;
          this._hasMaskedPath = false;
          this._frameId = -1;
          this._textData = textData;
          this._renderType = renderType;
          this._elem = elem2;
          this._animatorsData = createSizedArray(this._textData.a.length);
          this._pathData = {};
          this._moreOptions = {
            alignment: {}
          };
          this.renderedLetters = [];
          this.lettersChangedFlag = false;
          this.initDynamicPropertyContainer(elem2);
        }
        TextAnimatorProperty.prototype.searchProperties = function() {
          var i5;
          var len = this._textData.a.length;
          var animatorProps;
          var getProp = PropertyFactory.getProp;
          for (i5 = 0; i5 < len; i5 += 1) {
            animatorProps = this._textData.a[i5];
            this._animatorsData[i5] = new TextAnimatorDataProperty(this._elem, animatorProps, this);
          }
          if (this._textData.p && "m" in this._textData.p) {
            this._pathData = {
              a: getProp(this._elem, this._textData.p.a, 0, 0, this),
              f: getProp(this._elem, this._textData.p.f, 0, 0, this),
              l: getProp(this._elem, this._textData.p.l, 0, 0, this),
              r: getProp(this._elem, this._textData.p.r, 0, 0, this),
              p: getProp(this._elem, this._textData.p.p, 0, 0, this),
              m: this._elem.maskManager.getMaskProperty(this._textData.p.m)
            };
            this._hasMaskedPath = true;
          } else {
            this._hasMaskedPath = false;
          }
          this._moreOptions.alignment = getProp(this._elem, this._textData.m.a, 1, 0, this);
        };
        TextAnimatorProperty.prototype.getMeasures = function(documentData, lettersChangedFlag) {
          this.lettersChangedFlag = lettersChangedFlag;
          if (!this._mdf && !this._isFirstFrame && !lettersChangedFlag && (!this._hasMaskedPath || !this._pathData.m._mdf)) {
            return;
          }
          this._isFirstFrame = false;
          var alignment = this._moreOptions.alignment.v;
          var animators = this._animatorsData;
          var textData = this._textData;
          var matrixHelper = this.mHelper;
          var renderType = this._renderType;
          var renderedLettersCount = this.renderedLetters.length;
          var xPos;
          var yPos;
          var i5;
          var len;
          var letters = documentData.l;
          var pathInfo;
          var currentLength;
          var currentPoint;
          var segmentLength;
          var flag;
          var pointInd;
          var segmentInd;
          var prevPoint;
          var points;
          var segments;
          var partialLength;
          var totalLength;
          var perc;
          var tanAngle;
          var mask2;
          if (this._hasMaskedPath) {
            mask2 = this._pathData.m;
            if (!this._pathData.n || this._pathData._mdf) {
              var paths = mask2.v;
              if (this._pathData.r.v) {
                paths = paths.reverse();
              }
              pathInfo = {
                tLength: 0,
                segments: []
              };
              len = paths._length - 1;
              var bezierData;
              totalLength = 0;
              for (i5 = 0; i5 < len; i5 += 1) {
                bezierData = bez.buildBezierData(paths.v[i5], paths.v[i5 + 1], [paths.o[i5][0] - paths.v[i5][0], paths.o[i5][1] - paths.v[i5][1]], [paths.i[i5 + 1][0] - paths.v[i5 + 1][0], paths.i[i5 + 1][1] - paths.v[i5 + 1][1]]);
                pathInfo.tLength += bezierData.segmentLength;
                pathInfo.segments.push(bezierData);
                totalLength += bezierData.segmentLength;
              }
              i5 = len;
              if (mask2.v.c) {
                bezierData = bez.buildBezierData(paths.v[i5], paths.v[0], [paths.o[i5][0] - paths.v[i5][0], paths.o[i5][1] - paths.v[i5][1]], [paths.i[0][0] - paths.v[0][0], paths.i[0][1] - paths.v[0][1]]);
                pathInfo.tLength += bezierData.segmentLength;
                pathInfo.segments.push(bezierData);
                totalLength += bezierData.segmentLength;
              }
              this._pathData.pi = pathInfo;
            }
            pathInfo = this._pathData.pi;
            currentLength = this._pathData.f.v;
            segmentInd = 0;
            pointInd = 1;
            segmentLength = 0;
            flag = true;
            segments = pathInfo.segments;
            if (currentLength < 0 && mask2.v.c) {
              if (pathInfo.tLength < Math.abs(currentLength)) {
                currentLength = -Math.abs(currentLength) % pathInfo.tLength;
              }
              segmentInd = segments.length - 1;
              points = segments[segmentInd].points;
              pointInd = points.length - 1;
              while (currentLength < 0) {
                currentLength += points[pointInd].partialLength;
                pointInd -= 1;
                if (pointInd < 0) {
                  segmentInd -= 1;
                  points = segments[segmentInd].points;
                  pointInd = points.length - 1;
                }
              }
            }
            points = segments[segmentInd].points;
            prevPoint = points[pointInd - 1];
            currentPoint = points[pointInd];
            partialLength = currentPoint.partialLength;
          }
          len = letters.length;
          xPos = 0;
          yPos = 0;
          var yOff = documentData.finalSize * 1.2 * 0.714;
          var firstLine = true;
          var animatorProps;
          var animatorSelector;
          var j4;
          var jLen;
          var letterValue;
          jLen = animators.length;
          var mult;
          var ind = -1;
          var offf;
          var xPathPos;
          var yPathPos;
          var initPathPos = currentLength;
          var initSegmentInd = segmentInd;
          var initPointInd = pointInd;
          var currentLine = -1;
          var elemOpacity;
          var sc;
          var sw;
          var fc;
          var k4;
          var letterSw;
          var letterSc;
          var letterFc;
          var letterM = "";
          var letterP = this.defaultPropsArray;
          var letterO;
          if (documentData.j === 2 || documentData.j === 1) {
            var animatorJustifyOffset = 0;
            var animatorFirstCharOffset = 0;
            var justifyOffsetMult = documentData.j === 2 ? -0.5 : -1;
            var lastIndex = 0;
            var isNewLine = true;
            for (i5 = 0; i5 < len; i5 += 1) {
              if (letters[i5].n) {
                if (animatorJustifyOffset) {
                  animatorJustifyOffset += animatorFirstCharOffset;
                }
                while (lastIndex < i5) {
                  letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
                  lastIndex += 1;
                }
                animatorJustifyOffset = 0;
                isNewLine = true;
              } else {
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  animatorProps = animators[j4].a;
                  if (animatorProps.t.propType) {
                    if (isNewLine && documentData.j === 2) {
                      animatorFirstCharOffset += animatorProps.t.v * justifyOffsetMult;
                    }
                    animatorSelector = animators[j4].s;
                    mult = animatorSelector.getMult(letters[i5].anIndexes[j4], textData.a[j4].s.totalChars);
                    if (mult.length) {
                      animatorJustifyOffset += animatorProps.t.v * mult[0] * justifyOffsetMult;
                    } else {
                      animatorJustifyOffset += animatorProps.t.v * mult * justifyOffsetMult;
                    }
                  }
                }
                isNewLine = false;
              }
            }
            if (animatorJustifyOffset) {
              animatorJustifyOffset += animatorFirstCharOffset;
            }
            while (lastIndex < i5) {
              letters[lastIndex].animatorJustifyOffset = animatorJustifyOffset;
              lastIndex += 1;
            }
          }
          for (i5 = 0; i5 < len; i5 += 1) {
            matrixHelper.reset();
            elemOpacity = 1;
            if (letters[i5].n) {
              xPos = 0;
              yPos += documentData.yOffset;
              yPos += firstLine ? 1 : 0;
              currentLength = initPathPos;
              firstLine = false;
              if (this._hasMaskedPath) {
                segmentInd = initSegmentInd;
                pointInd = initPointInd;
                points = segments[segmentInd].points;
                prevPoint = points[pointInd - 1];
                currentPoint = points[pointInd];
                partialLength = currentPoint.partialLength;
                segmentLength = 0;
              }
              letterM = "";
              letterFc = "";
              letterSw = "";
              letterO = "";
              letterP = this.defaultPropsArray;
            } else {
              if (this._hasMaskedPath) {
                if (currentLine !== letters[i5].line) {
                  switch (documentData.j) {
                    case 1:
                      currentLength += totalLength - documentData.lineWidths[letters[i5].line];
                      break;
                    case 2:
                      currentLength += (totalLength - documentData.lineWidths[letters[i5].line]) / 2;
                      break;
                    default:
                      break;
                  }
                  currentLine = letters[i5].line;
                }
                if (ind !== letters[i5].ind) {
                  if (letters[ind]) {
                    currentLength += letters[ind].extra;
                  }
                  currentLength += letters[i5].an / 2;
                  ind = letters[i5].ind;
                }
                currentLength += alignment[0] * letters[i5].an * 5e-3;
                var animatorOffset = 0;
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  animatorProps = animators[j4].a;
                  if (animatorProps.p.propType) {
                    animatorSelector = animators[j4].s;
                    mult = animatorSelector.getMult(letters[i5].anIndexes[j4], textData.a[j4].s.totalChars);
                    if (mult.length) {
                      animatorOffset += animatorProps.p.v[0] * mult[0];
                    } else {
                      animatorOffset += animatorProps.p.v[0] * mult;
                    }
                  }
                  if (animatorProps.a.propType) {
                    animatorSelector = animators[j4].s;
                    mult = animatorSelector.getMult(letters[i5].anIndexes[j4], textData.a[j4].s.totalChars);
                    if (mult.length) {
                      animatorOffset += animatorProps.a.v[0] * mult[0];
                    } else {
                      animatorOffset += animatorProps.a.v[0] * mult;
                    }
                  }
                }
                flag = true;
                if (this._pathData.a.v) {
                  currentLength = letters[0].an * 0.5 + (totalLength - this._pathData.f.v - letters[0].an * 0.5 - letters[letters.length - 1].an * 0.5) * ind / (len - 1);
                  currentLength += this._pathData.f.v;
                }
                while (flag) {
                  if (segmentLength + partialLength >= currentLength + animatorOffset || !points) {
                    perc = (currentLength + animatorOffset - segmentLength) / currentPoint.partialLength;
                    xPathPos = prevPoint.point[0] + (currentPoint.point[0] - prevPoint.point[0]) * perc;
                    yPathPos = prevPoint.point[1] + (currentPoint.point[1] - prevPoint.point[1]) * perc;
                    matrixHelper.translate(-alignment[0] * letters[i5].an * 5e-3, -(alignment[1] * yOff) * 0.01);
                    flag = false;
                  } else if (points) {
                    segmentLength += currentPoint.partialLength;
                    pointInd += 1;
                    if (pointInd >= points.length) {
                      pointInd = 0;
                      segmentInd += 1;
                      if (!segments[segmentInd]) {
                        if (mask2.v.c) {
                          pointInd = 0;
                          segmentInd = 0;
                          points = segments[segmentInd].points;
                        } else {
                          segmentLength -= currentPoint.partialLength;
                          points = null;
                        }
                      } else {
                        points = segments[segmentInd].points;
                      }
                    }
                    if (points) {
                      prevPoint = currentPoint;
                      currentPoint = points[pointInd];
                      partialLength = currentPoint.partialLength;
                    }
                  }
                }
                offf = letters[i5].an / 2 - letters[i5].add;
                matrixHelper.translate(-offf, 0, 0);
              } else {
                offf = letters[i5].an / 2 - letters[i5].add;
                matrixHelper.translate(-offf, 0, 0);
                matrixHelper.translate(-alignment[0] * letters[i5].an * 5e-3, -alignment[1] * yOff * 0.01, 0);
              }
              for (j4 = 0; j4 < jLen; j4 += 1) {
                animatorProps = animators[j4].a;
                if (animatorProps.t.propType) {
                  animatorSelector = animators[j4].s;
                  mult = animatorSelector.getMult(letters[i5].anIndexes[j4], textData.a[j4].s.totalChars);
                  if (xPos !== 0 || documentData.j !== 0) {
                    if (this._hasMaskedPath) {
                      if (mult.length) {
                        currentLength += animatorProps.t.v * mult[0];
                      } else {
                        currentLength += animatorProps.t.v * mult;
                      }
                    } else if (mult.length) {
                      xPos += animatorProps.t.v * mult[0];
                    } else {
                      xPos += animatorProps.t.v * mult;
                    }
                  }
                }
              }
              if (documentData.strokeWidthAnim) {
                sw = documentData.sw || 0;
              }
              if (documentData.strokeColorAnim) {
                if (documentData.sc) {
                  sc = [documentData.sc[0], documentData.sc[1], documentData.sc[2]];
                } else {
                  sc = [0, 0, 0];
                }
              }
              if (documentData.fillColorAnim && documentData.fc) {
                fc = [documentData.fc[0], documentData.fc[1], documentData.fc[2]];
              }
              for (j4 = 0; j4 < jLen; j4 += 1) {
                animatorProps = animators[j4].a;
                if (animatorProps.a.propType) {
                  animatorSelector = animators[j4].s;
                  mult = animatorSelector.getMult(letters[i5].anIndexes[j4], textData.a[j4].s.totalChars);
                  if (mult.length) {
                    matrixHelper.translate(-animatorProps.a.v[0] * mult[0], -animatorProps.a.v[1] * mult[1], animatorProps.a.v[2] * mult[2]);
                  } else {
                    matrixHelper.translate(-animatorProps.a.v[0] * mult, -animatorProps.a.v[1] * mult, animatorProps.a.v[2] * mult);
                  }
                }
              }
              for (j4 = 0; j4 < jLen; j4 += 1) {
                animatorProps = animators[j4].a;
                if (animatorProps.s.propType) {
                  animatorSelector = animators[j4].s;
                  mult = animatorSelector.getMult(letters[i5].anIndexes[j4], textData.a[j4].s.totalChars);
                  if (mult.length) {
                    matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult[0], 1 + (animatorProps.s.v[1] - 1) * mult[1], 1);
                  } else {
                    matrixHelper.scale(1 + (animatorProps.s.v[0] - 1) * mult, 1 + (animatorProps.s.v[1] - 1) * mult, 1);
                  }
                }
              }
              for (j4 = 0; j4 < jLen; j4 += 1) {
                animatorProps = animators[j4].a;
                animatorSelector = animators[j4].s;
                mult = animatorSelector.getMult(letters[i5].anIndexes[j4], textData.a[j4].s.totalChars);
                if (animatorProps.sk.propType) {
                  if (mult.length) {
                    matrixHelper.skewFromAxis(-animatorProps.sk.v * mult[0], animatorProps.sa.v * mult[1]);
                  } else {
                    matrixHelper.skewFromAxis(-animatorProps.sk.v * mult, animatorProps.sa.v * mult);
                  }
                }
                if (animatorProps.r.propType) {
                  if (mult.length) {
                    matrixHelper.rotateZ(-animatorProps.r.v * mult[2]);
                  } else {
                    matrixHelper.rotateZ(-animatorProps.r.v * mult);
                  }
                }
                if (animatorProps.ry.propType) {
                  if (mult.length) {
                    matrixHelper.rotateY(animatorProps.ry.v * mult[1]);
                  } else {
                    matrixHelper.rotateY(animatorProps.ry.v * mult);
                  }
                }
                if (animatorProps.rx.propType) {
                  if (mult.length) {
                    matrixHelper.rotateX(animatorProps.rx.v * mult[0]);
                  } else {
                    matrixHelper.rotateX(animatorProps.rx.v * mult);
                  }
                }
                if (animatorProps.o.propType) {
                  if (mult.length) {
                    elemOpacity += (animatorProps.o.v * mult[0] - elemOpacity) * mult[0];
                  } else {
                    elemOpacity += (animatorProps.o.v * mult - elemOpacity) * mult;
                  }
                }
                if (documentData.strokeWidthAnim && animatorProps.sw.propType) {
                  if (mult.length) {
                    sw += animatorProps.sw.v * mult[0];
                  } else {
                    sw += animatorProps.sw.v * mult;
                  }
                }
                if (documentData.strokeColorAnim && animatorProps.sc.propType) {
                  for (k4 = 0; k4 < 3; k4 += 1) {
                    if (mult.length) {
                      sc[k4] += (animatorProps.sc.v[k4] - sc[k4]) * mult[0];
                    } else {
                      sc[k4] += (animatorProps.sc.v[k4] - sc[k4]) * mult;
                    }
                  }
                }
                if (documentData.fillColorAnim && documentData.fc) {
                  if (animatorProps.fc.propType) {
                    for (k4 = 0; k4 < 3; k4 += 1) {
                      if (mult.length) {
                        fc[k4] += (animatorProps.fc.v[k4] - fc[k4]) * mult[0];
                      } else {
                        fc[k4] += (animatorProps.fc.v[k4] - fc[k4]) * mult;
                      }
                    }
                  }
                  if (animatorProps.fh.propType) {
                    if (mult.length) {
                      fc = addHueToRGB(fc, animatorProps.fh.v * mult[0]);
                    } else {
                      fc = addHueToRGB(fc, animatorProps.fh.v * mult);
                    }
                  }
                  if (animatorProps.fs.propType) {
                    if (mult.length) {
                      fc = addSaturationToRGB(fc, animatorProps.fs.v * mult[0]);
                    } else {
                      fc = addSaturationToRGB(fc, animatorProps.fs.v * mult);
                    }
                  }
                  if (animatorProps.fb.propType) {
                    if (mult.length) {
                      fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult[0]);
                    } else {
                      fc = addBrightnessToRGB(fc, animatorProps.fb.v * mult);
                    }
                  }
                }
              }
              for (j4 = 0; j4 < jLen; j4 += 1) {
                animatorProps = animators[j4].a;
                if (animatorProps.p.propType) {
                  animatorSelector = animators[j4].s;
                  mult = animatorSelector.getMult(letters[i5].anIndexes[j4], textData.a[j4].s.totalChars);
                  if (this._hasMaskedPath) {
                    if (mult.length) {
                      matrixHelper.translate(0, animatorProps.p.v[1] * mult[0], -animatorProps.p.v[2] * mult[1]);
                    } else {
                      matrixHelper.translate(0, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                    }
                  } else if (mult.length) {
                    matrixHelper.translate(animatorProps.p.v[0] * mult[0], animatorProps.p.v[1] * mult[1], -animatorProps.p.v[2] * mult[2]);
                  } else {
                    matrixHelper.translate(animatorProps.p.v[0] * mult, animatorProps.p.v[1] * mult, -animatorProps.p.v[2] * mult);
                  }
                }
              }
              if (documentData.strokeWidthAnim) {
                letterSw = sw < 0 ? 0 : sw;
              }
              if (documentData.strokeColorAnim) {
                letterSc = "rgb(" + Math.round(sc[0] * 255) + "," + Math.round(sc[1] * 255) + "," + Math.round(sc[2] * 255) + ")";
              }
              if (documentData.fillColorAnim && documentData.fc) {
                letterFc = "rgb(" + Math.round(fc[0] * 255) + "," + Math.round(fc[1] * 255) + "," + Math.round(fc[2] * 255) + ")";
              }
              if (this._hasMaskedPath) {
                matrixHelper.translate(0, -documentData.ls);
                matrixHelper.translate(0, alignment[1] * yOff * 0.01 + yPos, 0);
                if (this._pathData.p.v) {
                  tanAngle = (currentPoint.point[1] - prevPoint.point[1]) / (currentPoint.point[0] - prevPoint.point[0]);
                  var rot = Math.atan(tanAngle) * 180 / Math.PI;
                  if (currentPoint.point[0] < prevPoint.point[0]) {
                    rot += 180;
                  }
                  matrixHelper.rotate(-rot * Math.PI / 180);
                }
                matrixHelper.translate(xPathPos, yPathPos, 0);
                currentLength -= alignment[0] * letters[i5].an * 5e-3;
                if (letters[i5 + 1] && ind !== letters[i5 + 1].ind) {
                  currentLength += letters[i5].an / 2;
                  currentLength += documentData.tr * 1e-3 * documentData.finalSize;
                }
              } else {
                matrixHelper.translate(xPos, yPos, 0);
                if (documentData.ps) {
                  matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
                }
                switch (documentData.j) {
                  case 1:
                    matrixHelper.translate(letters[i5].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i5].line]), 0, 0);
                    break;
                  case 2:
                    matrixHelper.translate(letters[i5].animatorJustifyOffset + documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[letters[i5].line]) / 2, 0, 0);
                    break;
                  default:
                    break;
                }
                matrixHelper.translate(0, -documentData.ls);
                matrixHelper.translate(offf, 0, 0);
                matrixHelper.translate(alignment[0] * letters[i5].an * 5e-3, alignment[1] * yOff * 0.01, 0);
                xPos += letters[i5].l + documentData.tr * 1e-3 * documentData.finalSize;
              }
              if (renderType === "html") {
                letterM = matrixHelper.toCSS();
              } else if (renderType === "svg") {
                letterM = matrixHelper.to2dCSS();
              } else {
                letterP = [matrixHelper.props[0], matrixHelper.props[1], matrixHelper.props[2], matrixHelper.props[3], matrixHelper.props[4], matrixHelper.props[5], matrixHelper.props[6], matrixHelper.props[7], matrixHelper.props[8], matrixHelper.props[9], matrixHelper.props[10], matrixHelper.props[11], matrixHelper.props[12], matrixHelper.props[13], matrixHelper.props[14], matrixHelper.props[15]];
              }
              letterO = elemOpacity;
            }
            if (renderedLettersCount <= i5) {
              letterValue = new LetterProps(letterO, letterSw, letterSc, letterFc, letterM, letterP);
              this.renderedLetters.push(letterValue);
              renderedLettersCount += 1;
              this.lettersChangedFlag = true;
            } else {
              letterValue = this.renderedLetters[i5];
              this.lettersChangedFlag = letterValue.update(letterO, letterSw, letterSc, letterFc, letterM, letterP) || this.lettersChangedFlag;
            }
          }
        };
        TextAnimatorProperty.prototype.getValue = function() {
          if (this._elem.globalData.frameId === this._frameId) {
            return;
          }
          this._frameId = this._elem.globalData.frameId;
          this.iterateDynamicProperties();
        };
        TextAnimatorProperty.prototype.mHelper = new Matrix();
        TextAnimatorProperty.prototype.defaultPropsArray = [];
        extendPrototype([DynamicPropertyContainer], TextAnimatorProperty);
        function ITextElement() {
        }
        ITextElement.prototype.initElement = function(data2, globalData2, comp2) {
          this.lettersChangedFlag = true;
          this.initFrame();
          this.initBaseData(data2, globalData2, comp2);
          this.textProperty = new TextProperty(this, data2.t, this.dynamicProperties);
          this.textAnimator = new TextAnimatorProperty(data2.t, this.renderType, this);
          this.initTransform(data2, globalData2, comp2);
          this.initHierarchy();
          this.initRenderable();
          this.initRendererElement();
          this.createContainerElements();
          this.createRenderableComponents();
          this.createContent();
          this.hide();
          this.textAnimator.searchProperties(this.dynamicProperties);
        };
        ITextElement.prototype.prepareFrame = function(num) {
          this._mdf = false;
          this.prepareRenderableFrame(num);
          this.prepareProperties(num, this.isInRange);
        };
        ITextElement.prototype.createPathShape = function(matrixHelper, shapes) {
          var j4;
          var jLen = shapes.length;
          var pathNodes;
          var shapeStr = "";
          for (j4 = 0; j4 < jLen; j4 += 1) {
            if (shapes[j4].ty === "sh") {
              pathNodes = shapes[j4].ks.k;
              shapeStr += buildShapeString(pathNodes, pathNodes.i.length, true, matrixHelper);
            }
          }
          return shapeStr;
        };
        ITextElement.prototype.updateDocumentData = function(newData, index2) {
          this.textProperty.updateDocumentData(newData, index2);
        };
        ITextElement.prototype.canResizeFont = function(_canResize) {
          this.textProperty.canResizeFont(_canResize);
        };
        ITextElement.prototype.setMinimumFontSize = function(_fontSize) {
          this.textProperty.setMinimumFontSize(_fontSize);
        };
        ITextElement.prototype.applyTextPropertiesToMatrix = function(documentData, matrixHelper, lineNumber, xPos, yPos) {
          if (documentData.ps) {
            matrixHelper.translate(documentData.ps[0], documentData.ps[1] + documentData.ascent, 0);
          }
          matrixHelper.translate(0, -documentData.ls, 0);
          switch (documentData.j) {
            case 1:
              matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]), 0, 0);
              break;
            case 2:
              matrixHelper.translate(documentData.justifyOffset + (documentData.boxWidth - documentData.lineWidths[lineNumber]) / 2, 0, 0);
              break;
            default:
              break;
          }
          matrixHelper.translate(xPos, yPos, 0);
        };
        ITextElement.prototype.buildColor = function(colorData) {
          return "rgb(" + Math.round(colorData[0] * 255) + "," + Math.round(colorData[1] * 255) + "," + Math.round(colorData[2] * 255) + ")";
        };
        ITextElement.prototype.emptyProp = new LetterProps();
        ITextElement.prototype.destroy = function() {
        };
        ITextElement.prototype.validateText = function() {
          if (this.textProperty._mdf || this.textProperty._isFirstFrame) {
            this.buildNewText();
            this.textProperty._isFirstFrame = false;
            this.textProperty._mdf = false;
          }
        };
        var emptyShapeData = {
          shapes: []
        };
        function SVGTextLottieElement(data2, globalData2, comp2) {
          this.textSpans = [];
          this.renderType = "svg";
          this.initElement(data2, globalData2, comp2);
        }
        extendPrototype([BaseElement, TransformElement, SVGBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], SVGTextLottieElement);
        SVGTextLottieElement.prototype.createContent = function() {
          if (this.data.singleShape && !this.globalData.fontManager.chars) {
            this.textContainer = createNS("text");
          }
        };
        SVGTextLottieElement.prototype.buildTextContents = function(textArray) {
          var i5 = 0;
          var len = textArray.length;
          var textContents = [];
          var currentTextContent = "";
          while (i5 < len) {
            if (textArray[i5] === String.fromCharCode(13) || textArray[i5] === String.fromCharCode(3)) {
              textContents.push(currentTextContent);
              currentTextContent = "";
            } else {
              currentTextContent += textArray[i5];
            }
            i5 += 1;
          }
          textContents.push(currentTextContent);
          return textContents;
        };
        SVGTextLottieElement.prototype.buildShapeData = function(data2, scale2) {
          if (data2.shapes && data2.shapes.length) {
            var shape = data2.shapes[0];
            if (shape.it) {
              var shapeItem = shape.it[shape.it.length - 1];
              if (shapeItem.s) {
                shapeItem.s.k[0] = scale2;
                shapeItem.s.k[1] = scale2;
              }
            }
          }
          return data2;
        };
        SVGTextLottieElement.prototype.buildNewText = function() {
          this.addDynamicProperty(this);
          var i5;
          var len;
          var documentData = this.textProperty.currentData;
          this.renderedLetters = createSizedArray(documentData ? documentData.l.length : 0);
          if (documentData.fc) {
            this.layerElement.setAttribute("fill", this.buildColor(documentData.fc));
          } else {
            this.layerElement.setAttribute("fill", "rgba(0,0,0,0)");
          }
          if (documentData.sc) {
            this.layerElement.setAttribute("stroke", this.buildColor(documentData.sc));
            this.layerElement.setAttribute("stroke-width", documentData.sw);
          }
          this.layerElement.setAttribute("font-size", documentData.finalSize);
          var fontData = this.globalData.fontManager.getFontByName(documentData.f);
          if (fontData.fClass) {
            this.layerElement.setAttribute("class", fontData.fClass);
          } else {
            this.layerElement.setAttribute("font-family", fontData.fFamily);
            var fWeight = documentData.fWeight;
            var fStyle = documentData.fStyle;
            this.layerElement.setAttribute("font-style", fStyle);
            this.layerElement.setAttribute("font-weight", fWeight);
          }
          this.layerElement.setAttribute("aria-label", documentData.t);
          var letters = documentData.l || [];
          var usesGlyphs = !!this.globalData.fontManager.chars;
          len = letters.length;
          var tSpan;
          var matrixHelper = this.mHelper;
          var shapeStr = "";
          var singleShape = this.data.singleShape;
          var xPos = 0;
          var yPos = 0;
          var firstLine = true;
          var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
          if (singleShape && !usesGlyphs && !documentData.sz) {
            var tElement = this.textContainer;
            var justify = "start";
            switch (documentData.j) {
              case 1:
                justify = "end";
                break;
              case 2:
                justify = "middle";
                break;
              default:
                justify = "start";
                break;
            }
            tElement.setAttribute("text-anchor", justify);
            tElement.setAttribute("letter-spacing", trackingOffset);
            var textContent = this.buildTextContents(documentData.finalText);
            len = textContent.length;
            yPos = documentData.ps ? documentData.ps[1] + documentData.ascent : 0;
            for (i5 = 0; i5 < len; i5 += 1) {
              tSpan = this.textSpans[i5].span || createNS("tspan");
              tSpan.textContent = textContent[i5];
              tSpan.setAttribute("x", 0);
              tSpan.setAttribute("y", yPos);
              tSpan.style.display = "inherit";
              tElement.appendChild(tSpan);
              if (!this.textSpans[i5]) {
                this.textSpans[i5] = {
                  span: null,
                  glyph: null
                };
              }
              this.textSpans[i5].span = tSpan;
              yPos += documentData.finalLineHeight;
            }
            this.layerElement.appendChild(tElement);
          } else {
            var cachedSpansLength = this.textSpans.length;
            var charData;
            for (i5 = 0; i5 < len; i5 += 1) {
              if (!this.textSpans[i5]) {
                this.textSpans[i5] = {
                  span: null,
                  childSpan: null,
                  glyph: null
                };
              }
              if (!usesGlyphs || !singleShape || i5 === 0) {
                tSpan = cachedSpansLength > i5 ? this.textSpans[i5].span : createNS(usesGlyphs ? "g" : "text");
                if (cachedSpansLength <= i5) {
                  tSpan.setAttribute("stroke-linecap", "butt");
                  tSpan.setAttribute("stroke-linejoin", "round");
                  tSpan.setAttribute("stroke-miterlimit", "4");
                  this.textSpans[i5].span = tSpan;
                  if (usesGlyphs) {
                    var childSpan = createNS("g");
                    tSpan.appendChild(childSpan);
                    this.textSpans[i5].childSpan = childSpan;
                  }
                  this.textSpans[i5].span = tSpan;
                  this.layerElement.appendChild(tSpan);
                }
                tSpan.style.display = "inherit";
              }
              matrixHelper.reset();
              if (singleShape) {
                if (letters[i5].n) {
                  xPos = -trackingOffset;
                  yPos += documentData.yOffset;
                  yPos += firstLine ? 1 : 0;
                  firstLine = false;
                }
                this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i5].line, xPos, yPos);
                xPos += letters[i5].l || 0;
                xPos += trackingOffset;
              }
              if (usesGlyphs) {
                charData = this.globalData.fontManager.getCharData(documentData.finalText[i5], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
                var glyphElement;
                if (charData.t === 1) {
                  glyphElement = new SVGCompElement(charData.data, this.globalData, this);
                } else {
                  var data2 = emptyShapeData;
                  if (charData.data && charData.data.shapes) {
                    data2 = this.buildShapeData(charData.data, documentData.finalSize);
                  }
                  glyphElement = new SVGShapeElement(data2, this.globalData, this);
                }
                if (this.textSpans[i5].glyph) {
                  var glyph = this.textSpans[i5].glyph;
                  this.textSpans[i5].childSpan.removeChild(glyph.layerElement);
                  glyph.destroy();
                }
                this.textSpans[i5].glyph = glyphElement;
                glyphElement._debug = true;
                glyphElement.prepareFrame(0);
                glyphElement.renderFrame();
                this.textSpans[i5].childSpan.appendChild(glyphElement.layerElement);
                if (charData.t === 1) {
                  this.textSpans[i5].childSpan.setAttribute("transform", "scale(" + documentData.finalSize / 100 + "," + documentData.finalSize / 100 + ")");
                }
              } else {
                if (singleShape) {
                  tSpan.setAttribute("transform", "translate(" + matrixHelper.props[12] + "," + matrixHelper.props[13] + ")");
                }
                tSpan.textContent = letters[i5].val;
                tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
              }
            }
            if (singleShape && tSpan) {
              tSpan.setAttribute("d", shapeStr);
            }
          }
          while (i5 < this.textSpans.length) {
            this.textSpans[i5].span.style.display = "none";
            i5 += 1;
          }
          this._sizeChanged = true;
        };
        SVGTextLottieElement.prototype.sourceRectAtTime = function() {
          this.prepareFrame(this.comp.renderedFrame - this.data.st);
          this.renderInnerContent();
          if (this._sizeChanged) {
            this._sizeChanged = false;
            var textBox = this.layerElement.getBBox();
            this.bbox = {
              top: textBox.y,
              left: textBox.x,
              width: textBox.width,
              height: textBox.height
            };
          }
          return this.bbox;
        };
        SVGTextLottieElement.prototype.getValue = function() {
          var i5;
          var len = this.textSpans.length;
          var glyphElement;
          this.renderedFrame = this.comp.renderedFrame;
          for (i5 = 0; i5 < len; i5 += 1) {
            glyphElement = this.textSpans[i5].glyph;
            if (glyphElement) {
              glyphElement.prepareFrame(this.comp.renderedFrame - this.data.st);
              if (glyphElement._mdf) {
                this._mdf = true;
              }
            }
          }
        };
        SVGTextLottieElement.prototype.renderInnerContent = function() {
          this.validateText();
          if (!this.data.singleShape || this._mdf) {
            this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
            if (this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {
              this._sizeChanged = true;
              var i5;
              var len;
              var renderedLetters = this.textAnimator.renderedLetters;
              var letters = this.textProperty.currentData.l;
              len = letters.length;
              var renderedLetter;
              var textSpan;
              var glyphElement;
              for (i5 = 0; i5 < len; i5 += 1) {
                if (!letters[i5].n) {
                  renderedLetter = renderedLetters[i5];
                  textSpan = this.textSpans[i5].span;
                  glyphElement = this.textSpans[i5].glyph;
                  if (glyphElement) {
                    glyphElement.renderFrame();
                  }
                  if (renderedLetter._mdf.m) {
                    textSpan.setAttribute("transform", renderedLetter.m);
                  }
                  if (renderedLetter._mdf.o) {
                    textSpan.setAttribute("opacity", renderedLetter.o);
                  }
                  if (renderedLetter._mdf.sw) {
                    textSpan.setAttribute("stroke-width", renderedLetter.sw);
                  }
                  if (renderedLetter._mdf.sc) {
                    textSpan.setAttribute("stroke", renderedLetter.sc);
                  }
                  if (renderedLetter._mdf.fc) {
                    textSpan.setAttribute("fill", renderedLetter.fc);
                  }
                }
              }
            }
          }
        };
        function ISolidElement(data2, globalData2, comp2) {
          this.initElement(data2, globalData2, comp2);
        }
        extendPrototype([IImageElement], ISolidElement);
        ISolidElement.prototype.createContent = function() {
          var rect = createNS("rect");
          rect.setAttribute("width", this.data.sw);
          rect.setAttribute("height", this.data.sh);
          rect.setAttribute("fill", this.data.sc);
          this.layerElement.appendChild(rect);
        };
        function NullElement(data2, globalData2, comp2) {
          this.initFrame();
          this.initBaseData(data2, globalData2, comp2);
          this.initFrame();
          this.initTransform(data2, globalData2, comp2);
          this.initHierarchy();
        }
        NullElement.prototype.prepareFrame = function(num) {
          this.prepareProperties(num, true);
        };
        NullElement.prototype.renderFrame = function() {
        };
        NullElement.prototype.getBaseElement = function() {
          return null;
        };
        NullElement.prototype.destroy = function() {
        };
        NullElement.prototype.sourceRectAtTime = function() {
        };
        NullElement.prototype.hide = function() {
        };
        extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement], NullElement);
        function SVGRendererBase() {
        }
        extendPrototype([BaseRenderer], SVGRendererBase);
        SVGRendererBase.prototype.createNull = function(data2) {
          return new NullElement(data2, this.globalData, this);
        };
        SVGRendererBase.prototype.createShape = function(data2) {
          return new SVGShapeElement(data2, this.globalData, this);
        };
        SVGRendererBase.prototype.createText = function(data2) {
          return new SVGTextLottieElement(data2, this.globalData, this);
        };
        SVGRendererBase.prototype.createImage = function(data2) {
          return new IImageElement(data2, this.globalData, this);
        };
        SVGRendererBase.prototype.createSolid = function(data2) {
          return new ISolidElement(data2, this.globalData, this);
        };
        SVGRendererBase.prototype.configAnimation = function(animData) {
          this.svgElement.setAttribute("xmlns", "http://www.w3.org/2000/svg");
          this.svgElement.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink");
          if (this.renderConfig.viewBoxSize) {
            this.svgElement.setAttribute("viewBox", this.renderConfig.viewBoxSize);
          } else {
            this.svgElement.setAttribute("viewBox", "0 0 " + animData.w + " " + animData.h);
          }
          if (!this.renderConfig.viewBoxOnly) {
            this.svgElement.setAttribute("width", animData.w);
            this.svgElement.setAttribute("height", animData.h);
            this.svgElement.style.width = "100%";
            this.svgElement.style.height = "100%";
            this.svgElement.style.transform = "translate3d(0,0,0)";
            this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility;
          }
          if (this.renderConfig.width) {
            this.svgElement.setAttribute("width", this.renderConfig.width);
          }
          if (this.renderConfig.height) {
            this.svgElement.setAttribute("height", this.renderConfig.height);
          }
          if (this.renderConfig.className) {
            this.svgElement.setAttribute("class", this.renderConfig.className);
          }
          if (this.renderConfig.id) {
            this.svgElement.setAttribute("id", this.renderConfig.id);
          }
          if (this.renderConfig.focusable !== void 0) {
            this.svgElement.setAttribute("focusable", this.renderConfig.focusable);
          }
          this.svgElement.setAttribute("preserveAspectRatio", this.renderConfig.preserveAspectRatio);
          this.animationItem.wrapper.appendChild(this.svgElement);
          var defs = this.globalData.defs;
          this.setupGlobalData(animData, defs);
          this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
          this.data = animData;
          var maskElement = createNS("clipPath");
          var rect = createNS("rect");
          rect.setAttribute("width", animData.w);
          rect.setAttribute("height", animData.h);
          rect.setAttribute("x", 0);
          rect.setAttribute("y", 0);
          var maskId = createElementID();
          maskElement.setAttribute("id", maskId);
          maskElement.appendChild(rect);
          this.layerElement.setAttribute("clip-path", "url(" + getLocationHref() + "#" + maskId + ")");
          defs.appendChild(maskElement);
          this.layers = animData.layers;
          this.elements = createSizedArray(animData.layers.length);
        };
        SVGRendererBase.prototype.destroy = function() {
          if (this.animationItem.wrapper) {
            this.animationItem.wrapper.innerText = "";
          }
          this.layerElement = null;
          this.globalData.defs = null;
          var i5;
          var len = this.layers ? this.layers.length : 0;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.elements[i5] && this.elements[i5].destroy) {
              this.elements[i5].destroy();
            }
          }
          this.elements.length = 0;
          this.destroyed = true;
          this.animationItem = null;
        };
        SVGRendererBase.prototype.updateContainerSize = function() {
        };
        SVGRendererBase.prototype.findIndexByInd = function(ind) {
          var i5 = 0;
          var len = this.layers.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.layers[i5].ind === ind) {
              return i5;
            }
          }
          return -1;
        };
        SVGRendererBase.prototype.buildItem = function(pos) {
          var elements = this.elements;
          if (elements[pos] || this.layers[pos].ty === 99) {
            return;
          }
          elements[pos] = true;
          var element = this.createItem(this.layers[pos]);
          elements[pos] = element;
          if (getExpressionsPlugin()) {
            if (this.layers[pos].ty === 0) {
              this.globalData.projectInterface.registerComposition(element);
            }
            element.initExpressions();
          }
          this.appendElementInPos(element, pos);
          if (this.layers[pos].tt) {
            var elementIndex = "tp" in this.layers[pos] ? this.findIndexByInd(this.layers[pos].tp) : pos - 1;
            if (elementIndex === -1) {
              return;
            }
            if (!this.elements[elementIndex] || this.elements[elementIndex] === true) {
              this.buildItem(elementIndex);
              this.addPendingElement(element);
            } else {
              var matteElement = elements[elementIndex];
              var matteMask = matteElement.getMatte(this.layers[pos].tt);
              element.setMatte(matteMask);
            }
          }
        };
        SVGRendererBase.prototype.checkPendingElements = function() {
          while (this.pendingElements.length) {
            var element = this.pendingElements.pop();
            element.checkParenting();
            if (element.data.tt) {
              var i5 = 0;
              var len = this.elements.length;
              while (i5 < len) {
                if (this.elements[i5] === element) {
                  var elementIndex = "tp" in element.data ? this.findIndexByInd(element.data.tp) : i5 - 1;
                  var matteElement = this.elements[elementIndex];
                  var matteMask = matteElement.getMatte(this.layers[i5].tt);
                  element.setMatte(matteMask);
                  break;
                }
                i5 += 1;
              }
            }
          }
        };
        SVGRendererBase.prototype.renderFrame = function(num) {
          if (this.renderedFrame === num || this.destroyed) {
            return;
          }
          if (num === null) {
            num = this.renderedFrame;
          } else {
            this.renderedFrame = num;
          }
          this.globalData.frameNum = num;
          this.globalData.frameId += 1;
          this.globalData.projectInterface.currentFrame = num;
          this.globalData._mdf = false;
          var i5;
          var len = this.layers.length;
          if (!this.completeLayers) {
            this.checkLayers(num);
          }
          for (i5 = len - 1; i5 >= 0; i5 -= 1) {
            if (this.completeLayers || this.elements[i5]) {
              this.elements[i5].prepareFrame(num - this.layers[i5].st);
            }
          }
          if (this.globalData._mdf) {
            for (i5 = 0; i5 < len; i5 += 1) {
              if (this.completeLayers || this.elements[i5]) {
                this.elements[i5].renderFrame();
              }
            }
          }
        };
        SVGRendererBase.prototype.appendElementInPos = function(element, pos) {
          var newElement = element.getBaseElement();
          if (!newElement) {
            return;
          }
          var i5 = 0;
          var nextElement;
          while (i5 < pos) {
            if (this.elements[i5] && this.elements[i5] !== true && this.elements[i5].getBaseElement()) {
              nextElement = this.elements[i5].getBaseElement();
            }
            i5 += 1;
          }
          if (nextElement) {
            this.layerElement.insertBefore(newElement, nextElement);
          } else {
            this.layerElement.appendChild(newElement);
          }
        };
        SVGRendererBase.prototype.hide = function() {
          this.layerElement.style.display = "none";
        };
        SVGRendererBase.prototype.show = function() {
          this.layerElement.style.display = "block";
        };
        function ICompElement() {
        }
        extendPrototype([BaseElement, TransformElement, HierarchyElement, FrameElement, RenderableDOMElement], ICompElement);
        ICompElement.prototype.initElement = function(data2, globalData2, comp2) {
          this.initFrame();
          this.initBaseData(data2, globalData2, comp2);
          this.initTransform(data2, globalData2, comp2);
          this.initRenderable();
          this.initHierarchy();
          this.initRendererElement();
          this.createContainerElements();
          this.createRenderableComponents();
          if (this.data.xt || !globalData2.progressiveLoad) {
            this.buildAllItems();
          }
          this.hide();
        };
        ICompElement.prototype.prepareFrame = function(num) {
          this._mdf = false;
          this.prepareRenderableFrame(num);
          this.prepareProperties(num, this.isInRange);
          if (!this.isInRange && !this.data.xt) {
            return;
          }
          if (!this.tm._placeholder) {
            var timeRemapped = this.tm.v;
            if (timeRemapped === this.data.op) {
              timeRemapped = this.data.op - 1;
            }
            this.renderedFrame = timeRemapped;
          } else {
            this.renderedFrame = num / this.data.sr;
          }
          var i5;
          var len = this.elements.length;
          if (!this.completeLayers) {
            this.checkLayers(this.renderedFrame);
          }
          for (i5 = len - 1; i5 >= 0; i5 -= 1) {
            if (this.completeLayers || this.elements[i5]) {
              this.elements[i5].prepareFrame(this.renderedFrame - this.layers[i5].st);
              if (this.elements[i5]._mdf) {
                this._mdf = true;
              }
            }
          }
        };
        ICompElement.prototype.renderInnerContent = function() {
          var i5;
          var len = this.layers.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.completeLayers || this.elements[i5]) {
              this.elements[i5].renderFrame();
            }
          }
        };
        ICompElement.prototype.setElements = function(elems) {
          this.elements = elems;
        };
        ICompElement.prototype.getElements = function() {
          return this.elements;
        };
        ICompElement.prototype.destroyElements = function() {
          var i5;
          var len = this.layers.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.elements[i5]) {
              this.elements[i5].destroy();
            }
          }
        };
        ICompElement.prototype.destroy = function() {
          this.destroyElements();
          this.destroyBaseElement();
        };
        function SVGCompElement(data2, globalData2, comp2) {
          this.layers = data2.layers;
          this.supports3d = true;
          this.completeLayers = false;
          this.pendingElements = [];
          this.elements = this.layers ? createSizedArray(this.layers.length) : [];
          this.initElement(data2, globalData2, comp2);
          this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
            _placeholder: true
          };
        }
        extendPrototype([SVGRendererBase, ICompElement, SVGBaseElement], SVGCompElement);
        SVGCompElement.prototype.createComp = function(data2) {
          return new SVGCompElement(data2, this.globalData, this);
        };
        function SVGRenderer(animationItem, config) {
          this.animationItem = animationItem;
          this.layers = null;
          this.renderedFrame = -1;
          this.svgElement = createNS("svg");
          var ariaLabel = "";
          if (config && config.title) {
            var titleElement = createNS("title");
            var titleId = createElementID();
            titleElement.setAttribute("id", titleId);
            titleElement.textContent = config.title;
            this.svgElement.appendChild(titleElement);
            ariaLabel += titleId;
          }
          if (config && config.description) {
            var descElement = createNS("desc");
            var descId = createElementID();
            descElement.setAttribute("id", descId);
            descElement.textContent = config.description;
            this.svgElement.appendChild(descElement);
            ariaLabel += " " + descId;
          }
          if (ariaLabel) {
            this.svgElement.setAttribute("aria-labelledby", ariaLabel);
          }
          var defs = createNS("defs");
          this.svgElement.appendChild(defs);
          var maskElement = createNS("g");
          this.svgElement.appendChild(maskElement);
          this.layerElement = maskElement;
          this.renderConfig = {
            preserveAspectRatio: config && config.preserveAspectRatio || "xMidYMid meet",
            imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || "xMidYMid slice",
            contentVisibility: config && config.contentVisibility || "visible",
            progressiveLoad: config && config.progressiveLoad || false,
            hideOnTransparent: !(config && config.hideOnTransparent === false),
            viewBoxOnly: config && config.viewBoxOnly || false,
            viewBoxSize: config && config.viewBoxSize || false,
            className: config && config.className || "",
            id: config && config.id || "",
            focusable: config && config.focusable,
            filterSize: {
              width: config && config.filterSize && config.filterSize.width || "100%",
              height: config && config.filterSize && config.filterSize.height || "100%",
              x: config && config.filterSize && config.filterSize.x || "0%",
              y: config && config.filterSize && config.filterSize.y || "0%"
            },
            width: config && config.width,
            height: config && config.height,
            runExpressions: !config || config.runExpressions === void 0 || config.runExpressions
          };
          this.globalData = {
            _mdf: false,
            frameNum: -1,
            defs,
            renderConfig: this.renderConfig
          };
          this.elements = [];
          this.pendingElements = [];
          this.destroyed = false;
          this.rendererType = "svg";
        }
        extendPrototype([SVGRendererBase], SVGRenderer);
        SVGRenderer.prototype.createComp = function(data2) {
          return new SVGCompElement(data2, this.globalData, this);
        };
        function ShapeTransformManager() {
          this.sequences = {};
          this.sequenceList = [];
          this.transform_key_count = 0;
        }
        ShapeTransformManager.prototype = {
          addTransformSequence: function addTransformSequence(transforms) {
            var i5;
            var len = transforms.length;
            var key2 = "_";
            for (i5 = 0; i5 < len; i5 += 1) {
              key2 += transforms[i5].transform.key + "_";
            }
            var sequence = this.sequences[key2];
            if (!sequence) {
              sequence = {
                transforms: [].concat(transforms),
                finalTransform: new Matrix(),
                _mdf: false
              };
              this.sequences[key2] = sequence;
              this.sequenceList.push(sequence);
            }
            return sequence;
          },
          processSequence: function processSequence(sequence, isFirstFrame) {
            var i5 = 0;
            var len = sequence.transforms.length;
            var _mdf = isFirstFrame;
            while (i5 < len && !isFirstFrame) {
              if (sequence.transforms[i5].transform.mProps._mdf) {
                _mdf = true;
                break;
              }
              i5 += 1;
            }
            if (_mdf) {
              sequence.finalTransform.reset();
              for (i5 = len - 1; i5 >= 0; i5 -= 1) {
                sequence.finalTransform.multiply(sequence.transforms[i5].transform.mProps.v);
              }
            }
            sequence._mdf = _mdf;
          },
          processSequences: function processSequences(isFirstFrame) {
            var i5;
            var len = this.sequenceList.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              this.processSequence(this.sequenceList[i5], isFirstFrame);
            }
          },
          getNewKey: function getNewKey() {
            this.transform_key_count += 1;
            return "_" + this.transform_key_count;
          }
        };
        var lumaLoader = function lumaLoader2() {
          var id = "__lottie_element_luma_buffer";
          var lumaBuffer = null;
          var lumaBufferCtx = null;
          var svg = null;
          function createLumaSvgFilter() {
            var _svg = createNS("svg");
            var fil = createNS("filter");
            var matrix = createNS("feColorMatrix");
            fil.setAttribute("id", id);
            matrix.setAttribute("type", "matrix");
            matrix.setAttribute("color-interpolation-filters", "sRGB");
            matrix.setAttribute("values", "0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0");
            fil.appendChild(matrix);
            _svg.appendChild(fil);
            _svg.setAttribute("id", id + "_svg");
            if (featureSupport.svgLumaHidden) {
              _svg.style.display = "none";
            }
            return _svg;
          }
          function loadLuma() {
            if (!lumaBuffer) {
              svg = createLumaSvgFilter();
              document.body.appendChild(svg);
              lumaBuffer = createTag("canvas");
              lumaBufferCtx = lumaBuffer.getContext("2d");
              lumaBufferCtx.filter = "url(#" + id + ")";
              lumaBufferCtx.fillStyle = "rgba(0,0,0,0)";
              lumaBufferCtx.fillRect(0, 0, 1, 1);
            }
          }
          function getLuma(canvas) {
            if (!lumaBuffer) {
              loadLuma();
            }
            lumaBuffer.width = canvas.width;
            lumaBuffer.height = canvas.height;
            lumaBufferCtx.filter = "url(#" + id + ")";
            return lumaBuffer;
          }
          return {
            load: loadLuma,
            get: getLuma
          };
        };
        function createCanvas(width2, height2) {
          if (featureSupport.offscreenCanvas) {
            return new OffscreenCanvas(width2, height2);
          }
          var canvas = createTag("canvas");
          canvas.width = width2;
          canvas.height = height2;
          return canvas;
        }
        var assetLoader = (function() {
          return {
            loadLumaCanvas: lumaLoader.load,
            getLumaCanvas: lumaLoader.get,
            createCanvas
          };
        })();
        var registeredEffects = {};
        function CVEffects(elem2) {
          var i5;
          var len = elem2.data.ef ? elem2.data.ef.length : 0;
          this.filters = [];
          var filterManager;
          for (i5 = 0; i5 < len; i5 += 1) {
            filterManager = null;
            var type = elem2.data.ef[i5].ty;
            if (registeredEffects[type]) {
              var Effect = registeredEffects[type].effect;
              filterManager = new Effect(elem2.effectsManager.effectElements[i5], elem2);
            }
            if (filterManager) {
              this.filters.push(filterManager);
            }
          }
          if (this.filters.length) {
            elem2.addRenderableComponent(this);
          }
        }
        CVEffects.prototype.renderFrame = function(_isFirstFrame) {
          var i5;
          var len = this.filters.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            this.filters[i5].renderFrame(_isFirstFrame);
          }
        };
        CVEffects.prototype.getEffects = function(type) {
          var i5;
          var len = this.filters.length;
          var effects = [];
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.filters[i5].type === type) {
              effects.push(this.filters[i5]);
            }
          }
          return effects;
        };
        function registerEffect(id, effect2) {
          registeredEffects[id] = {
            effect: effect2
          };
        }
        function CVMaskElement(data2, element) {
          this.data = data2;
          this.element = element;
          this.masksProperties = this.data.masksProperties || [];
          this.viewData = createSizedArray(this.masksProperties.length);
          var i5;
          var len = this.masksProperties.length;
          var hasMasks = false;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.masksProperties[i5].mode !== "n") {
              hasMasks = true;
            }
            this.viewData[i5] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[i5], 3);
          }
          this.hasMasks = hasMasks;
          if (hasMasks) {
            this.element.addRenderableComponent(this);
          }
        }
        CVMaskElement.prototype.renderFrame = function() {
          if (!this.hasMasks) {
            return;
          }
          var transform2 = this.element.finalTransform.mat;
          var ctx = this.element.canvasContext;
          var i5;
          var len = this.masksProperties.length;
          var pt;
          var pts;
          var data2;
          ctx.beginPath();
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.masksProperties[i5].mode !== "n") {
              if (this.masksProperties[i5].inv) {
                ctx.moveTo(0, 0);
                ctx.lineTo(this.element.globalData.compSize.w, 0);
                ctx.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h);
                ctx.lineTo(0, this.element.globalData.compSize.h);
                ctx.lineTo(0, 0);
              }
              data2 = this.viewData[i5].v;
              pt = transform2.applyToPointArray(data2.v[0][0], data2.v[0][1], 0);
              ctx.moveTo(pt[0], pt[1]);
              var j4;
              var jLen = data2._length;
              for (j4 = 1; j4 < jLen; j4 += 1) {
                pts = transform2.applyToTriplePoints(data2.o[j4 - 1], data2.i[j4], data2.v[j4]);
                ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
              }
              pts = transform2.applyToTriplePoints(data2.o[j4 - 1], data2.i[0], data2.v[0]);
              ctx.bezierCurveTo(pts[0], pts[1], pts[2], pts[3], pts[4], pts[5]);
            }
          }
          this.element.globalData.renderer.save(true);
          ctx.clip();
        };
        CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty;
        CVMaskElement.prototype.destroy = function() {
          this.element = null;
        };
        function CVBaseElement() {
        }
        var operationsMap = {
          1: "source-in",
          2: "source-out",
          3: "source-in",
          4: "source-out"
        };
        CVBaseElement.prototype = {
          createElements: function createElements() {
          },
          initRendererElement: function initRendererElement() {
          },
          createContainerElements: function createContainerElements() {
            if (this.data.tt >= 1) {
              this.buffers = [];
              var canvasContext = this.globalData.canvasContext;
              var bufferCanvas = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
              this.buffers.push(bufferCanvas);
              var bufferCanvas2 = assetLoader.createCanvas(canvasContext.canvas.width, canvasContext.canvas.height);
              this.buffers.push(bufferCanvas2);
              if (this.data.tt >= 3 && !document._isProxy) {
                assetLoader.loadLumaCanvas();
              }
            }
            this.canvasContext = this.globalData.canvasContext;
            this.transformCanvas = this.globalData.transformCanvas;
            this.renderableEffectsManager = new CVEffects(this);
            this.searchEffectTransforms();
          },
          createContent: function createContent() {
          },
          setBlendMode: function setBlendMode() {
            var globalData2 = this.globalData;
            if (globalData2.blendMode !== this.data.bm) {
              globalData2.blendMode = this.data.bm;
              var blendModeValue = getBlendMode(this.data.bm);
              globalData2.canvasContext.globalCompositeOperation = blendModeValue;
            }
          },
          createRenderableComponents: function createRenderableComponents() {
            this.maskManager = new CVMaskElement(this.data, this);
            this.transformEffects = this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);
          },
          hideElement: function hideElement() {
            if (!this.hidden && (!this.isInRange || this.isTransparent)) {
              this.hidden = true;
            }
          },
          showElement: function showElement() {
            if (this.isInRange && !this.isTransparent) {
              this.hidden = false;
              this._isFirstFrame = true;
              this.maskManager._isFirstFrame = true;
            }
          },
          clearCanvas: function clearCanvas(canvasContext) {
            canvasContext.clearRect(this.transformCanvas.tx, this.transformCanvas.ty, this.transformCanvas.w * this.transformCanvas.sx, this.transformCanvas.h * this.transformCanvas.sy);
          },
          prepareLayer: function prepareLayer() {
            if (this.data.tt >= 1) {
              var buffer = this.buffers[0];
              var bufferCtx = buffer.getContext("2d");
              this.clearCanvas(bufferCtx);
              bufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
              this.currentTransform = this.canvasContext.getTransform();
              this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
              this.clearCanvas(this.canvasContext);
              this.canvasContext.setTransform(this.currentTransform);
            }
          },
          exitLayer: function exitLayer() {
            if (this.data.tt >= 1) {
              var buffer = this.buffers[1];
              var bufferCtx = buffer.getContext("2d");
              this.clearCanvas(bufferCtx);
              bufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
              this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
              this.clearCanvas(this.canvasContext);
              this.canvasContext.setTransform(this.currentTransform);
              var mask2 = this.comp.getElementById("tp" in this.data ? this.data.tp : this.data.ind - 1);
              mask2.renderFrame(true);
              this.canvasContext.setTransform(1, 0, 0, 1, 0, 0);
              if (this.data.tt >= 3 && !document._isProxy) {
                var lumaBuffer = assetLoader.getLumaCanvas(this.canvasContext.canvas);
                var lumaBufferCtx = lumaBuffer.getContext("2d");
                lumaBufferCtx.drawImage(this.canvasContext.canvas, 0, 0);
                this.clearCanvas(this.canvasContext);
                this.canvasContext.drawImage(lumaBuffer, 0, 0);
              }
              this.canvasContext.globalCompositeOperation = operationsMap[this.data.tt];
              this.canvasContext.drawImage(buffer, 0, 0);
              this.canvasContext.globalCompositeOperation = "destination-over";
              this.canvasContext.drawImage(this.buffers[0], 0, 0);
              this.canvasContext.setTransform(this.currentTransform);
              this.canvasContext.globalCompositeOperation = "source-over";
            }
          },
          renderFrame: function renderFrame(forceRender) {
            if (this.hidden || this.data.hd) {
              return;
            }
            if (this.data.td === 1 && !forceRender) {
              return;
            }
            this.renderTransform();
            this.renderRenderable();
            this.renderLocalTransform();
            this.setBlendMode();
            var forceRealStack = this.data.ty === 0;
            this.prepareLayer();
            this.globalData.renderer.save(forceRealStack);
            this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props);
            this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity);
            this.renderInnerContent();
            this.globalData.renderer.restore(forceRealStack);
            this.exitLayer();
            if (this.maskManager.hasMasks) {
              this.globalData.renderer.restore(true);
            }
            if (this._isFirstFrame) {
              this._isFirstFrame = false;
            }
          },
          destroy: function destroy() {
            this.canvasContext = null;
            this.data = null;
            this.globalData = null;
            this.maskManager.destroy();
          },
          mHelper: new Matrix()
        };
        CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement;
        CVBaseElement.prototype.show = CVBaseElement.prototype.showElement;
        function CVShapeData(element, data2, styles, transformsManager) {
          this.styledShapes = [];
          this.tr = [0, 0, 0, 0, 0, 0];
          var ty = 4;
          if (data2.ty === "rc") {
            ty = 5;
          } else if (data2.ty === "el") {
            ty = 6;
          } else if (data2.ty === "sr") {
            ty = 7;
          }
          this.sh = ShapePropertyFactory.getShapeProp(element, data2, ty, element);
          var i5;
          var len = styles.length;
          var styledShape;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (!styles[i5].closed) {
              styledShape = {
                transforms: transformsManager.addTransformSequence(styles[i5].transforms),
                trNodes: []
              };
              this.styledShapes.push(styledShape);
              styles[i5].elements.push(styledShape);
            }
          }
        }
        CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated;
        function CVShapeElement(data2, globalData2, comp2) {
          this.shapes = [];
          this.shapesData = data2.shapes;
          this.stylesList = [];
          this.itemsData = [];
          this.prevViewData = [];
          this.shapeModifiers = [];
          this.processedElements = [];
          this.transformsManager = new ShapeTransformManager();
          this.initElement(data2, globalData2, comp2);
        }
        extendPrototype([BaseElement, TransformElement, CVBaseElement, IShapeElement, HierarchyElement, FrameElement, RenderableElement], CVShapeElement);
        CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement;
        CVShapeElement.prototype.transformHelper = {
          opacity: 1,
          _opMdf: false
        };
        CVShapeElement.prototype.dashResetter = [];
        CVShapeElement.prototype.createContent = function() {
          this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
        };
        CVShapeElement.prototype.createStyleElement = function(data2, transforms) {
          var styleElem = {
            data: data2,
            type: data2.ty,
            preTransforms: this.transformsManager.addTransformSequence(transforms),
            transforms: [],
            elements: [],
            closed: data2.hd === true
          };
          var elementData = {};
          if (data2.ty === "fl" || data2.ty === "st") {
            elementData.c = PropertyFactory.getProp(this, data2.c, 1, 255, this);
            if (!elementData.c.k) {
              styleElem.co = "rgb(" + bmFloor(elementData.c.v[0]) + "," + bmFloor(elementData.c.v[1]) + "," + bmFloor(elementData.c.v[2]) + ")";
            }
          } else if (data2.ty === "gf" || data2.ty === "gs") {
            elementData.s = PropertyFactory.getProp(this, data2.s, 1, null, this);
            elementData.e = PropertyFactory.getProp(this, data2.e, 1, null, this);
            elementData.h = PropertyFactory.getProp(this, data2.h || {
              k: 0
            }, 0, 0.01, this);
            elementData.a = PropertyFactory.getProp(this, data2.a || {
              k: 0
            }, 0, degToRads, this);
            elementData.g = new GradientProperty(this, data2.g, this);
          }
          elementData.o = PropertyFactory.getProp(this, data2.o, 0, 0.01, this);
          if (data2.ty === "st" || data2.ty === "gs") {
            styleElem.lc = lineCapEnum[data2.lc || 2];
            styleElem.lj = lineJoinEnum[data2.lj || 2];
            if (data2.lj == 1) {
              styleElem.ml = data2.ml;
            }
            elementData.w = PropertyFactory.getProp(this, data2.w, 0, null, this);
            if (!elementData.w.k) {
              styleElem.wi = elementData.w.v;
            }
            if (data2.d) {
              var d5 = new DashProperty(this, data2.d, "canvas", this);
              elementData.d = d5;
              if (!elementData.d.k) {
                styleElem.da = elementData.d.dashArray;
                styleElem["do"] = elementData.d.dashoffset[0];
              }
            }
          } else {
            styleElem.r = data2.r === 2 ? "evenodd" : "nonzero";
          }
          this.stylesList.push(styleElem);
          elementData.style = styleElem;
          return elementData;
        };
        CVShapeElement.prototype.createGroupElement = function() {
          var elementData = {
            it: [],
            prevViewData: []
          };
          return elementData;
        };
        CVShapeElement.prototype.createTransformElement = function(data2) {
          var elementData = {
            transform: {
              opacity: 1,
              _opMdf: false,
              key: this.transformsManager.getNewKey(),
              op: PropertyFactory.getProp(this, data2.o, 0, 0.01, this),
              mProps: TransformPropertyFactory.getTransformProperty(this, data2, this)
            }
          };
          return elementData;
        };
        CVShapeElement.prototype.createShapeElement = function(data2) {
          var elementData = new CVShapeData(this, data2, this.stylesList, this.transformsManager);
          this.shapes.push(elementData);
          this.addShapeToModifiers(elementData);
          return elementData;
        };
        CVShapeElement.prototype.reloadShapes = function() {
          this._isFirstFrame = true;
          var i5;
          var len = this.itemsData.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            this.prevViewData[i5] = this.itemsData[i5];
          }
          this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, true, []);
          len = this.dynamicProperties.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            this.dynamicProperties[i5].getValue();
          }
          this.renderModifiers();
          this.transformsManager.processSequences(this._isFirstFrame);
        };
        CVShapeElement.prototype.addTransformToStyleList = function(transform2) {
          var i5;
          var len = this.stylesList.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (!this.stylesList[i5].closed) {
              this.stylesList[i5].transforms.push(transform2);
            }
          }
        };
        CVShapeElement.prototype.removeTransformFromStyleList = function() {
          var i5;
          var len = this.stylesList.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (!this.stylesList[i5].closed) {
              this.stylesList[i5].transforms.pop();
            }
          }
        };
        CVShapeElement.prototype.closeStyles = function(styles) {
          var i5;
          var len = styles.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            styles[i5].closed = true;
          }
        };
        CVShapeElement.prototype.searchShapes = function(arr, itemsData, prevViewData, shouldRender, transforms) {
          var i5;
          var len = arr.length - 1;
          var j4;
          var jLen;
          var ownStyles = [];
          var ownModifiers = [];
          var processedPos;
          var modifier;
          var currentTransform;
          var ownTransforms = [].concat(transforms);
          for (i5 = len; i5 >= 0; i5 -= 1) {
            processedPos = this.searchProcessedElement(arr[i5]);
            if (!processedPos) {
              arr[i5]._shouldRender = shouldRender;
            } else {
              itemsData[i5] = prevViewData[processedPos - 1];
            }
            if (arr[i5].ty === "fl" || arr[i5].ty === "st" || arr[i5].ty === "gf" || arr[i5].ty === "gs") {
              if (!processedPos) {
                itemsData[i5] = this.createStyleElement(arr[i5], ownTransforms);
              } else {
                itemsData[i5].style.closed = false;
              }
              ownStyles.push(itemsData[i5].style);
            } else if (arr[i5].ty === "gr") {
              if (!processedPos) {
                itemsData[i5] = this.createGroupElement(arr[i5]);
              } else {
                jLen = itemsData[i5].it.length;
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  itemsData[i5].prevViewData[j4] = itemsData[i5].it[j4];
                }
              }
              this.searchShapes(arr[i5].it, itemsData[i5].it, itemsData[i5].prevViewData, shouldRender, ownTransforms);
            } else if (arr[i5].ty === "tr") {
              if (!processedPos) {
                currentTransform = this.createTransformElement(arr[i5]);
                itemsData[i5] = currentTransform;
              }
              ownTransforms.push(itemsData[i5]);
              this.addTransformToStyleList(itemsData[i5]);
            } else if (arr[i5].ty === "sh" || arr[i5].ty === "rc" || arr[i5].ty === "el" || arr[i5].ty === "sr") {
              if (!processedPos) {
                itemsData[i5] = this.createShapeElement(arr[i5]);
              }
            } else if (arr[i5].ty === "tm" || arr[i5].ty === "rd" || arr[i5].ty === "pb" || arr[i5].ty === "zz" || arr[i5].ty === "op") {
              if (!processedPos) {
                modifier = ShapeModifiers.getModifier(arr[i5].ty);
                modifier.init(this, arr[i5]);
                itemsData[i5] = modifier;
                this.shapeModifiers.push(modifier);
              } else {
                modifier = itemsData[i5];
                modifier.closed = false;
              }
              ownModifiers.push(modifier);
            } else if (arr[i5].ty === "rp") {
              if (!processedPos) {
                modifier = ShapeModifiers.getModifier(arr[i5].ty);
                itemsData[i5] = modifier;
                modifier.init(this, arr, i5, itemsData);
                this.shapeModifiers.push(modifier);
                shouldRender = false;
              } else {
                modifier = itemsData[i5];
                modifier.closed = true;
              }
              ownModifiers.push(modifier);
            }
            this.addProcessedElement(arr[i5], i5 + 1);
          }
          this.removeTransformFromStyleList();
          this.closeStyles(ownStyles);
          len = ownModifiers.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            ownModifiers[i5].closed = true;
          }
        };
        CVShapeElement.prototype.renderInnerContent = function() {
          this.transformHelper.opacity = 1;
          this.transformHelper._opMdf = false;
          this.renderModifiers();
          this.transformsManager.processSequences(this._isFirstFrame);
          this.renderShape(this.transformHelper, this.shapesData, this.itemsData, true);
        };
        CVShapeElement.prototype.renderShapeTransform = function(parentTransform, groupTransform) {
          if (parentTransform._opMdf || groupTransform.op._mdf || this._isFirstFrame) {
            groupTransform.opacity = parentTransform.opacity;
            groupTransform.opacity *= groupTransform.op.v;
            groupTransform._opMdf = true;
          }
        };
        CVShapeElement.prototype.drawLayer = function() {
          var i5;
          var len = this.stylesList.length;
          var j4;
          var jLen;
          var k4;
          var kLen;
          var elems;
          var nodes;
          var renderer2 = this.globalData.renderer;
          var ctx = this.globalData.canvasContext;
          var type;
          var currentStyle;
          for (i5 = 0; i5 < len; i5 += 1) {
            currentStyle = this.stylesList[i5];
            type = currentStyle.type;
            if (!((type === "st" || type === "gs") && currentStyle.wi === 0 || !currentStyle.data._shouldRender || currentStyle.coOp === 0 || this.globalData.currentGlobalAlpha === 0)) {
              renderer2.save();
              elems = currentStyle.elements;
              if (type === "st" || type === "gs") {
                renderer2.ctxStrokeStyle(type === "st" ? currentStyle.co : currentStyle.grd);
                renderer2.ctxLineWidth(currentStyle.wi);
                renderer2.ctxLineCap(currentStyle.lc);
                renderer2.ctxLineJoin(currentStyle.lj);
                renderer2.ctxMiterLimit(currentStyle.ml || 0);
              } else {
                renderer2.ctxFillStyle(type === "fl" ? currentStyle.co : currentStyle.grd);
              }
              renderer2.ctxOpacity(currentStyle.coOp);
              if (type !== "st" && type !== "gs") {
                ctx.beginPath();
              }
              renderer2.ctxTransform(currentStyle.preTransforms.finalTransform.props);
              jLen = elems.length;
              for (j4 = 0; j4 < jLen; j4 += 1) {
                if (type === "st" || type === "gs") {
                  ctx.beginPath();
                  if (currentStyle.da) {
                    ctx.setLineDash(currentStyle.da);
                    ctx.lineDashOffset = currentStyle["do"];
                  }
                }
                nodes = elems[j4].trNodes;
                kLen = nodes.length;
                for (k4 = 0; k4 < kLen; k4 += 1) {
                  if (nodes[k4].t === "m") {
                    ctx.moveTo(nodes[k4].p[0], nodes[k4].p[1]);
                  } else if (nodes[k4].t === "c") {
                    ctx.bezierCurveTo(nodes[k4].pts[0], nodes[k4].pts[1], nodes[k4].pts[2], nodes[k4].pts[3], nodes[k4].pts[4], nodes[k4].pts[5]);
                  } else {
                    ctx.closePath();
                  }
                }
                if (type === "st" || type === "gs") {
                  renderer2.ctxStroke();
                  if (currentStyle.da) {
                    ctx.setLineDash(this.dashResetter);
                  }
                }
              }
              if (type !== "st" && type !== "gs") {
                this.globalData.renderer.ctxFill(currentStyle.r);
              }
              renderer2.restore();
            }
          }
        };
        CVShapeElement.prototype.renderShape = function(parentTransform, items, data2, isMain) {
          var i5;
          var len = items.length - 1;
          var groupTransform;
          groupTransform = parentTransform;
          for (i5 = len; i5 >= 0; i5 -= 1) {
            if (items[i5].ty === "tr") {
              groupTransform = data2[i5].transform;
              this.renderShapeTransform(parentTransform, groupTransform);
            } else if (items[i5].ty === "sh" || items[i5].ty === "el" || items[i5].ty === "rc" || items[i5].ty === "sr") {
              this.renderPath(items[i5], data2[i5]);
            } else if (items[i5].ty === "fl") {
              this.renderFill(items[i5], data2[i5], groupTransform);
            } else if (items[i5].ty === "st") {
              this.renderStroke(items[i5], data2[i5], groupTransform);
            } else if (items[i5].ty === "gf" || items[i5].ty === "gs") {
              this.renderGradientFill(items[i5], data2[i5], groupTransform);
            } else if (items[i5].ty === "gr") {
              this.renderShape(groupTransform, items[i5].it, data2[i5].it);
            } else if (items[i5].ty === "tm") {
            }
          }
          if (isMain) {
            this.drawLayer();
          }
        };
        CVShapeElement.prototype.renderStyledShape = function(styledShape, shape) {
          if (this._isFirstFrame || shape._mdf || styledShape.transforms._mdf) {
            var shapeNodes = styledShape.trNodes;
            var paths = shape.paths;
            var i5;
            var len;
            var j4;
            var jLen = paths._length;
            shapeNodes.length = 0;
            var groupTransformMat = styledShape.transforms.finalTransform;
            for (j4 = 0; j4 < jLen; j4 += 1) {
              var pathNodes = paths.shapes[j4];
              if (pathNodes && pathNodes.v) {
                len = pathNodes._length;
                for (i5 = 1; i5 < len; i5 += 1) {
                  if (i5 === 1) {
                    shapeNodes.push({
                      t: "m",
                      p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                    });
                  }
                  shapeNodes.push({
                    t: "c",
                    pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i5 - 1], pathNodes.i[i5], pathNodes.v[i5])
                  });
                }
                if (len === 1) {
                  shapeNodes.push({
                    t: "m",
                    p: groupTransformMat.applyToPointArray(pathNodes.v[0][0], pathNodes.v[0][1], 0)
                  });
                }
                if (pathNodes.c && len) {
                  shapeNodes.push({
                    t: "c",
                    pts: groupTransformMat.applyToTriplePoints(pathNodes.o[i5 - 1], pathNodes.i[0], pathNodes.v[0])
                  });
                  shapeNodes.push({
                    t: "z"
                  });
                }
              }
            }
            styledShape.trNodes = shapeNodes;
          }
        };
        CVShapeElement.prototype.renderPath = function(pathData, itemData) {
          if (pathData.hd !== true && pathData._shouldRender) {
            var i5;
            var len = itemData.styledShapes.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              this.renderStyledShape(itemData.styledShapes[i5], itemData.sh);
            }
          }
        };
        CVShapeElement.prototype.renderFill = function(styleData, itemData, groupTransform) {
          var styleElem = itemData.style;
          if (itemData.c._mdf || this._isFirstFrame) {
            styleElem.co = "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")";
          }
          if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
            styleElem.coOp = itemData.o.v * groupTransform.opacity;
          }
        };
        CVShapeElement.prototype.renderGradientFill = function(styleData, itemData, groupTransform) {
          var styleElem = itemData.style;
          var grd;
          if (!styleElem.grd || itemData.g._mdf || itemData.s._mdf || itemData.e._mdf || styleData.t !== 1 && (itemData.h._mdf || itemData.a._mdf)) {
            var ctx = this.globalData.canvasContext;
            var pt1 = itemData.s.v;
            var pt2 = itemData.e.v;
            if (styleData.t === 1) {
              grd = ctx.createLinearGradient(pt1[0], pt1[1], pt2[0], pt2[1]);
            } else {
              var rad = Math.sqrt(Math.pow(pt1[0] - pt2[0], 2) + Math.pow(pt1[1] - pt2[1], 2));
              var ang = Math.atan2(pt2[1] - pt1[1], pt2[0] - pt1[0]);
              var percent = itemData.h.v;
              if (percent >= 1) {
                percent = 0.99;
              } else if (percent <= -1) {
                percent = -0.99;
              }
              var dist = rad * percent;
              var x3 = Math.cos(ang + itemData.a.v) * dist + pt1[0];
              var y5 = Math.sin(ang + itemData.a.v) * dist + pt1[1];
              grd = ctx.createRadialGradient(x3, y5, 0, pt1[0], pt1[1], rad);
            }
            var i5;
            var len = styleData.g.p;
            var cValues = itemData.g.c;
            var opacity = 1;
            for (i5 = 0; i5 < len; i5 += 1) {
              if (itemData.g._hasOpacity && itemData.g._collapsable) {
                opacity = itemData.g.o[i5 * 2 + 1];
              }
              grd.addColorStop(cValues[i5 * 4] / 100, "rgba(" + cValues[i5 * 4 + 1] + "," + cValues[i5 * 4 + 2] + "," + cValues[i5 * 4 + 3] + "," + opacity + ")");
            }
            styleElem.grd = grd;
          }
          styleElem.coOp = itemData.o.v * groupTransform.opacity;
        };
        CVShapeElement.prototype.renderStroke = function(styleData, itemData, groupTransform) {
          var styleElem = itemData.style;
          var d5 = itemData.d;
          if (d5 && (d5._mdf || this._isFirstFrame)) {
            styleElem.da = d5.dashArray;
            styleElem["do"] = d5.dashoffset[0];
          }
          if (itemData.c._mdf || this._isFirstFrame) {
            styleElem.co = "rgb(" + bmFloor(itemData.c.v[0]) + "," + bmFloor(itemData.c.v[1]) + "," + bmFloor(itemData.c.v[2]) + ")";
          }
          if (itemData.o._mdf || groupTransform._opMdf || this._isFirstFrame) {
            styleElem.coOp = itemData.o.v * groupTransform.opacity;
          }
          if (itemData.w._mdf || this._isFirstFrame) {
            styleElem.wi = itemData.w.v;
          }
        };
        CVShapeElement.prototype.destroy = function() {
          this.shapesData = null;
          this.globalData = null;
          this.canvasContext = null;
          this.stylesList.length = 0;
          this.itemsData.length = 0;
        };
        function CVTextElement(data2, globalData2, comp2) {
          this.textSpans = [];
          this.yOffset = 0;
          this.fillColorAnim = false;
          this.strokeColorAnim = false;
          this.strokeWidthAnim = false;
          this.stroke = false;
          this.fill = false;
          this.justifyOffset = 0;
          this.currentRender = null;
          this.renderType = "canvas";
          this.values = {
            fill: "rgba(0,0,0,0)",
            stroke: "rgba(0,0,0,0)",
            sWidth: 0,
            fValue: ""
          };
          this.initElement(data2, globalData2, comp2);
        }
        extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement, ITextElement], CVTextElement);
        CVTextElement.prototype.tHelper = createTag("canvas").getContext("2d");
        CVTextElement.prototype.buildNewText = function() {
          var documentData = this.textProperty.currentData;
          this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
          var hasFill = false;
          if (documentData.fc) {
            hasFill = true;
            this.values.fill = this.buildColor(documentData.fc);
          } else {
            this.values.fill = "rgba(0,0,0,0)";
          }
          this.fill = hasFill;
          var hasStroke = false;
          if (documentData.sc) {
            hasStroke = true;
            this.values.stroke = this.buildColor(documentData.sc);
            this.values.sWidth = documentData.sw;
          }
          var fontData = this.globalData.fontManager.getFontByName(documentData.f);
          var i5;
          var len;
          var letters = documentData.l;
          var matrixHelper = this.mHelper;
          this.stroke = hasStroke;
          this.values.fValue = documentData.finalSize + "px " + this.globalData.fontManager.getFontByName(documentData.f).fFamily;
          len = documentData.finalText.length;
          var charData;
          var shapeData;
          var k4;
          var kLen;
          var shapes;
          var j4;
          var jLen;
          var pathNodes;
          var commands;
          var pathArr;
          var singleShape = this.data.singleShape;
          var trackingOffset = documentData.tr * 1e-3 * documentData.finalSize;
          var xPos = 0;
          var yPos = 0;
          var firstLine = true;
          var cnt = 0;
          for (i5 = 0; i5 < len; i5 += 1) {
            charData = this.globalData.fontManager.getCharData(documentData.finalText[i5], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
            shapeData = charData && charData.data || {};
            matrixHelper.reset();
            if (singleShape && letters[i5].n) {
              xPos = -trackingOffset;
              yPos += documentData.yOffset;
              yPos += firstLine ? 1 : 0;
              firstLine = false;
            }
            shapes = shapeData.shapes ? shapeData.shapes[0].it : [];
            jLen = shapes.length;
            matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
            if (singleShape) {
              this.applyTextPropertiesToMatrix(documentData, matrixHelper, letters[i5].line, xPos, yPos);
            }
            commands = createSizedArray(jLen - 1);
            var commandsCounter = 0;
            for (j4 = 0; j4 < jLen; j4 += 1) {
              if (shapes[j4].ty === "sh") {
                kLen = shapes[j4].ks.k.i.length;
                pathNodes = shapes[j4].ks.k;
                pathArr = [];
                for (k4 = 1; k4 < kLen; k4 += 1) {
                  if (k4 === 1) {
                    pathArr.push(matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
                  }
                  pathArr.push(matrixHelper.applyToX(pathNodes.o[k4 - 1][0], pathNodes.o[k4 - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k4 - 1][0], pathNodes.o[k4 - 1][1], 0), matrixHelper.applyToX(pathNodes.i[k4][0], pathNodes.i[k4][1], 0), matrixHelper.applyToY(pathNodes.i[k4][0], pathNodes.i[k4][1], 0), matrixHelper.applyToX(pathNodes.v[k4][0], pathNodes.v[k4][1], 0), matrixHelper.applyToY(pathNodes.v[k4][0], pathNodes.v[k4][1], 0));
                }
                pathArr.push(matrixHelper.applyToX(pathNodes.o[k4 - 1][0], pathNodes.o[k4 - 1][1], 0), matrixHelper.applyToY(pathNodes.o[k4 - 1][0], pathNodes.o[k4 - 1][1], 0), matrixHelper.applyToX(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToY(pathNodes.i[0][0], pathNodes.i[0][1], 0), matrixHelper.applyToX(pathNodes.v[0][0], pathNodes.v[0][1], 0), matrixHelper.applyToY(pathNodes.v[0][0], pathNodes.v[0][1], 0));
                commands[commandsCounter] = pathArr;
                commandsCounter += 1;
              }
            }
            if (singleShape) {
              xPos += letters[i5].l;
              xPos += trackingOffset;
            }
            if (this.textSpans[cnt]) {
              this.textSpans[cnt].elem = commands;
            } else {
              this.textSpans[cnt] = {
                elem: commands
              };
            }
            cnt += 1;
          }
        };
        CVTextElement.prototype.renderInnerContent = function() {
          this.validateText();
          var ctx = this.canvasContext;
          ctx.font = this.values.fValue;
          this.globalData.renderer.ctxLineCap("butt");
          this.globalData.renderer.ctxLineJoin("miter");
          this.globalData.renderer.ctxMiterLimit(4);
          if (!this.data.singleShape) {
            this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
          }
          var i5;
          var len;
          var j4;
          var jLen;
          var k4;
          var kLen;
          var renderedLetters = this.textAnimator.renderedLetters;
          var letters = this.textProperty.currentData.l;
          len = letters.length;
          var renderedLetter;
          var lastFill = null;
          var lastStroke = null;
          var lastStrokeW = null;
          var commands;
          var pathArr;
          var renderer2 = this.globalData.renderer;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (!letters[i5].n) {
              renderedLetter = renderedLetters[i5];
              if (renderedLetter) {
                renderer2.save();
                renderer2.ctxTransform(renderedLetter.p);
                renderer2.ctxOpacity(renderedLetter.o);
              }
              if (this.fill) {
                if (renderedLetter && renderedLetter.fc) {
                  if (lastFill !== renderedLetter.fc) {
                    renderer2.ctxFillStyle(renderedLetter.fc);
                    lastFill = renderedLetter.fc;
                  }
                } else if (lastFill !== this.values.fill) {
                  lastFill = this.values.fill;
                  renderer2.ctxFillStyle(this.values.fill);
                }
                commands = this.textSpans[i5].elem;
                jLen = commands.length;
                this.globalData.canvasContext.beginPath();
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  pathArr = commands[j4];
                  kLen = pathArr.length;
                  this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
                  for (k4 = 2; k4 < kLen; k4 += 6) {
                    this.globalData.canvasContext.bezierCurveTo(pathArr[k4], pathArr[k4 + 1], pathArr[k4 + 2], pathArr[k4 + 3], pathArr[k4 + 4], pathArr[k4 + 5]);
                  }
                }
                this.globalData.canvasContext.closePath();
                renderer2.ctxFill();
              }
              if (this.stroke) {
                if (renderedLetter && renderedLetter.sw) {
                  if (lastStrokeW !== renderedLetter.sw) {
                    lastStrokeW = renderedLetter.sw;
                    renderer2.ctxLineWidth(renderedLetter.sw);
                  }
                } else if (lastStrokeW !== this.values.sWidth) {
                  lastStrokeW = this.values.sWidth;
                  renderer2.ctxLineWidth(this.values.sWidth);
                }
                if (renderedLetter && renderedLetter.sc) {
                  if (lastStroke !== renderedLetter.sc) {
                    lastStroke = renderedLetter.sc;
                    renderer2.ctxStrokeStyle(renderedLetter.sc);
                  }
                } else if (lastStroke !== this.values.stroke) {
                  lastStroke = this.values.stroke;
                  renderer2.ctxStrokeStyle(this.values.stroke);
                }
                commands = this.textSpans[i5].elem;
                jLen = commands.length;
                this.globalData.canvasContext.beginPath();
                for (j4 = 0; j4 < jLen; j4 += 1) {
                  pathArr = commands[j4];
                  kLen = pathArr.length;
                  this.globalData.canvasContext.moveTo(pathArr[0], pathArr[1]);
                  for (k4 = 2; k4 < kLen; k4 += 6) {
                    this.globalData.canvasContext.bezierCurveTo(pathArr[k4], pathArr[k4 + 1], pathArr[k4 + 2], pathArr[k4 + 3], pathArr[k4 + 4], pathArr[k4 + 5]);
                  }
                }
                this.globalData.canvasContext.closePath();
                renderer2.ctxStroke();
              }
              if (renderedLetter) {
                this.globalData.renderer.restore();
              }
            }
          }
        };
        function CVImageElement(data2, globalData2, comp2) {
          this.assetData = globalData2.getAssetData(data2.refId);
          this.img = globalData2.imageLoader.getAsset(this.assetData);
          this.initElement(data2, globalData2, comp2);
        }
        extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVImageElement);
        CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement;
        CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
        CVImageElement.prototype.createContent = function() {
          if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {
            var canvas = createTag("canvas");
            canvas.width = this.assetData.w;
            canvas.height = this.assetData.h;
            var ctx = canvas.getContext("2d");
            var imgW = this.img.width;
            var imgH = this.img.height;
            var imgRel = imgW / imgH;
            var canvasRel = this.assetData.w / this.assetData.h;
            var widthCrop;
            var heightCrop;
            var par = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;
            if (imgRel > canvasRel && par === "xMidYMid slice" || imgRel < canvasRel && par !== "xMidYMid slice") {
              heightCrop = imgH;
              widthCrop = heightCrop * canvasRel;
            } else {
              widthCrop = imgW;
              heightCrop = widthCrop / canvasRel;
            }
            ctx.drawImage(this.img, (imgW - widthCrop) / 2, (imgH - heightCrop) / 2, widthCrop, heightCrop, 0, 0, this.assetData.w, this.assetData.h);
            this.img = canvas;
          }
        };
        CVImageElement.prototype.renderInnerContent = function() {
          this.canvasContext.drawImage(this.img, 0, 0);
        };
        CVImageElement.prototype.destroy = function() {
          this.img = null;
        };
        function CVSolidElement(data2, globalData2, comp2) {
          this.initElement(data2, globalData2, comp2);
        }
        extendPrototype([BaseElement, TransformElement, CVBaseElement, HierarchyElement, FrameElement, RenderableElement], CVSolidElement);
        CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement;
        CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame;
        CVSolidElement.prototype.renderInnerContent = function() {
          this.globalData.renderer.ctxFillStyle(this.data.sc);
          this.globalData.renderer.ctxFillRect(0, 0, this.data.sw, this.data.sh);
        };
        function CanvasRendererBase() {
        }
        extendPrototype([BaseRenderer], CanvasRendererBase);
        CanvasRendererBase.prototype.createShape = function(data2) {
          return new CVShapeElement(data2, this.globalData, this);
        };
        CanvasRendererBase.prototype.createText = function(data2) {
          return new CVTextElement(data2, this.globalData, this);
        };
        CanvasRendererBase.prototype.createImage = function(data2) {
          return new CVImageElement(data2, this.globalData, this);
        };
        CanvasRendererBase.prototype.createSolid = function(data2) {
          return new CVSolidElement(data2, this.globalData, this);
        };
        CanvasRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;
        CanvasRendererBase.prototype.ctxTransform = function(props) {
          if (props[0] === 1 && props[1] === 0 && props[4] === 0 && props[5] === 1 && props[12] === 0 && props[13] === 0) {
            return;
          }
          this.canvasContext.transform(props[0], props[1], props[4], props[5], props[12], props[13]);
        };
        CanvasRendererBase.prototype.ctxOpacity = function(op) {
          this.canvasContext.globalAlpha *= op < 0 ? 0 : op;
        };
        CanvasRendererBase.prototype.ctxFillStyle = function(value2) {
          this.canvasContext.fillStyle = value2;
        };
        CanvasRendererBase.prototype.ctxStrokeStyle = function(value2) {
          this.canvasContext.strokeStyle = value2;
        };
        CanvasRendererBase.prototype.ctxLineWidth = function(value2) {
          this.canvasContext.lineWidth = value2;
        };
        CanvasRendererBase.prototype.ctxLineCap = function(value2) {
          this.canvasContext.lineCap = value2;
        };
        CanvasRendererBase.prototype.ctxLineJoin = function(value2) {
          this.canvasContext.lineJoin = value2;
        };
        CanvasRendererBase.prototype.ctxMiterLimit = function(value2) {
          this.canvasContext.miterLimit = value2;
        };
        CanvasRendererBase.prototype.ctxFill = function(rule) {
          this.canvasContext.fill(rule);
        };
        CanvasRendererBase.prototype.ctxFillRect = function(x3, y5, w5, h5) {
          this.canvasContext.fillRect(x3, y5, w5, h5);
        };
        CanvasRendererBase.prototype.ctxStroke = function() {
          this.canvasContext.stroke();
        };
        CanvasRendererBase.prototype.reset = function() {
          if (!this.renderConfig.clearCanvas) {
            this.canvasContext.restore();
            return;
          }
          this.contextData.reset();
        };
        CanvasRendererBase.prototype.save = function() {
          this.canvasContext.save();
        };
        CanvasRendererBase.prototype.restore = function(actionFlag) {
          if (!this.renderConfig.clearCanvas) {
            this.canvasContext.restore();
            return;
          }
          if (actionFlag) {
            this.globalData.blendMode = "source-over";
          }
          this.contextData.restore(actionFlag);
        };
        CanvasRendererBase.prototype.configAnimation = function(animData) {
          if (this.animationItem.wrapper) {
            this.animationItem.container = createTag("canvas");
            var containerStyle = this.animationItem.container.style;
            containerStyle.width = "100%";
            containerStyle.height = "100%";
            var origin = "0px 0px 0px";
            containerStyle.transformOrigin = origin;
            containerStyle.mozTransformOrigin = origin;
            containerStyle.webkitTransformOrigin = origin;
            containerStyle["-webkit-transform"] = origin;
            containerStyle.contentVisibility = this.renderConfig.contentVisibility;
            this.animationItem.wrapper.appendChild(this.animationItem.container);
            this.canvasContext = this.animationItem.container.getContext("2d");
            if (this.renderConfig.className) {
              this.animationItem.container.setAttribute("class", this.renderConfig.className);
            }
            if (this.renderConfig.id) {
              this.animationItem.container.setAttribute("id", this.renderConfig.id);
            }
          } else {
            this.canvasContext = this.renderConfig.context;
          }
          this.contextData.setContext(this.canvasContext);
          this.data = animData;
          this.layers = animData.layers;
          this.transformCanvas = {
            w: animData.w,
            h: animData.h,
            sx: 0,
            sy: 0,
            tx: 0,
            ty: 0
          };
          this.setupGlobalData(animData, document.body);
          this.globalData.canvasContext = this.canvasContext;
          this.globalData.renderer = this;
          this.globalData.isDashed = false;
          this.globalData.progressiveLoad = this.renderConfig.progressiveLoad;
          this.globalData.transformCanvas = this.transformCanvas;
          this.elements = createSizedArray(animData.layers.length);
          this.updateContainerSize();
        };
        CanvasRendererBase.prototype.updateContainerSize = function(width2, height2) {
          this.reset();
          var elementWidth;
          var elementHeight;
          if (width2) {
            elementWidth = width2;
            elementHeight = height2;
            this.canvasContext.canvas.width = elementWidth;
            this.canvasContext.canvas.height = elementHeight;
          } else {
            if (this.animationItem.wrapper && this.animationItem.container) {
              elementWidth = this.animationItem.wrapper.offsetWidth;
              elementHeight = this.animationItem.wrapper.offsetHeight;
            } else {
              elementWidth = this.canvasContext.canvas.width;
              elementHeight = this.canvasContext.canvas.height;
            }
            this.canvasContext.canvas.width = elementWidth * this.renderConfig.dpr;
            this.canvasContext.canvas.height = elementHeight * this.renderConfig.dpr;
          }
          var elementRel;
          var animationRel;
          if (this.renderConfig.preserveAspectRatio.indexOf("meet") !== -1 || this.renderConfig.preserveAspectRatio.indexOf("slice") !== -1) {
            var par = this.renderConfig.preserveAspectRatio.split(" ");
            var fillType = par[1] || "meet";
            var pos = par[0] || "xMidYMid";
            var xPos = pos.substr(0, 4);
            var yPos = pos.substr(4);
            elementRel = elementWidth / elementHeight;
            animationRel = this.transformCanvas.w / this.transformCanvas.h;
            if (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice") {
              this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
              this.transformCanvas.sy = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
            } else {
              this.transformCanvas.sx = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
              this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
            }
            if (xPos === "xMid" && (animationRel < elementRel && fillType === "meet" || animationRel > elementRel && fillType === "slice")) {
              this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) / 2 * this.renderConfig.dpr;
            } else if (xPos === "xMax" && (animationRel < elementRel && fillType === "meet" || animationRel > elementRel && fillType === "slice")) {
              this.transformCanvas.tx = (elementWidth - this.transformCanvas.w * (elementHeight / this.transformCanvas.h)) * this.renderConfig.dpr;
            } else {
              this.transformCanvas.tx = 0;
            }
            if (yPos === "YMid" && (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice")) {
              this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) / 2 * this.renderConfig.dpr;
            } else if (yPos === "YMax" && (animationRel > elementRel && fillType === "meet" || animationRel < elementRel && fillType === "slice")) {
              this.transformCanvas.ty = (elementHeight - this.transformCanvas.h * (elementWidth / this.transformCanvas.w)) * this.renderConfig.dpr;
            } else {
              this.transformCanvas.ty = 0;
            }
          } else if (this.renderConfig.preserveAspectRatio === "none") {
            this.transformCanvas.sx = elementWidth / (this.transformCanvas.w / this.renderConfig.dpr);
            this.transformCanvas.sy = elementHeight / (this.transformCanvas.h / this.renderConfig.dpr);
            this.transformCanvas.tx = 0;
            this.transformCanvas.ty = 0;
          } else {
            this.transformCanvas.sx = this.renderConfig.dpr;
            this.transformCanvas.sy = this.renderConfig.dpr;
            this.transformCanvas.tx = 0;
            this.transformCanvas.ty = 0;
          }
          this.transformCanvas.props = [this.transformCanvas.sx, 0, 0, 0, 0, this.transformCanvas.sy, 0, 0, 0, 0, 1, 0, this.transformCanvas.tx, this.transformCanvas.ty, 0, 1];
          this.ctxTransform(this.transformCanvas.props);
          this.canvasContext.beginPath();
          this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
          this.canvasContext.closePath();
          this.canvasContext.clip();
          this.renderFrame(this.renderedFrame, true);
        };
        CanvasRendererBase.prototype.destroy = function() {
          if (this.renderConfig.clearCanvas && this.animationItem.wrapper) {
            this.animationItem.wrapper.innerText = "";
          }
          var i5;
          var len = this.layers ? this.layers.length : 0;
          for (i5 = len - 1; i5 >= 0; i5 -= 1) {
            if (this.elements[i5] && this.elements[i5].destroy) {
              this.elements[i5].destroy();
            }
          }
          this.elements.length = 0;
          this.globalData.canvasContext = null;
          this.animationItem.container = null;
          this.destroyed = true;
        };
        CanvasRendererBase.prototype.renderFrame = function(num, forceRender) {
          if (this.renderedFrame === num && this.renderConfig.clearCanvas === true && !forceRender || this.destroyed || num === -1) {
            return;
          }
          this.renderedFrame = num;
          this.globalData.frameNum = num - this.animationItem._isFirstFrame;
          this.globalData.frameId += 1;
          this.globalData._mdf = !this.renderConfig.clearCanvas || forceRender;
          this.globalData.projectInterface.currentFrame = num;
          var i5;
          var len = this.layers.length;
          if (!this.completeLayers) {
            this.checkLayers(num);
          }
          for (i5 = len - 1; i5 >= 0; i5 -= 1) {
            if (this.completeLayers || this.elements[i5]) {
              this.elements[i5].prepareFrame(num - this.layers[i5].st);
            }
          }
          if (this.globalData._mdf) {
            if (this.renderConfig.clearCanvas === true) {
              this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h);
            } else {
              this.save();
            }
            for (i5 = len - 1; i5 >= 0; i5 -= 1) {
              if (this.completeLayers || this.elements[i5]) {
                this.elements[i5].renderFrame();
              }
            }
            if (this.renderConfig.clearCanvas !== true) {
              this.restore();
            }
          }
        };
        CanvasRendererBase.prototype.buildItem = function(pos) {
          var elements = this.elements;
          if (elements[pos] || this.layers[pos].ty === 99) {
            return;
          }
          var element = this.createItem(this.layers[pos], this, this.globalData);
          elements[pos] = element;
          element.initExpressions();
        };
        CanvasRendererBase.prototype.checkPendingElements = function() {
          while (this.pendingElements.length) {
            var element = this.pendingElements.pop();
            element.checkParenting();
          }
        };
        CanvasRendererBase.prototype.hide = function() {
          this.animationItem.container.style.display = "none";
        };
        CanvasRendererBase.prototype.show = function() {
          this.animationItem.container.style.display = "block";
        };
        function CanvasContext() {
          this.opacity = -1;
          this.transform = createTypedArray("float32", 16);
          this.fillStyle = "";
          this.strokeStyle = "";
          this.lineWidth = "";
          this.lineCap = "";
          this.lineJoin = "";
          this.miterLimit = "";
          this.id = Math.random();
        }
        function CVContextData() {
          this.stack = [];
          this.cArrPos = 0;
          this.cTr = new Matrix();
          var i5;
          var len = 15;
          for (i5 = 0; i5 < len; i5 += 1) {
            var canvasContext = new CanvasContext();
            this.stack[i5] = canvasContext;
          }
          this._length = len;
          this.nativeContext = null;
          this.transformMat = new Matrix();
          this.currentOpacity = 1;
          this.currentFillStyle = "";
          this.appliedFillStyle = "";
          this.currentStrokeStyle = "";
          this.appliedStrokeStyle = "";
          this.currentLineWidth = "";
          this.appliedLineWidth = "";
          this.currentLineCap = "";
          this.appliedLineCap = "";
          this.currentLineJoin = "";
          this.appliedLineJoin = "";
          this.appliedMiterLimit = "";
          this.currentMiterLimit = "";
        }
        CVContextData.prototype.duplicate = function() {
          var newLength = this._length * 2;
          var i5 = 0;
          for (i5 = this._length; i5 < newLength; i5 += 1) {
            this.stack[i5] = new CanvasContext();
          }
          this._length = newLength;
        };
        CVContextData.prototype.reset = function() {
          this.cArrPos = 0;
          this.cTr.reset();
          this.stack[this.cArrPos].opacity = 1;
        };
        CVContextData.prototype.restore = function(forceRestore) {
          this.cArrPos -= 1;
          var currentContext = this.stack[this.cArrPos];
          var transform2 = currentContext.transform;
          var i5;
          var arr = this.cTr.props;
          for (i5 = 0; i5 < 16; i5 += 1) {
            arr[i5] = transform2[i5];
          }
          if (forceRestore) {
            this.nativeContext.restore();
            var prevStack = this.stack[this.cArrPos + 1];
            this.appliedFillStyle = prevStack.fillStyle;
            this.appliedStrokeStyle = prevStack.strokeStyle;
            this.appliedLineWidth = prevStack.lineWidth;
            this.appliedLineCap = prevStack.lineCap;
            this.appliedLineJoin = prevStack.lineJoin;
            this.appliedMiterLimit = prevStack.miterLimit;
          }
          this.nativeContext.setTransform(transform2[0], transform2[1], transform2[4], transform2[5], transform2[12], transform2[13]);
          if (forceRestore || currentContext.opacity !== -1 && this.currentOpacity !== currentContext.opacity) {
            this.nativeContext.globalAlpha = currentContext.opacity;
            this.currentOpacity = currentContext.opacity;
          }
          this.currentFillStyle = currentContext.fillStyle;
          this.currentStrokeStyle = currentContext.strokeStyle;
          this.currentLineWidth = currentContext.lineWidth;
          this.currentLineCap = currentContext.lineCap;
          this.currentLineJoin = currentContext.lineJoin;
          this.currentMiterLimit = currentContext.miterLimit;
        };
        CVContextData.prototype.save = function(saveOnNativeFlag) {
          if (saveOnNativeFlag) {
            this.nativeContext.save();
          }
          var props = this.cTr.props;
          if (this._length <= this.cArrPos) {
            this.duplicate();
          }
          var currentStack = this.stack[this.cArrPos];
          var i5;
          for (i5 = 0; i5 < 16; i5 += 1) {
            currentStack.transform[i5] = props[i5];
          }
          this.cArrPos += 1;
          var newStack = this.stack[this.cArrPos];
          newStack.opacity = currentStack.opacity;
          newStack.fillStyle = currentStack.fillStyle;
          newStack.strokeStyle = currentStack.strokeStyle;
          newStack.lineWidth = currentStack.lineWidth;
          newStack.lineCap = currentStack.lineCap;
          newStack.lineJoin = currentStack.lineJoin;
          newStack.miterLimit = currentStack.miterLimit;
        };
        CVContextData.prototype.setOpacity = function(value2) {
          this.stack[this.cArrPos].opacity = value2;
        };
        CVContextData.prototype.setContext = function(value2) {
          this.nativeContext = value2;
        };
        CVContextData.prototype.fillStyle = function(value2) {
          if (this.stack[this.cArrPos].fillStyle !== value2) {
            this.currentFillStyle = value2;
            this.stack[this.cArrPos].fillStyle = value2;
          }
        };
        CVContextData.prototype.strokeStyle = function(value2) {
          if (this.stack[this.cArrPos].strokeStyle !== value2) {
            this.currentStrokeStyle = value2;
            this.stack[this.cArrPos].strokeStyle = value2;
          }
        };
        CVContextData.prototype.lineWidth = function(value2) {
          if (this.stack[this.cArrPos].lineWidth !== value2) {
            this.currentLineWidth = value2;
            this.stack[this.cArrPos].lineWidth = value2;
          }
        };
        CVContextData.prototype.lineCap = function(value2) {
          if (this.stack[this.cArrPos].lineCap !== value2) {
            this.currentLineCap = value2;
            this.stack[this.cArrPos].lineCap = value2;
          }
        };
        CVContextData.prototype.lineJoin = function(value2) {
          if (this.stack[this.cArrPos].lineJoin !== value2) {
            this.currentLineJoin = value2;
            this.stack[this.cArrPos].lineJoin = value2;
          }
        };
        CVContextData.prototype.miterLimit = function(value2) {
          if (this.stack[this.cArrPos].miterLimit !== value2) {
            this.currentMiterLimit = value2;
            this.stack[this.cArrPos].miterLimit = value2;
          }
        };
        CVContextData.prototype.transform = function(props) {
          this.transformMat.cloneFromProps(props);
          var currentTransform = this.cTr;
          this.transformMat.multiply(currentTransform);
          currentTransform.cloneFromProps(this.transformMat.props);
          var trProps = currentTransform.props;
          this.nativeContext.setTransform(trProps[0], trProps[1], trProps[4], trProps[5], trProps[12], trProps[13]);
        };
        CVContextData.prototype.opacity = function(op) {
          var currentOpacity = this.stack[this.cArrPos].opacity;
          currentOpacity *= op < 0 ? 0 : op;
          if (this.stack[this.cArrPos].opacity !== currentOpacity) {
            if (this.currentOpacity !== op) {
              this.nativeContext.globalAlpha = op;
              this.currentOpacity = op;
            }
            this.stack[this.cArrPos].opacity = currentOpacity;
          }
        };
        CVContextData.prototype.fill = function(rule) {
          if (this.appliedFillStyle !== this.currentFillStyle) {
            this.appliedFillStyle = this.currentFillStyle;
            this.nativeContext.fillStyle = this.appliedFillStyle;
          }
          this.nativeContext.fill(rule);
        };
        CVContextData.prototype.fillRect = function(x3, y5, w5, h5) {
          if (this.appliedFillStyle !== this.currentFillStyle) {
            this.appliedFillStyle = this.currentFillStyle;
            this.nativeContext.fillStyle = this.appliedFillStyle;
          }
          this.nativeContext.fillRect(x3, y5, w5, h5);
        };
        CVContextData.prototype.stroke = function() {
          if (this.appliedStrokeStyle !== this.currentStrokeStyle) {
            this.appliedStrokeStyle = this.currentStrokeStyle;
            this.nativeContext.strokeStyle = this.appliedStrokeStyle;
          }
          if (this.appliedLineWidth !== this.currentLineWidth) {
            this.appliedLineWidth = this.currentLineWidth;
            this.nativeContext.lineWidth = this.appliedLineWidth;
          }
          if (this.appliedLineCap !== this.currentLineCap) {
            this.appliedLineCap = this.currentLineCap;
            this.nativeContext.lineCap = this.appliedLineCap;
          }
          if (this.appliedLineJoin !== this.currentLineJoin) {
            this.appliedLineJoin = this.currentLineJoin;
            this.nativeContext.lineJoin = this.appliedLineJoin;
          }
          if (this.appliedMiterLimit !== this.currentMiterLimit) {
            this.appliedMiterLimit = this.currentMiterLimit;
            this.nativeContext.miterLimit = this.appliedMiterLimit;
          }
          this.nativeContext.stroke();
        };
        function CVCompElement(data2, globalData2, comp2) {
          this.completeLayers = false;
          this.layers = data2.layers;
          this.pendingElements = [];
          this.elements = createSizedArray(this.layers.length);
          this.initElement(data2, globalData2, comp2);
          this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
            _placeholder: true
          };
        }
        extendPrototype([CanvasRendererBase, ICompElement, CVBaseElement], CVCompElement);
        CVCompElement.prototype.renderInnerContent = function() {
          var ctx = this.canvasContext;
          ctx.beginPath();
          ctx.moveTo(0, 0);
          ctx.lineTo(this.data.w, 0);
          ctx.lineTo(this.data.w, this.data.h);
          ctx.lineTo(0, this.data.h);
          ctx.lineTo(0, 0);
          ctx.clip();
          var i5;
          var len = this.layers.length;
          for (i5 = len - 1; i5 >= 0; i5 -= 1) {
            if (this.completeLayers || this.elements[i5]) {
              this.elements[i5].renderFrame();
            }
          }
        };
        CVCompElement.prototype.destroy = function() {
          var i5;
          var len = this.layers.length;
          for (i5 = len - 1; i5 >= 0; i5 -= 1) {
            if (this.elements[i5]) {
              this.elements[i5].destroy();
            }
          }
          this.layers = null;
          this.elements = null;
        };
        CVCompElement.prototype.createComp = function(data2) {
          return new CVCompElement(data2, this.globalData, this);
        };
        function CanvasRenderer(animationItem, config) {
          this.animationItem = animationItem;
          this.renderConfig = {
            clearCanvas: config && config.clearCanvas !== void 0 ? config.clearCanvas : true,
            context: config && config.context || null,
            progressiveLoad: config && config.progressiveLoad || false,
            preserveAspectRatio: config && config.preserveAspectRatio || "xMidYMid meet",
            imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || "xMidYMid slice",
            contentVisibility: config && config.contentVisibility || "visible",
            className: config && config.className || "",
            id: config && config.id || "",
            runExpressions: !config || config.runExpressions === void 0 || config.runExpressions
          };
          this.renderConfig.dpr = config && config.dpr || 1;
          if (this.animationItem.wrapper) {
            this.renderConfig.dpr = config && config.dpr || window.devicePixelRatio || 1;
          }
          this.renderedFrame = -1;
          this.globalData = {
            frameNum: -1,
            _mdf: false,
            renderConfig: this.renderConfig,
            currentGlobalAlpha: -1
          };
          this.contextData = new CVContextData();
          this.elements = [];
          this.pendingElements = [];
          this.transformMat = new Matrix();
          this.completeLayers = false;
          this.rendererType = "canvas";
          if (this.renderConfig.clearCanvas) {
            this.ctxTransform = this.contextData.transform.bind(this.contextData);
            this.ctxOpacity = this.contextData.opacity.bind(this.contextData);
            this.ctxFillStyle = this.contextData.fillStyle.bind(this.contextData);
            this.ctxStrokeStyle = this.contextData.strokeStyle.bind(this.contextData);
            this.ctxLineWidth = this.contextData.lineWidth.bind(this.contextData);
            this.ctxLineCap = this.contextData.lineCap.bind(this.contextData);
            this.ctxLineJoin = this.contextData.lineJoin.bind(this.contextData);
            this.ctxMiterLimit = this.contextData.miterLimit.bind(this.contextData);
            this.ctxFill = this.contextData.fill.bind(this.contextData);
            this.ctxFillRect = this.contextData.fillRect.bind(this.contextData);
            this.ctxStroke = this.contextData.stroke.bind(this.contextData);
            this.save = this.contextData.save.bind(this.contextData);
          }
        }
        extendPrototype([CanvasRendererBase], CanvasRenderer);
        CanvasRenderer.prototype.createComp = function(data2) {
          return new CVCompElement(data2, this.globalData, this);
        };
        function HBaseElement() {
        }
        HBaseElement.prototype = {
          checkBlendMode: function checkBlendMode() {
          },
          initRendererElement: function initRendererElement() {
            this.baseElement = createTag(this.data.tg || "div");
            if (this.data.hasMask) {
              this.svgElement = createNS("svg");
              this.layerElement = createNS("g");
              this.maskedElement = this.layerElement;
              this.svgElement.appendChild(this.layerElement);
              this.baseElement.appendChild(this.svgElement);
            } else {
              this.layerElement = this.baseElement;
            }
            styleDiv(this.baseElement);
          },
          createContainerElements: function createContainerElements() {
            this.renderableEffectsManager = new CVEffects(this);
            this.transformedElement = this.baseElement;
            this.maskedElement = this.layerElement;
            if (this.data.ln) {
              this.layerElement.setAttribute("id", this.data.ln);
            }
            if (this.data.cl) {
              this.layerElement.setAttribute("class", this.data.cl);
            }
            if (this.data.bm !== 0) {
              this.setBlendMode();
            }
          },
          renderElement: function renderElement() {
            var transformedElementStyle = this.transformedElement ? this.transformedElement.style : {};
            if (this.finalTransform._matMdf) {
              var matrixValue = this.finalTransform.mat.toCSS();
              transformedElementStyle.transform = matrixValue;
              transformedElementStyle.webkitTransform = matrixValue;
            }
            if (this.finalTransform._opMdf) {
              transformedElementStyle.opacity = this.finalTransform.mProp.o.v;
            }
          },
          renderFrame: function renderFrame() {
            if (this.data.hd || this.hidden) {
              return;
            }
            this.renderTransform();
            this.renderRenderable();
            this.renderElement();
            this.renderInnerContent();
            if (this._isFirstFrame) {
              this._isFirstFrame = false;
            }
          },
          destroy: function destroy() {
            this.layerElement = null;
            this.transformedElement = null;
            if (this.matteElement) {
              this.matteElement = null;
            }
            if (this.maskManager) {
              this.maskManager.destroy();
              this.maskManager = null;
            }
          },
          createRenderableComponents: function createRenderableComponents() {
            this.maskManager = new MaskElement(this.data, this, this.globalData);
          },
          addEffects: function addEffects() {
          },
          setMatte: function setMatte() {
          }
        };
        HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement;
        HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy;
        HBaseElement.prototype.buildElementParenting = BaseRenderer.prototype.buildElementParenting;
        function HSolidElement(data2, globalData2, comp2) {
          this.initElement(data2, globalData2, comp2);
        }
        extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement], HSolidElement);
        HSolidElement.prototype.createContent = function() {
          var rect;
          if (this.data.hasMask) {
            rect = createNS("rect");
            rect.setAttribute("width", this.data.sw);
            rect.setAttribute("height", this.data.sh);
            rect.setAttribute("fill", this.data.sc);
            this.svgElement.setAttribute("width", this.data.sw);
            this.svgElement.setAttribute("height", this.data.sh);
          } else {
            rect = createTag("div");
            rect.style.width = this.data.sw + "px";
            rect.style.height = this.data.sh + "px";
            rect.style.backgroundColor = this.data.sc;
          }
          this.layerElement.appendChild(rect);
        };
        function HShapeElement(data2, globalData2, comp2) {
          this.shapes = [];
          this.shapesData = data2.shapes;
          this.stylesList = [];
          this.shapeModifiers = [];
          this.itemsData = [];
          this.processedElements = [];
          this.animatedContents = [];
          this.shapesContainer = createNS("g");
          this.initElement(data2, globalData2, comp2);
          this.prevViewData = [];
          this.currentBBox = {
            x: 999999,
            y: -999999,
            h: 0,
            w: 0
          };
        }
        extendPrototype([BaseElement, TransformElement, HSolidElement, SVGShapeElement, HBaseElement, HierarchyElement, FrameElement, RenderableElement], HShapeElement);
        HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent;
        HShapeElement.prototype.createContent = function() {
          var cont;
          this.baseElement.style.fontSize = 0;
          if (this.data.hasMask) {
            this.layerElement.appendChild(this.shapesContainer);
            cont = this.svgElement;
          } else {
            cont = createNS("svg");
            var size = this.comp.data ? this.comp.data : this.globalData.compSize;
            cont.setAttribute("width", size.w);
            cont.setAttribute("height", size.h);
            cont.appendChild(this.shapesContainer);
            this.layerElement.appendChild(cont);
          }
          this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], true);
          this.filterUniqueShapes();
          this.shapeCont = cont;
        };
        HShapeElement.prototype.getTransformedPoint = function(transformers, point) {
          var i5;
          var len = transformers.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            point = transformers[i5].mProps.v.applyToPointArray(point[0], point[1], 0);
          }
          return point;
        };
        HShapeElement.prototype.calculateShapeBoundingBox = function(item, boundingBox) {
          var shape = item.sh.v;
          var transformers = item.transformers;
          var i5;
          var len = shape._length;
          var vPoint;
          var oPoint;
          var nextIPoint;
          var nextVPoint;
          if (len <= 1) {
            return;
          }
          for (i5 = 0; i5 < len - 1; i5 += 1) {
            vPoint = this.getTransformedPoint(transformers, shape.v[i5]);
            oPoint = this.getTransformedPoint(transformers, shape.o[i5]);
            nextIPoint = this.getTransformedPoint(transformers, shape.i[i5 + 1]);
            nextVPoint = this.getTransformedPoint(transformers, shape.v[i5 + 1]);
            this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
          }
          if (shape.c) {
            vPoint = this.getTransformedPoint(transformers, shape.v[i5]);
            oPoint = this.getTransformedPoint(transformers, shape.o[i5]);
            nextIPoint = this.getTransformedPoint(transformers, shape.i[0]);
            nextVPoint = this.getTransformedPoint(transformers, shape.v[0]);
            this.checkBounds(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox);
          }
        };
        HShapeElement.prototype.checkBounds = function(vPoint, oPoint, nextIPoint, nextVPoint, boundingBox) {
          this.getBoundsOfCurve(vPoint, oPoint, nextIPoint, nextVPoint);
          var bounds = this.shapeBoundingBox;
          boundingBox.x = bmMin(bounds.left, boundingBox.x);
          boundingBox.xMax = bmMax(bounds.right, boundingBox.xMax);
          boundingBox.y = bmMin(bounds.top, boundingBox.y);
          boundingBox.yMax = bmMax(bounds.bottom, boundingBox.yMax);
        };
        HShapeElement.prototype.shapeBoundingBox = {
          left: 0,
          right: 0,
          top: 0,
          bottom: 0
        };
        HShapeElement.prototype.tempBoundingBox = {
          x: 0,
          xMax: 0,
          y: 0,
          yMax: 0,
          width: 0,
          height: 0
        };
        HShapeElement.prototype.getBoundsOfCurve = function(p0, p1, p22, p32) {
          var bounds = [[p0[0], p32[0]], [p0[1], p32[1]]];
          for (var a4, b4, c4, t4, b2ac, t1, t22, i5 = 0; i5 < 2; ++i5) {
            b4 = 6 * p0[i5] - 12 * p1[i5] + 6 * p22[i5];
            a4 = -3 * p0[i5] + 9 * p1[i5] - 9 * p22[i5] + 3 * p32[i5];
            c4 = 3 * p1[i5] - 3 * p0[i5];
            b4 |= 0;
            a4 |= 0;
            c4 |= 0;
            if (a4 === 0 && b4 === 0) {
            } else if (a4 === 0) {
              t4 = -c4 / b4;
              if (t4 > 0 && t4 < 1) {
                bounds[i5].push(this.calculateF(t4, p0, p1, p22, p32, i5));
              }
            } else {
              b2ac = b4 * b4 - 4 * c4 * a4;
              if (b2ac >= 0) {
                t1 = (-b4 + bmSqrt(b2ac)) / (2 * a4);
                if (t1 > 0 && t1 < 1) bounds[i5].push(this.calculateF(t1, p0, p1, p22, p32, i5));
                t22 = (-b4 - bmSqrt(b2ac)) / (2 * a4);
                if (t22 > 0 && t22 < 1) bounds[i5].push(this.calculateF(t22, p0, p1, p22, p32, i5));
              }
            }
          }
          this.shapeBoundingBox.left = bmMin.apply(null, bounds[0]);
          this.shapeBoundingBox.top = bmMin.apply(null, bounds[1]);
          this.shapeBoundingBox.right = bmMax.apply(null, bounds[0]);
          this.shapeBoundingBox.bottom = bmMax.apply(null, bounds[1]);
        };
        HShapeElement.prototype.calculateF = function(t4, p0, p1, p22, p32, i5) {
          return bmPow(1 - t4, 3) * p0[i5] + 3 * bmPow(1 - t4, 2) * t4 * p1[i5] + 3 * (1 - t4) * bmPow(t4, 2) * p22[i5] + bmPow(t4, 3) * p32[i5];
        };
        HShapeElement.prototype.calculateBoundingBox = function(itemsData, boundingBox) {
          var i5;
          var len = itemsData.length;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (itemsData[i5] && itemsData[i5].sh) {
              this.calculateShapeBoundingBox(itemsData[i5], boundingBox);
            } else if (itemsData[i5] && itemsData[i5].it) {
              this.calculateBoundingBox(itemsData[i5].it, boundingBox);
            } else if (itemsData[i5] && itemsData[i5].style && itemsData[i5].w) {
              this.expandStrokeBoundingBox(itemsData[i5].w, boundingBox);
            }
          }
        };
        HShapeElement.prototype.expandStrokeBoundingBox = function(widthProperty, boundingBox) {
          var width2 = 0;
          if (widthProperty.keyframes) {
            for (var i5 = 0; i5 < widthProperty.keyframes.length; i5 += 1) {
              var kfw = widthProperty.keyframes[i5].s;
              if (kfw > width2) {
                width2 = kfw;
              }
            }
            width2 *= widthProperty.mult;
          } else {
            width2 = widthProperty.v * widthProperty.mult;
          }
          boundingBox.x -= width2;
          boundingBox.xMax += width2;
          boundingBox.y -= width2;
          boundingBox.yMax += width2;
        };
        HShapeElement.prototype.currentBoxContains = function(box) {
          return this.currentBBox.x <= box.x && this.currentBBox.y <= box.y && this.currentBBox.width + this.currentBBox.x >= box.x + box.width && this.currentBBox.height + this.currentBBox.y >= box.y + box.height;
        };
        HShapeElement.prototype.renderInnerContent = function() {
          this._renderShapeFrame();
          if (!this.hidden && (this._isFirstFrame || this._mdf)) {
            var tempBoundingBox = this.tempBoundingBox;
            var max = 999999;
            tempBoundingBox.x = max;
            tempBoundingBox.xMax = -max;
            tempBoundingBox.y = max;
            tempBoundingBox.yMax = -max;
            this.calculateBoundingBox(this.itemsData, tempBoundingBox);
            tempBoundingBox.width = tempBoundingBox.xMax < tempBoundingBox.x ? 0 : tempBoundingBox.xMax - tempBoundingBox.x;
            tempBoundingBox.height = tempBoundingBox.yMax < tempBoundingBox.y ? 0 : tempBoundingBox.yMax - tempBoundingBox.y;
            if (this.currentBoxContains(tempBoundingBox)) {
              return;
            }
            var changed = false;
            if (this.currentBBox.w !== tempBoundingBox.width) {
              this.currentBBox.w = tempBoundingBox.width;
              this.shapeCont.setAttribute("width", tempBoundingBox.width);
              changed = true;
            }
            if (this.currentBBox.h !== tempBoundingBox.height) {
              this.currentBBox.h = tempBoundingBox.height;
              this.shapeCont.setAttribute("height", tempBoundingBox.height);
              changed = true;
            }
            if (changed || this.currentBBox.x !== tempBoundingBox.x || this.currentBBox.y !== tempBoundingBox.y) {
              this.currentBBox.w = tempBoundingBox.width;
              this.currentBBox.h = tempBoundingBox.height;
              this.currentBBox.x = tempBoundingBox.x;
              this.currentBBox.y = tempBoundingBox.y;
              this.shapeCont.setAttribute("viewBox", this.currentBBox.x + " " + this.currentBBox.y + " " + this.currentBBox.w + " " + this.currentBBox.h);
              var shapeStyle = this.shapeCont.style;
              var shapeTransform = "translate(" + this.currentBBox.x + "px," + this.currentBBox.y + "px)";
              shapeStyle.transform = shapeTransform;
              shapeStyle.webkitTransform = shapeTransform;
            }
          }
        };
        function HTextElement(data2, globalData2, comp2) {
          this.textSpans = [];
          this.textPaths = [];
          this.currentBBox = {
            x: 999999,
            y: -999999,
            h: 0,
            w: 0
          };
          this.renderType = "svg";
          this.isMasked = false;
          this.initElement(data2, globalData2, comp2);
        }
        extendPrototype([BaseElement, TransformElement, HBaseElement, HierarchyElement, FrameElement, RenderableDOMElement, ITextElement], HTextElement);
        HTextElement.prototype.createContent = function() {
          this.isMasked = this.checkMasks();
          if (this.isMasked) {
            this.renderType = "svg";
            this.compW = this.comp.data.w;
            this.compH = this.comp.data.h;
            this.svgElement.setAttribute("width", this.compW);
            this.svgElement.setAttribute("height", this.compH);
            var g6 = createNS("g");
            this.maskedElement.appendChild(g6);
            this.innerElem = g6;
          } else {
            this.renderType = "html";
            this.innerElem = this.layerElement;
          }
          this.checkParenting();
        };
        HTextElement.prototype.buildNewText = function() {
          var documentData = this.textProperty.currentData;
          this.renderedLetters = createSizedArray(documentData.l ? documentData.l.length : 0);
          var innerElemStyle = this.innerElem.style;
          var textColor = documentData.fc ? this.buildColor(documentData.fc) : "rgba(0,0,0,0)";
          innerElemStyle.fill = textColor;
          innerElemStyle.color = textColor;
          if (documentData.sc) {
            innerElemStyle.stroke = this.buildColor(documentData.sc);
            innerElemStyle.strokeWidth = documentData.sw + "px";
          }
          var fontData = this.globalData.fontManager.getFontByName(documentData.f);
          if (!this.globalData.fontManager.chars) {
            innerElemStyle.fontSize = documentData.finalSize + "px";
            innerElemStyle.lineHeight = documentData.finalSize + "px";
            if (fontData.fClass) {
              this.innerElem.className = fontData.fClass;
            } else {
              innerElemStyle.fontFamily = fontData.fFamily;
              var fWeight = documentData.fWeight;
              var fStyle = documentData.fStyle;
              innerElemStyle.fontStyle = fStyle;
              innerElemStyle.fontWeight = fWeight;
            }
          }
          var i5;
          var len;
          var letters = documentData.l;
          len = letters.length;
          var tSpan;
          var tParent;
          var tCont;
          var matrixHelper = this.mHelper;
          var shapes;
          var shapeStr = "";
          var cnt = 0;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.globalData.fontManager.chars) {
              if (!this.textPaths[cnt]) {
                tSpan = createNS("path");
                tSpan.setAttribute("stroke-linecap", lineCapEnum[1]);
                tSpan.setAttribute("stroke-linejoin", lineJoinEnum[2]);
                tSpan.setAttribute("stroke-miterlimit", "4");
              } else {
                tSpan = this.textPaths[cnt];
              }
              if (!this.isMasked) {
                if (this.textSpans[cnt]) {
                  tParent = this.textSpans[cnt];
                  tCont = tParent.children[0];
                } else {
                  tParent = createTag("div");
                  tParent.style.lineHeight = 0;
                  tCont = createNS("svg");
                  tCont.appendChild(tSpan);
                  styleDiv(tParent);
                }
              }
            } else if (!this.isMasked) {
              if (this.textSpans[cnt]) {
                tParent = this.textSpans[cnt];
                tSpan = this.textPaths[cnt];
              } else {
                tParent = createTag("span");
                styleDiv(tParent);
                tSpan = createTag("span");
                styleDiv(tSpan);
                tParent.appendChild(tSpan);
              }
            } else {
              tSpan = this.textPaths[cnt] ? this.textPaths[cnt] : createNS("text");
            }
            if (this.globalData.fontManager.chars) {
              var charData = this.globalData.fontManager.getCharData(documentData.finalText[i5], fontData.fStyle, this.globalData.fontManager.getFontByName(documentData.f).fFamily);
              var shapeData;
              if (charData) {
                shapeData = charData.data;
              } else {
                shapeData = null;
              }
              matrixHelper.reset();
              if (shapeData && shapeData.shapes && shapeData.shapes.length) {
                shapes = shapeData.shapes[0].it;
                matrixHelper.scale(documentData.finalSize / 100, documentData.finalSize / 100);
                shapeStr = this.createPathShape(matrixHelper, shapes);
                tSpan.setAttribute("d", shapeStr);
              }
              if (!this.isMasked) {
                this.innerElem.appendChild(tParent);
                if (shapeData && shapeData.shapes) {
                  document.body.appendChild(tCont);
                  var boundingBox = tCont.getBBox();
                  tCont.setAttribute("width", boundingBox.width + 2);
                  tCont.setAttribute("height", boundingBox.height + 2);
                  tCont.setAttribute("viewBox", boundingBox.x - 1 + " " + (boundingBox.y - 1) + " " + (boundingBox.width + 2) + " " + (boundingBox.height + 2));
                  var tContStyle = tCont.style;
                  var tContTranslation = "translate(" + (boundingBox.x - 1) + "px," + (boundingBox.y - 1) + "px)";
                  tContStyle.transform = tContTranslation;
                  tContStyle.webkitTransform = tContTranslation;
                  letters[i5].yOffset = boundingBox.y - 1;
                } else {
                  tCont.setAttribute("width", 1);
                  tCont.setAttribute("height", 1);
                }
                tParent.appendChild(tCont);
              } else {
                this.innerElem.appendChild(tSpan);
              }
            } else {
              tSpan.textContent = letters[i5].val;
              tSpan.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve");
              if (!this.isMasked) {
                this.innerElem.appendChild(tParent);
                var tStyle = tSpan.style;
                var tSpanTranslation = "translate3d(0," + -documentData.finalSize / 1.2 + "px,0)";
                tStyle.transform = tSpanTranslation;
                tStyle.webkitTransform = tSpanTranslation;
              } else {
                this.innerElem.appendChild(tSpan);
              }
            }
            if (!this.isMasked) {
              this.textSpans[cnt] = tParent;
            } else {
              this.textSpans[cnt] = tSpan;
            }
            this.textSpans[cnt].style.display = "block";
            this.textPaths[cnt] = tSpan;
            cnt += 1;
          }
          while (cnt < this.textSpans.length) {
            this.textSpans[cnt].style.display = "none";
            cnt += 1;
          }
        };
        HTextElement.prototype.renderInnerContent = function() {
          this.validateText();
          var svgStyle;
          if (this.data.singleShape) {
            if (!this._isFirstFrame && !this.lettersChangedFlag) {
              return;
            }
            if (this.isMasked && this.finalTransform._matMdf) {
              this.svgElement.setAttribute("viewBox", -this.finalTransform.mProp.p.v[0] + " " + -this.finalTransform.mProp.p.v[1] + " " + this.compW + " " + this.compH);
              svgStyle = this.svgElement.style;
              var translation = "translate(" + -this.finalTransform.mProp.p.v[0] + "px," + -this.finalTransform.mProp.p.v[1] + "px)";
              svgStyle.transform = translation;
              svgStyle.webkitTransform = translation;
            }
          }
          this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);
          if (!this.lettersChangedFlag && !this.textAnimator.lettersChangedFlag) {
            return;
          }
          var i5;
          var len;
          var count = 0;
          var renderedLetters = this.textAnimator.renderedLetters;
          var letters = this.textProperty.currentData.l;
          len = letters.length;
          var renderedLetter;
          var textSpan;
          var textPath;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (letters[i5].n) {
              count += 1;
            } else {
              textSpan = this.textSpans[i5];
              textPath = this.textPaths[i5];
              renderedLetter = renderedLetters[count];
              count += 1;
              if (renderedLetter._mdf.m) {
                if (!this.isMasked) {
                  textSpan.style.webkitTransform = renderedLetter.m;
                  textSpan.style.transform = renderedLetter.m;
                } else {
                  textSpan.setAttribute("transform", renderedLetter.m);
                }
              }
              textSpan.style.opacity = renderedLetter.o;
              if (renderedLetter.sw && renderedLetter._mdf.sw) {
                textPath.setAttribute("stroke-width", renderedLetter.sw);
              }
              if (renderedLetter.sc && renderedLetter._mdf.sc) {
                textPath.setAttribute("stroke", renderedLetter.sc);
              }
              if (renderedLetter.fc && renderedLetter._mdf.fc) {
                textPath.setAttribute("fill", renderedLetter.fc);
                textPath.style.color = renderedLetter.fc;
              }
            }
          }
          if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {
            var boundingBox = this.innerElem.getBBox();
            if (this.currentBBox.w !== boundingBox.width) {
              this.currentBBox.w = boundingBox.width;
              this.svgElement.setAttribute("width", boundingBox.width);
            }
            if (this.currentBBox.h !== boundingBox.height) {
              this.currentBBox.h = boundingBox.height;
              this.svgElement.setAttribute("height", boundingBox.height);
            }
            var margin = 1;
            if (this.currentBBox.w !== boundingBox.width + margin * 2 || this.currentBBox.h !== boundingBox.height + margin * 2 || this.currentBBox.x !== boundingBox.x - margin || this.currentBBox.y !== boundingBox.y - margin) {
              this.currentBBox.w = boundingBox.width + margin * 2;
              this.currentBBox.h = boundingBox.height + margin * 2;
              this.currentBBox.x = boundingBox.x - margin;
              this.currentBBox.y = boundingBox.y - margin;
              this.svgElement.setAttribute("viewBox", this.currentBBox.x + " " + this.currentBBox.y + " " + this.currentBBox.w + " " + this.currentBBox.h);
              svgStyle = this.svgElement.style;
              var svgTransform = "translate(" + this.currentBBox.x + "px," + this.currentBBox.y + "px)";
              svgStyle.transform = svgTransform;
              svgStyle.webkitTransform = svgTransform;
            }
          }
        };
        function HCameraElement(data2, globalData2, comp2) {
          this.initFrame();
          this.initBaseData(data2, globalData2, comp2);
          this.initHierarchy();
          var getProp = PropertyFactory.getProp;
          this.pe = getProp(this, data2.pe, 0, 0, this);
          if (data2.ks.p.s) {
            this.px = getProp(this, data2.ks.p.x, 1, 0, this);
            this.py = getProp(this, data2.ks.p.y, 1, 0, this);
            this.pz = getProp(this, data2.ks.p.z, 1, 0, this);
          } else {
            this.p = getProp(this, data2.ks.p, 1, 0, this);
          }
          if (data2.ks.a) {
            this.a = getProp(this, data2.ks.a, 1, 0, this);
          }
          if (data2.ks.or.k.length && data2.ks.or.k[0].to) {
            var i5;
            var len = data2.ks.or.k.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              data2.ks.or.k[i5].to = null;
              data2.ks.or.k[i5].ti = null;
            }
          }
          this.or = getProp(this, data2.ks.or, 1, degToRads, this);
          this.or.sh = true;
          this.rx = getProp(this, data2.ks.rx, 0, degToRads, this);
          this.ry = getProp(this, data2.ks.ry, 0, degToRads, this);
          this.rz = getProp(this, data2.ks.rz, 0, degToRads, this);
          this.mat = new Matrix();
          this._prevMat = new Matrix();
          this._isFirstFrame = true;
          this.finalTransform = {
            mProp: this
          };
        }
        extendPrototype([BaseElement, FrameElement, HierarchyElement], HCameraElement);
        HCameraElement.prototype.setup = function() {
          var i5;
          var len = this.comp.threeDElements.length;
          var comp2;
          var perspectiveStyle;
          var containerStyle;
          for (i5 = 0; i5 < len; i5 += 1) {
            comp2 = this.comp.threeDElements[i5];
            if (comp2.type === "3d") {
              perspectiveStyle = comp2.perspectiveElem.style;
              containerStyle = comp2.container.style;
              var perspective = this.pe.v + "px";
              var origin = "0px 0px 0px";
              var matrix = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
              perspectiveStyle.perspective = perspective;
              perspectiveStyle.webkitPerspective = perspective;
              containerStyle.transformOrigin = origin;
              containerStyle.mozTransformOrigin = origin;
              containerStyle.webkitTransformOrigin = origin;
              perspectiveStyle.transform = matrix;
              perspectiveStyle.webkitTransform = matrix;
            }
          }
        };
        HCameraElement.prototype.createElements = function() {
        };
        HCameraElement.prototype.hide = function() {
        };
        HCameraElement.prototype.renderFrame = function() {
          var _mdf = this._isFirstFrame;
          var i5;
          var len;
          if (this.hierarchy) {
            len = this.hierarchy.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              _mdf = this.hierarchy[i5].finalTransform.mProp._mdf || _mdf;
            }
          }
          if (_mdf || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {
            this.mat.reset();
            if (this.hierarchy) {
              len = this.hierarchy.length - 1;
              for (i5 = len; i5 >= 0; i5 -= 1) {
                var mTransf = this.hierarchy[i5].finalTransform.mProp;
                this.mat.translate(-mTransf.p.v[0], -mTransf.p.v[1], mTransf.p.v[2]);
                this.mat.rotateX(-mTransf.or.v[0]).rotateY(-mTransf.or.v[1]).rotateZ(mTransf.or.v[2]);
                this.mat.rotateX(-mTransf.rx.v).rotateY(-mTransf.ry.v).rotateZ(mTransf.rz.v);
                this.mat.scale(1 / mTransf.s.v[0], 1 / mTransf.s.v[1], 1 / mTransf.s.v[2]);
                this.mat.translate(mTransf.a.v[0], mTransf.a.v[1], mTransf.a.v[2]);
              }
            }
            if (this.p) {
              this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]);
            } else {
              this.mat.translate(-this.px.v, -this.py.v, this.pz.v);
            }
            if (this.a) {
              var diffVector;
              if (this.p) {
                diffVector = [this.p.v[0] - this.a.v[0], this.p.v[1] - this.a.v[1], this.p.v[2] - this.a.v[2]];
              } else {
                diffVector = [this.px.v - this.a.v[0], this.py.v - this.a.v[1], this.pz.v - this.a.v[2]];
              }
              var mag = Math.sqrt(Math.pow(diffVector[0], 2) + Math.pow(diffVector[1], 2) + Math.pow(diffVector[2], 2));
              var lookDir = [diffVector[0] / mag, diffVector[1] / mag, diffVector[2] / mag];
              var lookLengthOnXZ = Math.sqrt(lookDir[2] * lookDir[2] + lookDir[0] * lookDir[0]);
              var mRotationX = Math.atan2(lookDir[1], lookLengthOnXZ);
              var mRotationY = Math.atan2(lookDir[0], -lookDir[2]);
              this.mat.rotateY(mRotationY).rotateX(-mRotationX);
            }
            this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v);
            this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]);
            this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0);
            this.mat.translate(0, 0, this.pe.v);
            var hasMatrixChanged = !this._prevMat.equals(this.mat);
            if ((hasMatrixChanged || this.pe._mdf) && this.comp.threeDElements) {
              len = this.comp.threeDElements.length;
              var comp2;
              var perspectiveStyle;
              var containerStyle;
              for (i5 = 0; i5 < len; i5 += 1) {
                comp2 = this.comp.threeDElements[i5];
                if (comp2.type === "3d") {
                  if (hasMatrixChanged) {
                    var matValue = this.mat.toCSS();
                    containerStyle = comp2.container.style;
                    containerStyle.transform = matValue;
                    containerStyle.webkitTransform = matValue;
                  }
                  if (this.pe._mdf) {
                    perspectiveStyle = comp2.perspectiveElem.style;
                    perspectiveStyle.perspective = this.pe.v + "px";
                    perspectiveStyle.webkitPerspective = this.pe.v + "px";
                  }
                }
              }
              this.mat.clone(this._prevMat);
            }
          }
          this._isFirstFrame = false;
        };
        HCameraElement.prototype.prepareFrame = function(num) {
          this.prepareProperties(num, true);
        };
        HCameraElement.prototype.destroy = function() {
        };
        HCameraElement.prototype.getBaseElement = function() {
          return null;
        };
        function HImageElement(data2, globalData2, comp2) {
          this.assetData = globalData2.getAssetData(data2.refId);
          this.initElement(data2, globalData2, comp2);
        }
        extendPrototype([BaseElement, TransformElement, HBaseElement, HSolidElement, HierarchyElement, FrameElement, RenderableElement], HImageElement);
        HImageElement.prototype.createContent = function() {
          var assetPath = this.globalData.getAssetsPath(this.assetData);
          var img = new Image();
          if (this.data.hasMask) {
            this.imageElem = createNS("image");
            this.imageElem.setAttribute("width", this.assetData.w + "px");
            this.imageElem.setAttribute("height", this.assetData.h + "px");
            this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink", "href", assetPath);
            this.layerElement.appendChild(this.imageElem);
            this.baseElement.setAttribute("width", this.assetData.w);
            this.baseElement.setAttribute("height", this.assetData.h);
          } else {
            this.layerElement.appendChild(img);
          }
          img.crossOrigin = "anonymous";
          img.src = assetPath;
          if (this.data.ln) {
            this.baseElement.setAttribute("id", this.data.ln);
          }
        };
        function HybridRendererBase(animationItem, config) {
          this.animationItem = animationItem;
          this.layers = null;
          this.renderedFrame = -1;
          this.renderConfig = {
            className: config && config.className || "",
            imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || "xMidYMid slice",
            hideOnTransparent: !(config && config.hideOnTransparent === false),
            filterSize: {
              width: config && config.filterSize && config.filterSize.width || "400%",
              height: config && config.filterSize && config.filterSize.height || "400%",
              x: config && config.filterSize && config.filterSize.x || "-100%",
              y: config && config.filterSize && config.filterSize.y || "-100%"
            }
          };
          this.globalData = {
            _mdf: false,
            frameNum: -1,
            renderConfig: this.renderConfig
          };
          this.pendingElements = [];
          this.elements = [];
          this.threeDElements = [];
          this.destroyed = false;
          this.camera = null;
          this.supports3d = true;
          this.rendererType = "html";
        }
        extendPrototype([BaseRenderer], HybridRendererBase);
        HybridRendererBase.prototype.buildItem = SVGRenderer.prototype.buildItem;
        HybridRendererBase.prototype.checkPendingElements = function() {
          while (this.pendingElements.length) {
            var element = this.pendingElements.pop();
            element.checkParenting();
          }
        };
        HybridRendererBase.prototype.appendElementInPos = function(element, pos) {
          var newDOMElement = element.getBaseElement();
          if (!newDOMElement) {
            return;
          }
          var layer = this.layers[pos];
          if (!layer.ddd || !this.supports3d) {
            if (this.threeDElements) {
              this.addTo3dContainer(newDOMElement, pos);
            } else {
              var i5 = 0;
              var nextDOMElement;
              var nextLayer;
              var tmpDOMElement;
              while (i5 < pos) {
                if (this.elements[i5] && this.elements[i5] !== true && this.elements[i5].getBaseElement) {
                  nextLayer = this.elements[i5];
                  tmpDOMElement = this.layers[i5].ddd ? this.getThreeDContainerByPos(i5) : nextLayer.getBaseElement();
                  nextDOMElement = tmpDOMElement || nextDOMElement;
                }
                i5 += 1;
              }
              if (nextDOMElement) {
                if (!layer.ddd || !this.supports3d) {
                  this.layerElement.insertBefore(newDOMElement, nextDOMElement);
                }
              } else if (!layer.ddd || !this.supports3d) {
                this.layerElement.appendChild(newDOMElement);
              }
            }
          } else {
            this.addTo3dContainer(newDOMElement, pos);
          }
        };
        HybridRendererBase.prototype.createShape = function(data2) {
          if (!this.supports3d) {
            return new SVGShapeElement(data2, this.globalData, this);
          }
          return new HShapeElement(data2, this.globalData, this);
        };
        HybridRendererBase.prototype.createText = function(data2) {
          if (!this.supports3d) {
            return new SVGTextLottieElement(data2, this.globalData, this);
          }
          return new HTextElement(data2, this.globalData, this);
        };
        HybridRendererBase.prototype.createCamera = function(data2) {
          this.camera = new HCameraElement(data2, this.globalData, this);
          return this.camera;
        };
        HybridRendererBase.prototype.createImage = function(data2) {
          if (!this.supports3d) {
            return new IImageElement(data2, this.globalData, this);
          }
          return new HImageElement(data2, this.globalData, this);
        };
        HybridRendererBase.prototype.createSolid = function(data2) {
          if (!this.supports3d) {
            return new ISolidElement(data2, this.globalData, this);
          }
          return new HSolidElement(data2, this.globalData, this);
        };
        HybridRendererBase.prototype.createNull = SVGRenderer.prototype.createNull;
        HybridRendererBase.prototype.getThreeDContainerByPos = function(pos) {
          var i5 = 0;
          var len = this.threeDElements.length;
          while (i5 < len) {
            if (this.threeDElements[i5].startPos <= pos && this.threeDElements[i5].endPos >= pos) {
              return this.threeDElements[i5].perspectiveElem;
            }
            i5 += 1;
          }
          return null;
        };
        HybridRendererBase.prototype.createThreeDContainer = function(pos, type) {
          var perspectiveElem = createTag("div");
          var style;
          var containerStyle;
          styleDiv(perspectiveElem);
          var container = createTag("div");
          styleDiv(container);
          if (type === "3d") {
            style = perspectiveElem.style;
            style.width = this.globalData.compSize.w + "px";
            style.height = this.globalData.compSize.h + "px";
            var center = "50% 50%";
            style.webkitTransformOrigin = center;
            style.mozTransformOrigin = center;
            style.transformOrigin = center;
            containerStyle = container.style;
            var matrix = "matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";
            containerStyle.transform = matrix;
            containerStyle.webkitTransform = matrix;
          }
          perspectiveElem.appendChild(container);
          var threeDContainerData = {
            container,
            perspectiveElem,
            startPos: pos,
            endPos: pos,
            type
          };
          this.threeDElements.push(threeDContainerData);
          return threeDContainerData;
        };
        HybridRendererBase.prototype.build3dContainers = function() {
          var i5;
          var len = this.layers.length;
          var lastThreeDContainerData;
          var currentContainer = "";
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.layers[i5].ddd && this.layers[i5].ty !== 3) {
              if (currentContainer !== "3d") {
                currentContainer = "3d";
                lastThreeDContainerData = this.createThreeDContainer(i5, "3d");
              }
              lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i5);
            } else {
              if (currentContainer !== "2d") {
                currentContainer = "2d";
                lastThreeDContainerData = this.createThreeDContainer(i5, "2d");
              }
              lastThreeDContainerData.endPos = Math.max(lastThreeDContainerData.endPos, i5);
            }
          }
          len = this.threeDElements.length;
          for (i5 = len - 1; i5 >= 0; i5 -= 1) {
            this.resizerElem.appendChild(this.threeDElements[i5].perspectiveElem);
          }
        };
        HybridRendererBase.prototype.addTo3dContainer = function(elem2, pos) {
          var i5 = 0;
          var len = this.threeDElements.length;
          while (i5 < len) {
            if (pos <= this.threeDElements[i5].endPos) {
              var j4 = this.threeDElements[i5].startPos;
              var nextElement;
              while (j4 < pos) {
                if (this.elements[j4] && this.elements[j4].getBaseElement) {
                  nextElement = this.elements[j4].getBaseElement();
                }
                j4 += 1;
              }
              if (nextElement) {
                this.threeDElements[i5].container.insertBefore(elem2, nextElement);
              } else {
                this.threeDElements[i5].container.appendChild(elem2);
              }
              break;
            }
            i5 += 1;
          }
        };
        HybridRendererBase.prototype.configAnimation = function(animData) {
          var resizerElem = createTag("div");
          var wrapper = this.animationItem.wrapper;
          var style = resizerElem.style;
          style.width = animData.w + "px";
          style.height = animData.h + "px";
          this.resizerElem = resizerElem;
          styleDiv(resizerElem);
          style.transformStyle = "flat";
          style.mozTransformStyle = "flat";
          style.webkitTransformStyle = "flat";
          if (this.renderConfig.className) {
            resizerElem.setAttribute("class", this.renderConfig.className);
          }
          wrapper.appendChild(resizerElem);
          style.overflow = "hidden";
          var svg = createNS("svg");
          svg.setAttribute("width", "1");
          svg.setAttribute("height", "1");
          styleDiv(svg);
          this.resizerElem.appendChild(svg);
          var defs = createNS("defs");
          svg.appendChild(defs);
          this.data = animData;
          this.setupGlobalData(animData, svg);
          this.globalData.defs = defs;
          this.layers = animData.layers;
          this.layerElement = this.resizerElem;
          this.build3dContainers();
          this.updateContainerSize();
        };
        HybridRendererBase.prototype.destroy = function() {
          if (this.animationItem.wrapper) {
            this.animationItem.wrapper.innerText = "";
          }
          this.animationItem.container = null;
          this.globalData.defs = null;
          var i5;
          var len = this.layers ? this.layers.length : 0;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.elements[i5] && this.elements[i5].destroy) {
              this.elements[i5].destroy();
            }
          }
          this.elements.length = 0;
          this.destroyed = true;
          this.animationItem = null;
        };
        HybridRendererBase.prototype.updateContainerSize = function() {
          var elementWidth = this.animationItem.wrapper.offsetWidth;
          var elementHeight = this.animationItem.wrapper.offsetHeight;
          var elementRel = elementWidth / elementHeight;
          var animationRel = this.globalData.compSize.w / this.globalData.compSize.h;
          var sx;
          var sy;
          var tx;
          var ty;
          if (animationRel > elementRel) {
            sx = elementWidth / this.globalData.compSize.w;
            sy = elementWidth / this.globalData.compSize.w;
            tx = 0;
            ty = (elementHeight - this.globalData.compSize.h * (elementWidth / this.globalData.compSize.w)) / 2;
          } else {
            sx = elementHeight / this.globalData.compSize.h;
            sy = elementHeight / this.globalData.compSize.h;
            tx = (elementWidth - this.globalData.compSize.w * (elementHeight / this.globalData.compSize.h)) / 2;
            ty = 0;
          }
          var style = this.resizerElem.style;
          style.webkitTransform = "matrix3d(" + sx + ",0,0,0,0," + sy + ",0,0,0,0,1,0," + tx + "," + ty + ",0,1)";
          style.transform = style.webkitTransform;
        };
        HybridRendererBase.prototype.renderFrame = SVGRenderer.prototype.renderFrame;
        HybridRendererBase.prototype.hide = function() {
          this.resizerElem.style.display = "none";
        };
        HybridRendererBase.prototype.show = function() {
          this.resizerElem.style.display = "block";
        };
        HybridRendererBase.prototype.initItems = function() {
          this.buildAllItems();
          if (this.camera) {
            this.camera.setup();
          } else {
            var cWidth = this.globalData.compSize.w;
            var cHeight = this.globalData.compSize.h;
            var i5;
            var len = this.threeDElements.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              var style = this.threeDElements[i5].perspectiveElem.style;
              style.webkitPerspective = Math.sqrt(Math.pow(cWidth, 2) + Math.pow(cHeight, 2)) + "px";
              style.perspective = style.webkitPerspective;
            }
          }
        };
        HybridRendererBase.prototype.searchExtraCompositions = function(assets) {
          var i5;
          var len = assets.length;
          var floatingContainer = createTag("div");
          for (i5 = 0; i5 < len; i5 += 1) {
            if (assets[i5].xt) {
              var comp2 = this.createComp(assets[i5], floatingContainer, this.globalData.comp, null);
              comp2.initExpressions();
              this.globalData.projectInterface.registerComposition(comp2);
            }
          }
        };
        function HCompElement(data2, globalData2, comp2) {
          this.layers = data2.layers;
          this.supports3d = !data2.hasMask;
          this.completeLayers = false;
          this.pendingElements = [];
          this.elements = this.layers ? createSizedArray(this.layers.length) : [];
          this.initElement(data2, globalData2, comp2);
          this.tm = data2.tm ? PropertyFactory.getProp(this, data2.tm, 0, globalData2.frameRate, this) : {
            _placeholder: true
          };
        }
        extendPrototype([HybridRendererBase, ICompElement, HBaseElement], HCompElement);
        HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements;
        HCompElement.prototype.createContainerElements = function() {
          this._createBaseContainerElements();
          if (this.data.hasMask) {
            this.svgElement.setAttribute("width", this.data.w);
            this.svgElement.setAttribute("height", this.data.h);
            this.transformedElement = this.baseElement;
          } else {
            this.transformedElement = this.layerElement;
          }
        };
        HCompElement.prototype.addTo3dContainer = function(elem2, pos) {
          var j4 = 0;
          var nextElement;
          while (j4 < pos) {
            if (this.elements[j4] && this.elements[j4].getBaseElement) {
              nextElement = this.elements[j4].getBaseElement();
            }
            j4 += 1;
          }
          if (nextElement) {
            this.layerElement.insertBefore(elem2, nextElement);
          } else {
            this.layerElement.appendChild(elem2);
          }
        };
        HCompElement.prototype.createComp = function(data2) {
          if (!this.supports3d) {
            return new SVGCompElement(data2, this.globalData, this);
          }
          return new HCompElement(data2, this.globalData, this);
        };
        function HybridRenderer(animationItem, config) {
          this.animationItem = animationItem;
          this.layers = null;
          this.renderedFrame = -1;
          this.renderConfig = {
            className: config && config.className || "",
            imagePreserveAspectRatio: config && config.imagePreserveAspectRatio || "xMidYMid slice",
            hideOnTransparent: !(config && config.hideOnTransparent === false),
            filterSize: {
              width: config && config.filterSize && config.filterSize.width || "400%",
              height: config && config.filterSize && config.filterSize.height || "400%",
              x: config && config.filterSize && config.filterSize.x || "-100%",
              y: config && config.filterSize && config.filterSize.y || "-100%"
            },
            runExpressions: !config || config.runExpressions === void 0 || config.runExpressions
          };
          this.globalData = {
            _mdf: false,
            frameNum: -1,
            renderConfig: this.renderConfig
          };
          this.pendingElements = [];
          this.elements = [];
          this.threeDElements = [];
          this.destroyed = false;
          this.camera = null;
          this.supports3d = true;
          this.rendererType = "html";
        }
        extendPrototype([HybridRendererBase], HybridRenderer);
        HybridRenderer.prototype.createComp = function(data2) {
          if (!this.supports3d) {
            return new SVGCompElement(data2, this.globalData, this);
          }
          return new HCompElement(data2, this.globalData, this);
        };
        var CompExpressionInterface = /* @__PURE__ */ (function() {
          return function(comp2) {
            function _thisLayerFunction(name2) {
              var i5 = 0;
              var len = comp2.layers.length;
              while (i5 < len) {
                if (comp2.layers[i5].nm === name2 || comp2.layers[i5].ind === name2) {
                  return comp2.elements[i5].layerInterface;
                }
                i5 += 1;
              }
              return null;
            }
            Object.defineProperty(_thisLayerFunction, "_name", {
              value: comp2.data.nm
            });
            _thisLayerFunction.layer = _thisLayerFunction;
            _thisLayerFunction.pixelAspect = 1;
            _thisLayerFunction.height = comp2.data.h || comp2.globalData.compSize.h;
            _thisLayerFunction.width = comp2.data.w || comp2.globalData.compSize.w;
            _thisLayerFunction.pixelAspect = 1;
            _thisLayerFunction.frameDuration = 1 / comp2.globalData.frameRate;
            _thisLayerFunction.displayStartTime = 0;
            _thisLayerFunction.numLayers = comp2.layers.length;
            return _thisLayerFunction;
          };
        })();
        function _typeof$2(o4) {
          "@babel/helpers - typeof";
          return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o5) {
            return typeof o5;
          } : function(o5) {
            return o5 && "function" == typeof Symbol && o5.constructor === Symbol && o5 !== Symbol.prototype ? "symbol" : typeof o5;
          }, _typeof$2(o4);
        }
        function seedRandom(pool, math) {
          var global = this, width2 = 256, chunks = 6, digits = 52, rngname = "random", startdenom = math.pow(width2, chunks), significance = math.pow(2, digits), overflow = significance * 2, mask2 = width2 - 1, nodecrypto;
          function seedrandom(seed, options, callback) {
            var key2 = [];
            options = options === true ? {
              entropy: true
            } : options || {};
            var shortseed = mixkey(flatten(options.entropy ? [seed, tostring(pool)] : seed === null ? autoseed() : seed, 3), key2);
            var arc4 = new ARC4(key2);
            var prng = function prng2() {
              var n3 = arc4.g(chunks), d5 = startdenom, x3 = 0;
              while (n3 < significance) {
                n3 = (n3 + x3) * width2;
                d5 *= width2;
                x3 = arc4.g(1);
              }
              while (n3 >= overflow) {
                n3 /= 2;
                d5 /= 2;
                x3 >>>= 1;
              }
              return (n3 + x3) / d5;
            };
            prng.int32 = function() {
              return arc4.g(4) | 0;
            };
            prng.quick = function() {
              return arc4.g(4) / 4294967296;
            };
            prng["double"] = prng;
            mixkey(tostring(arc4.S), pool);
            return (options.pass || callback || function(prng2, seed2, is_math_call, state) {
              if (state) {
                if (state.S) {
                  copy(state, arc4);
                }
                prng2.state = function() {
                  return copy(arc4, {});
                };
              }
              if (is_math_call) {
                math[rngname] = prng2;
                return seed2;
              } else return prng2;
            })(prng, shortseed, "global" in options ? options.global : this == math, options.state);
          }
          math["seed" + rngname] = seedrandom;
          function ARC4(key2) {
            var t4, keylen = key2.length, me = this, i5 = 0, j4 = me.i = me.j = 0, s4 = me.S = [];
            if (!keylen) {
              key2 = [keylen++];
            }
            while (i5 < width2) {
              s4[i5] = i5++;
            }
            for (i5 = 0; i5 < width2; i5++) {
              s4[i5] = s4[j4 = mask2 & j4 + key2[i5 % keylen] + (t4 = s4[i5])];
              s4[j4] = t4;
            }
            me.g = function(count) {
              var t5, r4 = 0, i6 = me.i, j5 = me.j, s5 = me.S;
              while (count--) {
                t5 = s5[i6 = mask2 & i6 + 1];
                r4 = r4 * width2 + s5[mask2 & (s5[i6] = s5[j5 = mask2 & j5 + t5]) + (s5[j5] = t5)];
              }
              me.i = i6;
              me.j = j5;
              return r4;
            };
          }
          function copy(f4, t4) {
            t4.i = f4.i;
            t4.j = f4.j;
            t4.S = f4.S.slice();
            return t4;
          }
          function flatten(obj, depth) {
            var result = [], typ = _typeof$2(obj), prop;
            if (depth && typ == "object") {
              for (prop in obj) {
                try {
                  result.push(flatten(obj[prop], depth - 1));
                } catch (e4) {
                }
              }
            }
            return result.length ? result : typ == "string" ? obj : obj + "\0";
          }
          function mixkey(seed, key2) {
            var stringseed = seed + "", smear, j4 = 0;
            while (j4 < stringseed.length) {
              key2[mask2 & j4] = mask2 & (smear ^= key2[mask2 & j4] * 19) + stringseed.charCodeAt(j4++);
            }
            return tostring(key2);
          }
          function autoseed() {
            try {
              if (nodecrypto) {
                return tostring(nodecrypto.randomBytes(width2));
              }
              var out = new Uint8Array(width2);
              (global.crypto || global.msCrypto).getRandomValues(out);
              return tostring(out);
            } catch (e4) {
              var browser = global.navigator, plugins = browser && browser.plugins;
              return [+/* @__PURE__ */ new Date(), global, plugins, global.screen, tostring(pool)];
            }
          }
          function tostring(a4) {
            return String.fromCharCode.apply(0, a4);
          }
          mixkey(math.random(), pool);
        }
        ;
        function initialize$2(BMMath2) {
          seedRandom([], BMMath2);
        }
        var propTypes = {
          SHAPE: "shape"
        };
        function _typeof$1(o4) {
          "@babel/helpers - typeof";
          return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o5) {
            return typeof o5;
          } : function(o5) {
            return o5 && "function" == typeof Symbol && o5.constructor === Symbol && o5 !== Symbol.prototype ? "symbol" : typeof o5;
          }, _typeof$1(o4);
        }
        var ExpressionManager = (function() {
          "use strict";
          var ob = {};
          var Math = BMMath;
          var window = null;
          var document = null;
          var XMLHttpRequest = null;
          var fetch = null;
          var frames = null;
          var _lottieGlobal = {};
          initialize$2(BMMath);
          function resetFrame() {
            _lottieGlobal = {};
          }
          function $bm_isInstanceOfArray(arr) {
            return arr.constructor === Array || arr.constructor === Float32Array;
          }
          function isNumerable(tOfV, v4) {
            return tOfV === "number" || v4 instanceof Number || tOfV === "boolean" || tOfV === "string";
          }
          function $bm_neg(a4) {
            var tOfA = _typeof$1(a4);
            if (tOfA === "number" || a4 instanceof Number || tOfA === "boolean") {
              return -a4;
            }
            if ($bm_isInstanceOfArray(a4)) {
              var i5;
              var lenA = a4.length;
              var retArr = [];
              for (i5 = 0; i5 < lenA; i5 += 1) {
                retArr[i5] = -a4[i5];
              }
              return retArr;
            }
            if (a4.propType) {
              return a4.v;
            }
            return -a4;
          }
          var easeInBez = BezierFactory.getBezierEasing(0.333, 0, 0.833, 0.833, "easeIn").get;
          var easeOutBez = BezierFactory.getBezierEasing(0.167, 0.167, 0.667, 1, "easeOut").get;
          var easeInOutBez = BezierFactory.getBezierEasing(0.33, 0, 0.667, 1, "easeInOut").get;
          function sum(a4, b4) {
            var tOfA = _typeof$1(a4);
            var tOfB = _typeof$1(b4);
            if (isNumerable(tOfA, a4) && isNumerable(tOfB, b4) || tOfA === "string" || tOfB === "string") {
              return a4 + b4;
            }
            if ($bm_isInstanceOfArray(a4) && isNumerable(tOfB, b4)) {
              a4 = a4.slice(0);
              a4[0] += b4;
              return a4;
            }
            if (isNumerable(tOfA, a4) && $bm_isInstanceOfArray(b4)) {
              b4 = b4.slice(0);
              b4[0] = a4 + b4[0];
              return b4;
            }
            if ($bm_isInstanceOfArray(a4) && $bm_isInstanceOfArray(b4)) {
              var i5 = 0;
              var lenA = a4.length;
              var lenB = b4.length;
              var retArr = [];
              while (i5 < lenA || i5 < lenB) {
                if ((typeof a4[i5] === "number" || a4[i5] instanceof Number) && (typeof b4[i5] === "number" || b4[i5] instanceof Number)) {
                  retArr[i5] = a4[i5] + b4[i5];
                } else {
                  retArr[i5] = b4[i5] === void 0 ? a4[i5] : a4[i5] || b4[i5];
                }
                i5 += 1;
              }
              return retArr;
            }
            return 0;
          }
          var add = sum;
          function sub(a4, b4) {
            var tOfA = _typeof$1(a4);
            var tOfB = _typeof$1(b4);
            if (isNumerable(tOfA, a4) && isNumerable(tOfB, b4)) {
              if (tOfA === "string") {
                a4 = parseInt(a4, 10);
              }
              if (tOfB === "string") {
                b4 = parseInt(b4, 10);
              }
              return a4 - b4;
            }
            if ($bm_isInstanceOfArray(a4) && isNumerable(tOfB, b4)) {
              a4 = a4.slice(0);
              a4[0] -= b4;
              return a4;
            }
            if (isNumerable(tOfA, a4) && $bm_isInstanceOfArray(b4)) {
              b4 = b4.slice(0);
              b4[0] = a4 - b4[0];
              return b4;
            }
            if ($bm_isInstanceOfArray(a4) && $bm_isInstanceOfArray(b4)) {
              var i5 = 0;
              var lenA = a4.length;
              var lenB = b4.length;
              var retArr = [];
              while (i5 < lenA || i5 < lenB) {
                if ((typeof a4[i5] === "number" || a4[i5] instanceof Number) && (typeof b4[i5] === "number" || b4[i5] instanceof Number)) {
                  retArr[i5] = a4[i5] - b4[i5];
                } else {
                  retArr[i5] = b4[i5] === void 0 ? a4[i5] : a4[i5] || b4[i5];
                }
                i5 += 1;
              }
              return retArr;
            }
            return 0;
          }
          function mul(a4, b4) {
            var tOfA = _typeof$1(a4);
            var tOfB = _typeof$1(b4);
            var arr;
            if (isNumerable(tOfA, a4) && isNumerable(tOfB, b4)) {
              return a4 * b4;
            }
            var i5;
            var len;
            if ($bm_isInstanceOfArray(a4) && isNumerable(tOfB, b4)) {
              len = a4.length;
              arr = createTypedArray("float32", len);
              for (i5 = 0; i5 < len; i5 += 1) {
                arr[i5] = a4[i5] * b4;
              }
              return arr;
            }
            if (isNumerable(tOfA, a4) && $bm_isInstanceOfArray(b4)) {
              len = b4.length;
              arr = createTypedArray("float32", len);
              for (i5 = 0; i5 < len; i5 += 1) {
                arr[i5] = a4 * b4[i5];
              }
              return arr;
            }
            return 0;
          }
          function div(a4, b4) {
            var tOfA = _typeof$1(a4);
            var tOfB = _typeof$1(b4);
            var arr;
            if (isNumerable(tOfA, a4) && isNumerable(tOfB, b4)) {
              return a4 / b4;
            }
            var i5;
            var len;
            if ($bm_isInstanceOfArray(a4) && isNumerable(tOfB, b4)) {
              len = a4.length;
              arr = createTypedArray("float32", len);
              for (i5 = 0; i5 < len; i5 += 1) {
                arr[i5] = a4[i5] / b4;
              }
              return arr;
            }
            if (isNumerable(tOfA, a4) && $bm_isInstanceOfArray(b4)) {
              len = b4.length;
              arr = createTypedArray("float32", len);
              for (i5 = 0; i5 < len; i5 += 1) {
                arr[i5] = a4 / b4[i5];
              }
              return arr;
            }
            return 0;
          }
          function mod(a4, b4) {
            if (typeof a4 === "string") {
              a4 = parseInt(a4, 10);
            }
            if (typeof b4 === "string") {
              b4 = parseInt(b4, 10);
            }
            return a4 % b4;
          }
          var $bm_sum = sum;
          var $bm_sub = sub;
          var $bm_mul = mul;
          var $bm_div = div;
          var $bm_mod = mod;
          function clamp(num, min, max) {
            if (min > max) {
              var mm = max;
              max = min;
              min = mm;
            }
            return Math.min(Math.max(num, min), max);
          }
          function radiansToDegrees(val2) {
            return val2 / degToRads;
          }
          var radians_to_degrees = radiansToDegrees;
          function degreesToRadians(val2) {
            return val2 * degToRads;
          }
          var degrees_to_radians = radiansToDegrees;
          var helperLengthArray = [0, 0, 0, 0, 0, 0];
          function length(arr1, arr2) {
            if (typeof arr1 === "number" || arr1 instanceof Number) {
              arr2 = arr2 || 0;
              return Math.abs(arr1 - arr2);
            }
            if (!arr2) {
              arr2 = helperLengthArray;
            }
            var i5;
            var len = Math.min(arr1.length, arr2.length);
            var addedLength = 0;
            for (i5 = 0; i5 < len; i5 += 1) {
              addedLength += Math.pow(arr2[i5] - arr1[i5], 2);
            }
            return Math.sqrt(addedLength);
          }
          function normalize(vec) {
            return div(vec, length(vec));
          }
          function rgbToHsl(val2) {
            var r4 = val2[0];
            var g6 = val2[1];
            var b4 = val2[2];
            var max = Math.max(r4, g6, b4);
            var min = Math.min(r4, g6, b4);
            var h5;
            var s4;
            var l5 = (max + min) / 2;
            if (max === min) {
              h5 = 0;
              s4 = 0;
            } else {
              var d5 = max - min;
              s4 = l5 > 0.5 ? d5 / (2 - max - min) : d5 / (max + min);
              switch (max) {
                case r4:
                  h5 = (g6 - b4) / d5 + (g6 < b4 ? 6 : 0);
                  break;
                case g6:
                  h5 = (b4 - r4) / d5 + 2;
                  break;
                case b4:
                  h5 = (r4 - g6) / d5 + 4;
                  break;
                default:
                  break;
              }
              h5 /= 6;
            }
            return [h5, s4, l5, val2[3]];
          }
          function hue2rgb(p5, q5, t4) {
            if (t4 < 0) t4 += 1;
            if (t4 > 1) t4 -= 1;
            if (t4 < 1 / 6) return p5 + (q5 - p5) * 6 * t4;
            if (t4 < 1 / 2) return q5;
            if (t4 < 2 / 3) return p5 + (q5 - p5) * (2 / 3 - t4) * 6;
            return p5;
          }
          function hslToRgb(val2) {
            var h5 = val2[0];
            var s4 = val2[1];
            var l5 = val2[2];
            var r4;
            var g6;
            var b4;
            if (s4 === 0) {
              r4 = l5;
              b4 = l5;
              g6 = l5;
            } else {
              var q5 = l5 < 0.5 ? l5 * (1 + s4) : l5 + s4 - l5 * s4;
              var p5 = 2 * l5 - q5;
              r4 = hue2rgb(p5, q5, h5 + 1 / 3);
              g6 = hue2rgb(p5, q5, h5);
              b4 = hue2rgb(p5, q5, h5 - 1 / 3);
            }
            return [r4, g6, b4, val2[3]];
          }
          function linear(t4, tMin, tMax, value1, value2) {
            if (value1 === void 0 || value2 === void 0) {
              value1 = tMin;
              value2 = tMax;
              tMin = 0;
              tMax = 1;
            }
            if (tMax < tMin) {
              var _tMin = tMax;
              tMax = tMin;
              tMin = _tMin;
            }
            if (t4 <= tMin) {
              return value1;
            }
            if (t4 >= tMax) {
              return value2;
            }
            var perc = tMax === tMin ? 0 : (t4 - tMin) / (tMax - tMin);
            if (!value1.length) {
              return value1 + (value2 - value1) * perc;
            }
            var i5;
            var len = value1.length;
            var arr = createTypedArray("float32", len);
            for (i5 = 0; i5 < len; i5 += 1) {
              arr[i5] = value1[i5] + (value2[i5] - value1[i5]) * perc;
            }
            return arr;
          }
          function random(min, max) {
            if (max === void 0) {
              if (min === void 0) {
                min = 0;
                max = 1;
              } else {
                max = min;
                min = void 0;
              }
            }
            if (max.length) {
              var i5;
              var len = max.length;
              if (!min) {
                min = createTypedArray("float32", len);
              }
              var arr = createTypedArray("float32", len);
              var rnd = BMMath.random();
              for (i5 = 0; i5 < len; i5 += 1) {
                arr[i5] = min[i5] + rnd * (max[i5] - min[i5]);
              }
              return arr;
            }
            if (min === void 0) {
              min = 0;
            }
            var rndm = BMMath.random();
            return min + rndm * (max - min);
          }
          function createPath(points, inTangents, outTangents, closed) {
            var i5;
            var len = points.length;
            var path = shapePool.newElement();
            path.setPathData(!!closed, len);
            var arrPlaceholder = [0, 0];
            var inVertexPoint;
            var outVertexPoint;
            for (i5 = 0; i5 < len; i5 += 1) {
              inVertexPoint = inTangents && inTangents[i5] ? inTangents[i5] : arrPlaceholder;
              outVertexPoint = outTangents && outTangents[i5] ? outTangents[i5] : arrPlaceholder;
              path.setTripleAt(points[i5][0], points[i5][1], outVertexPoint[0] + points[i5][0], outVertexPoint[1] + points[i5][1], inVertexPoint[0] + points[i5][0], inVertexPoint[1] + points[i5][1], i5, true);
            }
            return path;
          }
          function initiateExpression(elem, data, property) {
            function noOp(_value) {
              return _value;
            }
            if (!elem.globalData.renderConfig.runExpressions) {
              return noOp;
            }
            var val = data.x;
            var needsVelocity = /velocity(?![\w\d])/.test(val);
            var _needsRandom = val.indexOf("random") !== -1;
            var elemType = elem.data.ty;
            var transform;
            var $bm_transform;
            var content;
            var effect;
            var thisProperty = property;
            thisProperty._name = elem.data.nm;
            thisProperty.valueAtTime = thisProperty.getValueAtTime;
            Object.defineProperty(thisProperty, "value", {
              get: function get() {
                return thisProperty.v;
              }
            });
            elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate;
            elem.comp.displayStartTime = 0;
            var inPoint = elem.data.ip / elem.comp.globalData.frameRate;
            var outPoint = elem.data.op / elem.comp.globalData.frameRate;
            var width = elem.data.sw ? elem.data.sw : 0;
            var height = elem.data.sh ? elem.data.sh : 0;
            var name = elem.data.nm;
            var loopIn;
            var loop_in;
            var loopOut;
            var loop_out;
            var smooth;
            var toWorld;
            var fromWorld;
            var fromComp;
            var toComp;
            var fromCompToSurface;
            var position;
            var rotation;
            var anchorPoint;
            var scale;
            var thisLayer;
            var thisComp;
            var mask;
            var valueAtTime;
            var velocityAtTime;
            var scoped_bm_rt;
            var expression_function = eval("[function _expression_function(){" + val + ";scoped_bm_rt=$bm_rt}]")[0];
            var numKeys = property.kf ? data.k.length : 0;
            var active = !this.data || this.data.hd !== true;
            var wiggle = (function wiggle2(freq, amp) {
              var iWiggle;
              var j4;
              var lenWiggle = this.pv.length ? this.pv.length : 1;
              var addedAmps = createTypedArray("float32", lenWiggle);
              freq = 5;
              var iterations = Math.floor(time * freq);
              iWiggle = 0;
              j4 = 0;
              while (iWiggle < iterations) {
                for (j4 = 0; j4 < lenWiggle; j4 += 1) {
                  addedAmps[j4] += -amp + amp * 2 * BMMath.random();
                }
                iWiggle += 1;
              }
              var periods = time * freq;
              var perc = periods - Math.floor(periods);
              var arr = createTypedArray("float32", lenWiggle);
              if (lenWiggle > 1) {
                for (j4 = 0; j4 < lenWiggle; j4 += 1) {
                  arr[j4] = this.pv[j4] + addedAmps[j4] + (-amp + amp * 2 * BMMath.random()) * perc;
                }
                return arr;
              }
              return this.pv + addedAmps[0] + (-amp + amp * 2 * BMMath.random()) * perc;
            }).bind(this);
            if (thisProperty.loopIn) {
              loopIn = thisProperty.loopIn.bind(thisProperty);
              loop_in = loopIn;
            }
            if (thisProperty.loopOut) {
              loopOut = thisProperty.loopOut.bind(thisProperty);
              loop_out = loopOut;
            }
            if (thisProperty.smooth) {
              smooth = thisProperty.smooth.bind(thisProperty);
            }
            function loopInDuration(type, duration) {
              return loopIn(type, duration, true);
            }
            function loopOutDuration(type, duration) {
              return loopOut(type, duration, true);
            }
            if (this.getValueAtTime) {
              valueAtTime = this.getValueAtTime.bind(this);
            }
            if (this.getVelocityAtTime) {
              velocityAtTime = this.getVelocityAtTime.bind(this);
            }
            var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);
            function lookAt(elem1, elem2) {
              var fVec = [elem2[0] - elem1[0], elem2[1] - elem1[1], elem2[2] - elem1[2]];
              var pitch = Math.atan2(fVec[0], Math.sqrt(fVec[1] * fVec[1] + fVec[2] * fVec[2])) / degToRads;
              var yaw = -Math.atan2(fVec[1], fVec[2]) / degToRads;
              return [yaw, pitch, 0];
            }
            function easeOut(t4, tMin, tMax, val1, val2) {
              return applyEase(easeOutBez, t4, tMin, tMax, val1, val2);
            }
            function easeIn(t4, tMin, tMax, val1, val2) {
              return applyEase(easeInBez, t4, tMin, tMax, val1, val2);
            }
            function ease(t4, tMin, tMax, val1, val2) {
              return applyEase(easeInOutBez, t4, tMin, tMax, val1, val2);
            }
            function applyEase(fn2, t4, tMin, tMax, val1, val2) {
              if (val1 === void 0) {
                val1 = tMin;
                val2 = tMax;
              } else {
                t4 = (t4 - tMin) / (tMax - tMin);
              }
              if (t4 > 1) {
                t4 = 1;
              } else if (t4 < 0) {
                t4 = 0;
              }
              var mult = fn2(t4);
              if ($bm_isInstanceOfArray(val1)) {
                var iKey;
                var lenKey = val1.length;
                var arr = createTypedArray("float32", lenKey);
                for (iKey = 0; iKey < lenKey; iKey += 1) {
                  arr[iKey] = (val2[iKey] - val1[iKey]) * mult + val1[iKey];
                }
                return arr;
              }
              return (val2 - val1) * mult + val1;
            }
            function nearestKey(time2) {
              var iKey;
              var lenKey = data.k.length;
              var index2;
              var keyTime;
              if (!data.k.length || typeof data.k[0] === "number") {
                index2 = 0;
                keyTime = 0;
              } else {
                index2 = -1;
                time2 *= elem.comp.globalData.frameRate;
                if (time2 < data.k[0].t) {
                  index2 = 1;
                  keyTime = data.k[0].t;
                } else {
                  for (iKey = 0; iKey < lenKey - 1; iKey += 1) {
                    if (time2 === data.k[iKey].t) {
                      index2 = iKey + 1;
                      keyTime = data.k[iKey].t;
                      break;
                    } else if (time2 > data.k[iKey].t && time2 < data.k[iKey + 1].t) {
                      if (time2 - data.k[iKey].t > data.k[iKey + 1].t - time2) {
                        index2 = iKey + 2;
                        keyTime = data.k[iKey + 1].t;
                      } else {
                        index2 = iKey + 1;
                        keyTime = data.k[iKey].t;
                      }
                      break;
                    }
                  }
                  if (index2 === -1) {
                    index2 = iKey + 1;
                    keyTime = data.k[iKey].t;
                  }
                }
              }
              var obKey = {};
              obKey.index = index2;
              obKey.time = keyTime / elem.comp.globalData.frameRate;
              return obKey;
            }
            function key(ind) {
              var obKey;
              var iKey;
              var lenKey;
              if (!data.k.length || typeof data.k[0] === "number") {
                throw new Error("The property has no keyframe at index " + ind);
              }
              ind -= 1;
              obKey = {
                time: data.k[ind].t / elem.comp.globalData.frameRate,
                value: []
              };
              var arr = Object.prototype.hasOwnProperty.call(data.k[ind], "s") ? data.k[ind].s : data.k[ind - 1].e;
              lenKey = arr.length;
              for (iKey = 0; iKey < lenKey; iKey += 1) {
                obKey[iKey] = arr[iKey];
                obKey.value[iKey] = arr[iKey];
              }
              return obKey;
            }
            function framesToTime(fr, fps) {
              if (!fps) {
                fps = elem.comp.globalData.frameRate;
              }
              return fr / fps;
            }
            function timeToFrames(t4, fps) {
              if (!t4 && t4 !== 0) {
                t4 = time;
              }
              if (!fps) {
                fps = elem.comp.globalData.frameRate;
              }
              return t4 * fps;
            }
            function seedRandom(seed) {
              BMMath.seedrandom(randSeed + seed);
            }
            function sourceRectAtTime() {
              return elem.sourceRectAtTime();
            }
            function substring(init2, end) {
              if (typeof value === "string") {
                if (end === void 0) {
                  return value.substring(init2);
                }
                return value.substring(init2, end);
              }
              return "";
            }
            function substr(init2, end) {
              if (typeof value === "string") {
                if (end === void 0) {
                  return value.substr(init2);
                }
                return value.substr(init2, end);
              }
              return "";
            }
            function posterizeTime(framesPerSecond) {
              time = framesPerSecond === 0 ? 0 : Math.floor(time * framesPerSecond) / framesPerSecond;
              value = valueAtTime(time);
            }
            var time;
            var velocity;
            var value;
            var text;
            var textIndex;
            var textTotal;
            var selectorValue;
            var index = elem.data.ind;
            var hasParent = !!(elem.hierarchy && elem.hierarchy.length);
            var parent;
            var randSeed = Math.floor(Math.random() * 1e6);
            var globalData = elem.globalData;
            function executeExpression(_value) {
              value = _value;
              if (this.frameExpressionId === elem.globalData.frameId && this.propType !== "textSelector") {
                return value;
              }
              if (this.propType === "textSelector") {
                textIndex = this.textIndex;
                textTotal = this.textTotal;
                selectorValue = this.selectorValue;
              }
              if (!thisLayer) {
                text = elem.layerInterface.text;
                thisLayer = elem.layerInterface;
                thisComp = elem.comp.compInterface;
                toWorld = thisLayer.toWorld.bind(thisLayer);
                fromWorld = thisLayer.fromWorld.bind(thisLayer);
                fromComp = thisLayer.fromComp.bind(thisLayer);
                toComp = thisLayer.toComp.bind(thisLayer);
                mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null;
                fromCompToSurface = fromComp;
              }
              if (!transform) {
                transform = elem.layerInterface("ADBE Transform Group");
                $bm_transform = transform;
                if (transform) {
                  anchorPoint = transform.anchorPoint;
                }
              }
              if (elemType === 4 && !content) {
                content = thisLayer("ADBE Root Vectors Group");
              }
              if (!effect) {
                effect = thisLayer(4);
              }
              hasParent = !!(elem.hierarchy && elem.hierarchy.length);
              if (hasParent && !parent) {
                parent = elem.hierarchy[0].layerInterface;
              }
              time = this.comp.renderedFrame / this.comp.globalData.frameRate;
              if (_needsRandom) {
                seedRandom(randSeed + time);
              }
              if (needsVelocity) {
                velocity = velocityAtTime(time);
              }
              expression_function();
              this.frameExpressionId = elem.globalData.frameId;
              scoped_bm_rt = scoped_bm_rt.propType === propTypes.SHAPE ? scoped_bm_rt.v : scoped_bm_rt;
              return scoped_bm_rt;
            }
            executeExpression.__preventDeadCodeRemoval = [$bm_transform, anchorPoint, time, velocity, inPoint, outPoint, width, height, name, loop_in, loop_out, smooth, toComp, fromCompToSurface, toWorld, fromWorld, mask, position, rotation, scale, thisComp, numKeys, active, wiggle, loopInDuration, loopOutDuration, comp, lookAt, easeOut, easeIn, ease, nearestKey, key, text, textIndex, textTotal, selectorValue, framesToTime, timeToFrames, sourceRectAtTime, substring, substr, posterizeTime, index, globalData];
            return executeExpression;
          }
          ob.initiateExpression = initiateExpression;
          ob.__preventDeadCodeRemoval = [window, document, XMLHttpRequest, fetch, frames, $bm_neg, add, $bm_sum, $bm_sub, $bm_mul, $bm_div, $bm_mod, clamp, radians_to_degrees, degreesToRadians, degrees_to_radians, normalize, rgbToHsl, hslToRgb, linear, random, createPath, _lottieGlobal];
          ob.resetFrame = resetFrame;
          return ob;
        })();
        var Expressions = (function() {
          var ob2 = {};
          ob2.initExpressions = initExpressions;
          ob2.resetFrame = ExpressionManager.resetFrame;
          function initExpressions(animation) {
            var stackCount = 0;
            var registers = [];
            function pushExpression() {
              stackCount += 1;
            }
            function popExpression() {
              stackCount -= 1;
              if (stackCount === 0) {
                releaseInstances();
              }
            }
            function registerExpressionProperty(expression) {
              if (registers.indexOf(expression) === -1) {
                registers.push(expression);
              }
            }
            function releaseInstances() {
              var i5;
              var len = registers.length;
              for (i5 = 0; i5 < len; i5 += 1) {
                registers[i5].release();
              }
              registers.length = 0;
            }
            animation.renderer.compInterface = CompExpressionInterface(animation.renderer);
            animation.renderer.globalData.projectInterface.registerComposition(animation.renderer);
            animation.renderer.globalData.pushExpression = pushExpression;
            animation.renderer.globalData.popExpression = popExpression;
            animation.renderer.globalData.registerExpressionProperty = registerExpressionProperty;
          }
          return ob2;
        })();
        var MaskManagerInterface = (function() {
          function MaskInterface(mask2, data2) {
            this._mask = mask2;
            this._data = data2;
          }
          Object.defineProperty(MaskInterface.prototype, "maskPath", {
            get: function get() {
              if (this._mask.prop.k) {
                this._mask.prop.getValue();
              }
              return this._mask.prop;
            }
          });
          Object.defineProperty(MaskInterface.prototype, "maskOpacity", {
            get: function get() {
              if (this._mask.op.k) {
                this._mask.op.getValue();
              }
              return this._mask.op.v * 100;
            }
          });
          var MaskManager = function MaskManager2(maskManager) {
            var _masksInterfaces = createSizedArray(maskManager.viewData.length);
            var i5;
            var len = maskManager.viewData.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              _masksInterfaces[i5] = new MaskInterface(maskManager.viewData[i5], maskManager.masksProperties[i5]);
            }
            var maskFunction = function maskFunction2(name2) {
              i5 = 0;
              while (i5 < len) {
                if (maskManager.masksProperties[i5].nm === name2) {
                  return _masksInterfaces[i5];
                }
                i5 += 1;
              }
              return null;
            };
            return maskFunction;
          };
          return MaskManager;
        })();
        var ExpressionPropertyInterface = /* @__PURE__ */ (function() {
          var defaultUnidimensionalValue = {
            pv: 0,
            v: 0,
            mult: 1
          };
          var defaultMultidimensionalValue = {
            pv: [0, 0, 0],
            v: [0, 0, 0],
            mult: 1
          };
          function completeProperty(expressionValue, property2, type) {
            Object.defineProperty(expressionValue, "velocity", {
              get: function get() {
                return property2.getVelocityAtTime(property2.comp.currentFrame);
              }
            });
            expressionValue.numKeys = property2.keyframes ? property2.keyframes.length : 0;
            expressionValue.key = function(pos) {
              if (!expressionValue.numKeys) {
                return 0;
              }
              var value2 = "";
              if ("s" in property2.keyframes[pos - 1]) {
                value2 = property2.keyframes[pos - 1].s;
              } else if ("e" in property2.keyframes[pos - 2]) {
                value2 = property2.keyframes[pos - 2].e;
              } else {
                value2 = property2.keyframes[pos - 2].s;
              }
              var valueProp = type === "unidimensional" ? new Number(value2) : Object.assign({}, value2);
              valueProp.time = property2.keyframes[pos - 1].t / property2.elem.comp.globalData.frameRate;
              valueProp.value = type === "unidimensional" ? value2[0] : value2;
              return valueProp;
            };
            expressionValue.valueAtTime = property2.getValueAtTime;
            expressionValue.speedAtTime = property2.getSpeedAtTime;
            expressionValue.velocityAtTime = property2.getVelocityAtTime;
            expressionValue.propertyGroup = property2.propertyGroup;
          }
          function UnidimensionalPropertyInterface(property2) {
            if (!property2 || !("pv" in property2)) {
              property2 = defaultUnidimensionalValue;
            }
            var mult = 1 / property2.mult;
            var val2 = property2.pv * mult;
            var expressionValue = new Number(val2);
            expressionValue.value = val2;
            completeProperty(expressionValue, property2, "unidimensional");
            return function() {
              if (property2.k) {
                property2.getValue();
              }
              val2 = property2.v * mult;
              if (expressionValue.value !== val2) {
                expressionValue = new Number(val2);
                expressionValue.value = val2;
                expressionValue[0] = val2;
                completeProperty(expressionValue, property2, "unidimensional");
              }
              return expressionValue;
            };
          }
          function MultidimensionalPropertyInterface(property2) {
            if (!property2 || !("pv" in property2)) {
              property2 = defaultMultidimensionalValue;
            }
            var mult = 1 / property2.mult;
            var len = property2.data && property2.data.l || property2.pv.length;
            var expressionValue = createTypedArray("float32", len);
            var arrValue = createTypedArray("float32", len);
            expressionValue.value = arrValue;
            completeProperty(expressionValue, property2, "multidimensional");
            return function() {
              if (property2.k) {
                property2.getValue();
              }
              for (var i5 = 0; i5 < len; i5 += 1) {
                arrValue[i5] = property2.v[i5] * mult;
                expressionValue[i5] = arrValue[i5];
              }
              return expressionValue;
            };
          }
          function defaultGetter() {
            return defaultUnidimensionalValue;
          }
          return function(property2) {
            if (!property2) {
              return defaultGetter;
            }
            if (property2.propType === "unidimensional") {
              return UnidimensionalPropertyInterface(property2);
            }
            return MultidimensionalPropertyInterface(property2);
          };
        })();
        var TransformExpressionInterface = /* @__PURE__ */ (function() {
          return function(transform2) {
            function _thisFunction(name2) {
              switch (name2) {
                case "scale":
                case "Scale":
                case "ADBE Scale":
                case 6:
                  return _thisFunction.scale;
                case "rotation":
                case "Rotation":
                case "ADBE Rotation":
                case "ADBE Rotate Z":
                case 10:
                  return _thisFunction.rotation;
                case "ADBE Rotate X":
                  return _thisFunction.xRotation;
                case "ADBE Rotate Y":
                  return _thisFunction.yRotation;
                case "position":
                case "Position":
                case "ADBE Position":
                case 2:
                  return _thisFunction.position;
                case "ADBE Position_0":
                  return _thisFunction.xPosition;
                case "ADBE Position_1":
                  return _thisFunction.yPosition;
                case "ADBE Position_2":
                  return _thisFunction.zPosition;
                case "anchorPoint":
                case "AnchorPoint":
                case "Anchor Point":
                case "ADBE AnchorPoint":
                case 1:
                  return _thisFunction.anchorPoint;
                case "opacity":
                case "Opacity":
                case 11:
                  return _thisFunction.opacity;
                default:
                  return null;
              }
            }
            Object.defineProperty(_thisFunction, "rotation", {
              get: ExpressionPropertyInterface(transform2.r || transform2.rz)
            });
            Object.defineProperty(_thisFunction, "zRotation", {
              get: ExpressionPropertyInterface(transform2.rz || transform2.r)
            });
            Object.defineProperty(_thisFunction, "xRotation", {
              get: ExpressionPropertyInterface(transform2.rx)
            });
            Object.defineProperty(_thisFunction, "yRotation", {
              get: ExpressionPropertyInterface(transform2.ry)
            });
            Object.defineProperty(_thisFunction, "scale", {
              get: ExpressionPropertyInterface(transform2.s)
            });
            var _px;
            var _py;
            var _pz;
            var _transformFactory;
            if (transform2.p) {
              _transformFactory = ExpressionPropertyInterface(transform2.p);
            } else {
              _px = ExpressionPropertyInterface(transform2.px);
              _py = ExpressionPropertyInterface(transform2.py);
              if (transform2.pz) {
                _pz = ExpressionPropertyInterface(transform2.pz);
              }
            }
            Object.defineProperty(_thisFunction, "position", {
              get: function get() {
                if (transform2.p) {
                  return _transformFactory();
                }
                return [_px(), _py(), _pz ? _pz() : 0];
              }
            });
            Object.defineProperty(_thisFunction, "xPosition", {
              get: ExpressionPropertyInterface(transform2.px)
            });
            Object.defineProperty(_thisFunction, "yPosition", {
              get: ExpressionPropertyInterface(transform2.py)
            });
            Object.defineProperty(_thisFunction, "zPosition", {
              get: ExpressionPropertyInterface(transform2.pz)
            });
            Object.defineProperty(_thisFunction, "anchorPoint", {
              get: ExpressionPropertyInterface(transform2.a)
            });
            Object.defineProperty(_thisFunction, "opacity", {
              get: ExpressionPropertyInterface(transform2.o)
            });
            Object.defineProperty(_thisFunction, "skew", {
              get: ExpressionPropertyInterface(transform2.sk)
            });
            Object.defineProperty(_thisFunction, "skewAxis", {
              get: ExpressionPropertyInterface(transform2.sa)
            });
            Object.defineProperty(_thisFunction, "orientation", {
              get: ExpressionPropertyInterface(transform2.or)
            });
            return _thisFunction;
          };
        })();
        var LayerExpressionInterface = /* @__PURE__ */ (function() {
          function getMatrix(time2) {
            var toWorldMat = new Matrix();
            if (time2 !== void 0) {
              var propMatrix = this._elem.finalTransform.mProp.getValueAtTime(time2);
              propMatrix.clone(toWorldMat);
            } else {
              var transformMat = this._elem.finalTransform.mProp;
              transformMat.applyToMatrix(toWorldMat);
            }
            return toWorldMat;
          }
          function toWorldVec(arr, time2) {
            var toWorldMat = this.getMatrix(time2);
            toWorldMat.props[12] = 0;
            toWorldMat.props[13] = 0;
            toWorldMat.props[14] = 0;
            return this.applyPoint(toWorldMat, arr);
          }
          function toWorld2(arr, time2) {
            var toWorldMat = this.getMatrix(time2);
            return this.applyPoint(toWorldMat, arr);
          }
          function fromWorldVec(arr, time2) {
            var toWorldMat = this.getMatrix(time2);
            toWorldMat.props[12] = 0;
            toWorldMat.props[13] = 0;
            toWorldMat.props[14] = 0;
            return this.invertPoint(toWorldMat, arr);
          }
          function fromWorld2(arr, time2) {
            var toWorldMat = this.getMatrix(time2);
            return this.invertPoint(toWorldMat, arr);
          }
          function applyPoint(matrix, arr) {
            if (this._elem.hierarchy && this._elem.hierarchy.length) {
              var i5;
              var len = this._elem.hierarchy.length;
              for (i5 = 0; i5 < len; i5 += 1) {
                this._elem.hierarchy[i5].finalTransform.mProp.applyToMatrix(matrix);
              }
            }
            return matrix.applyToPointArray(arr[0], arr[1], arr[2] || 0);
          }
          function invertPoint(matrix, arr) {
            if (this._elem.hierarchy && this._elem.hierarchy.length) {
              var i5;
              var len = this._elem.hierarchy.length;
              for (i5 = 0; i5 < len; i5 += 1) {
                this._elem.hierarchy[i5].finalTransform.mProp.applyToMatrix(matrix);
              }
            }
            return matrix.inversePoint(arr);
          }
          function fromComp2(arr) {
            var toWorldMat = new Matrix();
            toWorldMat.reset();
            this._elem.finalTransform.mProp.applyToMatrix(toWorldMat);
            if (this._elem.hierarchy && this._elem.hierarchy.length) {
              var i5;
              var len = this._elem.hierarchy.length;
              for (i5 = 0; i5 < len; i5 += 1) {
                this._elem.hierarchy[i5].finalTransform.mProp.applyToMatrix(toWorldMat);
              }
              return toWorldMat.inversePoint(arr);
            }
            return toWorldMat.inversePoint(arr);
          }
          function sampleImage() {
            return [1, 1, 1, 1];
          }
          return function(elem2) {
            var transformInterface;
            function _registerMaskInterface(maskManager) {
              _thisLayerFunction.mask = new MaskManagerInterface(maskManager, elem2);
            }
            function _registerEffectsInterface(effects) {
              _thisLayerFunction.effect = effects;
            }
            function _thisLayerFunction(name2) {
              switch (name2) {
                case "ADBE Root Vectors Group":
                case "Contents":
                case 2:
                  return _thisLayerFunction.shapeInterface;
                case 1:
                case 6:
                case "Transform":
                case "transform":
                case "ADBE Transform Group":
                  return transformInterface;
                case 4:
                case "ADBE Effect Parade":
                case "effects":
                case "Effects":
                  return _thisLayerFunction.effect;
                case "ADBE Text Properties":
                  return _thisLayerFunction.textInterface;
                default:
                  return null;
              }
            }
            _thisLayerFunction.getMatrix = getMatrix;
            _thisLayerFunction.invertPoint = invertPoint;
            _thisLayerFunction.applyPoint = applyPoint;
            _thisLayerFunction.toWorld = toWorld2;
            _thisLayerFunction.toWorldVec = toWorldVec;
            _thisLayerFunction.fromWorld = fromWorld2;
            _thisLayerFunction.fromWorldVec = fromWorldVec;
            _thisLayerFunction.toComp = toWorld2;
            _thisLayerFunction.fromComp = fromComp2;
            _thisLayerFunction.sampleImage = sampleImage;
            _thisLayerFunction.sourceRectAtTime = elem2.sourceRectAtTime.bind(elem2);
            _thisLayerFunction._elem = elem2;
            transformInterface = TransformExpressionInterface(elem2.finalTransform.mProp);
            var anchorPointDescriptor = getDescriptor(transformInterface, "anchorPoint");
            Object.defineProperties(_thisLayerFunction, {
              hasParent: {
                get: function get() {
                  return elem2.hierarchy.length;
                }
              },
              parent: {
                get: function get() {
                  return elem2.hierarchy[0].layerInterface;
                }
              },
              rotation: getDescriptor(transformInterface, "rotation"),
              scale: getDescriptor(transformInterface, "scale"),
              position: getDescriptor(transformInterface, "position"),
              opacity: getDescriptor(transformInterface, "opacity"),
              anchorPoint: anchorPointDescriptor,
              anchor_point: anchorPointDescriptor,
              transform: {
                get: function get() {
                  return transformInterface;
                }
              },
              active: {
                get: function get() {
                  return elem2.isInRange;
                }
              }
            });
            _thisLayerFunction.startTime = elem2.data.st;
            _thisLayerFunction.index = elem2.data.ind;
            _thisLayerFunction.source = elem2.data.refId;
            _thisLayerFunction.height = elem2.data.ty === 0 ? elem2.data.h : 100;
            _thisLayerFunction.width = elem2.data.ty === 0 ? elem2.data.w : 100;
            _thisLayerFunction.inPoint = elem2.data.ip / elem2.comp.globalData.frameRate;
            _thisLayerFunction.outPoint = elem2.data.op / elem2.comp.globalData.frameRate;
            _thisLayerFunction._name = elem2.data.nm;
            _thisLayerFunction.registerMaskInterface = _registerMaskInterface;
            _thisLayerFunction.registerEffectsInterface = _registerEffectsInterface;
            return _thisLayerFunction;
          };
        })();
        var propertyGroupFactory = /* @__PURE__ */ (function() {
          return function(interfaceFunction, parentPropertyGroup) {
            return function(val2) {
              val2 = val2 === void 0 ? 1 : val2;
              if (val2 <= 0) {
                return interfaceFunction;
              }
              return parentPropertyGroup(val2 - 1);
            };
          };
        })();
        var PropertyInterface = /* @__PURE__ */ (function() {
          return function(propertyName, propertyGroup) {
            var interfaceFunction = {
              _name: propertyName
            };
            function _propertyGroup(val2) {
              val2 = val2 === void 0 ? 1 : val2;
              if (val2 <= 0) {
                return interfaceFunction;
              }
              return propertyGroup(val2 - 1);
            }
            return _propertyGroup;
          };
        })();
        var EffectsExpressionInterface = /* @__PURE__ */ (function() {
          var ob2 = {
            createEffectsInterface
          };
          function createEffectsInterface(elem2, propertyGroup) {
            if (elem2.effectsManager) {
              var effectElements = [];
              var effectsData = elem2.data.ef;
              var i5;
              var len = elem2.effectsManager.effectElements.length;
              for (i5 = 0; i5 < len; i5 += 1) {
                effectElements.push(createGroupInterface(effectsData[i5], elem2.effectsManager.effectElements[i5], propertyGroup, elem2));
              }
              var effects = elem2.data.ef || [];
              var groupInterface = function groupInterface2(name2) {
                i5 = 0;
                len = effects.length;
                while (i5 < len) {
                  if (name2 === effects[i5].nm || name2 === effects[i5].mn || name2 === effects[i5].ix) {
                    return effectElements[i5];
                  }
                  i5 += 1;
                }
                return null;
              };
              Object.defineProperty(groupInterface, "numProperties", {
                get: function get() {
                  return effects.length;
                }
              });
              return groupInterface;
            }
            return null;
          }
          function createGroupInterface(data2, elements, propertyGroup, elem2) {
            function groupInterface(name2) {
              var effects = data2.ef;
              var i6 = 0;
              var len2 = effects.length;
              while (i6 < len2) {
                if (name2 === effects[i6].nm || name2 === effects[i6].mn || name2 === effects[i6].ix) {
                  if (effects[i6].ty === 5) {
                    return effectElements[i6];
                  }
                  return effectElements[i6]();
                }
                i6 += 1;
              }
              throw new Error();
            }
            var _propertyGroup = propertyGroupFactory(groupInterface, propertyGroup);
            var effectElements = [];
            var i5;
            var len = data2.ef.length;
            for (i5 = 0; i5 < len; i5 += 1) {
              if (data2.ef[i5].ty === 5) {
                effectElements.push(createGroupInterface(data2.ef[i5], elements.effectElements[i5], elements.effectElements[i5].propertyGroup, elem2));
              } else {
                effectElements.push(createValueInterface(elements.effectElements[i5], data2.ef[i5].ty, elem2, _propertyGroup));
              }
            }
            if (data2.mn === "ADBE Color Control") {
              Object.defineProperty(groupInterface, "color", {
                get: function get() {
                  return effectElements[0]();
                }
              });
            }
            Object.defineProperties(groupInterface, {
              numProperties: {
                get: function get() {
                  return data2.np;
                }
              },
              _name: {
                value: data2.nm
              },
              propertyGroup: {
                value: _propertyGroup
              }
            });
            groupInterface.enabled = data2.en !== 0;
            groupInterface.active = groupInterface.enabled;
            return groupInterface;
          }
          function createValueInterface(element, type, elem2, propertyGroup) {
            var expressionProperty = ExpressionPropertyInterface(element.p);
            function interfaceFunction() {
              if (type === 10) {
                return elem2.comp.compInterface(element.p.v);
              }
              return expressionProperty();
            }
            if (element.p.setGroupProperty) {
              element.p.setGroupProperty(PropertyInterface("", propertyGroup));
            }
            return interfaceFunction;
          }
          return ob2;
        })();
        var ShapePathInterface = /* @__PURE__ */ (function() {
          return function pathInterfaceFactory(shape, view, propertyGroup) {
            var prop = view.sh;
            function interfaceFunction(val2) {
              if (val2 === "Shape" || val2 === "shape" || val2 === "Path" || val2 === "path" || val2 === "ADBE Vector Shape" || val2 === 2) {
                return interfaceFunction.path;
              }
              return null;
            }
            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
            prop.setGroupProperty(PropertyInterface("Path", _propertyGroup));
            Object.defineProperties(interfaceFunction, {
              path: {
                get: function get() {
                  if (prop.k) {
                    prop.getValue();
                  }
                  return prop;
                }
              },
              shape: {
                get: function get() {
                  if (prop.k) {
                    prop.getValue();
                  }
                  return prop;
                }
              },
              _name: {
                value: shape.nm
              },
              ix: {
                value: shape.ix
              },
              propertyIndex: {
                value: shape.ix
              },
              mn: {
                value: shape.mn
              },
              propertyGroup: {
                value: propertyGroup
              }
            });
            return interfaceFunction;
          };
        })();
        var ShapeExpressionInterface = /* @__PURE__ */ (function() {
          function iterateElements(shapes, view, propertyGroup) {
            var arr = [];
            var i5;
            var len = shapes ? shapes.length : 0;
            for (i5 = 0; i5 < len; i5 += 1) {
              if (shapes[i5].ty === "gr") {
                arr.push(groupInterfaceFactory(shapes[i5], view[i5], propertyGroup));
              } else if (shapes[i5].ty === "fl") {
                arr.push(fillInterfaceFactory(shapes[i5], view[i5], propertyGroup));
              } else if (shapes[i5].ty === "st") {
                arr.push(strokeInterfaceFactory(shapes[i5], view[i5], propertyGroup));
              } else if (shapes[i5].ty === "tm") {
                arr.push(trimInterfaceFactory(shapes[i5], view[i5], propertyGroup));
              } else if (shapes[i5].ty === "tr") {
              } else if (shapes[i5].ty === "el") {
                arr.push(ellipseInterfaceFactory(shapes[i5], view[i5], propertyGroup));
              } else if (shapes[i5].ty === "sr") {
                arr.push(starInterfaceFactory(shapes[i5], view[i5], propertyGroup));
              } else if (shapes[i5].ty === "sh") {
                arr.push(ShapePathInterface(shapes[i5], view[i5], propertyGroup));
              } else if (shapes[i5].ty === "rc") {
                arr.push(rectInterfaceFactory(shapes[i5], view[i5], propertyGroup));
              } else if (shapes[i5].ty === "rd") {
                arr.push(roundedInterfaceFactory(shapes[i5], view[i5], propertyGroup));
              } else if (shapes[i5].ty === "rp") {
                arr.push(repeaterInterfaceFactory(shapes[i5], view[i5], propertyGroup));
              } else if (shapes[i5].ty === "gf") {
                arr.push(gradientFillInterfaceFactory(shapes[i5], view[i5], propertyGroup));
              } else {
                arr.push(defaultInterfaceFactory(shapes[i5], view[i5], propertyGroup));
              }
            }
            return arr;
          }
          function contentsInterfaceFactory(shape, view, propertyGroup) {
            var interfaces2;
            var interfaceFunction = function _interfaceFunction(value2) {
              var i5 = 0;
              var len = interfaces2.length;
              while (i5 < len) {
                if (interfaces2[i5]._name === value2 || interfaces2[i5].mn === value2 || interfaces2[i5].propertyIndex === value2 || interfaces2[i5].ix === value2 || interfaces2[i5].ind === value2) {
                  return interfaces2[i5];
                }
                i5 += 1;
              }
              if (typeof value2 === "number") {
                return interfaces2[value2 - 1];
              }
              return null;
            };
            interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
            interfaces2 = iterateElements(shape.it, view.it, interfaceFunction.propertyGroup);
            interfaceFunction.numProperties = interfaces2.length;
            var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
            interfaceFunction.transform = transformInterface;
            interfaceFunction.propertyIndex = shape.cix;
            interfaceFunction._name = shape.nm;
            return interfaceFunction;
          }
          function groupInterfaceFactory(shape, view, propertyGroup) {
            var interfaceFunction = function _interfaceFunction(value2) {
              switch (value2) {
                case "ADBE Vectors Group":
                case "Contents":
                case 2:
                  return interfaceFunction.content;
                // Not necessary for now. Keeping them here in case a new case appears
                // case 'ADBE Vector Transform Group':
                // case 3:
                default:
                  return interfaceFunction.transform;
              }
            };
            interfaceFunction.propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
            var content2 = contentsInterfaceFactory(shape, view, interfaceFunction.propertyGroup);
            var transformInterface = transformInterfaceFactory(shape.it[shape.it.length - 1], view.it[view.it.length - 1], interfaceFunction.propertyGroup);
            interfaceFunction.content = content2;
            interfaceFunction.transform = transformInterface;
            Object.defineProperty(interfaceFunction, "_name", {
              get: function get() {
                return shape.nm;
              }
            });
            interfaceFunction.numProperties = shape.np;
            interfaceFunction.propertyIndex = shape.ix;
            interfaceFunction.nm = shape.nm;
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
          }
          function fillInterfaceFactory(shape, view, propertyGroup) {
            function interfaceFunction(val2) {
              if (val2 === "Color" || val2 === "color") {
                return interfaceFunction.color;
              }
              if (val2 === "Opacity" || val2 === "opacity") {
                return interfaceFunction.opacity;
              }
              return null;
            }
            Object.defineProperties(interfaceFunction, {
              color: {
                get: ExpressionPropertyInterface(view.c)
              },
              opacity: {
                get: ExpressionPropertyInterface(view.o)
              },
              _name: {
                value: shape.nm
              },
              mn: {
                value: shape.mn
              }
            });
            view.c.setGroupProperty(PropertyInterface("Color", propertyGroup));
            view.o.setGroupProperty(PropertyInterface("Opacity", propertyGroup));
            return interfaceFunction;
          }
          function gradientFillInterfaceFactory(shape, view, propertyGroup) {
            function interfaceFunction(val2) {
              if (val2 === "Start Point" || val2 === "start point") {
                return interfaceFunction.startPoint;
              }
              if (val2 === "End Point" || val2 === "end point") {
                return interfaceFunction.endPoint;
              }
              if (val2 === "Opacity" || val2 === "opacity") {
                return interfaceFunction.opacity;
              }
              return null;
            }
            Object.defineProperties(interfaceFunction, {
              startPoint: {
                get: ExpressionPropertyInterface(view.s)
              },
              endPoint: {
                get: ExpressionPropertyInterface(view.e)
              },
              opacity: {
                get: ExpressionPropertyInterface(view.o)
              },
              type: {
                get: function get() {
                  return "a";
                }
              },
              _name: {
                value: shape.nm
              },
              mn: {
                value: shape.mn
              }
            });
            view.s.setGroupProperty(PropertyInterface("Start Point", propertyGroup));
            view.e.setGroupProperty(PropertyInterface("End Point", propertyGroup));
            view.o.setGroupProperty(PropertyInterface("Opacity", propertyGroup));
            return interfaceFunction;
          }
          function defaultInterfaceFactory() {
            function interfaceFunction() {
              return null;
            }
            return interfaceFunction;
          }
          function strokeInterfaceFactory(shape, view, propertyGroup) {
            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
            var _dashPropertyGroup = propertyGroupFactory(dashOb, _propertyGroup);
            function addPropertyToDashOb(i6) {
              Object.defineProperty(dashOb, shape.d[i6].nm, {
                get: ExpressionPropertyInterface(view.d.dataProps[i6].p)
              });
            }
            var i5;
            var len = shape.d ? shape.d.length : 0;
            var dashOb = {};
            for (i5 = 0; i5 < len; i5 += 1) {
              addPropertyToDashOb(i5);
              view.d.dataProps[i5].p.setGroupProperty(_dashPropertyGroup);
            }
            function interfaceFunction(val2) {
              if (val2 === "Color" || val2 === "color") {
                return interfaceFunction.color;
              }
              if (val2 === "Opacity" || val2 === "opacity") {
                return interfaceFunction.opacity;
              }
              if (val2 === "Stroke Width" || val2 === "stroke width") {
                return interfaceFunction.strokeWidth;
              }
              return null;
            }
            Object.defineProperties(interfaceFunction, {
              color: {
                get: ExpressionPropertyInterface(view.c)
              },
              opacity: {
                get: ExpressionPropertyInterface(view.o)
              },
              strokeWidth: {
                get: ExpressionPropertyInterface(view.w)
              },
              dash: {
                get: function get() {
                  return dashOb;
                }
              },
              _name: {
                value: shape.nm
              },
              mn: {
                value: shape.mn
              }
            });
            view.c.setGroupProperty(PropertyInterface("Color", _propertyGroup));
            view.o.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
            view.w.setGroupProperty(PropertyInterface("Stroke Width", _propertyGroup));
            return interfaceFunction;
          }
          function trimInterfaceFactory(shape, view, propertyGroup) {
            function interfaceFunction(val2) {
              if (val2 === shape.e.ix || val2 === "End" || val2 === "end") {
                return interfaceFunction.end;
              }
              if (val2 === shape.s.ix) {
                return interfaceFunction.start;
              }
              if (val2 === shape.o.ix) {
                return interfaceFunction.offset;
              }
              return null;
            }
            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
            interfaceFunction.propertyIndex = shape.ix;
            view.s.setGroupProperty(PropertyInterface("Start", _propertyGroup));
            view.e.setGroupProperty(PropertyInterface("End", _propertyGroup));
            view.o.setGroupProperty(PropertyInterface("Offset", _propertyGroup));
            interfaceFunction.propertyIndex = shape.ix;
            interfaceFunction.propertyGroup = propertyGroup;
            Object.defineProperties(interfaceFunction, {
              start: {
                get: ExpressionPropertyInterface(view.s)
              },
              end: {
                get: ExpressionPropertyInterface(view.e)
              },
              offset: {
                get: ExpressionPropertyInterface(view.o)
              },
              _name: {
                value: shape.nm
              }
            });
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
          }
          function transformInterfaceFactory(shape, view, propertyGroup) {
            function interfaceFunction(value2) {
              if (shape.a.ix === value2 || value2 === "Anchor Point") {
                return interfaceFunction.anchorPoint;
              }
              if (shape.o.ix === value2 || value2 === "Opacity") {
                return interfaceFunction.opacity;
              }
              if (shape.p.ix === value2 || value2 === "Position") {
                return interfaceFunction.position;
              }
              if (shape.r.ix === value2 || value2 === "Rotation" || value2 === "ADBE Vector Rotation") {
                return interfaceFunction.rotation;
              }
              if (shape.s.ix === value2 || value2 === "Scale") {
                return interfaceFunction.scale;
              }
              if (shape.sk && shape.sk.ix === value2 || value2 === "Skew") {
                return interfaceFunction.skew;
              }
              if (shape.sa && shape.sa.ix === value2 || value2 === "Skew Axis") {
                return interfaceFunction.skewAxis;
              }
              return null;
            }
            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
            view.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
            view.transform.mProps.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
            view.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point", _propertyGroup));
            view.transform.mProps.s.setGroupProperty(PropertyInterface("Scale", _propertyGroup));
            view.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
            if (view.transform.mProps.sk) {
              view.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew", _propertyGroup));
              view.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle", _propertyGroup));
            }
            view.transform.op.setGroupProperty(PropertyInterface("Opacity", _propertyGroup));
            Object.defineProperties(interfaceFunction, {
              opacity: {
                get: ExpressionPropertyInterface(view.transform.mProps.o)
              },
              position: {
                get: ExpressionPropertyInterface(view.transform.mProps.p)
              },
              anchorPoint: {
                get: ExpressionPropertyInterface(view.transform.mProps.a)
              },
              scale: {
                get: ExpressionPropertyInterface(view.transform.mProps.s)
              },
              rotation: {
                get: ExpressionPropertyInterface(view.transform.mProps.r)
              },
              skew: {
                get: ExpressionPropertyInterface(view.transform.mProps.sk)
              },
              skewAxis: {
                get: ExpressionPropertyInterface(view.transform.mProps.sa)
              },
              _name: {
                value: shape.nm
              }
            });
            interfaceFunction.ty = "tr";
            interfaceFunction.mn = shape.mn;
            interfaceFunction.propertyGroup = propertyGroup;
            return interfaceFunction;
          }
          function ellipseInterfaceFactory(shape, view, propertyGroup) {
            function interfaceFunction(value2) {
              if (shape.p.ix === value2) {
                return interfaceFunction.position;
              }
              if (shape.s.ix === value2) {
                return interfaceFunction.size;
              }
              return null;
            }
            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
            interfaceFunction.propertyIndex = shape.ix;
            var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
            prop.s.setGroupProperty(PropertyInterface("Size", _propertyGroup));
            prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
            Object.defineProperties(interfaceFunction, {
              size: {
                get: ExpressionPropertyInterface(prop.s)
              },
              position: {
                get: ExpressionPropertyInterface(prop.p)
              },
              _name: {
                value: shape.nm
              }
            });
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
          }
          function starInterfaceFactory(shape, view, propertyGroup) {
            function interfaceFunction(value2) {
              if (shape.p.ix === value2) {
                return interfaceFunction.position;
              }
              if (shape.r.ix === value2) {
                return interfaceFunction.rotation;
              }
              if (shape.pt.ix === value2) {
                return interfaceFunction.points;
              }
              if (shape.or.ix === value2 || value2 === "ADBE Vector Star Outer Radius") {
                return interfaceFunction.outerRadius;
              }
              if (shape.os.ix === value2) {
                return interfaceFunction.outerRoundness;
              }
              if (shape.ir && (shape.ir.ix === value2 || value2 === "ADBE Vector Star Inner Radius")) {
                return interfaceFunction.innerRadius;
              }
              if (shape.is && shape.is.ix === value2) {
                return interfaceFunction.innerRoundness;
              }
              return null;
            }
            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
            var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
            interfaceFunction.propertyIndex = shape.ix;
            prop.or.setGroupProperty(PropertyInterface("Outer Radius", _propertyGroup));
            prop.os.setGroupProperty(PropertyInterface("Outer Roundness", _propertyGroup));
            prop.pt.setGroupProperty(PropertyInterface("Points", _propertyGroup));
            prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
            prop.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
            if (shape.ir) {
              prop.ir.setGroupProperty(PropertyInterface("Inner Radius", _propertyGroup));
              prop.is.setGroupProperty(PropertyInterface("Inner Roundness", _propertyGroup));
            }
            Object.defineProperties(interfaceFunction, {
              position: {
                get: ExpressionPropertyInterface(prop.p)
              },
              rotation: {
                get: ExpressionPropertyInterface(prop.r)
              },
              points: {
                get: ExpressionPropertyInterface(prop.pt)
              },
              outerRadius: {
                get: ExpressionPropertyInterface(prop.or)
              },
              outerRoundness: {
                get: ExpressionPropertyInterface(prop.os)
              },
              innerRadius: {
                get: ExpressionPropertyInterface(prop.ir)
              },
              innerRoundness: {
                get: ExpressionPropertyInterface(prop.is)
              },
              _name: {
                value: shape.nm
              }
            });
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
          }
          function rectInterfaceFactory(shape, view, propertyGroup) {
            function interfaceFunction(value2) {
              if (shape.p.ix === value2) {
                return interfaceFunction.position;
              }
              if (shape.r.ix === value2) {
                return interfaceFunction.roundness;
              }
              if (shape.s.ix === value2 || value2 === "Size" || value2 === "ADBE Vector Rect Size") {
                return interfaceFunction.size;
              }
              return null;
            }
            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
            var prop = view.sh.ty === "tm" ? view.sh.prop : view.sh;
            interfaceFunction.propertyIndex = shape.ix;
            prop.p.setGroupProperty(PropertyInterface("Position", _propertyGroup));
            prop.s.setGroupProperty(PropertyInterface("Size", _propertyGroup));
            prop.r.setGroupProperty(PropertyInterface("Rotation", _propertyGroup));
            Object.defineProperties(interfaceFunction, {
              position: {
                get: ExpressionPropertyInterface(prop.p)
              },
              roundness: {
                get: ExpressionPropertyInterface(prop.r)
              },
              size: {
                get: ExpressionPropertyInterface(prop.s)
              },
              _name: {
                value: shape.nm
              }
            });
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
          }
          function roundedInterfaceFactory(shape, view, propertyGroup) {
            function interfaceFunction(value2) {
              if (shape.r.ix === value2 || value2 === "Round Corners 1") {
                return interfaceFunction.radius;
              }
              return null;
            }
            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
            var prop = view;
            interfaceFunction.propertyIndex = shape.ix;
            prop.rd.setGroupProperty(PropertyInterface("Radius", _propertyGroup));
            Object.defineProperties(interfaceFunction, {
              radius: {
                get: ExpressionPropertyInterface(prop.rd)
              },
              _name: {
                value: shape.nm
              }
            });
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
          }
          function repeaterInterfaceFactory(shape, view, propertyGroup) {
            function interfaceFunction(value2) {
              if (shape.c.ix === value2 || value2 === "Copies") {
                return interfaceFunction.copies;
              }
              if (shape.o.ix === value2 || value2 === "Offset") {
                return interfaceFunction.offset;
              }
              return null;
            }
            var _propertyGroup = propertyGroupFactory(interfaceFunction, propertyGroup);
            var prop = view;
            interfaceFunction.propertyIndex = shape.ix;
            prop.c.setGroupProperty(PropertyInterface("Copies", _propertyGroup));
            prop.o.setGroupProperty(PropertyInterface("Offset", _propertyGroup));
            Object.defineProperties(interfaceFunction, {
              copies: {
                get: ExpressionPropertyInterface(prop.c)
              },
              offset: {
                get: ExpressionPropertyInterface(prop.o)
              },
              _name: {
                value: shape.nm
              }
            });
            interfaceFunction.mn = shape.mn;
            return interfaceFunction;
          }
          return function(shapes, view, propertyGroup) {
            var interfaces2;
            function _interfaceFunction(value2) {
              if (typeof value2 === "number") {
                value2 = value2 === void 0 ? 1 : value2;
                if (value2 === 0) {
                  return propertyGroup;
                }
                return interfaces2[value2 - 1];
              }
              var i5 = 0;
              var len = interfaces2.length;
              while (i5 < len) {
                if (interfaces2[i5]._name === value2) {
                  return interfaces2[i5];
                }
                i5 += 1;
              }
              return null;
            }
            function parentGroupWrapper() {
              return propertyGroup;
            }
            _interfaceFunction.propertyGroup = propertyGroupFactory(_interfaceFunction, parentGroupWrapper);
            interfaces2 = iterateElements(shapes, view, _interfaceFunction.propertyGroup);
            _interfaceFunction.numProperties = interfaces2.length;
            _interfaceFunction._name = "Contents";
            return _interfaceFunction;
          };
        })();
        var TextExpressionInterface = /* @__PURE__ */ (function() {
          return function(elem2) {
            var _sourceText;
            function _thisLayerFunction(name2) {
              switch (name2) {
                case "ADBE Text Document":
                  return _thisLayerFunction.sourceText;
                default:
                  return null;
              }
            }
            Object.defineProperty(_thisLayerFunction, "sourceText", {
              get: function get() {
                elem2.textProperty.getValue();
                var stringValue = elem2.textProperty.currentData.t;
                if (!_sourceText || stringValue !== _sourceText.value) {
                  _sourceText = new String(stringValue);
                  _sourceText.value = stringValue || new String(stringValue);
                  Object.defineProperty(_sourceText, "style", {
                    get: function get2() {
                      return {
                        fillColor: elem2.textProperty.currentData.fc
                      };
                    }
                  });
                }
                return _sourceText;
              }
            });
            return _thisLayerFunction;
          };
        })();
        function _typeof(o4) {
          "@babel/helpers - typeof";
          return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o5) {
            return typeof o5;
          } : function(o5) {
            return o5 && "function" == typeof Symbol && o5.constructor === Symbol && o5 !== Symbol.prototype ? "symbol" : typeof o5;
          }, _typeof(o4);
        }
        var FootageInterface = /* @__PURE__ */ (function() {
          var outlineInterfaceFactory = function outlineInterfaceFactory2(elem2) {
            var currentPropertyName = "";
            var currentProperty = elem2.getFootageData();
            function init2() {
              currentPropertyName = "";
              currentProperty = elem2.getFootageData();
              return searchProperty;
            }
            function searchProperty(value2) {
              if (currentProperty[value2]) {
                currentPropertyName = value2;
                currentProperty = currentProperty[value2];
                if (_typeof(currentProperty) === "object") {
                  return searchProperty;
                }
                return currentProperty;
              }
              var propertyNameIndex = value2.indexOf(currentPropertyName);
              if (propertyNameIndex !== -1) {
                var index2 = parseInt(value2.substr(propertyNameIndex + currentPropertyName.length), 10);
                currentProperty = currentProperty[index2];
                if (_typeof(currentProperty) === "object") {
                  return searchProperty;
                }
                return currentProperty;
              }
              return "";
            }
            return init2;
          };
          var dataInterfaceFactory = function dataInterfaceFactory2(elem2) {
            function interfaceFunction(value2) {
              if (value2 === "Outline") {
                return interfaceFunction.outlineInterface();
              }
              return null;
            }
            interfaceFunction._name = "Outline";
            interfaceFunction.outlineInterface = outlineInterfaceFactory(elem2);
            return interfaceFunction;
          };
          return function(elem2) {
            function _interfaceFunction(value2) {
              if (value2 === "Data") {
                return _interfaceFunction.dataInterface;
              }
              return null;
            }
            _interfaceFunction._name = "Data";
            _interfaceFunction.dataInterface = dataInterfaceFactory(elem2);
            return _interfaceFunction;
          };
        })();
        var interfaces = {
          layer: LayerExpressionInterface,
          effects: EffectsExpressionInterface,
          comp: CompExpressionInterface,
          shape: ShapeExpressionInterface,
          text: TextExpressionInterface,
          footage: FootageInterface
        };
        function getInterface(type) {
          return interfaces[type] || null;
        }
        var expressionHelpers = /* @__PURE__ */ (function() {
          function searchExpressions(elem2, data2, prop) {
            if (data2.x) {
              prop.k = true;
              prop.x = true;
              prop.initiateExpression = ExpressionManager.initiateExpression;
              prop.effectsSequence.push(prop.initiateExpression(elem2, data2, prop).bind(prop));
            }
          }
          function getValueAtTime(frameNum) {
            frameNum *= this.elem.globalData.frameRate;
            frameNum -= this.offsetTime;
            if (frameNum !== this._cachingAtTime.lastFrame) {
              this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < frameNum ? this._cachingAtTime.lastIndex : 0;
              this._cachingAtTime.value = this.interpolateValue(frameNum, this._cachingAtTime);
              this._cachingAtTime.lastFrame = frameNum;
            }
            return this._cachingAtTime.value;
          }
          function getSpeedAtTime(frameNum) {
            var delta = -0.01;
            var v1 = this.getValueAtTime(frameNum);
            var v22 = this.getValueAtTime(frameNum + delta);
            var speed = 0;
            if (v1.length) {
              var i5;
              for (i5 = 0; i5 < v1.length; i5 += 1) {
                speed += Math.pow(v22[i5] - v1[i5], 2);
              }
              speed = Math.sqrt(speed) * 100;
            } else {
              speed = 0;
            }
            return speed;
          }
          function getVelocityAtTime(frameNum) {
            if (this.vel !== void 0) {
              return this.vel;
            }
            var delta = -1e-3;
            var v1 = this.getValueAtTime(frameNum);
            var v22 = this.getValueAtTime(frameNum + delta);
            var velocity2;
            if (v1.length) {
              velocity2 = createTypedArray("float32", v1.length);
              var i5;
              for (i5 = 0; i5 < v1.length; i5 += 1) {
                velocity2[i5] = (v22[i5] - v1[i5]) / delta;
              }
            } else {
              velocity2 = (v22 - v1) / delta;
            }
            return velocity2;
          }
          function getStaticValueAtTime() {
            return this.pv;
          }
          function setGroupProperty(propertyGroup) {
            this.propertyGroup = propertyGroup;
          }
          return {
            searchExpressions,
            getSpeedAtTime,
            getVelocityAtTime,
            getValueAtTime,
            getStaticValueAtTime,
            setGroupProperty
          };
        })();
        function addPropertyDecorator() {
          function loopOut2(type, duration, durationFlag) {
            if (!this.k || !this.keyframes) {
              return this.pv;
            }
            type = type ? type.toLowerCase() : "";
            var currentFrame = this.comp.renderedFrame;
            var keyframes = this.keyframes;
            var lastKeyFrame = keyframes[keyframes.length - 1].t;
            if (currentFrame <= lastKeyFrame) {
              return this.pv;
            }
            var cycleDuration;
            var firstKeyFrame;
            if (!durationFlag) {
              if (!duration || duration > keyframes.length - 1) {
                duration = keyframes.length - 1;
              }
              firstKeyFrame = keyframes[keyframes.length - 1 - duration].t;
              cycleDuration = lastKeyFrame - firstKeyFrame;
            } else {
              if (!duration) {
                cycleDuration = Math.max(0, lastKeyFrame - this.elem.data.ip);
              } else {
                cycleDuration = Math.abs(lastKeyFrame - this.elem.comp.globalData.frameRate * duration);
              }
              firstKeyFrame = lastKeyFrame - cycleDuration;
            }
            var i5;
            var len;
            var ret;
            if (type === "pingpong") {
              var iterations = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);
              if (iterations % 2 !== 0) {
                return this.getValueAtTime((cycleDuration - (currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
              }
            } else if (type === "offset") {
              var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
              var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
              var current = this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
              var repeats = Math.floor((currentFrame - firstKeyFrame) / cycleDuration);
              if (this.pv.length) {
                ret = new Array(initV.length);
                len = ret.length;
                for (i5 = 0; i5 < len; i5 += 1) {
                  ret[i5] = (endV[i5] - initV[i5]) * repeats + current[i5];
                }
                return ret;
              }
              return (endV - initV) * repeats + current;
            } else if (type === "continue") {
              var lastValue = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
              var nextLastValue = this.getValueAtTime((lastKeyFrame - 1e-3) / this.comp.globalData.frameRate, 0);
              if (this.pv.length) {
                ret = new Array(lastValue.length);
                len = ret.length;
                for (i5 = 0; i5 < len; i5 += 1) {
                  ret[i5] = lastValue[i5] + (lastValue[i5] - nextLastValue[i5]) * ((currentFrame - lastKeyFrame) / this.comp.globalData.frameRate) / 5e-4;
                }
                return ret;
              }
              return lastValue + (lastValue - nextLastValue) * ((currentFrame - lastKeyFrame) / 1e-3);
            }
            return this.getValueAtTime(((currentFrame - firstKeyFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
          }
          function loopIn2(type, duration, durationFlag) {
            if (!this.k) {
              return this.pv;
            }
            type = type ? type.toLowerCase() : "";
            var currentFrame = this.comp.renderedFrame;
            var keyframes = this.keyframes;
            var firstKeyFrame = keyframes[0].t;
            if (currentFrame >= firstKeyFrame) {
              return this.pv;
            }
            var cycleDuration;
            var lastKeyFrame;
            if (!durationFlag) {
              if (!duration || duration > keyframes.length - 1) {
                duration = keyframes.length - 1;
              }
              lastKeyFrame = keyframes[duration].t;
              cycleDuration = lastKeyFrame - firstKeyFrame;
            } else {
              if (!duration) {
                cycleDuration = Math.max(0, this.elem.data.op - firstKeyFrame);
              } else {
                cycleDuration = Math.abs(this.elem.comp.globalData.frameRate * duration);
              }
              lastKeyFrame = firstKeyFrame + cycleDuration;
            }
            var i5;
            var len;
            var ret;
            if (type === "pingpong") {
              var iterations = Math.floor((firstKeyFrame - currentFrame) / cycleDuration);
              if (iterations % 2 === 0) {
                return this.getValueAtTime(((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
              }
            } else if (type === "offset") {
              var initV = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
              var endV = this.getValueAtTime(lastKeyFrame / this.comp.globalData.frameRate, 0);
              var current = this.getValueAtTime((cycleDuration - (firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame) / this.comp.globalData.frameRate, 0);
              var repeats = Math.floor((firstKeyFrame - currentFrame) / cycleDuration) + 1;
              if (this.pv.length) {
                ret = new Array(initV.length);
                len = ret.length;
                for (i5 = 0; i5 < len; i5 += 1) {
                  ret[i5] = current[i5] - (endV[i5] - initV[i5]) * repeats;
                }
                return ret;
              }
              return current - (endV - initV) * repeats;
            } else if (type === "continue") {
              var firstValue = this.getValueAtTime(firstKeyFrame / this.comp.globalData.frameRate, 0);
              var nextFirstValue = this.getValueAtTime((firstKeyFrame + 1e-3) / this.comp.globalData.frameRate, 0);
              if (this.pv.length) {
                ret = new Array(firstValue.length);
                len = ret.length;
                for (i5 = 0; i5 < len; i5 += 1) {
                  ret[i5] = firstValue[i5] + (firstValue[i5] - nextFirstValue[i5]) * (firstKeyFrame - currentFrame) / 1e-3;
                }
                return ret;
              }
              return firstValue + (firstValue - nextFirstValue) * (firstKeyFrame - currentFrame) / 1e-3;
            }
            return this.getValueAtTime((cycleDuration - ((firstKeyFrame - currentFrame) % cycleDuration + firstKeyFrame)) / this.comp.globalData.frameRate, 0);
          }
          function smooth2(width2, samples) {
            if (!this.k) {
              return this.pv;
            }
            width2 = (width2 || 0.4) * 0.5;
            samples = Math.floor(samples || 5);
            if (samples <= 1) {
              return this.pv;
            }
            var currentTime = this.comp.renderedFrame / this.comp.globalData.frameRate;
            var initFrame2 = currentTime - width2;
            var endFrame = currentTime + width2;
            var sampleFrequency = samples > 1 ? (endFrame - initFrame2) / (samples - 1) : 1;
            var i5 = 0;
            var j4 = 0;
            var value2;
            if (this.pv.length) {
              value2 = createTypedArray("float32", this.pv.length);
            } else {
              value2 = 0;
            }
            var sampleValue;
            while (i5 < samples) {
              sampleValue = this.getValueAtTime(initFrame2 + i5 * sampleFrequency);
              if (this.pv.length) {
                for (j4 = 0; j4 < this.pv.length; j4 += 1) {
                  value2[j4] += sampleValue[j4];
                }
              } else {
                value2 += sampleValue;
              }
              i5 += 1;
            }
            if (this.pv.length) {
              for (j4 = 0; j4 < this.pv.length; j4 += 1) {
                value2[j4] /= samples;
              }
            } else {
              value2 /= samples;
            }
            return value2;
          }
          function getTransformValueAtTime(time2) {
            if (!this._transformCachingAtTime) {
              this._transformCachingAtTime = {
                v: new Matrix()
              };
            }
            var matrix = this._transformCachingAtTime.v;
            matrix.cloneFromProps(this.pre.props);
            if (this.appliedTransformations < 1) {
              var anchor = this.a.getValueAtTime(time2);
              matrix.translate(-anchor[0] * this.a.mult, -anchor[1] * this.a.mult, anchor[2] * this.a.mult);
            }
            if (this.appliedTransformations < 2) {
              var scale2 = this.s.getValueAtTime(time2);
              matrix.scale(scale2[0] * this.s.mult, scale2[1] * this.s.mult, scale2[2] * this.s.mult);
            }
            if (this.sk && this.appliedTransformations < 3) {
              var skew = this.sk.getValueAtTime(time2);
              var skewAxis = this.sa.getValueAtTime(time2);
              matrix.skewFromAxis(-skew * this.sk.mult, skewAxis * this.sa.mult);
            }
            if (this.r && this.appliedTransformations < 4) {
              var rotation2 = this.r.getValueAtTime(time2);
              matrix.rotate(-rotation2 * this.r.mult);
            } else if (!this.r && this.appliedTransformations < 4) {
              var rotationZ = this.rz.getValueAtTime(time2);
              var rotationY = this.ry.getValueAtTime(time2);
              var rotationX = this.rx.getValueAtTime(time2);
              var orientation = this.or.getValueAtTime(time2);
              matrix.rotateZ(-rotationZ * this.rz.mult).rotateY(rotationY * this.ry.mult).rotateX(rotationX * this.rx.mult).rotateZ(-orientation[2] * this.or.mult).rotateY(orientation[1] * this.or.mult).rotateX(orientation[0] * this.or.mult);
            }
            if (this.data.p && this.data.p.s) {
              var positionX = this.px.getValueAtTime(time2);
              var positionY = this.py.getValueAtTime(time2);
              if (this.data.p.z) {
                var positionZ = this.pz.getValueAtTime(time2);
                matrix.translate(positionX * this.px.mult, positionY * this.py.mult, -positionZ * this.pz.mult);
              } else {
                matrix.translate(positionX * this.px.mult, positionY * this.py.mult, 0);
              }
            } else {
              var position2 = this.p.getValueAtTime(time2);
              matrix.translate(position2[0] * this.p.mult, position2[1] * this.p.mult, -position2[2] * this.p.mult);
            }
            return matrix;
          }
          function getTransformStaticValueAtTime() {
            return this.v.clone(new Matrix());
          }
          var getTransformProperty = TransformPropertyFactory.getTransformProperty;
          TransformPropertyFactory.getTransformProperty = function(elem2, data2, container) {
            var prop = getTransformProperty(elem2, data2, container);
            if (prop.dynamicProperties.length) {
              prop.getValueAtTime = getTransformValueAtTime.bind(prop);
            } else {
              prop.getValueAtTime = getTransformStaticValueAtTime.bind(prop);
            }
            prop.setGroupProperty = expressionHelpers.setGroupProperty;
            return prop;
          };
          var propertyGetProp = PropertyFactory.getProp;
          PropertyFactory.getProp = function(elem2, data2, type, mult, container) {
            var prop = propertyGetProp(elem2, data2, type, mult, container);
            if (prop.kf) {
              prop.getValueAtTime = expressionHelpers.getValueAtTime.bind(prop);
            } else {
              prop.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(prop);
            }
            prop.setGroupProperty = expressionHelpers.setGroupProperty;
            prop.loopOut = loopOut2;
            prop.loopIn = loopIn2;
            prop.smooth = smooth2;
            prop.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(prop);
            prop.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(prop);
            prop.numKeys = data2.a === 1 ? data2.k.length : 0;
            prop.propertyIndex = data2.ix;
            var value2 = 0;
            if (type !== 0) {
              value2 = createTypedArray("float32", data2.a === 1 ? data2.k[0].s.length : data2.k.length);
            }
            prop._cachingAtTime = {
              lastFrame: initialDefaultFrame,
              lastIndex: 0,
              value: value2
            };
            expressionHelpers.searchExpressions(elem2, data2, prop);
            if (prop.k) {
              container.addDynamicProperty(prop);
            }
            return prop;
          };
          function getShapeValueAtTime(frameNum) {
            if (!this._cachingAtTime) {
              this._cachingAtTime = {
                shapeValue: shapePool.clone(this.pv),
                lastIndex: 0,
                lastTime: initialDefaultFrame
              };
            }
            frameNum *= this.elem.globalData.frameRate;
            frameNum -= this.offsetTime;
            if (frameNum !== this._cachingAtTime.lastTime) {
              this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < frameNum ? this._caching.lastIndex : 0;
              this._cachingAtTime.lastTime = frameNum;
              this.interpolateShape(frameNum, this._cachingAtTime.shapeValue, this._cachingAtTime);
            }
            return this._cachingAtTime.shapeValue;
          }
          var ShapePropertyConstructorFunction = ShapePropertyFactory.getConstructorFunction();
          var KeyframedShapePropertyConstructorFunction = ShapePropertyFactory.getKeyframedConstructorFunction();
          function ShapeExpressions() {
          }
          ShapeExpressions.prototype = {
            vertices: function vertices(prop, time2) {
              if (this.k) {
                this.getValue();
              }
              var shapePath = this.v;
              if (time2 !== void 0) {
                shapePath = this.getValueAtTime(time2, 0);
              }
              var i5;
              var len = shapePath._length;
              var vertices2 = shapePath[prop];
              var points = shapePath.v;
              var arr = createSizedArray(len);
              for (i5 = 0; i5 < len; i5 += 1) {
                if (prop === "i" || prop === "o") {
                  arr[i5] = [vertices2[i5][0] - points[i5][0], vertices2[i5][1] - points[i5][1]];
                } else {
                  arr[i5] = [vertices2[i5][0], vertices2[i5][1]];
                }
              }
              return arr;
            },
            points: function points(time2) {
              return this.vertices("v", time2);
            },
            inTangents: function inTangents(time2) {
              return this.vertices("i", time2);
            },
            outTangents: function outTangents(time2) {
              return this.vertices("o", time2);
            },
            isClosed: function isClosed() {
              return this.v.c;
            },
            pointOnPath: function pointOnPath(perc, time2) {
              var shapePath = this.v;
              if (time2 !== void 0) {
                shapePath = this.getValueAtTime(time2, 0);
              }
              if (!this._segmentsLength) {
                this._segmentsLength = bez.getSegmentsLength(shapePath);
              }
              var segmentsLength = this._segmentsLength;
              var lengths = segmentsLength.lengths;
              var lengthPos = segmentsLength.totalLength * perc;
              var i5 = 0;
              var len = lengths.length;
              var accumulatedLength = 0;
              var pt;
              while (i5 < len) {
                if (accumulatedLength + lengths[i5].addedLength > lengthPos) {
                  var initIndex = i5;
                  var endIndex = shapePath.c && i5 === len - 1 ? 0 : i5 + 1;
                  var segmentPerc = (lengthPos - accumulatedLength) / lengths[i5].addedLength;
                  pt = bez.getPointInSegment(shapePath.v[initIndex], shapePath.v[endIndex], shapePath.o[initIndex], shapePath.i[endIndex], segmentPerc, lengths[i5]);
                  break;
                } else {
                  accumulatedLength += lengths[i5].addedLength;
                }
                i5 += 1;
              }
              if (!pt) {
                pt = shapePath.c ? [shapePath.v[0][0], shapePath.v[0][1]] : [shapePath.v[shapePath._length - 1][0], shapePath.v[shapePath._length - 1][1]];
              }
              return pt;
            },
            vectorOnPath: function vectorOnPath(perc, time2, vectorType) {
              if (perc == 1) {
                perc = this.v.c;
              } else if (perc == 0) {
                perc = 0.999;
              }
              var pt1 = this.pointOnPath(perc, time2);
              var pt2 = this.pointOnPath(perc + 1e-3, time2);
              var xLength = pt2[0] - pt1[0];
              var yLength = pt2[1] - pt1[1];
              var magnitude = Math.sqrt(Math.pow(xLength, 2) + Math.pow(yLength, 2));
              if (magnitude === 0) {
                return [0, 0];
              }
              var unitVector = vectorType === "tangent" ? [xLength / magnitude, yLength / magnitude] : [-yLength / magnitude, xLength / magnitude];
              return unitVector;
            },
            tangentOnPath: function tangentOnPath(perc, time2) {
              return this.vectorOnPath(perc, time2, "tangent");
            },
            normalOnPath: function normalOnPath(perc, time2) {
              return this.vectorOnPath(perc, time2, "normal");
            },
            setGroupProperty: expressionHelpers.setGroupProperty,
            getValueAtTime: expressionHelpers.getStaticValueAtTime
          };
          extendPrototype([ShapeExpressions], ShapePropertyConstructorFunction);
          extendPrototype([ShapeExpressions], KeyframedShapePropertyConstructorFunction);
          KeyframedShapePropertyConstructorFunction.prototype.getValueAtTime = getShapeValueAtTime;
          KeyframedShapePropertyConstructorFunction.prototype.initiateExpression = ExpressionManager.initiateExpression;
          var propertyGetShapeProp = ShapePropertyFactory.getShapeProp;
          ShapePropertyFactory.getShapeProp = function(elem2, data2, type, arr, trims) {
            var prop = propertyGetShapeProp(elem2, data2, type, arr, trims);
            prop.propertyIndex = data2.ix;
            prop.lock = false;
            if (type === 3) {
              expressionHelpers.searchExpressions(elem2, data2.pt, prop);
            } else if (type === 4) {
              expressionHelpers.searchExpressions(elem2, data2.ks, prop);
            }
            if (prop.k) {
              elem2.addDynamicProperty(prop);
            }
            return prop;
          };
        }
        function initialize$1() {
          addPropertyDecorator();
        }
        function addDecorator() {
          function searchExpressions() {
            if (this.data.d.x) {
              this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this);
              this.addEffect(this.getExpressionValue.bind(this));
              return true;
            }
            return null;
          }
          TextProperty.prototype.getExpressionValue = function(currentValue, text2) {
            var newValue = this.calculateExpression(text2);
            if (currentValue.t !== newValue) {
              var newData = {};
              this.copyData(newData, currentValue);
              newData.t = newValue.toString();
              newData.__complete = false;
              return newData;
            }
            return currentValue;
          };
          TextProperty.prototype.searchProperty = function() {
            var isKeyframed = this.searchKeyframes();
            var hasExpressions = this.searchExpressions();
            this.kf = isKeyframed || hasExpressions;
            return this.kf;
          };
          TextProperty.prototype.searchExpressions = searchExpressions;
        }
        function initialize() {
          addDecorator();
        }
        function SVGComposableEffect() {
        }
        SVGComposableEffect.prototype = {
          createMergeNode: function createMergeNode(resultId, ins) {
            var feMerge = createNS("feMerge");
            feMerge.setAttribute("result", resultId);
            var feMergeNode;
            var i5;
            for (i5 = 0; i5 < ins.length; i5 += 1) {
              feMergeNode = createNS("feMergeNode");
              feMergeNode.setAttribute("in", ins[i5]);
              feMerge.appendChild(feMergeNode);
              feMerge.appendChild(feMergeNode);
            }
            return feMerge;
          }
        };
        var linearFilterValue = "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";
        function SVGTintFilter(filter, filterManager, elem2, id, source) {
          this.filterManager = filterManager;
          var feColorMatrix = createNS("feColorMatrix");
          feColorMatrix.setAttribute("type", "matrix");
          feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
          feColorMatrix.setAttribute("values", linearFilterValue + " 1 0");
          this.linearFilter = feColorMatrix;
          feColorMatrix.setAttribute("result", id + "_tint_1");
          filter.appendChild(feColorMatrix);
          feColorMatrix = createNS("feColorMatrix");
          feColorMatrix.setAttribute("type", "matrix");
          feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
          feColorMatrix.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0");
          feColorMatrix.setAttribute("result", id + "_tint_2");
          filter.appendChild(feColorMatrix);
          this.matrixFilter = feColorMatrix;
          var feMerge = this.createMergeNode(id, [source, id + "_tint_1", id + "_tint_2"]);
          filter.appendChild(feMerge);
        }
        extendPrototype([SVGComposableEffect], SVGTintFilter);
        SVGTintFilter.prototype.renderFrame = function(forceRender) {
          if (forceRender || this.filterManager._mdf) {
            var colorBlack = this.filterManager.effectElements[0].p.v;
            var colorWhite = this.filterManager.effectElements[1].p.v;
            var opacity = this.filterManager.effectElements[2].p.v / 100;
            this.linearFilter.setAttribute("values", linearFilterValue + " " + opacity + " 0");
            this.matrixFilter.setAttribute("values", colorWhite[0] - colorBlack[0] + " 0 0 0 " + colorBlack[0] + " " + (colorWhite[1] - colorBlack[1]) + " 0 0 0 " + colorBlack[1] + " " + (colorWhite[2] - colorBlack[2]) + " 0 0 0 " + colorBlack[2] + " 0 0 0 1 0");
          }
        };
        function SVGFillFilter(filter, filterManager, elem2, id) {
          this.filterManager = filterManager;
          var feColorMatrix = createNS("feColorMatrix");
          feColorMatrix.setAttribute("type", "matrix");
          feColorMatrix.setAttribute("color-interpolation-filters", "sRGB");
          feColorMatrix.setAttribute("values", "1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0");
          feColorMatrix.setAttribute("result", id);
          filter.appendChild(feColorMatrix);
          this.matrixFilter = feColorMatrix;
        }
        SVGFillFilter.prototype.renderFrame = function(forceRender) {
          if (forceRender || this.filterManager._mdf) {
            var color = this.filterManager.effectElements[2].p.v;
            var opacity = this.filterManager.effectElements[6].p.v;
            this.matrixFilter.setAttribute("values", "0 0 0 0 " + color[0] + " 0 0 0 0 " + color[1] + " 0 0 0 0 " + color[2] + " 0 0 0 " + opacity + " 0");
          }
        };
        function SVGStrokeEffect(fil, filterManager, elem2) {
          this.initialized = false;
          this.filterManager = filterManager;
          this.elem = elem2;
          this.paths = [];
        }
        SVGStrokeEffect.prototype.initialize = function() {
          var elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
          var path;
          var groupPath;
          var i5;
          var len;
          if (this.filterManager.effectElements[1].p.v === 1) {
            len = this.elem.maskManager.masksProperties.length;
            i5 = 0;
          } else {
            i5 = this.filterManager.effectElements[0].p.v - 1;
            len = i5 + 1;
          }
          groupPath = createNS("g");
          groupPath.setAttribute("fill", "none");
          groupPath.setAttribute("stroke-linecap", "round");
          groupPath.setAttribute("stroke-dashoffset", 1);
          for (i5; i5 < len; i5 += 1) {
            path = createNS("path");
            groupPath.appendChild(path);
            this.paths.push({
              p: path,
              m: i5
            });
          }
          if (this.filterManager.effectElements[10].p.v === 3) {
            var mask2 = createNS("mask");
            var id = createElementID();
            mask2.setAttribute("id", id);
            mask2.setAttribute("mask-type", "alpha");
            mask2.appendChild(groupPath);
            this.elem.globalData.defs.appendChild(mask2);
            var g6 = createNS("g");
            g6.setAttribute("mask", "url(" + getLocationHref() + "#" + id + ")");
            while (elemChildren[0]) {
              g6.appendChild(elemChildren[0]);
            }
            this.elem.layerElement.appendChild(g6);
            this.masker = mask2;
            groupPath.setAttribute("stroke", "#fff");
          } else if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
            if (this.filterManager.effectElements[10].p.v === 2) {
              elemChildren = this.elem.layerElement.children || this.elem.layerElement.childNodes;
              while (elemChildren.length) {
                this.elem.layerElement.removeChild(elemChildren[0]);
              }
            }
            this.elem.layerElement.appendChild(groupPath);
            this.elem.layerElement.removeAttribute("mask");
            groupPath.setAttribute("stroke", "#fff");
          }
          this.initialized = true;
          this.pathMasker = groupPath;
        };
        SVGStrokeEffect.prototype.renderFrame = function(forceRender) {
          if (!this.initialized) {
            this.initialize();
          }
          var i5;
          var len = this.paths.length;
          var mask2;
          var path;
          for (i5 = 0; i5 < len; i5 += 1) {
            if (this.paths[i5].m !== -1) {
              mask2 = this.elem.maskManager.viewData[this.paths[i5].m];
              path = this.paths[i5].p;
              if (forceRender || this.filterManager._mdf || mask2.prop._mdf) {
                path.setAttribute("d", mask2.lastPath);
              }
              if (forceRender || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || mask2.prop._mdf) {
                var dasharrayValue;
                if (this.filterManager.effectElements[7].p.v !== 0 || this.filterManager.effectElements[8].p.v !== 100) {
                  var s4 = Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
                  var e4 = Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v) * 0.01;
                  var l5 = path.getTotalLength();
                  dasharrayValue = "0 0 0 " + l5 * s4 + " ";
                  var lineLength = l5 * (e4 - s4);
                  var segment = 1 + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
                  var units = Math.floor(lineLength / segment);
                  var j4;
                  for (j4 = 0; j4 < units; j4 += 1) {
                    dasharrayValue += "1 " + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01 + " ";
                  }
                  dasharrayValue += "0 " + l5 * 10 + " 0 0";
                } else {
                  dasharrayValue = "1 " + this.filterManager.effectElements[4].p.v * 2 * this.filterManager.effectElements[9].p.v * 0.01;
                }
                path.setAttribute("stroke-dasharray", dasharrayValue);
              }
            }
          }
          if (forceRender || this.filterManager.effectElements[4].p._mdf) {
            this.pathMasker.setAttribute("stroke-width", this.filterManager.effectElements[4].p.v * 2);
          }
          if (forceRender || this.filterManager.effectElements[6].p._mdf) {
            this.pathMasker.setAttribute("opacity", this.filterManager.effectElements[6].p.v);
          }
          if (this.filterManager.effectElements[10].p.v === 1 || this.filterManager.effectElements[10].p.v === 2) {
            if (forceRender || this.filterManager.effectElements[3].p._mdf) {
              var color = this.filterManager.effectElements[3].p.v;
              this.pathMasker.setAttribute("stroke", "rgb(" + bmFloor(color[0] * 255) + "," + bmFloor(color[1] * 255) + "," + bmFloor(color[2] * 255) + ")");
            }
          }
        };
        function SVGTritoneFilter(filter, filterManager, elem2, id) {
          this.filterManager = filterManager;
          var feColorMatrix = createNS("feColorMatrix");
          feColorMatrix.setAttribute("type", "matrix");
          feColorMatrix.setAttribute("color-interpolation-filters", "linearRGB");
          feColorMatrix.setAttribute("values", "0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0");
          filter.appendChild(feColorMatrix);
          var feComponentTransfer = createNS("feComponentTransfer");
          feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
          feComponentTransfer.setAttribute("result", id);
          this.matrixFilter = feComponentTransfer;
          var feFuncR = createNS("feFuncR");
          feFuncR.setAttribute("type", "table");
          feComponentTransfer.appendChild(feFuncR);
          this.feFuncR = feFuncR;
          var feFuncG = createNS("feFuncG");
          feFuncG.setAttribute("type", "table");
          feComponentTransfer.appendChild(feFuncG);
          this.feFuncG = feFuncG;
          var feFuncB = createNS("feFuncB");
          feFuncB.setAttribute("type", "table");
          feComponentTransfer.appendChild(feFuncB);
          this.feFuncB = feFuncB;
          filter.appendChild(feComponentTransfer);
        }
        SVGTritoneFilter.prototype.renderFrame = function(forceRender) {
          if (forceRender || this.filterManager._mdf) {
            var color1 = this.filterManager.effectElements[0].p.v;
            var color2 = this.filterManager.effectElements[1].p.v;
            var color3 = this.filterManager.effectElements[2].p.v;
            var tableR = color3[0] + " " + color2[0] + " " + color1[0];
            var tableG = color3[1] + " " + color2[1] + " " + color1[1];
            var tableB = color3[2] + " " + color2[2] + " " + color1[2];
            this.feFuncR.setAttribute("tableValues", tableR);
            this.feFuncG.setAttribute("tableValues", tableG);
            this.feFuncB.setAttribute("tableValues", tableB);
          }
        };
        function SVGProLevelsFilter(filter, filterManager, elem2, id) {
          this.filterManager = filterManager;
          var effectElements = this.filterManager.effectElements;
          var feComponentTransfer = createNS("feComponentTransfer");
          if (effectElements[10].p.k || effectElements[10].p.v !== 0 || effectElements[11].p.k || effectElements[11].p.v !== 1 || effectElements[12].p.k || effectElements[12].p.v !== 1 || effectElements[13].p.k || effectElements[13].p.v !== 0 || effectElements[14].p.k || effectElements[14].p.v !== 1) {
            this.feFuncR = this.createFeFunc("feFuncR", feComponentTransfer);
          }
          if (effectElements[17].p.k || effectElements[17].p.v !== 0 || effectElements[18].p.k || effectElements[18].p.v !== 1 || effectElements[19].p.k || effectElements[19].p.v !== 1 || effectElements[20].p.k || effectElements[20].p.v !== 0 || effectElements[21].p.k || effectElements[21].p.v !== 1) {
            this.feFuncG = this.createFeFunc("feFuncG", feComponentTransfer);
          }
          if (effectElements[24].p.k || effectElements[24].p.v !== 0 || effectElements[25].p.k || effectElements[25].p.v !== 1 || effectElements[26].p.k || effectElements[26].p.v !== 1 || effectElements[27].p.k || effectElements[27].p.v !== 0 || effectElements[28].p.k || effectElements[28].p.v !== 1) {
            this.feFuncB = this.createFeFunc("feFuncB", feComponentTransfer);
          }
          if (effectElements[31].p.k || effectElements[31].p.v !== 0 || effectElements[32].p.k || effectElements[32].p.v !== 1 || effectElements[33].p.k || effectElements[33].p.v !== 1 || effectElements[34].p.k || effectElements[34].p.v !== 0 || effectElements[35].p.k || effectElements[35].p.v !== 1) {
            this.feFuncA = this.createFeFunc("feFuncA", feComponentTransfer);
          }
          if (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) {
            feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
            filter.appendChild(feComponentTransfer);
          }
          if (effectElements[3].p.k || effectElements[3].p.v !== 0 || effectElements[4].p.k || effectElements[4].p.v !== 1 || effectElements[5].p.k || effectElements[5].p.v !== 1 || effectElements[6].p.k || effectElements[6].p.v !== 0 || effectElements[7].p.k || effectElements[7].p.v !== 1) {
            feComponentTransfer = createNS("feComponentTransfer");
            feComponentTransfer.setAttribute("color-interpolation-filters", "sRGB");
            feComponentTransfer.setAttribute("result", id);
            filter.appendChild(feComponentTransfer);
            this.feFuncRComposed = this.createFeFunc("feFuncR", feComponentTransfer);
            this.feFuncGComposed = this.createFeFunc("feFuncG", feComponentTransfer);
            this.feFuncBComposed = this.createFeFunc("feFuncB", feComponentTransfer);
          }
        }
        SVGProLevelsFilter.prototype.createFeFunc = function(type, feComponentTransfer) {
          var feFunc = createNS(type);
          feFunc.setAttribute("type", "table");
          feComponentTransfer.appendChild(feFunc);
          return feFunc;
        };
        SVGProLevelsFilter.prototype.getTableValue = function(inputBlack, inputWhite, gamma, outputBlack, outputWhite) {
          var cnt = 0;
          var segments = 256;
          var perc;
          var min = Math.min(inputBlack, inputWhite);
          var max = Math.max(inputBlack, inputWhite);
          var table = Array.call(null, {
            length: segments
          });
          var colorValue;
          var pos = 0;
          var outputDelta = outputWhite - outputBlack;
          var inputDelta = inputWhite - inputBlack;
          while (cnt <= 256) {
            perc = cnt / 256;
            if (perc <= min) {
              colorValue = inputDelta < 0 ? outputWhite : outputBlack;
            } else if (perc >= max) {
              colorValue = inputDelta < 0 ? outputBlack : outputWhite;
            } else {
              colorValue = outputBlack + outputDelta * Math.pow((perc - inputBlack) / inputDelta, 1 / gamma);
            }
            table[pos] = colorValue;
            pos += 1;
            cnt += 256 / (segments - 1);
          }
          return table.join(" ");
        };
        SVGProLevelsFilter.prototype.renderFrame = function(forceRender) {
          if (forceRender || this.filterManager._mdf) {
            var val2;
            var effectElements = this.filterManager.effectElements;
            if (this.feFuncRComposed && (forceRender || effectElements[3].p._mdf || effectElements[4].p._mdf || effectElements[5].p._mdf || effectElements[6].p._mdf || effectElements[7].p._mdf)) {
              val2 = this.getTableValue(effectElements[3].p.v, effectElements[4].p.v, effectElements[5].p.v, effectElements[6].p.v, effectElements[7].p.v);
              this.feFuncRComposed.setAttribute("tableValues", val2);
              this.feFuncGComposed.setAttribute("tableValues", val2);
              this.feFuncBComposed.setAttribute("tableValues", val2);
            }
            if (this.feFuncR && (forceRender || effectElements[10].p._mdf || effectElements[11].p._mdf || effectElements[12].p._mdf || effectElements[13].p._mdf || effectElements[14].p._mdf)) {
              val2 = this.getTableValue(effectElements[10].p.v, effectElements[11].p.v, effectElements[12].p.v, effectElements[13].p.v, effectElements[14].p.v);
              this.feFuncR.setAttribute("tableValues", val2);
            }
            if (this.feFuncG && (forceRender || effectElements[17].p._mdf || effectElements[18].p._mdf || effectElements[19].p._mdf || effectElements[20].p._mdf || effectElements[21].p._mdf)) {
              val2 = this.getTableValue(effectElements[17].p.v, effectElements[18].p.v, effectElements[19].p.v, effectElements[20].p.v, effectElements[21].p.v);
              this.feFuncG.setAttribute("tableValues", val2);
            }
            if (this.feFuncB && (forceRender || effectElements[24].p._mdf || effectElements[25].p._mdf || effectElements[26].p._mdf || effectElements[27].p._mdf || effectElements[28].p._mdf)) {
              val2 = this.getTableValue(effectElements[24].p.v, effectElements[25].p.v, effectElements[26].p.v, effectElements[27].p.v, effectElements[28].p.v);
              this.feFuncB.setAttribute("tableValues", val2);
            }
            if (this.feFuncA && (forceRender || effectElements[31].p._mdf || effectElements[32].p._mdf || effectElements[33].p._mdf || effectElements[34].p._mdf || effectElements[35].p._mdf)) {
              val2 = this.getTableValue(effectElements[31].p.v, effectElements[32].p.v, effectElements[33].p.v, effectElements[34].p.v, effectElements[35].p.v);
              this.feFuncA.setAttribute("tableValues", val2);
            }
          }
        };
        function SVGDropShadowEffect(filter, filterManager, elem2, id, source) {
          var globalFilterSize = filterManager.container.globalData.renderConfig.filterSize;
          var filterSize = filterManager.data.fs || globalFilterSize;
          filter.setAttribute("x", filterSize.x || globalFilterSize.x);
          filter.setAttribute("y", filterSize.y || globalFilterSize.y);
          filter.setAttribute("width", filterSize.width || globalFilterSize.width);
          filter.setAttribute("height", filterSize.height || globalFilterSize.height);
          this.filterManager = filterManager;
          var feGaussianBlur = createNS("feGaussianBlur");
          feGaussianBlur.setAttribute("in", "SourceAlpha");
          feGaussianBlur.setAttribute("result", id + "_drop_shadow_1");
          feGaussianBlur.setAttribute("stdDeviation", "0");
          this.feGaussianBlur = feGaussianBlur;
          filter.appendChild(feGaussianBlur);
          var feOffset = createNS("feOffset");
          feOffset.setAttribute("dx", "25");
          feOffset.setAttribute("dy", "0");
          feOffset.setAttribute("in", id + "_drop_shadow_1");
          feOffset.setAttribute("result", id + "_drop_shadow_2");
          this.feOffset = feOffset;
          filter.appendChild(feOffset);
          var feFlood = createNS("feFlood");
          feFlood.setAttribute("flood-color", "#00ff00");
          feFlood.setAttribute("flood-opacity", "1");
          feFlood.setAttribute("result", id + "_drop_shadow_3");
          this.feFlood = feFlood;
          filter.appendChild(feFlood);
          var feComposite = createNS("feComposite");
          feComposite.setAttribute("in", id + "_drop_shadow_3");
          feComposite.setAttribute("in2", id + "_drop_shadow_2");
          feComposite.setAttribute("operator", "in");
          feComposite.setAttribute("result", id + "_drop_shadow_4");
          filter.appendChild(feComposite);
          var feMerge = this.createMergeNode(id, [id + "_drop_shadow_4", source]);
          filter.appendChild(feMerge);
        }
        extendPrototype([SVGComposableEffect], SVGDropShadowEffect);
        SVGDropShadowEffect.prototype.renderFrame = function(forceRender) {
          if (forceRender || this.filterManager._mdf) {
            if (forceRender || this.filterManager.effectElements[4].p._mdf) {
              this.feGaussianBlur.setAttribute("stdDeviation", this.filterManager.effectElements[4].p.v / 4);
            }
            if (forceRender || this.filterManager.effectElements[0].p._mdf) {
              var col = this.filterManager.effectElements[0].p.v;
              this.feFlood.setAttribute("flood-color", rgbToHex(Math.round(col[0] * 255), Math.round(col[1] * 255), Math.round(col[2] * 255)));
            }
            if (forceRender || this.filterManager.effectElements[1].p._mdf) {
              this.feFlood.setAttribute("flood-opacity", this.filterManager.effectElements[1].p.v / 255);
            }
            if (forceRender || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {
              var distance = this.filterManager.effectElements[3].p.v;
              var angle = (this.filterManager.effectElements[2].p.v - 90) * degToRads;
              var x3 = distance * Math.cos(angle);
              var y5 = distance * Math.sin(angle);
              this.feOffset.setAttribute("dx", x3);
              this.feOffset.setAttribute("dy", y5);
            }
          }
        };
        var _svgMatteSymbols = [];
        function SVGMatte3Effect(filterElem, filterManager, elem2) {
          this.initialized = false;
          this.filterManager = filterManager;
          this.filterElem = filterElem;
          this.elem = elem2;
          elem2.matteElement = createNS("g");
          elem2.matteElement.appendChild(elem2.layerElement);
          elem2.matteElement.appendChild(elem2.transformedElement);
          elem2.baseElement = elem2.matteElement;
        }
        SVGMatte3Effect.prototype.findSymbol = function(mask2) {
          var i5 = 0;
          var len = _svgMatteSymbols.length;
          while (i5 < len) {
            if (_svgMatteSymbols[i5] === mask2) {
              return _svgMatteSymbols[i5];
            }
            i5 += 1;
          }
          return null;
        };
        SVGMatte3Effect.prototype.replaceInParent = function(mask2, symbolId) {
          var parentNode = mask2.layerElement.parentNode;
          if (!parentNode) {
            return;
          }
          var children = parentNode.children;
          var i5 = 0;
          var len = children.length;
          while (i5 < len) {
            if (children[i5] === mask2.layerElement) {
              break;
            }
            i5 += 1;
          }
          var nextChild;
          if (i5 <= len - 2) {
            nextChild = children[i5 + 1];
          }
          var useElem = createNS("use");
          useElem.setAttribute("href", "#" + symbolId);
          if (nextChild) {
            parentNode.insertBefore(useElem, nextChild);
          } else {
            parentNode.appendChild(useElem);
          }
        };
        SVGMatte3Effect.prototype.setElementAsMask = function(elem2, mask2) {
          if (!this.findSymbol(mask2)) {
            var symbolId = createElementID();
            var masker = createNS("mask");
            masker.setAttribute("id", mask2.layerId);
            masker.setAttribute("mask-type", "alpha");
            _svgMatteSymbols.push(mask2);
            var defs = elem2.globalData.defs;
            defs.appendChild(masker);
            var symbol = createNS("symbol");
            symbol.setAttribute("id", symbolId);
            this.replaceInParent(mask2, symbolId);
            symbol.appendChild(mask2.layerElement);
            defs.appendChild(symbol);
            var useElem = createNS("use");
            useElem.setAttribute("href", "#" + symbolId);
            masker.appendChild(useElem);
            mask2.data.hd = false;
            mask2.show();
          }
          elem2.setMatte(mask2.layerId);
        };
        SVGMatte3Effect.prototype.initialize = function() {
          var ind = this.filterManager.effectElements[0].p.v;
          var elements = this.elem.comp.elements;
          var i5 = 0;
          var len = elements.length;
          while (i5 < len) {
            if (elements[i5] && elements[i5].data.ind === ind) {
              this.setElementAsMask(this.elem, elements[i5]);
            }
            i5 += 1;
          }
          this.initialized = true;
        };
        SVGMatte3Effect.prototype.renderFrame = function() {
          if (!this.initialized) {
            this.initialize();
          }
        };
        function SVGGaussianBlurEffect(filter, filterManager, elem2, id) {
          filter.setAttribute("x", "-100%");
          filter.setAttribute("y", "-100%");
          filter.setAttribute("width", "300%");
          filter.setAttribute("height", "300%");
          this.filterManager = filterManager;
          var feGaussianBlur = createNS("feGaussianBlur");
          feGaussianBlur.setAttribute("result", id);
          filter.appendChild(feGaussianBlur);
          this.feGaussianBlur = feGaussianBlur;
        }
        SVGGaussianBlurEffect.prototype.renderFrame = function(forceRender) {
          if (forceRender || this.filterManager._mdf) {
            var kBlurrinessToSigma = 0.3;
            var sigma = this.filterManager.effectElements[0].p.v * kBlurrinessToSigma;
            var dimensions = this.filterManager.effectElements[1].p.v;
            var sigmaX = dimensions == 3 ? 0 : sigma;
            var sigmaY = dimensions == 2 ? 0 : sigma;
            this.feGaussianBlur.setAttribute("stdDeviation", sigmaX + " " + sigmaY);
            var edgeMode = this.filterManager.effectElements[2].p.v == 1 ? "wrap" : "duplicate";
            this.feGaussianBlur.setAttribute("edgeMode", edgeMode);
          }
        };
        function TransformEffect() {
        }
        TransformEffect.prototype.init = function(effectsManager) {
          this.effectsManager = effectsManager;
          this.type = effectTypes.TRANSFORM_EFFECT;
          this.matrix = new Matrix();
          this.opacity = -1;
          this._mdf = false;
          this._opMdf = false;
        };
        TransformEffect.prototype.renderFrame = function(forceFrame) {
          this._opMdf = false;
          this._mdf = false;
          if (forceFrame || this.effectsManager._mdf) {
            var effectElements = this.effectsManager.effectElements;
            var anchor = effectElements[0].p.v;
            var position2 = effectElements[1].p.v;
            var isUniformScale = effectElements[2].p.v === 1;
            var scaleHeight = effectElements[3].p.v;
            var scaleWidth = isUniformScale ? scaleHeight : effectElements[4].p.v;
            var skew = effectElements[5].p.v;
            var skewAxis = effectElements[6].p.v;
            var rotation2 = effectElements[7].p.v;
            this.matrix.reset();
            this.matrix.translate(-anchor[0], -anchor[1], anchor[2]);
            this.matrix.scale(scaleWidth * 0.01, scaleHeight * 0.01, 1);
            this.matrix.rotate(-rotation2 * degToRads);
            this.matrix.skewFromAxis(-skew * degToRads, (skewAxis + 90) * degToRads);
            this.matrix.translate(position2[0], position2[1], 0);
            this._mdf = true;
            if (this.opacity !== effectElements[8].p.v) {
              this.opacity = effectElements[8].p.v;
              this._opMdf = true;
            }
          }
        };
        function SVGTransformEffect(_5, filterManager) {
          this.init(filterManager);
        }
        extendPrototype([TransformEffect], SVGTransformEffect);
        function CVTransformEffect(effectsManager) {
          this.init(effectsManager);
        }
        extendPrototype([TransformEffect], CVTransformEffect);
        registerRenderer("canvas", CanvasRenderer);
        registerRenderer("html", HybridRenderer);
        registerRenderer("svg", SVGRenderer);
        ShapeModifiers.registerModifier("tm", TrimModifier);
        ShapeModifiers.registerModifier("pb", PuckerAndBloatModifier);
        ShapeModifiers.registerModifier("rp", RepeaterModifier);
        ShapeModifiers.registerModifier("rd", RoundCornersModifier);
        ShapeModifiers.registerModifier("zz", ZigZagModifier);
        ShapeModifiers.registerModifier("op", OffsetPathModifier);
        setExpressionsPlugin(Expressions);
        setExpressionInterfaces(getInterface);
        initialize$1();
        initialize();
        registerEffect$1(20, SVGTintFilter, true);
        registerEffect$1(21, SVGFillFilter, true);
        registerEffect$1(22, SVGStrokeEffect, false);
        registerEffect$1(23, SVGTritoneFilter, true);
        registerEffect$1(24, SVGProLevelsFilter, true);
        registerEffect$1(25, SVGDropShadowEffect, true);
        registerEffect$1(28, SVGMatte3Effect, false);
        registerEffect$1(29, SVGGaussianBlurEffect, true);
        registerEffect$1(35, SVGTransformEffect, false);
        registerEffect(35, CVTransformEffect);
        return lottie;
      }));
    }
  });

  // pages/new-tab/app/burning/BurnAnimationLottieWeb.js
  var BurnAnimationLottieWeb_exports = {};
  __export(BurnAnimationLottieWeb_exports, {
    BurnAnimation: () => BurnAnimation
  });
  function BurnAnimation({ url: url8, doneBurning }) {
    const ref = A2(
      /** @type {Lottie} */
      null
    );
    const json = x2(ActivityBurningSignalContext);
    y2(() => {
      if (!ref.current) return;
      let finished = false;
      let timer2 = null;
      const publish = (_reason) => {
        if (finished) return;
        doneBurning(url8);
        finished = true;
        clearTimeout(timer2);
      };
      timer2 = setTimeout(() => {
        publish("timeout occurred");
      }, 1200);
      const animationHandler = () => publish("timeout occurred");
      const hasJson = json.animation.value.state === "ready" && json.animation.value.data;
      let animation = import_lottie_web.default.loadAnimation({
        container: ref.current,
        renderer: "svg",
        loop: false,
        autoplay: true,
        animationData: hasJson || void 0,
        path: hasJson === void 0 ? "burn.json" : void 0
      });
      animation.addEventListener("complete", animationHandler);
      return () => {
        clearTimeout(timer2);
        animation = null;
        if (!finished) {
          publish("unmount occurred");
        }
      };
    }, [url8, json, doneBurning]);
    return /* @__PURE__ */ _("div", { ref, "data-lottie-player": true });
  }
  var import_lottie_web;
  var init_BurnAnimationLottieWeb = __esm({
    "pages/new-tab/app/burning/BurnAnimationLottieWeb.js"() {
      "use strict";
      init_preact_module();
      import_lottie_web = __toESM(require_lottie(), 1);
      init_hooks_module();
      init_BurnProvider();
    }
  });

  // pages/new-tab/app/activity/components/ActivityItemAnimationWrapper.js
  function ActivityItemAnimationWrapper({ children, url: url8 }) {
    const ref = A2(
      /** @type {HTMLDivElement|null} */
      null
    );
    const { exiting, burning, showBurnAnimation, doneBurning } = x2(ActivityBurningSignalContext);
    const isBurning = useComputed(() => burning.value.some((x3) => x3 === url8));
    const isExiting = useComputed(() => exiting.value.some((x3) => x3 === url8));
    _2(() => {
      let canceled = false;
      let sent = false;
      if (isBurning.value && ref.current) {
        const element = ref.current;
        element.style.height = element.scrollHeight + "px";
      } else if (isExiting.value && ref.current) {
        const element = ref.current;
        const anim = element.animate([{ height: element.style.height }, { height: "0px" }], {
          duration: 200,
          iterations: 1,
          fill: "both",
          easing: "ease-in-out"
        });
        const handler = (_5) => {
          if (canceled) return;
          if (sent) return;
          sent = true;
          anim.removeEventListener("finish", handler);
          window.dispatchEvent(
            new CustomEvent("done-exiting", {
              detail: {
                url: url8,
                reason: "animation completed"
              }
            })
          );
        };
        anim.addEventListener("finish", handler, { once: true });
        document.addEventListener("visibilitychange", handler, { once: true });
        return () => {
          anim.removeEventListener("finish", handler);
          document.removeEventListener("visibilitychange", handler);
        };
      }
      return () => {
        canceled = true;
      };
    }, [isBurning.value, isExiting.value, url8]);
    return /* @__PURE__ */ _("div", { class: (0, import_classnames11.default)(Activity_default.anim, isBurning.value && Activity_default.burning), ref }, !isExiting.value && children, !isExiting.value && isBurning.value && showBurnAnimation && /* @__PURE__ */ _(P3, { fallback: null }, /* @__PURE__ */ _(BurnAnimationLazy, { url: url8, doneBurning })), !isExiting.value && isBurning.value && !showBurnAnimation && /* @__PURE__ */ _(NullBurner, { url: url8, doneBurning }));
  }
  function NullBurner({ url: url8, doneBurning }) {
    y2(() => doneBurning(url8), [url8]);
    return null;
  }
  var import_classnames11, BurnAnimationLazy;
  var init_ActivityItemAnimationWrapper = __esm({
    "pages/new-tab/app/activity/components/ActivityItemAnimationWrapper.js"() {
      "use strict";
      init_hooks_module();
      init_BurnProvider();
      init_signals_module();
      import_classnames11 = __toESM(require_classnames(), 1);
      init_Activity();
      init_compat_module();
      init_preact_module();
      BurnAnimationLazy = z3(() => Promise.resolve().then(() => (init_BurnAnimationLottieWeb(), BurnAnimationLottieWeb_exports)).then((x3) => x3.BurnAnimation));
    }
  });

  // pages/new-tab/app/activity/components/HistoryItems.js
  function HistoryItems({ id }) {
    const { activity } = x2(NormalizedDataContext);
    const history = useComputed(() => activity.value.history[id]);
    const [expansion, setExpansion] = d2(
      /** @type {Expansion} */
      "collapsed"
    );
    const max = Math.min(history.value.length, MAX_SHOW_AMOUNT);
    const min = Math.min(MIN_SHOW_AMOUNT, max);
    const current = expansion === "collapsed" ? min : max;
    function onClick(event) {
      const btn = event.target?.closest("button[data-action]");
      if (btn?.dataset.action === "hide") {
        setExpansion("collapsed");
      } else if (btn?.dataset.action === "show") {
        setExpansion("expanded");
      }
    }
    return /* @__PURE__ */ _("ul", { class: Activity_default.history, onClick }, history.value.slice(0, current).map((item, index2) => {
      const isLast = index2 === current - 1;
      return /* @__PURE__ */ _(HistoryItem, { key: item.url + item.title, item, isLast, current, min, max });
    }));
  }
  function HistoryItem({ item, isLast, current, min, max }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    const hasMore = current < max;
    const hasLess = current > min;
    const hiddenCount = max - current;
    const showButton = hasMore || hasLess;
    const buttonLabel = hasMore && isLast ? t4("activity_show_more_history", { count: String(hiddenCount) }) : t4("activity_show_less_history");
    return /* @__PURE__ */ _("li", { class: Activity_default.historyItem }, /* @__PURE__ */ _("a", { href: item.url, class: Activity_default.historyLink, title: item.url, "data-url": item.url }, item.title), /* @__PURE__ */ _("small", { class: Activity_default.time }, item.relativeTime), isLast && showButton && /* @__PURE__ */ _("button", { "data-action": hasMore && isLast ? "show" : "hide", class: Activity_default.historyBtn, "aria-label": buttonLabel }, /* @__PURE__ */ _(ChevronSmall, null)));
  }
  var MIN_SHOW_AMOUNT, MAX_SHOW_AMOUNT;
  var init_HistoryItems = __esm({
    "pages/new-tab/app/activity/components/HistoryItems.js"() {
      "use strict";
      init_types();
      init_hooks_module();
      init_NormalizeDataProvider();
      init_signals_module();
      init_Activity();
      init_Icons2();
      init_preact_module();
      MIN_SHOW_AMOUNT = 2;
      MAX_SHOW_AMOUNT = 10;
    }
  });

  // pages/new-tab/app/activity/components/Activity.js
  function Activity({ itemCount, batched, children }) {
    return /* @__PURE__ */ _("div", { class: Activity_default.root, "data-testid": "Activity" }, itemCount === 0 && /* @__PURE__ */ _(ActivityEmptyState, null), itemCount > 0 && children, batched && itemCount > 0 && /* @__PURE__ */ _(Loader, null));
  }
  function ActivityEmptyState() {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {import("../strings.json")} */
      {}
    );
    return /* @__PURE__ */ _(ProtectionsEmpty, null, /* @__PURE__ */ _("p", null, t4("activity_empty")));
  }
  function ActivityBody({ canBurn, visibility }) {
    const { isReducedMotion } = useEnv();
    const { keys } = x2(NormalizedDataContext);
    const { burning, exiting } = x2(ActivityBurningSignalContext);
    const busy = useComputed(() => burning.value.length > 0 || exiting.value.length > 0);
    const { didClick } = x2(ActivityInteractionsContext);
    const ref = A2(null);
    useOnMiddleClick(ref, didClick);
    return /* @__PURE__ */ _("ul", { class: Activity_default.activity, "data-busy": busy, ref, onClick: didClick }, keys.value.map((id, _index) => {
      if (canBurn && !isReducedMotion) return /* @__PURE__ */ _(BurnableItem, { id, key: id, documentVisibility: visibility });
      return /* @__PURE__ */ _(RemovableItem, { id, key: id, canBurn, documentVisibility: visibility });
    }));
  }
  function Loader() {
    const loaderRef = A2(
      /** @type {HTMLDivElement|null} */
      null
    );
    y2(() => {
      const observer = new IntersectionObserver(([entry]) => {
        if (entry.isIntersecting) {
          window.dispatchEvent(new Event("activity.next"));
        }
      });
      if (loaderRef.current) {
        observer.observe(loaderRef.current);
      }
      return () => {
        if (loaderRef.current) {
          observer.unobserve(loaderRef.current);
        }
      };
    }, []);
    return /* @__PURE__ */ _("div", { class: Activity_default.loader, ref: loaderRef }, "Loading...");
  }
  function TrackerStatus({ id, trackersFound }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    const { activity } = x2(NormalizedDataContext);
    const status = useComputed(() => activity.value.trackingStatus[id]);
    const other = status.value.trackerCompanies.slice(DDG_MAX_TRACKER_ICONS - 1);
    const companyIconsMax = other.length === 0 ? DDG_MAX_TRACKER_ICONS : DDG_MAX_TRACKER_ICONS - 1;
    const adBlocking = useAdBlocking();
    const icons = status.value.trackerCompanies.slice(0, companyIconsMax).map((item, _index) => {
      return /* @__PURE__ */ _(CompanyIcon, { displayName: item.displayName, key: item });
    });
    let otherIcon = null;
    if (other.length > 0) {
      const title = other.map((item) => item.displayName).join("\n");
      otherIcon = /* @__PURE__ */ _("span", { title, class: Activity_default.otherIcon }, "+", other.length);
    }
    if (status.value.totalCount === 0) {
      let text2;
      if (trackersFound) {
        text2 = adBlocking ? t4("activity_no_adsAndTrackers_blocked") : t4("activity_no_trackers_blocked");
      } else {
        text2 = adBlocking ? t4("activity_no_adsAndTrackers") : t4("activity_no_trackers");
      }
      return /* @__PURE__ */ _("p", { class: Activity_default.companiesIconRow, "data-testid": "TrackerStatus" }, text2);
    }
    return /* @__PURE__ */ _("div", { class: Activity_default.companiesIconRow, "data-testid": "TrackerStatus" }, /* @__PURE__ */ _("div", { class: Activity_default.companiesIcons }, icons, otherIcon), /* @__PURE__ */ _("div", { class: Activity_default.companiesText }, adBlocking ? /* @__PURE__ */ _(Trans, { str: t4("activity_countBlockedAdsAndTrackersPlural", { count: String(status.value.totalCount) }), values: {} }) : /* @__PURE__ */ _(Trans, { str: t4("activity_countBlockedPlural", { count: String(status.value.totalCount) }), values: {} })));
  }
  function ActivityConfigured({ children }) {
    const batched = useBatchedActivityApi();
    const { activity } = x2(NormalizedDataContext);
    const itemCount = useComputed(() => {
      return Object.keys(activity.value.items).length;
    });
    return /* @__PURE__ */ _(Activity, { batched, itemCount: itemCount.value }, children);
  }
  function ActivityConsumer({ showBurnAnimation }) {
    const { state } = x2(ActivityContext);
    const service = x2(ActivityServiceContext);
    const platformName = usePlatformName();
    const visibility = useDocumentVisibility();
    if (service && state.status === "ready") {
      if (platformName === "windows") {
        return /* @__PURE__ */ _(SignalStateProvider, null, /* @__PURE__ */ _(ActivityConfigured, null, /* @__PURE__ */ _(ActivityBody, { canBurn: false, visibility })));
      }
      return /* @__PURE__ */ _(SignalStateProvider, null, /* @__PURE__ */ _(BurnProvider, { service, showBurnAnimation }, /* @__PURE__ */ _(ActivityConfigured, null, /* @__PURE__ */ _(ActivityBody, { canBurn: true, visibility }))));
    }
    return null;
  }
  var BurnableItem, RemovableItem, DDG_MAX_TRACKER_ICONS;
  var init_Activity2 = __esm({
    "pages/new-tab/app/activity/components/Activity.js"() {
      "use strict";
      init_preact_module();
      init_Activity();
      init_hooks_module();
      init_compat_module();
      init_ActivityProvider();
      init_types();
      init_utils2();
      init_settings_provider();
      init_CompanyIcon2();
      init_TranslationsProvider();
      init_ActivityItem();
      init_BurnProvider();
      init_EnvironmentProvider();
      init_signals_module();
      init_ActivityItemAnimationWrapper();
      init_DocumentVisibility();
      init_HistoryItems();
      init_NormalizeDataProvider();
      init_ActivityInteractionsContext();
      init_Protections2();
      BurnableItem = M2(
        /**
         * @param {object} props
         * @param {string} props.id
         * @param {'visible' | 'hidden'} props.documentVisibility
         */
        function BurnableItem2({ id, documentVisibility }) {
          const { activity } = x2(NormalizedDataContext);
          const item = useComputed(() => activity.value.items[id]);
          if (!item.value) {
            return null;
          }
          return /* @__PURE__ */ _(ActivityItemAnimationWrapper, { url: id }, /* @__PURE__ */ _(
            ActivityItem,
            {
              title: item.value.title,
              url: id,
              favoriteSrc: item.value.favoriteSrc,
              faviconMax: item.value.faviconMax,
              etldPlusOne: item.value.etldPlusOne,
              canBurn: true,
              documentVisibility
            },
            /* @__PURE__ */ _(TrackerStatus, { id, trackersFound: item.value.trackersFound }),
            /* @__PURE__ */ _(HistoryItems, { id })
          ));
        }
      );
      RemovableItem = M2(
        /**
         * @param {object} props
         * @param {string} props.id
         * @param {boolean} props.canBurn
         * @param {"visible" | "hidden"} props.documentVisibility
         */
        function RemovableItem2({ id, canBurn, documentVisibility }) {
          const { activity } = x2(NormalizedDataContext);
          const item = useComputed(() => activity.value.items[id]);
          if (!item.value) {
            return /* @__PURE__ */ _("p", { "data-testid": "ActivityItem", "data-state": "loading", "data-id": id, hidden: true }, "Loading: ", id);
          }
          return /* @__PURE__ */ _(
            ActivityItem,
            {
              title: item.value.title,
              url: id,
              favoriteSrc: item.value.favoriteSrc,
              faviconMax: item.value.faviconMax,
              etldPlusOne: item.value.etldPlusOne,
              canBurn,
              documentVisibility
            },
            /* @__PURE__ */ _(TrackerStatus, { id, trackersFound: item.value.trackersFound }),
            /* @__PURE__ */ _(HistoryItems, { id })
          );
        }
      );
      DDG_MAX_TRACKER_ICONS = 3;
    }
  });

  // pages/new-tab/app/privacy-stats/privacy-stats.service.js
  var PrivacyStatsService;
  var init_privacy_stats_service = __esm({
    "pages/new-tab/app/privacy-stats/privacy-stats.service.js"() {
      "use strict";
      init_service();
      PrivacyStatsService = class {
        /**
         * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
         * @internal
         */
        constructor(ntp) {
          this.dataService = new Service({
            initial: () => ntp.messaging.request("stats_getData"),
            subscribe: (cb) => ntp.messaging.subscribe("stats_onDataUpdate", cb)
          });
        }
        name() {
          return "PrivacyStatsService";
        }
        /**
         * @returns {Promise<PrivacyStatsData>}
         * @internal
         */
        async getInitial() {
          return await this.dataService.fetchInitial();
        }
        /**
         * @internal
         */
        destroy() {
          this.dataService.destroy();
        }
        /**
         * @param {(evt: {data: PrivacyStatsData, source: 'manual' | 'subscription'}) => void} cb
         * @internal
         */
        onData(cb) {
          return this.dataService.onData(cb);
        }
      };
    }
  });

  // pages/new-tab/app/privacy-stats/components/PrivacyStatsProvider.js
  function PrivacyStatsProvider(props) {
    const initial = (
      /** @type {State} */
      {
        status: "idle",
        data: null,
        config: null
      }
    );
    const [state, dispatch] = h2(reducer, initial);
    const service = useService7();
    useInitialData({ dispatch, service });
    useDataSubscription({ dispatch, service });
    return /* @__PURE__ */ _(PrivacyStatsContext.Provider, { value: { state } }, /* @__PURE__ */ _(PrivacyStatsDispatchContext.Provider, { value: dispatch }, props.children));
  }
  function useService7() {
    const service = A2(
      /** @type {PrivacyStatsService|null} */
      null
    );
    const ntp = useMessaging();
    y2(() => {
      const stats = new PrivacyStatsService(ntp);
      service.current = stats;
      return () => {
        stats.destroy();
      };
    }, [ntp]);
    return service;
  }
  var PrivacyStatsContext, PrivacyStatsDispatchContext;
  var init_PrivacyStatsProvider = __esm({
    "pages/new-tab/app/privacy-stats/components/PrivacyStatsProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_types();
      init_privacy_stats_service();
      init_service_hooks();
      PrivacyStatsContext = K({
        /** @type {State} */
        state: { status: "idle", data: null, config: null }
      });
      PrivacyStatsDispatchContext = K(
        /** @type {import("preact/hooks").Dispatch<Events>} */
        {}
      );
    }
  });

  // pages/new-tab/app/privacy-stats/components/BodyExpansionProvider.js
  function useBodyExpansion() {
    return x2(BodyExpansionContext);
  }
  function useBodyExpansionApi() {
    return x2(BodyExpansionApiContext);
  }
  function BodyExpanderProvider(props) {
    const messaging2 = useMessaging();
    const [bodyExpansion, setBodyExpansion] = d2(
      /** @type {import('../../../types/new-tab').Expansion} */
      "collapsed"
    );
    const bodyExpansionApi = T2(() => {
      return {
        showMore() {
          messaging2.statsShowMore();
          setBodyExpansion("expanded");
        },
        showLess() {
          messaging2.statsShowLess();
          setBodyExpansion("collapsed");
        }
      };
    }, [messaging2]);
    return /* @__PURE__ */ _(BodyExpansionApiContext.Provider, { value: bodyExpansionApi }, /* @__PURE__ */ _(BodyExpansionContext.Provider, { value: bodyExpansion }, props.children));
  }
  var BodyExpansionApiContext, BodyExpansionContext;
  var init_BodyExpansionProvider = __esm({
    "pages/new-tab/app/privacy-stats/components/BodyExpansionProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_types();
      BodyExpansionApiContext = K({
        showMore() {
        },
        showLess() {
        }
      });
      BodyExpansionContext = K(
        /** @type {import('../../../types/new-tab').Expansion} */
        "collapsed"
      );
    }
  });

  // pages/new-tab/app/privacy-stats/privacy-stats.utils.js
  function sortStatsForDisplay(stats) {
    const sorted = stats.slice().sort((a4, b4) => b4.count - a4.count);
    const other = sorted.findIndex((x3) => x3.displayName === DDG_STATS_OTHER_COMPANY_IDENTIFIER);
    if (other > -1) {
      const popped = sorted.splice(other, 1);
      sorted.push(popped[0]);
    }
    return sorted;
  }
  function displayNameForCompany(companyName) {
    return companyName.replace(/\.[a-z]+$/i, "");
  }
  var init_privacy_stats_utils = __esm({
    "pages/new-tab/app/privacy-stats/privacy-stats.utils.js"() {
      "use strict";
      init_constants2();
    }
  });

  // pages/new-tab/app/privacy-stats/components/PrivacyStats.js
  function PrivacyStats({ trackerCompanies, expansion = "expanded" }) {
    const locale = useLocale();
    const [formatter] = d2(() => getLocalizedNumberFormatter(locale));
    const sorted = sortStatsForDisplay(trackerCompanies);
    const largestTrackerCount = sorted[0]?.count ?? 0;
    const visibleRows = expansion === "expanded" ? sorted : sorted.slice(0, DDG_STATS_DEFAULT_ROWS);
    return /* @__PURE__ */ _("div", { class: PrivacyStats_default.body }, sorted.length === 0 && /* @__PURE__ */ _(PrivacyStatsEmptyState, null), sorted.length > 0 && /* @__PURE__ */ _(CompanyList, { rows: visibleRows, largestTrackerCount, formatter }), sorted.length > 0 && /* @__PURE__ */ _(ListFooter, { all: sorted }));
  }
  function PrivacyStatsEmptyState() {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {import("../strings.json")} */
      {}
    );
    return /* @__PURE__ */ _(ProtectionsEmpty, null, t4("stats_noActivity"));
  }
  function CompanyList({ rows, formatter, largestTrackerCount }) {
    return /* @__PURE__ */ _("ul", { class: PrivacyStats_default.list, "data-testid": "CompanyList" }, rows.map((company) => {
      const percentage = Math.min(company.count * 100 / largestTrackerCount, 100);
      const valueOrMin = Math.max(percentage, 10);
      const inlineStyles = {
        width: `${valueOrMin}%`
      };
      const countText = formatter.format(company.count);
      const displayName = displayNameForCompany(company.displayName);
      if (company.displayName === DDG_STATS_OTHER_COMPANY_IDENTIFIER) {
        return null;
      }
      return /* @__PURE__ */ _("li", { key: company.displayName, class: PrivacyStats_default.row }, /* @__PURE__ */ _("div", { className: PrivacyStats_default.company }, /* @__PURE__ */ _(CompanyIcon, { displayName }), /* @__PURE__ */ _("span", { class: PrivacyStats_default.name }, displayName)), /* @__PURE__ */ _("span", { class: PrivacyStats_default.count }, countText), /* @__PURE__ */ _("span", { class: PrivacyStats_default.bar }), /* @__PURE__ */ _("span", { class: PrivacyStats_default.fill, style: inlineStyles }));
    }));
  }
  function ListFooter({ all: all2 }) {
    const expansion = useBodyExpansion();
    const lastElement = all2[all2.length - 1];
    const hasOtherRow = lastElement?.displayName === DDG_STATS_OTHER_COMPANY_IDENTIFIER;
    const state = (() => {
      const comparison = hasOtherRow ? DDG_STATS_DEFAULT_ROWS + 1 : DDG_STATS_DEFAULT_ROWS;
      if (all2.length <= comparison) {
        if (hasOtherRow) {
          if (all2.length === 1) {
            return "few_other";
          }
          return "few_top+other";
        }
        return "few_top";
      } else {
        if (hasOtherRow) {
          return expansion === "collapsed" ? "many_top+other_collapsed" : "many_top+other_expanded";
        }
        return expansion === "collapsed" ? "many_top_collapsed" : "many_top_expanded";
      }
    })();
    const contents = (() => {
      switch (state) {
        case "few_other":
        case "few_top+other": {
          return /* @__PURE__ */ _(OtherText, { count: lastElement.count });
        }
        case "many_top_collapsed":
        case "many_top_expanded":
        case "many_top+other_collapsed": {
          return /* @__PURE__ */ _(PillShowMoreLess, { expansion });
        }
        case "many_top+other_expanded":
          return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _(OtherText, { count: lastElement.count }), /* @__PURE__ */ _(PillShowMoreLess, { expansion }));
        case "few_top":
        default:
          return null;
      }
    })();
    if (contents === null) return null;
    return /* @__PURE__ */ _("div", { class: PrivacyStats_default.listFooter, "data-testid": "ListFooter" }, contents);
  }
  function PillShowMoreLess({ expansion }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    const { showLess, showMore } = useBodyExpansionApi();
    const toggleListExpansion = () => {
      if (expansion === "collapsed") {
        showMore();
      } else {
        showLess();
      }
    };
    return /* @__PURE__ */ _("div", { class: PrivacyStats_default.listExpander }, /* @__PURE__ */ _(
      ShowHideButtonPill,
      {
        onClick: toggleListExpansion,
        label: void 0,
        fill: false,
        text: expansion === "collapsed" ? t4("ntp_show_more") : t4("ntp_show_less"),
        buttonAttrs: {
          "aria-expanded": expansion === "expanded",
          "aria-pressed": expansion === "expanded"
        }
      }
    ));
  }
  function OtherText({ count }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    const locale = useLocale();
    const [formatter] = d2(() => getLocalizedNumberFormatter(locale));
    const formattedCount = formatter.format(count);
    const otherText2 = t4("stats_otherCount", { count: String(formattedCount) });
    return /* @__PURE__ */ _("div", { class: PrivacyStats_default.otherTrackersRow }, otherText2);
  }
  var init_PrivacyStats2 = __esm({
    "pages/new-tab/app/privacy-stats/components/PrivacyStats.js"() {
      "use strict";
      init_preact_module();
      init_PrivacyStats();
      init_types();
      init_hooks_module();
      init_ShowHideButton();
      init_constants2();
      init_privacy_stats_utils();
      init_CompanyIcon2();
      init_BodyExpansionProvider();
      init_Protections2();
      init_utils3();
      init_EnvironmentProvider();
    }
  });

  // pages/new-tab/app/privacy-stats/components/PrivacyStatsConsumer.js
  function PrivacyStatsConsumer() {
    const { state } = x2(PrivacyStatsContext);
    const secondaryExpansion = useBodyExpansion();
    if (state.status === "ready") {
      return /* @__PURE__ */ _(PrivacyStats, { expansion: secondaryExpansion, trackerCompanies: state.data.trackerCompanies });
    }
    return null;
  }
  var init_PrivacyStatsConsumer = __esm({
    "pages/new-tab/app/privacy-stats/components/PrivacyStatsConsumer.js"() {
      "use strict";
      init_hooks_module();
      init_PrivacyStatsProvider();
      init_preact_module();
      init_BodyExpansionProvider();
      init_PrivacyStats2();
    }
  });

  // pages/new-tab/app/protections/components/ProtectionsConsumer.js
  function ProtectionsConsumer() {
    const { state } = x2(ProtectionsContext);
    if (state.status === "ready") {
      return /* @__PURE__ */ _(ProtectionsReadyState, { data: state.data, config: state.config });
    }
    return null;
  }
  function ProtectionsReadyState({ data: data2, config }) {
    const { toggle, setFeed } = x2(ProtectionsContext);
    const blockedCountSignal = useBlockedCount(data2.totalCount);
    return /* @__PURE__ */ _(
      Protections,
      {
        blockedCountSignal,
        expansion: config.expansion,
        toggle,
        feed: config.feed,
        setFeed
      },
      config.feed === "activity" && /* @__PURE__ */ _(ActivityProvider, null, /* @__PURE__ */ _(ActivityConsumer, { showBurnAnimation: config.showBurnAnimation ?? true })),
      config.feed === "privacy-stats" && /* @__PURE__ */ _(PrivacyStatsProvider, null, /* @__PURE__ */ _(BodyExpanderProvider, null, /* @__PURE__ */ _(PrivacyStatsConsumer, null)))
    );
  }
  var init_ProtectionsConsumer = __esm({
    "pages/new-tab/app/protections/components/ProtectionsConsumer.js"() {
      "use strict";
      init_hooks_module();
      init_ProtectionsProvider();
      init_preact_module();
      init_Protections2();
      init_ActivityProvider();
      init_Activity2();
      init_PrivacyStatsProvider();
      init_BodyExpansionProvider();
      init_PrivacyStatsConsumer();
    }
  });

  // pages/new-tab/app/protections/components/ProtectionsCustomized.js
  function ProtectionsCustomized() {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {Strings} */
      {}
    );
    const sectionTitle = t4("protections_menuTitle");
    const { visibility, id, toggle, index: index2 } = useVisibility();
    useCustomizer({ title: sectionTitle, id, icon: /* @__PURE__ */ _(DuckFoot, null), toggle, visibility: visibility.value, index: index2, enabled: true });
    if (visibility.value === "hidden") {
      return null;
    }
    return /* @__PURE__ */ _(ProtectionsProvider, null, /* @__PURE__ */ _(ProtectionsConsumer, null));
  }
  var init_ProtectionsCustomized = __esm({
    "pages/new-tab/app/protections/components/ProtectionsCustomized.js"() {
      "use strict";
      init_types();
      init_widget_config_provider();
      init_CustomizerMenu();
      init_ProtectionsProvider();
      init_preact_module();
      init_ProtectionsConsumer();
      init_Icons2();
    }
  });

  // pages/new-tab/app/entry-points/protections.js
  var protections_exports = {};
  __export(protections_exports, {
    factory: () => factory7
  });
  function factory7() {
    return /* @__PURE__ */ _(Centered, { "data-entry-point": "protections" }, /* @__PURE__ */ _(ProtectionsCustomized, null));
  }
  var init_protections = __esm({
    "pages/new-tab/app/entry-points/protections.js"() {
      "use strict";
      init_preact_module();
      init_Layout();
      init_ProtectionsCustomized();
    }
  });

  // pages/new-tab/app/remote-messaging-framework/components/RemoteMessagingFramework.module.css
  var RemoteMessagingFramework_default;
  var init_RemoteMessagingFramework = __esm({
    "pages/new-tab/app/remote-messaging-framework/components/RemoteMessagingFramework.module.css"() {
      RemoteMessagingFramework_default = {
        root: "RemoteMessagingFramework_root",
        icon: "RemoteMessagingFramework_icon",
        "animate-fade": "RemoteMessagingFramework_animate-fade",
        iconBlock: "RemoteMessagingFramework_iconBlock",
        content: "RemoteMessagingFramework_content",
        title: "RemoteMessagingFramework_title",
        description: "RemoteMessagingFramework_description",
        btnBlock: "RemoteMessagingFramework_btnBlock",
        btnRow: "RemoteMessagingFramework_btnRow",
        dismissBtn: "RemoteMessagingFramework_dismissBtn"
      };
    }
  });

  // pages/new-tab/app/remote-messaging-framework/rmf.service.js
  var RMFService;
  var init_rmf_service = __esm({
    "pages/new-tab/app/remote-messaging-framework/rmf.service.js"() {
      "use strict";
      init_service();
      RMFService = class {
        /**
         * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
         * @internal
         */
        constructor(ntp) {
          this.ntp = ntp;
          this.dataService = new Service({
            initial: () => ntp.messaging.request("rmf_getData"),
            subscribe: (cb) => ntp.messaging.subscribe("rmf_onDataUpdate", cb)
          });
        }
        name() {
          return "RMFService";
        }
        /**
         * @returns {Promise<RMFData>}
         * @internal
         */
        async getInitial() {
          return await this.dataService.fetchInitial();
        }
        /**
         * @internal
         */
        destroy() {
          this.dataService.destroy();
        }
        /**
         * @param {(evt: {data: RMFData, source: 'manual' | 'subscription'}) => void} cb
         * @internal
         */
        onData(cb) {
          return this.dataService.onData(cb);
        }
        /**
         * @param {string} id
         * @internal
         */
        dismiss(id) {
          return this.ntp.messaging.notify("rmf_dismiss", { id });
        }
        /**
         * @param {string} id
         */
        primaryAction(id) {
          this.ntp.messaging.notify("rmf_primaryAction", { id });
        }
        /**
         * @param {string} id
         */
        secondaryAction(id) {
          this.ntp.messaging.notify("rmf_secondaryAction", { id });
        }
      };
    }
  });

  // pages/new-tab/app/remote-messaging-framework/RMFProvider.js
  function RMFProvider(props) {
    const initial = (
      /** @type {State} */
      {
        status: "idle",
        data: null,
        config: null
      }
    );
    const [state, dispatch] = h2(reducer, initial);
    const service = useService8();
    useInitialData({ dispatch, service });
    useDataSubscription({ dispatch, service });
    const dismiss = q2(
      (id) => {
        console.log("onDismiss");
        service.current?.dismiss(id);
      },
      [service]
    );
    const primaryAction = q2(
      (id) => {
        service.current?.primaryAction(id);
      },
      [service]
    );
    const secondaryAction = q2(
      (id) => {
        console.log("secondaryAction");
        service.current?.secondaryAction(id);
      },
      [service]
    );
    return /* @__PURE__ */ _(RMFContext.Provider, { value: { state, dismiss, primaryAction, secondaryAction } }, /* @__PURE__ */ _(RMFDispatchContext.Provider, { value: dispatch }, props.children));
  }
  function useService8() {
    const service = A2(
      /** @type {RMFService|null} */
      null
    );
    const ntp = useMessaging();
    y2(() => {
      const stats = new RMFService(ntp);
      service.current = stats;
      return () => {
        stats.destroy();
      };
    }, [ntp]);
    return service;
  }
  var RMFContext, RMFDispatchContext;
  var init_RMFProvider = __esm({
    "pages/new-tab/app/remote-messaging-framework/RMFProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_types();
      init_rmf_service();
      init_service_hooks();
      RMFContext = K({
        /** @type {State} */
        state: { status: "idle", data: null, config: null },
        /** @type {(id: string) => void} */
        dismiss: (id) => {
          throw new Error("must implement dismiss" + id);
        },
        /** @type {(id: string) => void} */
        primaryAction: (id) => {
          throw new Error("must implement primaryAction" + id);
        },
        /** @type {(id: string) => void} */
        secondaryAction: (id) => {
          throw new Error("must implement secondaryAction" + id);
        }
      });
      RMFDispatchContext = K(
        /** @type {import("preact/hooks").Dispatch<Events>} */
        {}
      );
    }
  });

  // pages/new-tab/app/remote-messaging-framework/components/RemoteMessagingFramework.js
  function RemoteMessagingFramework({ message, primaryAction, secondaryAction, dismiss }) {
    const { id, messageType, titleText, descriptionText } = message;
    const platform = usePlatformName();
    return /* @__PURE__ */ _("div", { id, class: (0, import_classnames12.default)(RemoteMessagingFramework_default.root, messageType !== "small" && message.icon && RemoteMessagingFramework_default.icon) }, messageType !== "small" && message.icon && /* @__PURE__ */ _("span", { class: RemoteMessagingFramework_default.iconBlock }, /* @__PURE__ */ _("img", { src: `./icons/${message.icon}.svg`, alt: "" })), /* @__PURE__ */ _("div", { class: RemoteMessagingFramework_default.content }, /* @__PURE__ */ _("h2", { class: RemoteMessagingFramework_default.title }, titleText), /* @__PURE__ */ _("p", { class: RemoteMessagingFramework_default.description }, descriptionText), messageType === "big_two_action" && /* @__PURE__ */ _("div", { class: RemoteMessagingFramework_default.btnRow }, platform === "windows" ? /* @__PURE__ */ _(k, null, primaryAction && message.primaryActionText.length > 0 && /* @__PURE__ */ _(Button, { variant: "accentBrand", onClick: () => primaryAction(id) }, message.primaryActionText), secondaryAction && message.secondaryActionText.length > 0 && /* @__PURE__ */ _(Button, { variant: "standard", onClick: () => secondaryAction(id) }, message.secondaryActionText)) : /* @__PURE__ */ _(k, null, secondaryAction && message.secondaryActionText.length > 0 && /* @__PURE__ */ _(Button, { variant: "standard", onClick: () => secondaryAction(id) }, message.secondaryActionText), primaryAction && message.primaryActionText.length > 0 && /* @__PURE__ */ _(Button, { variant: "accentBrand", onClick: () => primaryAction(id) }, message.primaryActionText)))), messageType === "big_single_action" && message.primaryActionText && primaryAction && /* @__PURE__ */ _("div", { class: RemoteMessagingFramework_default.btnBlock }, /* @__PURE__ */ _(Button, { variant: "standard", onClick: () => primaryAction(id) }, message.primaryActionText)), /* @__PURE__ */ _(DismissButton, { className: RemoteMessagingFramework_default.dismissBtn, onClick: () => dismiss(id) }));
  }
  function RMFConsumer() {
    const { state, primaryAction, secondaryAction, dismiss } = x2(RMFContext);
    if (state.status === "ready" && state.data.content) {
      return /* @__PURE__ */ _(
        RemoteMessagingFramework,
        {
          message: state.data.content,
          primaryAction,
          secondaryAction,
          dismiss
        }
      );
    }
    return null;
  }
  var import_classnames12;
  var init_RemoteMessagingFramework2 = __esm({
    "pages/new-tab/app/remote-messaging-framework/components/RemoteMessagingFramework.js"() {
      "use strict";
      init_preact_module();
      import_classnames12 = __toESM(require_classnames(), 1);
      init_RemoteMessagingFramework();
      init_hooks_module();
      init_RMFProvider();
      init_DismissButton2();
      init_Button2();
      init_settings_provider();
    }
  });

  // pages/new-tab/app/entry-points/rmf.js
  var rmf_exports = {};
  __export(rmf_exports, {
    factory: () => factory8
  });
  function factory8() {
    return /* @__PURE__ */ _(Centered, { "data-entry-point": "rmf" }, /* @__PURE__ */ _(RMFProvider, null, /* @__PURE__ */ _(RMFConsumer, null)));
  }
  var init_rmf = __esm({
    "pages/new-tab/app/entry-points/rmf.js"() {
      "use strict";
      init_preact_module();
      init_Layout();
      init_RemoteMessagingFramework2();
      init_RMFProvider();
    }
  });

  // pages/new-tab/app/subscription-winback-banner/components/SubscriptionWinBackBanner.module.css
  var SubscriptionWinBackBanner_default;
  var init_SubscriptionWinBackBanner = __esm({
    "pages/new-tab/app/subscription-winback-banner/components/SubscriptionWinBackBanner.module.css"() {
      SubscriptionWinBackBanner_default = {
        root: "FreemiumPIRBanner_root SubscriptionWinBackBanner_root",
        iconBlock: "FreemiumPIRBanner_iconBlock SubscriptionWinBackBanner_iconBlock",
        content: "FreemiumPIRBanner_content SubscriptionWinBackBanner_content",
        title: "FreemiumPIRBanner_title SubscriptionWinBackBanner_title",
        description: "FreemiumPIRBanner_description SubscriptionWinBackBanner_description",
        btnBlock: "FreemiumPIRBanner_btnBlock SubscriptionWinBackBanner_btnBlock",
        btnRow: "FreemiumPIRBanner_btnRow SubscriptionWinBackBanner_btnRow",
        dismissBtn: "FreemiumPIRBanner_dismissBtn SubscriptionWinBackBanner_dismissBtn",
        icon: "FreemiumPIRBanner_icon SubscriptionWinBackBanner_icon"
      };
    }
  });

  // pages/new-tab/app/subscription-winback-banner/subscriptionWinBackBanner.service.js
  var SubscriptionWinBackBannerService;
  var init_subscriptionWinBackBanner_service = __esm({
    "pages/new-tab/app/subscription-winback-banner/subscriptionWinBackBanner.service.js"() {
      "use strict";
      init_service();
      SubscriptionWinBackBannerService = class {
        /**
         * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
         * @internal
         */
        constructor(ntp) {
          this.ntp = ntp;
          this.dataService = new Service({
            initial: () => ntp.messaging.request("winBackOffer_getData"),
            subscribe: (cb) => ntp.messaging.subscribe("winBackOffer_onDataUpdate", cb)
          });
        }
        name() {
          return "SubscriptionWinBackBannerService";
        }
        /**
         * @returns {Promise<SubscriptionWinBackBannerData>}
         * @internal
         */
        async getInitial() {
          return await this.dataService.fetchInitial();
        }
        /**
         * @internal
         */
        destroy() {
          this.dataService.destroy();
        }
        /**
         * @param {(evt: {data: SubscriptionWinBackBannerData, source: 'manual' | 'subscription'}) => void} cb
         * @internal
         */
        onData(cb) {
          return this.dataService.onData(cb);
        }
        /**
         * @param {string} id
         * @internal
         */
        dismiss(id) {
          return this.ntp.messaging.notify("winBackOffer_dismiss", { id });
        }
        /**
         * @param {string} id
         */
        action(id) {
          this.ntp.messaging.notify("winBackOffer_action", { id });
        }
      };
    }
  });

  // pages/new-tab/app/subscription-winback-banner/SubscriptionWinBackBannerProvider.js
  function SubscriptionWinBackBannerProvider(props) {
    const initial = (
      /** @type {State} */
      {
        status: "idle",
        data: null,
        config: null
      }
    );
    const [state, dispatch] = h2(reducer, initial);
    const service = useService9();
    useInitialData({ dispatch, service });
    useDataSubscription({ dispatch, service });
    const dismiss = q2(
      (id) => {
        console.log("onDismiss");
        service.current?.dismiss(id);
      },
      [service]
    );
    const action = q2(
      (id) => {
        service.current?.action(id);
      },
      [service]
    );
    return /* @__PURE__ */ _(SubscriptionWinBackBannerContext.Provider, { value: { state, dismiss, action } }, /* @__PURE__ */ _(SubscriptionWinBackBannerDispatchContext.Provider, { value: dispatch }, props.children));
  }
  function useService9() {
    const service = A2(
      /** @type {SubscriptionWinBackBannerService|null} */
      null
    );
    const ntp = useMessaging();
    y2(() => {
      const stats = new SubscriptionWinBackBannerService(ntp);
      service.current = stats;
      return () => {
        stats.destroy();
      };
    }, [ntp]);
    return service;
  }
  var SubscriptionWinBackBannerContext, SubscriptionWinBackBannerDispatchContext;
  var init_SubscriptionWinBackBannerProvider = __esm({
    "pages/new-tab/app/subscription-winback-banner/SubscriptionWinBackBannerProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_types();
      init_subscriptionWinBackBanner_service();
      init_service_hooks();
      SubscriptionWinBackBannerContext = K({
        /** @type {State} */
        state: { status: "idle", data: null, config: null },
        /** @type {(id: string) => void} */
        dismiss: (id) => {
          throw new Error("must implement dismiss" + id);
        },
        /** @type {(id: string) => void} */
        action: (id) => {
          throw new Error("must implement action" + id);
        }
      });
      SubscriptionWinBackBannerDispatchContext = K(
        /** @type {import("preact/hooks").Dispatch<Events>} */
        {}
      );
    }
  });

  // pages/new-tab/app/subscription-winback-banner/components/SubscriptionWinBackBanner.js
  function SubscriptionWinBackBanner({ message, action, dismiss }) {
    const processedMessageDescription = convertMarkdownToHTMLForStrongTags(message.descriptionText);
    return /* @__PURE__ */ _("div", { id: message.id, class: (0, import_classnames13.default)(SubscriptionWinBackBanner_default.root, SubscriptionWinBackBanner_default.icon) }, /* @__PURE__ */ _("span", { class: SubscriptionWinBackBanner_default.iconBlock }, /* @__PURE__ */ _("img", { "aria-hidden": "true", src: `./icons/Subscription-Clock-96.svg`, alt: "" })), /* @__PURE__ */ _("div", { class: SubscriptionWinBackBanner_default.content }, message.titleText && /* @__PURE__ */ _("h2", { class: SubscriptionWinBackBanner_default.title }, message.titleText), /* @__PURE__ */ _("p", { class: SubscriptionWinBackBanner_default.description, dangerouslySetInnerHTML: { __html: processedMessageDescription } })), message.messageType === "big_single_action" && message?.actionText && action && /* @__PURE__ */ _("div", { class: SubscriptionWinBackBanner_default.btnBlock }, /* @__PURE__ */ _(Button, { size: "md", variant: "accent", onClick: () => action(message.id) }, message.actionText)), message.id && dismiss && /* @__PURE__ */ _(DismissButton, { className: SubscriptionWinBackBanner_default.dismissBtn, onClick: () => dismiss(message.id) }));
  }
  function SubscriptionWinBackBannerConsumer() {
    const { state, action, dismiss } = x2(SubscriptionWinBackBannerContext);
    if (state.status === "ready" && state.data.content) {
      return /* @__PURE__ */ _(SubscriptionWinBackBanner, { message: state.data.content, action, dismiss });
    }
    return null;
  }
  var import_classnames13;
  var init_SubscriptionWinBackBanner2 = __esm({
    "pages/new-tab/app/subscription-winback-banner/components/SubscriptionWinBackBanner.js"() {
      "use strict";
      import_classnames13 = __toESM(require_classnames(), 1);
      init_preact_module();
      init_Button2();
      init_DismissButton2();
      init_SubscriptionWinBackBanner();
      init_SubscriptionWinBackBannerProvider();
      init_hooks_module();
      init_utils3();
    }
  });

  // pages/new-tab/app/entry-points/subscriptionWinBackBanner.js
  var subscriptionWinBackBanner_exports = {};
  __export(subscriptionWinBackBanner_exports, {
    factory: () => factory9
  });
  function factory9() {
    return /* @__PURE__ */ _(Centered, { "data-entry-point": "subscriptionWinBackBanner" }, /* @__PURE__ */ _(SubscriptionWinBackBannerProvider, null, /* @__PURE__ */ _(SubscriptionWinBackBannerConsumer, null)));
  }
  var init_subscriptionWinBackBanner = __esm({
    "pages/new-tab/app/entry-points/subscriptionWinBackBanner.js"() {
      "use strict";
      init_preact_module();
      init_Layout();
      init_SubscriptionWinBackBanner2();
      init_SubscriptionWinBackBannerProvider();
    }
  });

  // pages/new-tab/app/update-notification/components/UpdateNotification.module.css
  var UpdateNotification_default;
  var init_UpdateNotification = __esm({
    "pages/new-tab/app/update-notification/components/UpdateNotification.module.css"() {
      UpdateNotification_default = {
        pulled: "UpdateNotification_pulled",
        root: "UpdateNotification_root",
        body: "UpdateNotification_body",
        details: "UpdateNotification_details",
        inlineLink: "UpdateNotification_inlineLink",
        summary: "UpdateNotification_summary",
        detailsContent: "UpdateNotification_detailsContent",
        title: "UpdateNotification_title",
        list: "UpdateNotification_list",
        dismiss: "UpdateNotification_dismiss"
      };
    }
  });

  // pages/new-tab/app/update-notification/update-notification.service.js
  var UpdateNotificationService;
  var init_update_notification_service = __esm({
    "pages/new-tab/app/update-notification/update-notification.service.js"() {
      "use strict";
      init_service();
      UpdateNotificationService = class {
        /**
         * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
         * @param {UpdateNotificationData} initial
         * @internal
         */
        constructor(ntp, initial) {
          this.ntp = ntp;
          this.dataService = new Service(
            {
              subscribe: (cb) => ntp.messaging.subscribe("updateNotification_onDataUpdate", cb)
            },
            initial
          );
        }
        /**
         * @internal
         */
        destroy() {
          this.dataService.destroy();
        }
        /**
         * @param {(evt: {data: UpdateNotificationData, source: 'manual' | 'subscription'}) => void} cb
         * @internal
         */
        onData(cb) {
          return this.dataService.onData(cb);
        }
        /**
         * @internal
         */
        dismiss() {
          this.ntp.messaging.notify("updateNotification_dismiss");
          this.dataService.update((_old) => {
            return { content: null };
          });
        }
      };
    }
  });

  // pages/new-tab/app/update-notification/UpdateNotificationProvider.js
  function UpdateNotificationProvider(props) {
    const { updateNotification } = useInitialSetupData();
    if (updateNotification === null) {
      return null;
    }
    return /* @__PURE__ */ _(UpdateNotificationWithInitial, { updateNotification }, props.children);
  }
  function UpdateNotificationWithInitial({ updateNotification, children }) {
    const initial = (
      /** @type {State} */
      {
        status: "ready",
        data: updateNotification,
        config: void 0
      }
    );
    const [state, dispatch] = h2(reducer, initial);
    const service = useService10(updateNotification);
    useDataSubscription({ dispatch, service });
    const dismiss = q2(() => {
      service.current?.dismiss();
    }, [service]);
    return /* @__PURE__ */ _(UpdateNotificationContext.Provider, { value: { state, dismiss } }, /* @__PURE__ */ _(UpdateNotificationDispatchContext.Provider, { value: dispatch }, children));
  }
  function useService10(initial) {
    const service = A2(
      /** @type {UpdateNotificationService|null} */
      null
    );
    const ntp = useMessaging();
    y2(() => {
      const stats = new UpdateNotificationService(ntp, initial);
      service.current = stats;
      return () => {
        stats.destroy();
      };
    }, [ntp, initial]);
    return service;
  }
  var UpdateNotificationContext, UpdateNotificationDispatchContext;
  var init_UpdateNotificationProvider = __esm({
    "pages/new-tab/app/update-notification/UpdateNotificationProvider.js"() {
      "use strict";
      init_preact_module();
      init_hooks_module();
      init_types();
      init_update_notification_service();
      init_service_hooks();
      UpdateNotificationContext = K({
        /** @type {State} */
        state: { status: "idle", data: null, config: null },
        /** @type {() => void} */
        dismiss: () => {
          throw new Error("must implement dismiss");
        }
      });
      UpdateNotificationDispatchContext = K(
        /** @type {import("preact/hooks").Dispatch<Events>} */
        {}
      );
    }
  });

  // pages/new-tab/app/update-notification/components/UpdateNotification.js
  function UpdateNotification({ notes, dismiss, version }) {
    return /* @__PURE__ */ _("div", { class: UpdateNotification_default.root, "data-reset-layout": "true" }, /* @__PURE__ */ _("div", { class: (0, import_classnames14.default)("layout-centered", UpdateNotification_default.body) }, notes.length > 0 ? /* @__PURE__ */ _(WithNotes, { notes, version }) : /* @__PURE__ */ _(WithoutNotes, { version })), /* @__PURE__ */ _(DismissButton, { onClick: dismiss, className: UpdateNotification_default.dismiss }));
  }
  function WithNotes({ notes, version }) {
    const id = g2();
    const ref = A2(
      /** @type {HTMLDetailsElement|null} */
      null
    );
    const { t: t4 } = useTypedTranslationWith(
      /** @type {import("../strings.json")} */
      {}
    );
    const inlineLink = /* @__PURE__ */ _(
      Trans,
      {
        str: t4("updateNotification_whats_new"),
        values: {
          a: {
            href: `#${id}`,
            class: UpdateNotification_default.inlineLink,
            click: (e4) => {
              e4.preventDefault();
              if (!ref.current) return;
              ref.current.open = !ref.current.open;
            }
          }
        }
      }
    );
    const chunks = [{ title: "", notes: [] }];
    let index2 = 0;
    for (const note of notes) {
      const trimmed = note.trim();
      if (!trimmed) continue;
      if (trimmed.startsWith("\u2022")) {
        const bullet = trimmed.slice(1).trim();
        chunks[index2].notes.push(bullet);
      } else {
        chunks.push({ title: trimmed, notes: [] });
        index2 += 1;
      }
    }
    return /* @__PURE__ */ _("details", { ref }, /* @__PURE__ */ _("summary", { tabIndex: -1, className: UpdateNotification_default.summary }, t4("updateNotification_updated_version", { version }), " ", inlineLink), /* @__PURE__ */ _("div", { id, class: UpdateNotification_default.detailsContent }, chunks.map((chunk, index3) => {
      return /* @__PURE__ */ _(k, { key: chunk.title + index3 }, chunk.title && /* @__PURE__ */ _("p", { class: UpdateNotification_default.title }, chunk.title), /* @__PURE__ */ _("ul", { class: UpdateNotification_default.list }, chunk.notes.map((note, index4) => {
        return /* @__PURE__ */ _("li", { key: note + index4 }, note);
      })));
    })));
  }
  function WithoutNotes({ version }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {import("../strings.json")} */
      {}
    );
    return /* @__PURE__ */ _("p", null, t4("updateNotification_updated_version", { version }));
  }
  function UpdateNotificationConsumer() {
    const { state, dismiss } = x2(UpdateNotificationContext);
    if (state.status === "ready" && state.data.content) {
      return /* @__PURE__ */ _(UpdateNotification, { notes: state.data.content.notes, version: state.data.content.version, dismiss });
    }
    return null;
  }
  var import_classnames14;
  var init_UpdateNotification2 = __esm({
    "pages/new-tab/app/update-notification/components/UpdateNotification.js"() {
      "use strict";
      init_preact_module();
      import_classnames14 = __toESM(require_classnames(), 1);
      init_UpdateNotification();
      init_hooks_module();
      init_UpdateNotificationProvider();
      init_types();
      init_TranslationsProvider();
      init_DismissButton2();
    }
  });

  // pages/new-tab/app/entry-points/updateNotification.js
  var updateNotification_exports = {};
  __export(updateNotification_exports, {
    factory: () => factory10
  });
  function factory10() {
    return /* @__PURE__ */ _("div", { "data-entry-point": "updateNotification" }, /* @__PURE__ */ _(UpdateNotificationProvider, null, /* @__PURE__ */ _(UpdateNotificationConsumer, null)));
  }
  var init_updateNotification = __esm({
    "pages/new-tab/app/entry-points/updateNotification.js"() {
      "use strict";
      init_preact_module();
      init_UpdateNotification2();
      init_UpdateNotificationProvider();
    }
  });

  // ../node_modules/preact/devtools/dist/devtools.module.js
  init_preact_module();
  var i2;
  null != (i2 = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : void 0) && i2.__PREACT_DEVTOOLS__ && i2.__PREACT_DEVTOOLS__.attachPreact("10.26.9", l, { Fragment: k, Component: x });

  // pages/new-tab/src/index.js
  init_preact_module();

  // pages/new-tab/app/index.js
  init_preact_module();

  // pages/new-tab/app/components/App.js
  init_preact_module();
  var import_classnames24 = __toESM(require_classnames(), 1);

  // pages/new-tab/app/components/App.module.css
  var App_default = {
    tube: "App_tube",
    layout: "App_layout",
    main: "App_main",
    themeContext: "App_themeContext",
    mainLayout: "App_mainLayout",
    mainScroller: "App_mainScroller",
    content: "App_content",
    aside: "App_aside",
    asideLayout: "App_asideLayout",
    asideContent: "App_asideContent",
    asideScroller: "App_asideScroller",
    paddedError: "App_paddedError",
    paddedErrorRecovery: "App_paddedErrorRecovery"
  };

  // pages/new-tab/app/components/App.js
  init_settings_provider();

  // pages/new-tab/app/widget-list/WidgetList.js
  init_preact_module();
  init_widget_config_provider();
  init_hooks_module();
  init_types();

  // shared/components/ErrorBoundary.js
  init_preact_module();
  var ErrorBoundary = class extends x {
    constructor(props) {
      super(props);
      this.state = { hasError: false };
    }
    static getDerivedStateFromError() {
      return { hasError: true };
    }
    componentDidCatch(error, info) {
      console.error(error);
      console.log(info);
      let message = error.message;
      if (typeof message !== "string") message = "unknown";
      const composed = this.props.context ? [this.props.context, message].join(" ") : message;
      this.props.didCatch({ error, message: composed, info });
    }
    render() {
      if (this.state.hasError) {
        return this.props.fallback;
      }
      return this.props.children;
    }
  };

  // pages/new-tab/app/widget-list/WidgetList.js
  init_Layout();

  // pages/new-tab/app/InlineErrorBoundary.js
  init_preact_module();
  init_types();
  var INLINE_ERROR = "A problem occurred with this feature. DuckDuckGo was notified";
  function InlineErrorBoundary({ children, format, context, fallback }) {
    const messaging2 = useMessaging();
    const didCatch = (message) => {
      const formatted = format?.(message) || message;
      messaging2.reportPageException({ message: formatted });
    };
    const fallbackElement = fallback?.(INLINE_ERROR) || /* @__PURE__ */ _("p", null, INLINE_ERROR);
    return /* @__PURE__ */ _(ErrorBoundary, { context, didCatch: ({ message }) => didCatch(message), fallback: fallbackElement }, children);
  }

  // pages/new-tab/app/telemetry/Debug.js
  init_preact_module();
  init_hooks_module();
  init_types();
  init_CustomizerMenu();

  // pages/new-tab/app/telemetry/telemetry.js
  var _Telemetry = class _Telemetry {
    eventTarget = new EventTarget();
    /** @type {any[]} */
    eventStore = [];
    storeEnabled = false;
    /**
     * @param now
     */
    constructor(now = Date.now()) {
      this.now = now;
      performance.mark("ddg-telemetry-init");
      this._setupMessagingMarkers();
    }
    _setupMessagingMarkers() {
      this.eventTarget.addEventListener(_Telemetry.EVENT_REQUEST, ({ detail }) => {
        const named = `ddg request ${detail.method} ${detail.timestamp}`;
        performance.mark(named);
        this.broadcast(detail);
      });
      this.eventTarget.addEventListener(_Telemetry.EVENT_RESPONSE, ({ detail }) => {
        const reqNamed = `ddg request ${detail.method} ${detail.timestamp}`;
        const resNamed = `ddg response ${detail.method} ${detail.timestamp}`;
        performance.mark(resNamed);
        performance.measure(reqNamed, reqNamed, resNamed);
        this.broadcast(detail);
      });
      this.eventTarget.addEventListener(_Telemetry.EVENT_SUBSCRIPTION, ({ detail }) => {
        const named = `ddg subscription ${detail.method} ${detail.timestamp}`;
        performance.mark(named);
        this.broadcast(detail);
      });
      this.eventTarget.addEventListener(_Telemetry.EVENT_SUBSCRIPTION_DATA, ({ detail }) => {
        const named = `ddg subscription data ${detail.method} ${detail.timestamp}`;
        performance.mark(named);
        this.broadcast(detail);
      });
      this.eventTarget.addEventListener(_Telemetry.EVENT_NOTIFICATION, ({ detail }) => {
        const named = `ddg notification ${detail.method} ${detail.timestamp}`;
        performance.mark(named);
        this.broadcast(detail);
      });
    }
    broadcast(payload) {
      if (this.eventStore.length >= 50) {
        this.eventStore = [];
      }
      if (this.storeEnabled) {
        this.eventStore.push(structuredClone(payload));
      }
      this.eventTarget.dispatchEvent(new CustomEvent(_Telemetry.EVENT_BROADCAST, { detail: payload }));
    }
    measureFromPageLoad(marker, measure = "measure__" + Date.now()) {
      if (!performance.getEntriesByName(marker).length) {
        performance.mark(marker);
        performance.measure(measure, "ddg-telemetry-init", marker);
      }
    }
  };
  __publicField(_Telemetry, "EVENT_REQUEST", "TELEMETRY_EVENT_REQUEST");
  __publicField(_Telemetry, "EVENT_RESPONSE", "TELEMETRY_EVENT_RESPONSE");
  __publicField(_Telemetry, "EVENT_SUBSCRIPTION", "TELEMETRY_EVENT_SUBSCRIPTION");
  __publicField(_Telemetry, "EVENT_SUBSCRIPTION_DATA", "TELEMETRY_EVENT_SUBSCRIPTION_DATA");
  __publicField(_Telemetry, "EVENT_NOTIFICATION", "TELEMETRY_EVENT_NOTIFICATION");
  __publicField(_Telemetry, "EVENT_BROADCAST", "TELEMETRY_*");
  var Telemetry = _Telemetry;
  var MessagingObserver = class {
    /** @type {Map<string, number>} */
    observed = /* @__PURE__ */ new Map();
    /**
     * @param {import("@duckduckgo/messaging").Messaging} messaging
     * @param {EventTarget} eventTarget
     */
    constructor(messaging2, eventTarget) {
      this.messaging = messaging2;
      this.messagingContext = messaging2.messagingContext;
      this.transport = messaging2.transport;
      this.eventTarget = eventTarget;
    }
    /**
     * @param {string} method
     * @param {Record<string, any>} params
     */
    request(method, params) {
      const timestamp = Date.now();
      const json = {
        kind: "request",
        method,
        params,
        timestamp
      };
      this.record(Telemetry.EVENT_REQUEST, json);
      return this.messaging.request(method, params).then((x3) => {
        const resJson = {
          kind: "response",
          method,
          result: x3,
          timestamp
        };
        this.record(Telemetry.EVENT_RESPONSE, resJson);
        return x3;
      });
    }
    /**
     * @param {string} method
     * @param {Record<string, any>} params
     */
    notify(method, params) {
      const json = {
        kind: "notification",
        method,
        params
      };
      this.record(Telemetry.EVENT_NOTIFICATION, json);
      return this.messaging.notify(method, params);
    }
    /**
     * @param method
     * @param callback
     * @return {function(): void}
     */
    subscribe(method, callback) {
      const timestamp = Date.now();
      const json = {
        kind: "subscription",
        method,
        timestamp
      };
      this.record(Telemetry.EVENT_SUBSCRIPTION, json);
      return this.messaging.subscribe(method, (params) => {
        const json2 = {
          kind: "subscription data",
          method,
          timestamp,
          params
        };
        this.record(Telemetry.EVENT_SUBSCRIPTION_DATA, json2);
        callback(params);
      });
    }
    /**
     * @param {string} name
     * @param {Record<string, any>} detail
     */
    record(name2, detail) {
      this.eventTarget.dispatchEvent(new CustomEvent(name2, { detail }));
    }
  };
  function install(messaging2) {
    const telemetry2 = new Telemetry();
    const observedMessaging = new MessagingObserver(messaging2, telemetry2.eventTarget);
    return { telemetry: telemetry2, messaging: observedMessaging };
  }

  // pages/new-tab/app/telemetry/Debug.js
  init_Icons2();
  function DebugCustomized({ index: index2, isOpenInitially = false }) {
    const [isOpen, setOpen] = d2(isOpenInitially);
    const telemetry2 = useTelemetry();
    useCustomizer({
      title: "\u{1F41E} Debug",
      id: "_debug",
      icon: /* @__PURE__ */ _(DuckFoot, null),
      visibility: isOpen ? "visible" : "hidden",
      toggle: (_id) => setOpen((prev) => !prev),
      index: index2,
      enabled: true
    });
    return /* @__PURE__ */ _("div", null, isOpen && /* @__PURE__ */ _(Debug, { telemetry: telemetry2, isOpen: true }));
  }
  function Debug({ telemetry: telemetry2, isOpen }) {
    const textRef = A2(null);
    useEvents(textRef, telemetry2);
    return /* @__PURE__ */ _("div", { hidden: !isOpen }, /* @__PURE__ */ _("textarea", { style: { width: "100%" }, rows: 20, ref: textRef }));
  }
  function useEvents(ref, telemetry2) {
    y2(() => {
      if (!ref.current) return;
      const elem2 = ref.current;
      const pre = "```json\n";
      const post = "\n```\n";
      function handle({ detail }) {
        elem2.value += pre + JSON.stringify(detail, null, 2) + post;
      }
      for (const beforeElement of telemetry2.eventStore) {
        elem2.value += pre + JSON.stringify(beforeElement, null, 2) + post;
      }
      telemetry2.eventStore = [];
      telemetry2.storeEnabled = false;
      telemetry2.eventTarget.addEventListener(Telemetry.EVENT_BROADCAST, handle);
      return () => {
        telemetry2.eventTarget.removeEventListener(Telemetry.EVENT_BROADCAST, handle);
        telemetry2.storeEnabled = true;
      };
    }, [ref, telemetry2]);
  }

  // pages/new-tab/app/widget-list/WidgetList.js
  init_EnvironmentProvider();

  // import("../entry-points/**/*.js") in pages/new-tab/app/widget-list/WidgetList.js
  var globImport_entry_points_js = __glob({
    "../entry-points/activity.js": () => Promise.resolve().then(() => (init_activity(), activity_exports)),
    "../entry-points/favorites.js": () => Promise.resolve().then(() => (init_favorites(), favorites_exports)),
    "../entry-points/freemiumPIRBanner.js": () => Promise.resolve().then(() => (init_freemiumPIRBanner(), freemiumPIRBanner_exports)),
    "../entry-points/nextSteps.js": () => Promise.resolve().then(() => (init_nextSteps(), nextSteps_exports)),
    "../entry-points/omnibar.js": () => Promise.resolve().then(() => (init_omnibar(), omnibar_exports)),
    "../entry-points/privacyStats.js": () => Promise.resolve().then(() => (init_privacyStats(), privacyStats_exports)),
    "../entry-points/protections.js": () => Promise.resolve().then(() => (init_protections(), protections_exports)),
    "../entry-points/rmf.js": () => Promise.resolve().then(() => (init_rmf(), rmf_exports)),
    "../entry-points/subscriptionWinBackBanner.js": () => Promise.resolve().then(() => (init_subscriptionWinBackBanner(), subscriptionWinBackBanner_exports)),
    "../entry-points/updateNotification.js": () => Promise.resolve().then(() => (init_updateNotification(), updateNotification_exports))
  });

  // pages/new-tab/app/widget-list/WidgetList.js
  function placeholderWidget() {
    return {
      factory: () => {
        return null;
      }
    };
  }
  async function widgetEntryPoint(id, didCatch) {
    try {
      const mod2 = await globImport_entry_points_js(`../entry-points/${id}.js`);
      if (typeof mod2.factory !== "function") {
        console.error(`module found for ${id}, but missing 'factory' export`);
        return placeholderWidget();
      }
      return mod2;
    } catch (e4) {
      console.error(e4);
      didCatch(e4.toString());
      return placeholderWidget();
    }
  }
  function WidgetList() {
    const { widgets, widgetConfigItems, entryPoints } = x2(WidgetConfigContext);
    const messaging2 = useMessaging();
    const { env } = useEnv();
    const didCatch = (message, id) => {
      const composed = `Widget '${id}' threw an exception: ` + message;
      messaging2.reportPageException({ message: composed });
    };
    return /* @__PURE__ */ _(k, null, widgets.map((widget, index2) => {
      const isUserConfigurable = widgetConfigItems.find((item) => item.id === widget.id);
      const matchingEntryPoint = entryPoints[widget.id];
      if (!isUserConfigurable) {
        return /* @__PURE__ */ _(ErrorBoundary, { key: widget.id, didCatch: ({ message }) => didCatch(message, widget.id), fallback: null }, /* @__PURE__ */ _(WidgetLoader, { fn: matchingEntryPoint.factory }));
      }
      return /* @__PURE__ */ _(WidgetVisibilityProvider, { key: widget.id, id: widget.id, index: index2 }, /* @__PURE__ */ _(
        ErrorBoundary,
        {
          key: widget.id,
          didCatch: ({ message }) => didCatch(message, widget.id),
          fallback: /* @__PURE__ */ _(Centered, { "data-entry-point": widget.id }, /* @__PURE__ */ _(VerticalSpace, null, /* @__PURE__ */ _("p", null, INLINE_ERROR), /* @__PURE__ */ _("p", null, "Widget ID: ", widget.id)))
        },
        /* @__PURE__ */ _(WidgetLoader, { fn: matchingEntryPoint.factory })
      ));
    }), env === "development" && /* @__PURE__ */ _(Centered, { "data-entry-point": "debug" }, /* @__PURE__ */ _(DebugCustomized, { index: widgets.length, isOpenInitially: window.location.search.includes("debugWidget") })));
  }
  function WidgetLoader({ fn: fn2 }) {
    const result = fn2?.();
    return result;
  }

  // pages/new-tab/app/components/App.js
  init_dropzone();
  init_CustomizerMenu();
  init_Drawer();

  // pages/new-tab/app/customizer/components/CustomizerDrawer.js
  init_preact_module();

  // pages/new-tab/app/customizer/components/CustomizerDrawer.module.css
  var CustomizerDrawer_default = {
    root: "CustomizerDrawer_root"
  };

  // pages/new-tab/app/customizer/components/CustomizerDrawer.js
  init_hooks_module();
  init_CustomizerProvider();

  // pages/new-tab/app/customizer/components/CustomizerDrawerInner.js
  init_preact_module();
  var import_classnames23 = __toESM(require_classnames(), 1);

  // pages/new-tab/app/customizer/components/CustomizerDrawerInner.module.css
  var CustomizerDrawerInner_default = {
    root: "CustomizerDrawerInner_root",
    "fade-in": "CustomizerDrawerInner_fade-in",
    sections: "CustomizerDrawerInner_sections",
    header: "CustomizerDrawerInner_header",
    internal: "CustomizerDrawerInner_internal",
    closeBtn: "CustomizerDrawerInner_closeBtn",
    backBtn: "CustomizerDrawerInner_backBtn",
    section: "CustomizerDrawerInner_section",
    borderedSection: "CustomizerDrawerInner_borderedSection",
    sectionBody: "CustomizerDrawerInner_sectionBody",
    sectionTitle: "CustomizerDrawerInner_sectionTitle",
    bgList: "CustomizerDrawerInner_bgList",
    bgListItem: "CustomizerDrawerInner_bgListItem",
    deleteBtn: "CustomizerDrawerInner_deleteBtn",
    bgPanel: "CustomizerDrawerInner_bgPanel",
    bgPanelEmpty: "CustomizerDrawerInner_bgPanelEmpty",
    dynamicIconColor: "CustomizerDrawerInner_dynamicIconColor",
    dynamicPickerIconColor: "CustomizerDrawerInner_dynamicPickerIconColor",
    colorInputIcon: "CustomizerDrawerInner_colorInputIcon",
    colwrap: "CustomizerDrawerInner_colwrap",
    cols: "CustomizerDrawerInner_cols",
    col1: "CustomizerDrawerInner_col1",
    col2: "CustomizerDrawerInner_col2",
    col: "CustomizerDrawerInner_col",
    settingsLink: "CustomizerDrawerInner_settingsLink"
  };

  // pages/new-tab/app/customizer/components/CustomizerDrawerInner.js
  init_Drawer();

  // pages/new-tab/app/customizer/components/BackgroundSection.js
  init_preact_module();
  var import_classnames15 = __toESM(require_classnames(), 1);
  init_values();
  init_Icons2();
  init_signals_module();
  init_hooks_module();
  init_CustomizerProvider();
  init_utils();
  init_types();
  function BackgroundSection({ data: data2, onNav, onUpload, select }) {
    const { browser } = x2(CustomizerThemesContext);
    let displayColor;
    if (data2.value.background.kind === "color") {
      displayColor = values.colors[data2.value.background.value];
    } else if (data2.value.background.kind === "hex") {
      const hex = data2.value.background.value;
      displayColor = { hex: data2.value.background.value, colorScheme: detectThemeFromHex(hex) };
    } else {
      displayColor = values.colors.color11;
    }
    let gradient;
    if (data2.value.background.kind === "gradient") {
      gradient = values.gradients[data2.value.background.value];
    } else {
      gradient = values.gradients.gradient02;
    }
    return /* @__PURE__ */ _("ul", { class: (0, import_classnames15.default)(CustomizerDrawerInner_default.bgList), role: "radiogroup" }, /* @__PURE__ */ _("li", { class: CustomizerDrawerInner_default.bgListItem }, /* @__PURE__ */ _(
      DefaultPanel,
      {
        checked: data2.value.background.kind === "default",
        onClick: () => select({ background: { kind: "default" } })
      }
    )), /* @__PURE__ */ _("li", { class: CustomizerDrawerInner_default.bgListItem }, /* @__PURE__ */ _(
      ColorPanel,
      {
        checked: data2.value.background.kind === "color" || data2.value.background.kind === "hex",
        color: displayColor,
        onClick: () => onNav("color")
      }
    )), /* @__PURE__ */ _("li", { class: CustomizerDrawerInner_default.bgListItem }, /* @__PURE__ */ _(GradientPanel, { checked: data2.value.background.kind === "gradient", gradient, onClick: () => onNav("gradient") })), /* @__PURE__ */ _("li", { class: CustomizerDrawerInner_default.bgListItem }, /* @__PURE__ */ _(
      BackgroundImagePanel,
      {
        checked: data2.value.background.kind === "userImage",
        onClick: () => onNav("image"),
        data: data2,
        upload: onUpload,
        browserTheme: browser
      }
    )));
  }
  function DefaultPanel({ checked, onClick }) {
    const id = g2();
    const { main } = x2(CustomizerThemesContext);
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _(
      "button",
      {
        class: (0, import_classnames15.default)(CustomizerDrawerInner_default.bgPanel, CustomizerDrawerInner_default.bgPanelEmpty, CustomizerDrawerInner_default.dynamicIconColor),
        "data-color-mode": main,
        "aria-checked": checked,
        "aria-labelledby": id,
        role: "radio",
        onClick,
        tabindex: checked ? -1 : 0
      },
      checked && /* @__PURE__ */ _(CircleCheck, null)
    ), /* @__PURE__ */ _("span", { id }, t4("customizer_background_selection_default")));
  }
  function ColorPanel(props) {
    const id = g2();
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _(
      "button",
      {
        class: (0, import_classnames15.default)(CustomizerDrawerInner_default.bgPanel, CustomizerDrawerInner_default.dynamicIconColor),
        "data-color-mode": props.color.colorScheme,
        onClick: props.onClick,
        "aria-checked": props.checked,
        tabindex: props.checked ? -1 : 0,
        "aria-labelledby": id,
        role: "radio",
        style: { background: props.color.hex }
      },
      props.checked && /* @__PURE__ */ _(CircleCheck, null)
    ), /* @__PURE__ */ _("span", { id }, t4("customizer_background_selection_color")));
  }
  function GradientPanel(props) {
    const id = g2();
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _(
      "button",
      {
        onClick: props.onClick,
        class: (0, import_classnames15.default)(CustomizerDrawerInner_default.bgPanel, CustomizerDrawerInner_default.dynamicIconColor),
        "data-color-mode": props.gradient.colorScheme,
        "aria-checked": props.checked,
        tabindex: props.checked ? -1 : 0,
        "aria-labelledby": id,
        style: {
          background: `url(${props.gradient.path})`,
          backgroundSize: "cover",
          backgroundRepeat: "no-repeat",
          backgroundPosition: "center center"
        }
      },
      props.checked && /* @__PURE__ */ _(CircleCheck, null)
    ), /* @__PURE__ */ _("span", { id }, t4("customizer_background_selection_gradient")));
  }
  function BackgroundImagePanel(props) {
    const id = g2();
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    const empty = useComputed(() => props.data.value.userImages.length === 0);
    const selectedImage = useComputed(() => {
      const imageId = props.data.value.background.kind === "userImage" ? props.data.value.background.value : null;
      if (imageId !== null) {
        const match = props.data.value.userImages.find((i5) => i5.id === imageId.id);
        if (match) {
          return match;
        }
      }
      return null;
    });
    const firstImage = useComputed(() => {
      return props.data.value.userImages[0] ?? null;
    });
    const label = empty.value === true ? /* @__PURE__ */ _("span", { id }, t4("customizer_background_selection_image_add")) : /* @__PURE__ */ _("span", { id }, t4("customizer_background_selection_image_existing"));
    if (empty.value === true) {
      return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _(
        "button",
        {
          class: (0, import_classnames15.default)(CustomizerDrawerInner_default.bgPanel, CustomizerDrawerInner_default.bgPanelEmpty, CustomizerDrawerInner_default.dynamicIconColor),
          "data-color-mode": props.browserTheme,
          "aria-checked": props.checked,
          "aria-labelledby": id,
          role: "radio",
          onClick: props.upload
        },
        /* @__PURE__ */ _(PlusIcon, null)
      ), label);
    }
    const image = selectedImage.value !== null ? selectedImage.value?.thumb : firstImage.value?.thumb;
    const scheme = selectedImage.value !== null ? selectedImage.value?.colorScheme : firstImage.value?.colorScheme;
    return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _(
      "button",
      {
        class: (0, import_classnames15.default)(CustomizerDrawerInner_default.bgPanel, CustomizerDrawerInner_default.dynamicIconColor),
        "data-color-mode": scheme,
        onClick: props.onClick,
        "aria-checked": props.checked,
        "aria-labelledby": id,
        style: {
          backgroundImage: `url(${image})`,
          backgroundSize: "cover",
          backgroundRepeat: "no-repeat"
        }
      },
      props.checked && /* @__PURE__ */ _(CircleCheck, null)
    ), label);
  }

  // pages/new-tab/app/customizer/components/BrowserThemeSection.module.css
  var BrowserThemeSection_default = {
    themeList: "BrowserThemeSection_themeList",
    themeItem: "BrowserThemeSection_themeItem",
    themeButton: "BrowserThemeSection_themeButton",
    themeButtonLight: "BrowserThemeSection_themeButtonLight",
    themeButtonDark: "BrowserThemeSection_themeButtonDark",
    themeButtonSystem: "BrowserThemeSection_themeButtonSystem"
  };

  // pages/new-tab/app/customizer/components/BrowserThemeSection.js
  var import_classnames16 = __toESM(require_classnames(), 1);
  init_preact_module();
  init_signals_module();
  init_types();
  function BrowserThemeSection(props) {
    const current = useComputed(() => props.data.value.theme);
    const { t: t4 } = useTypedTranslationWith(
      /** @type {strings} */
      {}
    );
    return /* @__PURE__ */ _("ul", { class: BrowserThemeSection_default.themeList }, /* @__PURE__ */ _("li", { class: BrowserThemeSection_default.themeItem }, /* @__PURE__ */ _(
      "button",
      {
        class: (0, import_classnames16.default)(BrowserThemeSection_default.themeButton, BrowserThemeSection_default.themeButtonLight),
        role: "radio",
        type: "button",
        "aria-checked": current.value === "light",
        tabindex: current.value === "light" ? -1 : 0,
        onClick: () => props.setTheme({ theme: "light" })
      },
      /* @__PURE__ */ _("span", { class: "sr-only" }, t4("customizer_browser_theme_label", { type: "light" }))
    ), /* @__PURE__ */ _("span", null, t4("customizer_browser_theme_light"))), /* @__PURE__ */ _("li", { class: BrowserThemeSection_default.themeItem }, /* @__PURE__ */ _(
      "button",
      {
        class: (0, import_classnames16.default)(BrowserThemeSection_default.themeButton, BrowserThemeSection_default.themeButtonDark),
        role: "radio",
        type: "button",
        "aria-checked": current.value === "dark",
        tabindex: current.value === "dark" ? -1 : 0,
        onClick: () => props.setTheme({ theme: "dark" })
      },
      /* @__PURE__ */ _("span", { class: "sr-only" }, t4("customizer_browser_theme_label", { type: "dark" }))
    ), /* @__PURE__ */ _("span", null, t4("customizer_browser_theme_dark"))), /* @__PURE__ */ _("li", { class: BrowserThemeSection_default.themeItem }, /* @__PURE__ */ _(
      "button",
      {
        class: (0, import_classnames16.default)(BrowserThemeSection_default.themeButton, BrowserThemeSection_default.themeButtonSystem),
        role: "radio",
        type: "button",
        "aria-checked": current.value === "system",
        tabindex: current.value === "system" ? -1 : 0,
        onClick: () => props.setTheme({ theme: "system" })
      },
      /* @__PURE__ */ _("span", { class: "sr-only" }, t4("customizer_browser_theme_label", { type: "system" }))
    ), /* @__PURE__ */ _("span", null, t4("customizer_browser_theme_system"))));
  }

  // pages/new-tab/app/customizer/components/VisibilityMenuSection.js
  init_hooks_module();
  init_CustomizerMenu();

  // pages/new-tab/app/customizer/components/VisibilityMenu.js
  var import_classnames17 = __toESM(require_classnames(), 1);
  init_preact_module();
  init_hooks_module();

  // shared/components/Switch/Switch.js
  init_preact_module();

  // shared/components/Switch/Switch.module.css
  var Switch_default = {
    label: "Switch_label",
    input: "Switch_input",
    switch: "Switch_switch"
  };

  // shared/components/Switch/Switch.js
  function Switch({ checked = false, platformName, size, theme, inputProps, ...props }) {
    const { onChecked, onUnchecked, ariaLabel, pending } = props;
    function change(e4) {
      if (e4.target.checked === true) {
        onChecked();
      } else {
        onUnchecked();
      }
    }
    return /* @__PURE__ */ _("label", { class: Switch_default.label, "data-platform-name": platformName, "data-theme": theme, "data-size": size }, /* @__PURE__ */ _(
      "input",
      {
        disabled: pending,
        type: "checkbox",
        role: "switch",
        "aria-label": ariaLabel,
        class: Switch_default.input,
        checked,
        onChange: change,
        ...inputProps
      }
    ), /* @__PURE__ */ _("span", { class: Switch_default.switch, style: "transition-duration: 130ms;transition-delay: 0ms;" }));
  }

  // pages/new-tab/app/customizer/components/VisibilityMenu.js
  init_settings_provider();
  init_CustomizerProvider();

  // pages/new-tab/app/customizer/components/VisibilityMenu.module.css
  var VisibilityMenu_default = {
    list: "VisibilityMenu_list",
    embedded: "VisibilityMenu_embedded",
    menuItemLabel: "VisibilityMenu_menuItemLabel",
    title: "VisibilityMenu_title",
    menuItemLabelEmbedded: "VisibilityMenu_menuItemLabelEmbedded",
    svg: "VisibilityMenu_svg"
  };

  // pages/new-tab/app/customizer/components/VisibilityMenu.js
  function EmbeddedVisibilityMenu({ rows }) {
    const platformName = usePlatformName();
    const { browser } = x2(CustomizerThemesContext);
    return /* @__PURE__ */ _("ul", { className: (0, import_classnames17.default)(VisibilityMenu_default.list, VisibilityMenu_default.embedded) }, rows.map((row) => {
      return /* @__PURE__ */ _("li", { key: row.id }, /* @__PURE__ */ _("div", { class: (0, import_classnames17.default)(VisibilityMenu_default.menuItemLabel, VisibilityMenu_default.menuItemLabelEmbedded) }, /* @__PURE__ */ _("span", { class: VisibilityMenu_default.svg }, row.icon), /* @__PURE__ */ _("span", { class: VisibilityMenu_default.title }, row.title ?? row.id), /* @__PURE__ */ _(
        Switch,
        {
          theme: browser.value,
          platformName,
          checked: row.visibility === "visible",
          size: "medium",
          onChecked: () => row.toggle?.(row.id),
          onUnchecked: () => row.toggle?.(row.id),
          ariaLabel: `Toggle ${row.title}`,
          pending: false,
          inputProps: {
            disabled: row.enabled === false
          }
        }
      )));
    }));
  }

  // pages/new-tab/app/customizer/components/VisibilityMenuSection.js
  init_preact_module();
  function VisibilityMenuSection() {
    const [rowData, setRowData] = d2(() => {
      const items = (
        /** @type {import("./CustomizerMenu.js").VisibilityRowData[]} */
        getItems()
      );
      return items;
    });
    _2(() => {
      function handler() {
        setRowData(getItems());
      }
      window.addEventListener(UPDATE_EVENT, handler);
      return () => {
        window.removeEventListener(UPDATE_EVENT, handler);
      };
    }, []);
    return /* @__PURE__ */ _(EmbeddedVisibilityMenu, { rows: rowData });
  }

  // pages/new-tab/app/customizer/components/ColorSelection.js
  init_preact_module();
  var import_classnames18 = __toESM(require_classnames(), 1);
  init_values();
  init_Icons2();
  init_signals_module();
  init_utils();
  init_types();
  function ColorSelection({ data: data2, select, back }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    function onClick(event) {
      let target = (
        /** @type {HTMLElement|null} */
        event.target
      );
      const selector = `[role="radio"][aria-checked="false"][data-value]`;
      if (!target?.matches(selector)) {
        target = /** @type {HTMLElement|null} */
        target?.closest(selector);
      }
      if (!target) return;
      const value2 = (
        /** @type {PredefinedColor} */
        target.dataset.value
      );
      if (!(value2 in values.colors)) return console.warn("could not select color", value2);
      select({ background: { kind: "color", value: value2 } });
    }
    return /* @__PURE__ */ _("div", null, /* @__PURE__ */ _("button", { type: "button", onClick: back, class: (0, import_classnames18.default)(CustomizerDrawerInner_default.backBtn, CustomizerDrawerInner_default.sectionTitle) }, /* @__PURE__ */ _(BackChevron, null), t4("customizer_background_selection_color")), /* @__PURE__ */ _("div", { class: CustomizerDrawerInner_default.sectionBody }, /* @__PURE__ */ _(InlineErrorBoundary, { format: (message) => `Customizer section 'ColorGrid' threw an exception: ` + message }, /* @__PURE__ */ _("div", { class: (0, import_classnames18.default)(CustomizerDrawerInner_default.bgList), role: "radiogroup", onClick }, /* @__PURE__ */ _(PickerPanel, { data: data2, select }), /* @__PURE__ */ _(ColorGrid, { data: data2 })))));
  }
  var entries = Object.keys(values.colors);
  function ColorGrid({ data: data2 }) {
    const selected = useComputed(() => data2.value.background.kind === "color" && data2.value.background.value);
    return /* @__PURE__ */ _(k, null, entries.map((key2) => {
      const entry = values.colors[key2];
      return /* @__PURE__ */ _("div", { class: CustomizerDrawerInner_default.bgListItem, key: key2 }, /* @__PURE__ */ _(
        "button",
        {
          class: CustomizerDrawerInner_default.bgPanel,
          type: "button",
          tabindex: 0,
          style: { background: entry.hex },
          role: "radio",
          "aria-checked": key2 === selected.value,
          "data-value": key2
        },
        /* @__PURE__ */ _("span", { class: "sr-only" }, "Select ", key2)
      ));
    }));
  }
  function PickerPanel({ data: data2, select }) {
    const hex = useComputed(() => {
      if (data2.value.background.kind === "hex") {
        return data2.value.background.value;
      }
      if (data2.value.userColor?.kind === "hex") {
        return data2.value.userColor.value;
      }
      return "#ffffff";
    });
    const hexSelected = useComputed(() => data2.value.background.kind === "hex");
    const modeSelected = useComputed(() => detectThemeFromHex(hex.value));
    return /* @__PURE__ */ _("div", { class: CustomizerDrawerInner_default.bgListItem }, /* @__PURE__ */ _(
      "button",
      {
        className: (0, import_classnames18.default)(CustomizerDrawerInner_default.bgPanel, CustomizerDrawerInner_default.bgPanelEmpty),
        type: "button",
        tabIndex: 0,
        style: { background: hex.value },
        role: "radio",
        "aria-checked": hexSelected
      }
    ), /* @__PURE__ */ _(
      "input",
      {
        type: "color",
        tabIndex: -1,
        style: { opacity: 0, inset: 0, position: "absolute", width: "100%", height: "100%" },
        value: hex,
        onChange: (e4) => {
          if (!(e4.target instanceof HTMLInputElement)) return;
          select({ background: { kind: "hex", value: e4.target.value } });
        },
        onClick: (e4) => {
          if (!(e4.target instanceof HTMLInputElement)) return;
          if (data2.value.userColor?.value === hex.value) {
            select({ background: { kind: "hex", value: e4.target.value } });
          }
        }
      }
    ), /* @__PURE__ */ _("span", { class: (0, import_classnames18.default)(CustomizerDrawerInner_default.colorInputIcon, CustomizerDrawerInner_default.dynamicPickerIconColor), "data-color-mode": modeSelected }, /* @__PURE__ */ _(Picker, null)));
  }

  // pages/new-tab/app/customizer/components/GradientSelection.js
  init_preact_module();
  var import_classnames19 = __toESM(require_classnames(), 1);
  init_values();
  init_signals_module();
  init_Icons2();
  init_types();
  function GradientSelection({ data: data2, select, back }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    function onClick(event) {
      let target = (
        /** @type {HTMLElement|null} */
        event.target
      );
      const selector = `[role="radio"][aria-checked="false"][data-value]`;
      if (!target?.matches(selector)) {
        target = /** @type {HTMLElement|null} */
        target?.closest(selector);
      }
      if (!target) return;
      const value2 = (
        /** @type {PredefinedGradient} */
        target.dataset.value
      );
      if (!(value2 in values.gradients)) return console.warn("could not select gradient", value2);
      select({ background: { kind: "gradient", value: value2 } });
    }
    return /* @__PURE__ */ _("div", null, /* @__PURE__ */ _("button", { type: "button", onClick: back, class: (0, import_classnames19.default)(CustomizerDrawerInner_default.backBtn, CustomizerDrawerInner_default.sectionTitle) }, /* @__PURE__ */ _(BackChevron, null), t4("customizer_background_selection_gradient")), /* @__PURE__ */ _("div", { className: CustomizerDrawerInner_default.sectionBody, onClick }, /* @__PURE__ */ _(InlineErrorBoundary, { format: (message) => `Customizer section 'GradientSelection' threw an exception: ` + message }, /* @__PURE__ */ _(GradientGrid, { data: data2 }))));
  }
  var entries2 = Object.keys(values.gradients);
  function GradientGrid({ data: data2 }) {
    const selected = useComputed(() => data2.value.background.kind === "gradient" && data2.value.background.value);
    return /* @__PURE__ */ _("ul", { className: (0, import_classnames19.default)(CustomizerDrawerInner_default.bgList) }, entries2.map((key2) => {
      const entry = values.gradients[key2];
      return /* @__PURE__ */ _("li", { className: CustomizerDrawerInner_default.bgListItem, key: key2 }, /* @__PURE__ */ _(
        "button",
        {
          className: CustomizerDrawerInner_default.bgPanel,
          type: "button",
          tabIndex: 0,
          role: "radio",
          "aria-checked": key2 === selected.value,
          "data-value": key2,
          style: {
            backgroundColor: entry.fallback,
            backgroundImage: `url(${entry.path})`,
            backgroundSize: "cover",
            backgroundRepeat: "no-repeat"
          }
        },
        /* @__PURE__ */ _("span", { className: "sr-only" }, "Select ", key2)
      ));
    }));
  }

  // pages/new-tab/app/customizer/components/CustomizerDrawerInner.js
  init_signals_module();

  // pages/new-tab/app/customizer/components/ImageSelection.js
  init_preact_module();
  var import_classnames20 = __toESM(require_classnames(), 1);
  init_signals_module();
  init_DismissButton2();
  init_Icons2();
  init_hooks_module();
  init_CustomizerProvider();
  init_types();
  function ImageSelection({ data: data2, select, back, onUpload, deleteImage, customizerContextMenu }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    function onClick(event) {
      let target = (
        /** @type {HTMLElement|null} */
        event.target
      );
      const selector = `[role="radio"][aria-checked="false"][data-id]`;
      if (!target?.matches(selector)) {
        target = /** @type {HTMLElement|null} */
        target?.closest(selector);
      }
      if (!target) return;
      const value2 = (
        /** @type {string} */
        target.dataset.id
      );
      const match = data2.value.userImages.find((i5) => i5.id === value2);
      if (!match) return console.warn("could not find matching image", value2);
      select({ background: { kind: "userImage", value: match } });
    }
    function onContextMenu(event) {
      const target = (
        /** @type {HTMLElement|null} */
        event.target
      );
      if (!(target instanceof HTMLElement)) return;
      const id = target.closest("button")?.dataset.id;
      if (typeof id === "string") {
        event.preventDefault();
        event.stopImmediatePropagation();
        customizerContextMenu({ id, target: "userImage" });
      }
    }
    return /* @__PURE__ */ _("div", { onContextMenu }, /* @__PURE__ */ _("button", { type: "button", onClick: back, class: (0, import_classnames20.default)(CustomizerDrawerInner_default.backBtn, CustomizerDrawerInner_default.sectionTitle) }, /* @__PURE__ */ _(BackChevron, null), t4("customizer_background_selection_image_existing")), /* @__PURE__ */ _("div", { className: CustomizerDrawerInner_default.sectionBody, onClick }, /* @__PURE__ */ _(InlineErrorBoundary, { format: (message) => `Customizer section 'ImageSelection' threw an exception: ` + message }, /* @__PURE__ */ _(ImageGrid, { data: data2, deleteImage, onUpload }))), /* @__PURE__ */ _("div", { className: CustomizerDrawerInner_default.sectionBody }, /* @__PURE__ */ _("p", null, t4("customizer_image_privacy"))));
  }
  function ImageGrid({ data: data2, deleteImage, onUpload }) {
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    const { browser } = x2(CustomizerThemesContext);
    const selected = useComputed(() => data2.value.background.kind === "userImage" && data2.value.background.value.id);
    const entries4 = useComputed(() => {
      return data2.value.userImages;
    });
    const max = 8;
    const diff = max - entries4.value.length;
    const placeholders = new Array(diff).fill(null);
    return /* @__PURE__ */ _("ul", { className: (0, import_classnames20.default)(CustomizerDrawerInner_default.bgList) }, entries4.value.map((entry, index2) => {
      $INTEGRATION: (() => {
        if (entry.id === "__will_throw__") throw new Error("Simulated error");
      })();
      return /* @__PURE__ */ _("li", { className: CustomizerDrawerInner_default.bgListItem, key: entry.id }, /* @__PURE__ */ _(
        "button",
        {
          className: CustomizerDrawerInner_default.bgPanel,
          type: "button",
          tabIndex: 0,
          role: "radio",
          "aria-checked": entry.id === selected.value,
          "data-id": entry.id,
          style: {
            backgroundImage: `url(${entry.thumb})`,
            backgroundSize: "cover",
            backgroundRepeat: "no-repeat"
          }
        },
        /* @__PURE__ */ _("span", { class: "sr-only" }, t4("customizer_image_select", { number: String(index2 + 1) }))
      ), /* @__PURE__ */ _(
        DismissButton,
        {
          className: CustomizerDrawerInner_default.deleteBtn,
          onClick: () => deleteImage(entry.id),
          buttonProps: {
            "data-color-mode": String(entry.colorScheme),
            "aria-label": t4("customizer_image_delete", { number: String(index2 + 1) })
          }
        }
      ));
    }), placeholders.map((_5, index2) => {
      return /* @__PURE__ */ _("li", { className: CustomizerDrawerInner_default.bgListItem, key: `placeholder-${diff}-${index2}` }, /* @__PURE__ */ _(
        "button",
        {
          type: "button",
          onClick: onUpload,
          class: (0, import_classnames20.default)(CustomizerDrawerInner_default.bgPanel, CustomizerDrawerInner_default.bgPanelEmpty, CustomizerDrawerInner_default.dynamicIconColor),
          "data-color-mode": browser
        },
        /* @__PURE__ */ _(PlusIcon, null),
        /* @__PURE__ */ _("span", { class: "sr-only" }, t4("customizer_background_selection_image_add"))
      ));
    }));
  }

  // pages/new-tab/app/customizer/components/CustomizerSection.js
  init_preact_module();
  var import_classnames21 = __toESM(require_classnames(), 1);
  function CustomizerSection({ title, children }) {
    return /* @__PURE__ */ _("div", { className: CustomizerDrawerInner_default.section }, title === null && children, title !== null && /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("h3", { className: CustomizerDrawerInner_default.sectionTitle }, title), /* @__PURE__ */ _("div", { className: CustomizerDrawerInner_default.sectionBody }, children)));
  }
  function BorderedSection({ children }) {
    return /* @__PURE__ */ _("div", { class: (0, import_classnames21.default)(CustomizerDrawerInner_default.section, CustomizerDrawerInner_default.borderedSection) }, children);
  }

  // pages/new-tab/app/customizer/components/SettingsLink.js
  var import_classnames22 = __toESM(require_classnames(), 1);
  init_preact_module();
  function SettingsLink({ title, icon, onClick }) {
    return /* @__PURE__ */ _(
      "a",
      {
        href: "duck://settings",
        class: (0, import_classnames22.default)(CustomizerDrawerInner_default.settingsLink),
        onClick: (event) => {
          event.preventDefault();
          onClick();
        }
      },
      /* @__PURE__ */ _("span", null, title),
      icon
    );
  }

  // pages/new-tab/app/customizer/components/CustomizerDrawerInner.js
  init_DismissButton2();
  init_types();

  // pages/new-tab/app/components/icons/Open.js
  init_preact_module();
  function Open() {
    return /* @__PURE__ */ _("svg", { width: "16", height: "16", viewBox: "0 0 16 16", fill: "none" }, /* @__PURE__ */ _(
      "path",
      {
        d: "M4.125 2.25C3.08947 2.25 2.25 3.08947 2.25 4.125V11.875C2.25 12.9105 3.08947 13.75 4.125 13.75H11.875C12.9105 13.75 13.75 12.9105 13.75 11.875V8.765C13.75 8.41982 14.0298 8.14 14.375 8.14C14.7202 8.14 15 8.41982 15 8.765V11.875C15 13.6009 13.6009 15 11.875 15H4.125C2.39911 15 1 13.6009 1 11.875V4.125C1 2.39911 2.39911 1 4.125 1H7.235C7.58018 1 7.86 1.27982 7.86 1.625C7.86 1.97018 7.58018 2.25 7.235 2.25H4.125Z",
        fill: "currentColor"
      }
    ), /* @__PURE__ */ _(
      "path",
      {
        d: "M10.25 1.625C10.25 1.27982 10.5298 1 10.875 1H14.375C14.7202 1 15 1.27982 15 1.625V5.125C15 5.47018 14.7202 5.75 14.375 5.75C14.0298 5.75 13.75 5.47018 13.75 5.125V3.13388L9.06694 7.81694C8.82286 8.06102 8.42714 8.06102 8.18306 7.81694C7.93898 7.57286 7.93898 7.17714 8.18306 6.93306L12.8661 2.25H10.875C10.5298 2.25 10.25 1.97018 10.25 1.625Z",
        fill: "currentColor"
      }
    ));
  }

  // pages/new-tab/app/customizer/components/CustomizerDrawerInner.js
  function CustomizerDrawerInner({ data: data2, select, onUpload, setTheme, deleteImage, customizerContextMenu }) {
    const { close } = useDrawerControls();
    const { t: t4 } = useTypedTranslationWith(
      /** @type {enStrings} */
      {}
    );
    const messaging2 = useMessaging();
    return /* @__PURE__ */ _("div", { class: CustomizerDrawerInner_default.root }, /* @__PURE__ */ _("header", { class: (0, import_classnames23.default)(CustomizerDrawerInner_default.header, CustomizerDrawerInner_default.internal) }, /* @__PURE__ */ _("h2", null, t4("customizer_drawer_title")), /* @__PURE__ */ _(
      DismissButton,
      {
        onClick: close,
        className: CustomizerDrawerInner_default.closeBtn,
        buttonProps: {
          "aria-label": "Close"
        }
      }
    )), /* @__PURE__ */ _(
      InlineErrorBoundary,
      {
        format: (message) => `CustomizerDrawerInner threw an exception: ${message}`,
        fallback: (message) => /* @__PURE__ */ _("div", { class: CustomizerDrawerInner_default.internal }, /* @__PURE__ */ _("p", null, message))
      },
      /* @__PURE__ */ _(
        TwoCol,
        {
          left: ({ push }) => /* @__PURE__ */ _("div", { class: CustomizerDrawerInner_default.sections }, /* @__PURE__ */ _(CustomizerSection, { title: t4("customizer_section_title_background") }, /* @__PURE__ */ _(BackgroundSection, { data: data2, onNav: push, onUpload, select })), /* @__PURE__ */ _(CustomizerSection, { title: t4("customizer_section_title_theme") }, /* @__PURE__ */ _(BrowserThemeSection, { data: data2, setTheme })), /* @__PURE__ */ _(CustomizerSection, { title: t4("customizer_section_title_sections") }, /* @__PURE__ */ _(VisibilityMenuSection, null)), /* @__PURE__ */ _(BorderedSection, null, /* @__PURE__ */ _(
            SettingsLink,
            {
              title: t4("customizer_settings_link"),
              icon: /* @__PURE__ */ _(Open, null),
              onClick: () => messaging2.open({ target: "settings" })
            }
          ))),
          right: ({ id, pop }) => /* @__PURE__ */ _(k, null, id === "color" && /* @__PURE__ */ _(ColorSelection, { data: data2, select, back: pop }), id === "gradient" && /* @__PURE__ */ _(GradientSelection, { data: data2, select, back: pop }), id === "image" && /* @__PURE__ */ _(
            ImageSelection,
            {
              data: data2,
              select,
              back: pop,
              onUpload,
              deleteImage,
              customizerContextMenu
            }
          ))
        }
      )
    ));
  }
  function TwoCol({ left: left2, right: right2 }) {
    const visibleScreen = useSignal("home");
    const renderedScreen = useSignal("home");
    const col1 = useSignal(true);
    function push(id) {
      visibleScreen.value = id;
      requestAnimationFrame(() => {
        renderedScreen.value = id;
      });
    }
    function pop() {
      r3(() => {
        col1.value = true;
        visibleScreen.value = "home";
      });
    }
    function transitionEnded() {
      if (visibleScreen.value !== "home") {
        col1.value = false;
      }
      renderedScreen.value = visibleScreen.value;
    }
    return /* @__PURE__ */ _("div", { class: CustomizerDrawerInner_default.colwrap }, /* @__PURE__ */ _("div", { class: CustomizerDrawerInner_default.cols, "data-sub": visibleScreen, onTransitionEnd: transitionEnded }, /* @__PURE__ */ _("div", { class: (0, import_classnames23.default)(CustomizerDrawerInner_default.col, CustomizerDrawerInner_default.col1) }, col1.value && left2({ push })), /* @__PURE__ */ _("div", { class: (0, import_classnames23.default)(CustomizerDrawerInner_default.col, CustomizerDrawerInner_default.col2) }, renderedScreen.value !== "home" && right2({ id: renderedScreen.value, pop }))));
  }

  // pages/new-tab/app/customizer/components/CustomizerDrawer.js
  function CustomizerDrawer({ displayChildren }) {
    return /* @__PURE__ */ _("div", { class: CustomizerDrawer_default.root }, displayChildren.value === true && /* @__PURE__ */ _(CustomizerConsumer, null));
  }
  function CustomizerConsumer() {
    const { data: data2, select, upload, setTheme, deleteImage, customizerContextMenu } = x2(CustomizerContext);
    return /* @__PURE__ */ _(
      CustomizerDrawerInner,
      {
        data: data2,
        select,
        onUpload: upload,
        setTheme,
        deleteImage,
        customizerContextMenu
      }
    );
  }

  // pages/new-tab/app/components/App.js
  init_BackgroundProvider();
  init_signals_module();
  init_CustomizerProvider();
  init_hooks_module();
  function App() {
    const platformName = usePlatformName();
    const customizerDrawer = useCustomizerDrawerSettings();
    useGlobalDropzone();
    useContextMenu();
    const {
      buttonRef,
      asideRef,
      visibility,
      displayChildren,
      animating,
      hidden,
      buttonId,
      drawerId
    } = useDrawer(customizerDrawer.autoOpen ? "visible" : "hidden");
    const tabIndex = useComputed(() => hidden.value ? -1 : 0);
    const isOpen = useComputed(() => hidden.value === false);
    const { toggle } = useDrawerControls();
    const { main, browser } = x2(CustomizerThemesContext);
    return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _(BackgroundConsumer, { browser }), /* @__PURE__ */ _("div", { class: App_default.layout, "data-animating": animating, "data-drawer-visibility": visibility }, /* @__PURE__ */ _("main", { class: (0, import_classnames24.default)(App_default.main, App_default.mainLayout, App_default.mainScroller), "data-main-scroller": true, "data-theme": main }, /* @__PURE__ */ _("div", { class: App_default.content }, /* @__PURE__ */ _("div", { className: App_default.tube, "data-content-tube": true, "data-platform": platformName }, /* @__PURE__ */ _(WidgetList, null)))), /* @__PURE__ */ _("div", { class: App_default.themeContext, "data-theme": main }, /* @__PURE__ */ _(CustomizerMenuPositionedFixed, null, /* @__PURE__ */ _(
      CustomizerButton,
      {
        buttonId,
        menuId: drawerId,
        toggleMenu: toggle,
        buttonRef,
        isOpen,
        kind: "drawer"
      }
    ))), /* @__PURE__ */ _(
      "aside",
      {
        class: (0, import_classnames24.default)(App_default.aside, App_default.asideLayout, App_default.asideScroller),
        tabindex: tabIndex,
        "aria-hidden": hidden,
        "data-theme": browser,
        "data-browser-panel": true,
        ref: asideRef
      },
      /* @__PURE__ */ _("div", { class: App_default.asideContent }, /* @__PURE__ */ _(
        InlineErrorBoundary,
        {
          context: "Customizer Drawer",
          fallback: (message) => /* @__PURE__ */ _("div", { class: App_default.paddedError }, /* @__PURE__ */ _("p", null, message))
        },
        /* @__PURE__ */ _(CustomizerDrawer, { displayChildren })
      ))
    )));
  }
  function AppLevelErrorBoundaryFallback({ children }) {
    return /* @__PURE__ */ _("div", { class: App_default.paddedError }, /* @__PURE__ */ _("p", null, children), /* @__PURE__ */ _("div", { class: App_default.paddedErrorRecovery }, "You can try to ", /* @__PURE__ */ _("button", { onClick: () => location.reload() }, "Reload this page")));
  }

  // pages/new-tab/app/index.js
  init_EnvironmentProvider();
  init_settings_provider();
  init_types();
  init_TranslationsProvider();

  // pages/new-tab/app/widget-list/widget-config.service.js
  init_service();
  var WidgetConfigService = class {
    /**
     * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed
     * @param {WidgetConfigs} initialConfig
     * @internal
     */
    constructor(ntp, initialConfig) {
      this.service = new Service(
        {
          subscribe: (cb) => ntp.messaging.subscribe("widgets_onConfigUpdated", cb),
          persist: (data2) => ntp.messaging.notify("widgets_setConfig", data2)
        },
        initialConfig
      );
    }
    /**
     * @param {(evt: {data: WidgetConfigs, source: 'manual' | 'subscription'}) => void} cb
     * @internal
     */
    onData(cb) {
      return this.service.onData(cb);
    }
    /**
     * Set the visibility of a widget.
     *
     * Note: This will persist
     *
     * @param {string} id - the widget ID to toggle.
     * @internal
     */
    toggleVisibility(id) {
      this.service.update((old) => {
        return old.map((widgetConfigItem) => {
          if (widgetConfigItem.id === id) {
            const alt = widgetConfigItem.visibility === "visible" ? (
              /** @type {const} */
              "hidden"
            ) : (
              /** @type {const} */
              "visible"
            );
            return { ...widgetConfigItem, visibility: alt };
          }
          return widgetConfigItem;
        });
      });
    }
  };

  // pages/new-tab/public/locales/en/new-tab.json
  var new_tab_default = {
    smartling: {
      string_format: "icu",
      translate_paths: [
        {
          path: "*/title",
          key: "{*}/title",
          instruction: "*/note"
        }
      ]
    },
    ntp_show_less: {
      title: "Show Less",
      note: "Button that reduces the number of items or content displayed."
    },
    ntp_show_more: {
      title: "Show More",
      note: "Button that increases the number of items or content displayed."
    },
    ntp_dismiss: {
      title: "Dismiss",
      note: "Button that closes or hides the current popup or notification."
    },
    ntp_customizer_button: {
      title: "Customize",
      note: "Button opens a menu. The menu allows the user to customize the page, such as showing/hiding sections."
    },
    widgets_visibility_menu_title: {
      title: "Customize New Tab Page",
      note: "Heading text describing that there's a list of toggles for customizing the page layout."
    },
    ntp_popover_close_button: {
      title: "Close",
      note: "Button that closes the current popover."
    },
    updateNotification_updated_version: {
      title: "Browser Updated to version {version}.",
      note: "Text to indicate which new version was updated. `{version}` will be formatted like `1.22.0`"
    },
    updateNotification_whats_new: {
      title: "See <a>what's new</a> in this release.",
      note: "The `<a>` tag represents a clickable link, please preserve it."
    },
    updateNotification_dismiss_btn: {
      title: "Dismiss",
      note: "Button label text for an action that removes the widget from the screen."
    },
    protections_menuTitle: {
      title: "Protections Report",
      note: "Used as a label in the main navigation menu. 'Protections' refers to the privacy features that block trackers."
    },
    protections_statsSwitchTitle: {
      title: "Summary",
      note: "Used as a label in a toggle switch that shows aggregated privacy statistics. This is one of two options in a view selector (the other is 'Details')."
    },
    protections_activitySwitchTitle: {
      title: "Details",
      note: "Used as a label in a toggle switch that shows recent browsing activity with tracking information. This is one of two options in a view selector (the other is 'Summary')."
    },
    protections_noRecent: {
      title: "No recent tracking activity",
      note: "Placeholder text shown in the Details view when no tracking activity was blocked in the last 7 days. Keep concise if possible."
    },
    stats_menuTitle: {
      title: "Blocked Tracking Attempts",
      note: "Used as a label in a customization menu"
    },
    stats_menuTitle_v2: {
      title: "Protection Stats",
      note: "Used as a label in a customization menu"
    },
    stats_noActivity: {
      title: "DuckDuckGo blocks tracking attempts as you browse. Visit a few sites to see how many we block!",
      note: "Placeholder for when we cannot report any blocked trackers yet"
    },
    stats_noRecent: {
      title: "Tracking protections active",
      note: "Placeholder to indicate that no tracking activity was blocked in the last 7 days"
    },
    stats_countBlockedSingular: {
      title: "1 tracking attempt blocked",
      note: "The main headline indicating that a single tracker was blocked"
    },
    stats_countBlockedPlural: {
      title: "{count} tracking attempts blocked",
      note: "The main headline indicating that more than 1 attempt has been blocked. Eg: '2 tracking attempts blocked'"
    },
    stats_noActivityAdsAndTrackers: {
      title: "DuckDuckGo blocks ads and tracking attempts as you browse. Visit a few sites to see how many we block!",
      note: "Placeholder for when we cannot report any blocked ads and trackers yet"
    },
    stats_noRecentAdsAndTrackers: {
      title: "Protections active",
      note: "Placeholder to indicate that no ads or tracking activity was blocked in the last 7 days"
    },
    stats_countBlockedAdsAndTrackersSingular: {
      title: "<b>1</b> advertising & tracking attempt blocked",
      note: "The main headline indicating that a single ad or tracking attempt was blocked"
    },
    stats_countBlockedAdsAndTrackersPlural: {
      title: "<b>{count}</b> advertising & tracking attempts blocked",
      note: "The main headline indicating that more than 1 ad or tracking attempt has been blocked. Eg: '2 advertising & tracking attempts blocked"
    },
    stats_feedCountBlockedSingular: {
      title: "1 attempt blocked by DuckDuckGo in the last 7 days",
      note: "A summary description of how many tracking attempts where blocked, when only one exists."
    },
    stats_feedCountBlockedPeriod: {
      title: "Past 7 days",
      note: "A summary description indicating the time period of the blocked tracking attempts, which is the past 7 days."
    },
    stats_feedCountBlockedPlural: {
      title: "{count} tracking attempts blocked",
      note: "A summary description of how many tracking attempts were blocked by DuckDuckGo in the last 7 days when there is more than one. E.g., '1,028 tracking attempts blocked."
    },
    stats_toggleLabel: {
      title: "Show recent activity",
      note: "The aria-label text for a toggle button that shows the detailed activity feed"
    },
    stats_hideLabel: {
      title: "Hide recent activity",
      note: "The aria-label text for a toggle button that hides the detailed activity feed"
    },
    stats_otherCompanyName: {
      title: "Other",
      note: "A placeholder to represent an aggregated count of entries, not present in the rest of the list. For example, 'Other: 200', which would mean 200 entries excluding the ones already shown"
    },
    stats_otherCount: {
      title: "{count} attempts from other networks",
      note: "An aggregated count of blocked entries not present in the main list. For example, '200 attempts from other networks'"
    },
    omnibar_menuTitle: {
      title: "Search",
      description: "Title of the omnibar widget in the customizer panel."
    },
    omnibar_aiChatFormPlaceholder: {
      title: "Ask privately",
      description: "Placeholder text for the AI chat input field."
    },
    omnibar_aiChatFormSubmitButtonLabel: {
      title: "Send",
      description: "Accesible label for the AI chat submit button."
    },
    omnibar_logoAlt: {
      title: "DuckDuckGo",
      description: "Alt text for the DuckDuckGo logo."
    },
    omnibar_tabSwitcherLabel: {
      title: "Search & Duck.ai tab switcher",
      description: "Accessible label for the tab switcher between search and AI modes."
    },
    omnibar_searchTabLabel: {
      title: "Search",
      description: "Label for the search tab."
    },
    omnibar_aiTabLabel: {
      title: "Duck.ai",
      description: "Label for the AI chat tab."
    },
    omnibar_searchFormPlaceholder: {
      title: "Search privately",
      description: "Placeholder text for the search input field."
    },
    omnibar_searchFormCloseButtonLabel: {
      title: "Close",
      description: "Accessible label for the close button in the search form."
    },
    omnibar_toggleDuckAi: {
      title: "Duck.ai",
      description: "Label for the button to toggle the Duck.ai chat interface."
    },
    omnibar_searchDuckDuckGoSuffix: {
      title: "Search DuckDuckGo",
      description: "Text placed after suggestions that will search DuckDuckGo."
    },
    omnibar_duckDuckGoSuffix: {
      title: "DuckDuckGo",
      description: "Text placed after suggestions that will open a DuckDuckGo page."
    },
    omnibar_visitSuffix: {
      title: "Visit {url}",
      description: "Text placed after suggestions that will open a webpage."
    },
    omnibar_askDuckAiSuffix: {
      title: "Ask Duck.ai",
      description: "Text placed after aiChat suggestions that will submit a chat query."
    },
    omnibar_switchToTab: {
      title: "Switch to Tab",
      description: "Badge text shown next to open tab suggestions."
    },
    omnibar_customizePopoverTitle: {
      title: "Toggle between search and AI chat",
      description: "Title for the popover that introduces the search/AI toggle feature."
    },
    omnibar_customizePopoverBadge: {
      title: "New",
      description: "Badge text for the popover that introduces the search/AI toggle feature."
    },
    omnibar_customizePopoverDescription: {
      title: "Either way, your info stays private.<br />Don't want this? <button>Customize</button>",
      description: "Description message in the popover including privacy statement and customize option."
    },
    nextSteps_sectionTitle: {
      title: "Next Steps",
      note: "Text that goes in the Next Steps bubble above the first card"
    },
    nextSteps_bringStuff_title: {
      title: "Bring Your Stuff",
      note: "Title of the Next Steps card for importing bookmarks and favorites"
    },
    nextSteps_bringStuff_summary: {
      title: "Import bookmarks, favorites, and passwords for a smooth transition from your old browser.",
      note: "Summary of the Next Steps card for importing bookmarks and favorites"
    },
    nextSteps_bringStuff_actionText: {
      title: "Import Now",
      note: "Button text of the Next Steps card for importing bookmarks and favorites"
    },
    nextSteps_defaultApp_title: {
      title: "Set as Default Browser",
      note: "Title of the Next Steps card for making DDG the user's default browser"
    },
    nextSteps_defaultApp_summary: {
      title: "We automatically block trackers as you browse. It\u2019s privacy, simplified.",
      note: "Summary of the Next Steps card for making DDG the user's default browser"
    },
    nextSteps_defaultApp_actionText: {
      title: "Make Default Browser",
      note: "Button text of the Next Steps card for making DDG the user's default browser"
    },
    nextSteps_blockCookies_title: {
      title: "Block Cookie Pop-ups",
      note: "Title of the Next Steps card for blocking cookie pop-ups"
    },
    nextSteps_blockCookies_summary: {
      title: "We need your permission to say no to cookies on your behalf. Easy choice.",
      note: "Summary of the Next Steps card for blocking cookie pop-ups"
    },
    nextSteps_blockCookies_actionText: {
      title: "Block Cookie Pop-ups",
      note: "Button text of the Next Steps card for blocking cookie pop-ups"
    },
    nextSteps_emailProtection_title: {
      title: "Protect Your Inbox",
      note: "Title of the Next Steps card for email protection"
    },
    nextSteps_emailProtection_summary: {
      title: "Generate @duck.com addresses that remove trackers from email and forwards to your inbox.",
      note: "Summary of the Next Steps card for email protection"
    },
    nextSteps_emailProtection_actionText: {
      title: "Get Email Protection",
      note: "Button text of the Next Steps card for email protection"
    },
    nextSteps_duckPlayer_title: {
      title: "YouTube Without Creepy Ads",
      note: "Title of the Next Steps card for adopting DuckPlayer"
    },
    nextSteps_duckPlayer_summary: {
      title: "Enjoy a clean viewing experience without personalized ads.",
      note: "Summary of the Next Steps card for adopting DuckPlayer"
    },
    nextSteps_duckPlayer_actionText: {
      title: "Try DuckPlayer",
      note: "Button text of the Next Steps card for adopting DuckPlayer"
    },
    nextSteps_addAppDockMac_title: {
      title: "Add App to the Dock",
      note: "Title of the Next Steps card for adding DDG app to OS dock"
    },
    nextSteps_addAppDockMac_summary: {
      title: "Access DuckDuckGo faster by adding it to the Dock.",
      note: "Summary of the Next Steps card for adding DDG app to OS dock"
    },
    nextSteps_addAppDockMac_actionText: {
      title: "Add to Dock",
      note: "Initial button text of the Next Steps card for adding DDG app to OS dock"
    },
    nextSteps_addAppDockMac_confirmationText: {
      title: "Added to Dock!",
      note: "Button text after clicking on the Next Steps card for adding DDG app to OS dock"
    },
    nextSteps_pinAppToTaskbarWindows_title: {
      title: "Pin App to the Taskbar",
      note: "Title of the Next Steps card for adding DDG app to OS dock"
    },
    nextSteps_pinAppToTaskbarWindows_summary: {
      title: "Access DuckDuckGo faster by pinning it to the Taskbar.",
      note: "Summary of the Next Steps card for adding DDG app to OS dock"
    },
    nextSteps_pinAppToTaskbarWindows_actionText: {
      title: "Pin to Taskbar",
      note: "Initial button text of the Next Steps card for adding DDG app to OS dock"
    },
    nextSteps_pinAppToTaskbarWindows_confirmationText: {
      title: "Pinned to Taskbar!",
      note: "Button text after clicking on the Next Steps card for adding DDG app to OS dock"
    },
    nextSteps_subscription_title: {
      title: "Unlock Premium Features",
      note: "Title of the Next Steps card for unlocking your free trial of DuckDuckGo subscription"
    },
    nextSteps_subscription_summary: {
      title: "Get a free trial of our subscription featuring VPN + 3 other advanced features.",
      note: "Summary of the Next Steps card about the DuckDuckGo subscription"
    },
    nextSteps_subscription_actionText: {
      title: "Try for Free",
      note: "Button text of the Next Steps card for trying the DuckDuckGo subscription"
    },
    favorites_show_less: {
      title: "Show less",
      note: "Button label to display fewer items"
    },
    favorites_show_more: {
      title: "Show more ({count} remaining)",
      note: "Button text to show hidden items. {count} will be replaced with the number of remaining favorite items to show, including the parentheses. Example: 'Show more (18 remaining)'"
    },
    favorites_menu_title: {
      title: "Favorites",
      note: "Used as a label in a customization menu"
    },
    favorites_add: {
      title: "Add Favorite",
      note: "A button that allows a user to add a new 'favorite' bookmark to their existing list"
    },
    customizer_image_privacy: {
      title: "Images are stored on your device so DuckDuckGo can\u2019t see or access them.",
      note: "Shown near a button that allows a user to upload an image to be used as a background."
    },
    customizer_drawer_title: {
      title: "Customize",
      note: "Title in a slide-out drawer that contains options for customizing the browser."
    },
    customizer_section_title_background: {
      title: "Background",
      note: "Section title displayed in the UI for customizing the background."
    },
    customizer_section_title_theme: {
      title: "Browser Theme",
      note: "Section title for a section where users can customize the browser theme. (for example, 'light' or 'dark')"
    },
    customizer_section_title_sections: {
      title: "Sections",
      note: "Section title for a list of toggles for showing/hiding certain sections of the page."
    },
    customizer_browser_theme_light: {
      title: "Light",
      note: "The label for a button that sets the browser theme to 'light' mode"
    },
    customizer_browser_theme_dark: {
      title: "Dark",
      note: "The label for a button that sets the browser theme to 'dark' mode"
    },
    customizer_browser_theme_system: {
      title: "System",
      note: "The label for a button that sets the browser theme to 'system', which matches the operating system setting"
    },
    customizer_browser_theme_label: {
      title: "Select {type} theme",
      note: "The label text on a button, for assistive technologies (like screen readers). {type} will be replace with 'light', 'dark' or 'system'"
    },
    customizer_settings_link: {
      title: "Go to Settings",
      note: "The label text on a link that opens the Settings"
    },
    customizer_background_selection_default: {
      title: "Default",
      note: "Label text below a button that selects a 'default' background"
    },
    customizer_background_selection_color: {
      title: "Solid Colors",
      note: "Label text below a button that allows a color background"
    },
    customizer_background_selection_gradient: {
      title: "Gradients",
      note: "Label text below a button that allows a gradient background"
    },
    customizer_background_selection_image_add: {
      title: "Add Background",
      note: "Label text shown on a button that allows an image to be uploaded"
    },
    customizer_background_selection_image_existing: {
      title: "My Backgrounds",
      note: "Label text shown on a button navigates to list of existing background (that the user previously uploaded)"
    },
    customizer_image_select: {
      title: "Select image {number}",
      note: "Label text on a button, for assistive technologies (like screen readers). {number} will be replaced with a numeric reference of 1-8, eg: 'Select image 1'"
    },
    customizer_image_delete: {
      title: "Delete image {number}",
      note: "Label text on a button that deletes an image. {number} will be replaced with a numeric reference of 1-8, eg: 'Delete image 1'"
    },
    activity_noRecent_title: {
      title: "No recent browsing activity",
      note: "Placeholder to indicate that no browsing activity was seen in the last 7 days"
    },
    activity_empty: {
      title: "Recently visited sites will appear here. Keep browsing to see how many trackers we block.",
      note: "Shown in the place a list of browsing history entries will be displayed."
    },
    activity_no_trackers: {
      title: "No trackers found",
      note: "Placeholder message indicating that no trackers are detected"
    },
    activity_no_trackers_blocked: {
      title: "No trackers blocked",
      note: "Placeholder message indicating that no trackers are blocked"
    },
    activity_countBlockedPlural: {
      title: "<b>{count}</b> tracking attempts blocked",
      note: "The main headline indicating that more than 1 attempt has been blocked. Eg: '2 tracking attempts blocked'"
    },
    activity_noRecentAdsAndTrackers_subtitle: {
      title: "Recently visited sites will appear here. Keep browsing to see how many ads and trackers we block.",
      note: "Shown in the place a list of browsing history entries will be displayed."
    },
    activity_no_adsAndTrackers: {
      title: "No ads + tracking attempts found",
      note: "Placeholder message indicating that no ads and trackers are detected"
    },
    activity_no_adsAndTrackers_blocked: {
      title: "No ads + tracking attempts blocked",
      note: "Placeholder message indicating that no ads and trackers are blocked"
    },
    activity_countBlockedAdsAndTrackersPlural: {
      title: "<b>{count}</b> ads + tracking attempts blocked",
      note: "The main headline indicating that more than 1 attempt has been blocked. Eg: '2 ads + tracking attempts blocked'"
    },
    activity_favoriteAdd: {
      title: "Add {domain} to favorites",
      note: "Button label, allows the user to add the specified domain to their favorites"
    },
    activity_favoriteRemove: {
      title: "Remove {domain} from favorites",
      note: "Button label, allows the user to remove the specified domain from their favorites"
    },
    activity_itemRemove: {
      title: "Remove {domain} from history",
      note: "Button label for clearing browsing history for a given domain."
    },
    activity_burn: {
      title: "Clear browsing history and data for {domain}",
      note: "Button label for clearing browsing history and data exclusively for the specified domain"
    },
    activity_menuTitle: {
      title: "Recent Activity",
      note: "Used as a label in a customization menu"
    },
    activity_show_more_history: {
      title: "Show {count} more",
      note: "Button label that expands the list of browsing history with the specified count of additional items. Example: 'Show 5 more'"
    },
    activity_show_less_history: {
      title: "Hide additional",
      note: "Button label that hides the expanded browsing history items."
    }
  };

  // pages/new-tab/app/index.js
  init_widget_config_provider();

  // pages/new-tab/app/settings.js
  var Settings = class _Settings {
    /**
     * @param {object} params
     * @param {{name: 'macos' | 'windows'}} [params.platform]
     * @param {{state: 'enabled' | 'disabled', autoOpen: boolean}} [params.customizerDrawer]
     * @param {{state: 'enabled' | 'disabled'}} [params.adBlocking]
     */
    constructor({
      platform = { name: "macos" },
      customizerDrawer = { state: "enabled", autoOpen: false },
      adBlocking = { state: "disabled" }
    }) {
      this.platform = platform;
      this.customizerDrawer = customizerDrawer;
      this.adBlocking = adBlocking;
    }
    withPlatformName(name2) {
      const valid = ["windows", "macos"];
      if (valid.includes(
        /** @type {any} */
        name2
      )) {
        return new _Settings({
          ...this,
          platform: { name: name2 }
        });
      }
      return this;
    }
    /**
     * @param {keyof import("../types/new-tab.js").NewTabPageSettings} named
     * @param {{state: 'enabled' | 'disabled'} | null | undefined} settings
     * @return {Settings}
     */
    withFeatureState(named, settings) {
      if (!settings) return this;
      const valid = ["customizerDrawer", "adBlocking"];
      if (!valid.includes(named)) {
        console.warn(`Excluding invalid feature key ${named}`);
        return this;
      }
      if (settings.state === "enabled" || settings.state === "disabled") {
        return new _Settings({
          ...this,
          [named]: settings
        });
      }
      return this;
    }
    get batchedActivityApi() {
      if (this.platform.name === "windows") return { state: "enabled" };
      return { state: "disabled" };
    }
  };

  // pages/new-tab/app/components/Components.jsx
  init_preact_module();

  // pages/new-tab/app/components/Components.module.css
  var Components_default = {
    main: "Components_main",
    contentTube: "Components_contentTube",
    componentList: "Components_componentList",
    tubeGrid: "Components_tubeGrid",
    itemInfo: "Components_itemInfo",
    itemLinks: "Components_itemLinks",
    itemLink: "Components_itemLink",
    debugBar: "Components_debugBar",
    buttonRow: "Components_buttonRow",
    "grid-container": "Components_grid-container",
    item: "Components_item"
  };

  // pages/new-tab/app/customizer/components/Customizer.examples.js
  init_preact_module();
  init_utils2();
  init_CustomizerMenu();
  init_signals_module();
  init_Icons2();
  var ROWS = [
    {
      id: "omnibar",
      title: "Search",
      icon: /* @__PURE__ */ _(SearchIcon, null),
      toggle: noop("toggle search"),
      visibility: "visible",
      index: 1,
      enabled: true
    },
    {
      id: "omnibar-toggleAi",
      title: "Duck.ai",
      icon: /* @__PURE__ */ _(ArrowIndentCenteredIcon, { style: { color: "var(--ntp-icons-tertiary)" } }),
      toggle: noop("toggle Duck.ai"),
      visibility: "visible",
      index: 1.1,
      enabled: true
    },
    {
      id: "favorites",
      title: "Favorites",
      icon: /* @__PURE__ */ _(Shield, null),
      toggle: noop("toggle favorites"),
      visibility: "hidden",
      index: 0,
      enabled: true
    },
    {
      id: "privacyStats",
      title: "Privacy Stats",
      icon: /* @__PURE__ */ _(DuckFoot, null),
      toggle: noop("toggle favorites"),
      visibility: "visible",
      index: 1,
      enabled: true
    }
  ];
  var customizerExamples = {
    "customizer.backgroundSection": {
      factory: () => {
        return /* @__PURE__ */ _(Provider, null, ({ data: data2, select }) => {
          return /* @__PURE__ */ _(BackgroundSection, { data: data2, onNav: noop("onNav"), onUpload: noop("onUpload"), select });
        });
      }
    },
    "customizer.colorSelection": {
      factory: () => {
        return /* @__PURE__ */ _(Provider, null, ({ data: data2, select }) => {
          return /* @__PURE__ */ _(ColorSelection, { data: data2, select, back: noop("back") });
        });
      }
    },
    "customizer.gradientSelection": {
      factory: () => {
        return /* @__PURE__ */ _(Provider, null, ({ data: data2, select }) => {
          return /* @__PURE__ */ _(GradientSelection, { data: data2, select, back: noop("back") });
        });
      }
    },
    "customizer.imageSelection": {
      factory: () => {
        return /* @__PURE__ */ _(Provider, null, ({ data: data2, select }) => {
          return /* @__PURE__ */ _(
            ImageSelection,
            {
              data: data2,
              select,
              back: noop("back"),
              onUpload: noop("onUpload"),
              deleteImage: noop("deleteImage"),
              customizerContextMenu: noop("customizerContextMenu")
            }
          );
        });
      }
    },
    "customizer-menu": {
      factory: () => /* @__PURE__ */ _(MaxContent, null, /* @__PURE__ */ _(CustomizerButton, { isOpen: true, kind: "menu" }), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _("div", { style: "width: 206px; border: 1px dotted black" }, /* @__PURE__ */ _(EmbeddedVisibilityMenu, { rows: ROWS })))
    },
    "customizer-menu-disabled-item": {
      factory: () => /* @__PURE__ */ _(MaxContent, null, /* @__PURE__ */ _(CustomizerButton, { isOpen: true, kind: "menu" }), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _("div", { style: "width: 206px; border: 1px dotted black" }, /* @__PURE__ */ _(
        EmbeddedVisibilityMenu,
        {
          rows: ROWS.map((row) => {
            if (row.id === "omnibar") {
              return { ...row, visibility: "hidden" };
            }
            if (row.id === "omnibar-toggleAi") {
              return { ...row, enabled: false, visibility: "hidden" };
            }
            return row;
          })
        }
      )))
    }
  };
  function MaxContent({ children }) {
    return /* @__PURE__ */ _("div", { style: { display: "grid", gridTemplateColumns: "max-content" } }, children);
  }
  function Provider({ children }) {
    const data2 = {
      background: { kind: "hex", value: "#17afa8" },
      theme: "system",
      userImages: [],
      userColor: null
    };
    const dataSignal = useSignal(data2);
    function select(bg) {
      dataSignal.value = { ...dataSignal.value, background: bg };
    }
    function showPicker() {
      console.log("no-op");
    }
    return children({ data: dataSignal, select, showPicker });
  }

  // pages/new-tab/app/favorites/components/Favorites.examples.js
  init_preact_module();

  // pages/new-tab/app/favorites/mocks/favorites.data.js
  var favorites = {
    many: {
      // prettier-ignore
      /** @type {Favorite[]} */
      favorites: [
        { id: "id-many-1", etldPlusOne: "example.com", url: "https://example.com?id=id-many-1", title: "Amazon", favicon: { src: "./company-icons/amazon.svg", maxAvailableSize: 16 } },
        { id: "id-many-2", etldPlusOne: "adform.com", url: "https://adform.com?id=id-many-2", title: "Adform", favicon: null },
        { id: "id-many-3", etldPlusOne: "adobe.com", url: "https://adobe.com?id=id-many-3", title: "Adobe", favicon: { src: "./this-does-note-exist", maxAvailableSize: 16 } },
        { id: "id-many-4", etldPlusOne: "adobe.com", url: "https://b.adobe.com?id=id-many-3", title: "Adobe sub", favicon: { src: "./this-does-note-exist", maxAvailableSize: 16 } },
        { id: "id-many-31", etldPlusOne: "example.com", url: "https://b.example.com?id=id-many-4", title: "A Beautiful Mess", favicon: { src: "./this-does-note-exist", maxAvailableSize: 16 } },
        { id: "id-many-5", etldPlusOne: "google.com", url: "https://mail.google.com?id=id-many-3", title: "Gmail", favicon: null },
        { id: "id-many-6", etldPlusOne: "example.com", url: "https://example.com?id=id-many-5", title: "TikTok", favicon: { src: "./company-icons/bytedance.svg", maxAvailableSize: 16 } },
        { id: "id-many-7", etldPlusOne: "doordash.com", url: "https://doordash.com?id=id-many-6", title: "DoorDash", favicon: null },
        { id: "id-many-8", etldPlusOne: "example.com", url: "https://example.com?id=id-many-7", title: "Facebook", favicon: { src: "./company-icons/facebook.svg", maxAvailableSize: 16 } },
        { id: "id-many-9", etldPlusOne: "example.com", url: "https://example.com?id=id-many-8", title: "Beeswax", favicon: { src: "./company-icons/beeswax.svg", maxAvailableSize: 16 } },
        { id: "id-many-10", etldPlusOne: "example.com", url: "https://example.com?id=id-many-9", title: "Adobe", favicon: { src: "./company-icons/adobe.svg", maxAvailableSize: 16 } },
        { id: "id-many-11", etldPlusOne: "example.com", url: "https://example.com?id=id-many-10", title: "Beeswax", favicon: { src: "./company-icons/beeswax.svg", maxAvailableSize: 16 } },
        { id: "id-many-12", etldPlusOne: "example.com", url: "https://example.com?id=id-many-11", title: "Facebook", favicon: { src: "./company-icons/facebook.svg", maxAvailableSize: 16 } },
        { id: "id-many-13", etldPlusOne: "example.com", url: "https://example.com?id=id-many-12", title: "Gmail", favicon: { src: "./company-icons/google.svg", maxAvailableSize: 64 } },
        { id: "id-many-14", etldPlusOne: "example.com", url: "https://example.com?id=id-many-13", title: "TikTok", favicon: { src: "./company-icons/bytedance.svg", maxAvailableSize: 16 } },
        { id: "id-many-15", etldPlusOne: "example.com", url: "https://example.com?id=id-many-14", title: "yeti", favicon: null }
      ]
    },
    single: {
      /** @type {Favorite[]} */
      favorites: [
        {
          id: "id-single-1",
          url: "https://example.com?id=id-single-1",
          etldPlusOne: "example.com",
          title: "Amazon",
          favicon: { src: "./company-icons/amazon.svg", maxAvailableSize: 32 }
        }
      ]
    },
    none: {
      /** @type {Favorite[]} */
      favorites: []
    },
    missing: {
      /** @type {Favorite[]} */
      favorites: [
        {
          id: "id-missing-1",
          etldPlusOne: "adobe.com",
          url: "https://adobe.com?id=id-many-3",
          title: "Adobe",
          favicon: { src: "./this-does-note-exist", maxAvailableSize: 16 }
        }
      ]
    },
    titles: {
      /** @type {Favorite[]} */
      favorites: [
        {
          id: "id-titles-1",
          url: "https://duckduckgo.com",
          etldPlusOne: "google.com",
          title: "accounts.google.com",
          favicon: null
        }
      ]
    },
    "small-icon": {
      /** @type {Favorite[]} */
      favorites: [
        {
          id: "id-small-icon-1",
          url: "https://duckduckgo.com",
          etldPlusOne: "duckduckgo.com",
          title: "DuckDuckGo",
          favicon: { src: "./icons/favicon@2x.png", maxAvailableSize: 16 }
        }
      ]
    },
    fallbacks: {
      /** @type {Favorite[]} */
      favorites: [
        {
          id: "id-fallbacks-3",
          url: "https://adobe.com?id=id-many-3",
          etldPlusOne: "adobe.com",
          title: "404 favicon.src",
          favicon: { src: "./this-does-note-exist", maxAvailableSize: 16 }
        },
        {
          id: "id-fallbacks-4",
          url: "https://revoked.badssl.com",
          etldPlusOne: "badssl.com",
          title: "missing favicon + subdomain",
          favicon: null
        },
        {
          id: "id-fallbacks-5",
          url: "https://wikipedia.com",
          etldPlusOne: "wikipedia.com",
          title: "missing favicon",
          favicon: null
        },
        {
          id: "id-fallbacks-6",
          url: "https://wikipedia.com",
          etldPlusOne: null,
          title: "missing etld+1",
          favicon: null
        }
      ]
    }
  };
  function gen(count = 1e3) {
    const max = Math.min(count, 1e3);
    const icons = [
      "33across.svg",
      "a.svg",
      "acuityads.svg",
      "adform.svg",
      "adjust.svg",
      "adobe.svg",
      "akamai.svg",
      "amazon.svg",
      "amplitude.svg",
      "appsflyer.svg",
      "automattic.svg",
      "b.svg",
      "beeswax.svg",
      "bidtellect.svg",
      "branch-metrics.svg",
      "braze.svg",
      "bugsnag.svg",
      "bytedance.svg",
      "c.svg",
      "chartbeat.svg",
      "cloudflare.svg",
      "cognitiv.svg",
      "comscore.svg",
      "crimtan-holdings.svg",
      "criteo.svg",
      "d.svg",
      "deepintent.svg",
      "e.svg",
      "exoclick.svg",
      "eyeota.svg",
      "f.svg",
      "facebook.svg",
      "g.svg",
      "google.svg",
      "google-ads.svg",
      "google-analytics.svg",
      "gumgum.svg",
      "h.svg",
      "hotjar.svg",
      "i.svg",
      "id5.svg",
      "improve-digital.svg",
      "index-exchange.svg",
      "inmar.svg",
      "instagram.svg",
      "intent-iq.svg",
      "iponweb.svg",
      "j.svg",
      "k.svg",
      "kargo.svg",
      "kochava.svg",
      "l.svg",
      "line.svg",
      "linkedin.svg",
      "liveintent.svg",
      "liveramp.svg",
      "loopme-ltd.svg",
      "lotame-solutions.svg",
      "m.svg",
      "magnite.svg",
      "mediamath.svg",
      "medianet-advertising.svg",
      "mediavine.svg",
      "merkle.svg",
      "microsoft.svg",
      "mixpanel.svg",
      "n.svg",
      "narrative.svg",
      "nativo.svg",
      "neustar.svg",
      "new-relic.svg",
      "o.svg",
      "onetrust.svg",
      "openjs-foundation.svg",
      "openx.svg",
      "opera-software.svg",
      "oracle.svg",
      "other.svg",
      "outbrain.svg",
      "p.svg",
      "pinterest.svg",
      "prospect-one.svg",
      "pubmatic.svg",
      "pulsepoint.svg",
      "q.svg",
      "quantcast.svg",
      "r.svg",
      "rhythmone.svg",
      "roku.svg",
      "rtb-house.svg",
      "rubicon.svg",
      "s.svg",
      "salesforce.svg",
      "semasio.svg",
      "sharethrough.svg",
      "simplifi-holdings.svg",
      "smaato.svg",
      "snap.svg",
      "sonobi.svg",
      "sovrn-holdings.svg",
      "spotx.svg",
      "supership.svg",
      "synacor.svg",
      "t.svg",
      "taboola.svg",
      "tapad.svg",
      "teads.svg",
      "the-nielsen-company.svg",
      "the-trade-desk.svg",
      "triplelift.svg",
      "twitter.svg",
      "u.svg",
      "unruly-group.svg",
      "urban-airship.svg",
      "v.svg",
      "verizon-media.svg",
      "w.svg",
      "warnermedia.svg",
      "wpp.svg",
      "x.svg",
      "xaxis.svg",
      "y.svg",
      "yahoo-japan.svg",
      "yandex.svg",
      "yieldmo.svg",
      "youtube.svg",
      "z.svg",
      "zeotap.svg",
      "zeta-global.svg"
    ];
    return {
      favorites: Array.from({ length: max }).map((_5, index2) => {
        const randomFavicon = icons[index2];
        const joined = `./company-icons/${randomFavicon}`;
        const alpha = "abcdefghijklmnopqrstuvwxyz";
        const out = {
          id: `id-many-${index2}`,
          url: `https://${alpha[index2 % 7]}.example.com?id=${index2}`,
          etldPlusOne: `example.com`,
          title: `Example ${index2 + 1}`,
          favicon: { src: joined, maxAvailableSize: 64 }
        };
        return out;
      })
    };
  }

  // pages/new-tab/app/favorites/mocks/MockFavoritesProvider.js
  init_preact_module();
  init_FavoritesProvider();
  init_hooks_module();
  init_EnvironmentProvider();
  init_service_hooks();
  var DEFAULT_CONFIG = {
    expansion: "expanded"
  };
  function MockFavoritesProvider({ data: data2 = favorites.many, config = DEFAULT_CONFIG, children }) {
    const { isReducedMotion } = useEnv();
    const initial = (
      /** @type {State} */
      {
        status: "ready",
        data: data2,
        config
      }
    );
    const [et] = d2(() => new EventTarget());
    const [state, dispatch] = h2(reducer, initial);
    const toggle = q2(() => {
      if (state.status !== "ready") return;
      const next = state.config.expansion === "expanded" ? (
        /** @type {const} */
        { ...state.config, expansion: "collapsed" }
      ) : (
        /** @type {const} */
        { ...state.config, expansion: "expanded" }
      );
      dispatch({ kind: "config", config: next });
      et.dispatchEvent(new CustomEvent("state-update", { detail: next }));
    }, [state.status, state.config?.expansion, isReducedMotion]);
    const favoritesDidReOrder = q2(({ list: list2 }) => {
      dispatch({ kind: "data", data: { favorites: list2 } });
    }, []);
    const openContextMenu = (...args) => {
      console.log("noop openContextMenu", ...args);
    };
    const openFavorite = (...args) => {
      console.log("noop openFavorite", ...args);
    };
    const add2 = (...args) => {
      console.log("noop add", ...args);
    };
    const onConfigChanged = q2(
      (cb) => {
        et.addEventListener("state-update", (e4) => {
          cb(e4.detail);
        });
      },
      [et]
    );
    return /* @__PURE__ */ _(FavoritesContext.Provider, { value: { state, toggle, favoritesDidReOrder, openContextMenu, openFavorite, add: add2, onConfigChanged } }, /* @__PURE__ */ _(FavoritesDispatchContext.Provider, { value: dispatch }, children));
  }

  // pages/new-tab/app/favorites/components/Favorites.examples.js
  init_FavoritesCustomized();
  var favoritesExamples = {
    "favorites.dnd": {
      factory: () => /* @__PURE__ */ _(MockFavoritesProvider, { data: favorites.many }, /* @__PURE__ */ _(FavoritesConsumer, null))
    },
    "favorites.few.7": {
      factory: () => /* @__PURE__ */ _(MockFavoritesProvider, { data: { favorites: favorites.many.favorites.slice(0, 7) } }, /* @__PURE__ */ _(FavoritesConsumer, null))
    },
    "favorites.few.7.no-animation": {
      factory: () => /* @__PURE__ */ _(
        MockFavoritesProvider,
        {
          data: { favorites: favorites.many.favorites.slice(0, 7) },
          config: { expansion: "expanded", animation: { kind: "none" } }
        },
        /* @__PURE__ */ _(FavoritesConsumer, null)
      )
    },
    "favorites.few.6": {
      factory: () => /* @__PURE__ */ _(MockFavoritesProvider, { data: { favorites: favorites.many.favorites.slice(0, 6) } }, /* @__PURE__ */ _(FavoritesConsumer, null))
    },
    "favorites.few.12": {
      factory: () => /* @__PURE__ */ _(MockFavoritesProvider, { data: { favorites: favorites.many.favorites.slice(0, 12) } }, /* @__PURE__ */ _(FavoritesConsumer, null))
    },
    "favorites.multi": {
      factory: () => /* @__PURE__ */ _("div", null, /* @__PURE__ */ _(MockFavoritesProvider, { data: favorites.many }, /* @__PURE__ */ _(FavoritesConsumer, null)), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _(MockFavoritesProvider, { data: favorites.single }, /* @__PURE__ */ _(FavoritesConsumer, null)), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _(MockFavoritesProvider, { data: favorites.none }, /* @__PURE__ */ _(FavoritesConsumer, null)))
    },
    "favorites.single": {
      factory: () => /* @__PURE__ */ _(MockFavoritesProvider, { data: favorites.single }, /* @__PURE__ */ _(FavoritesConsumer, null))
    },
    "favorites.none": {
      factory: () => /* @__PURE__ */ _(MockFavoritesProvider, { data: favorites.none }, /* @__PURE__ */ _(FavoritesConsumer, null))
    }
  };

  // pages/new-tab/app/freemium-pir-banner/components/FreemiumPIRBanner.examples.js
  init_preact_module();
  init_utils2();
  init_FreemiumPIRBanner2();

  // pages/new-tab/app/freemium-pir-banner/mocks/freemiumPIRBanner.data.js
  var freemiumPIRDataExamples = {
    onboarding: {
      content: {
        messageType: "big_single_action",
        id: "onboarding",
        titleText: "Personal Information Removal",
        descriptionText: "Find out which sites are selling **your info**.",
        actionText: "Free Scan"
      }
    },
    scan_results: {
      content: {
        messageType: "big_single_action",
        id: "scan_results",
        titleText: null,
        descriptionText: "Your free personal information scan found 19 records about you on 3 different sites",
        actionText: "View Results"
      }
    }
  };

  // pages/new-tab/app/freemium-pir-banner/components/FreemiumPIRBanner.examples.js
  var freemiumPIRBannerExamples = {
    "freemiumPIR.onboarding": {
      factory: () => /* @__PURE__ */ _(
        FreemiumPIRBanner,
        {
          message: freemiumPIRDataExamples.onboarding.content,
          dismiss: noop("freemiumPIRBanner_dismiss"),
          action: noop("freemiumPIRBanner_action")
        }
      )
    },
    "freemiumPIR.scan_results": {
      factory: () => /* @__PURE__ */ _(
        FreemiumPIRBanner,
        {
          message: freemiumPIRDataExamples.scan_results.content,
          dismiss: noop("freemiumPIRBanner_dismiss"),
          action: noop("freemiumPIRBanner_action")
        }
      )
    }
  };

  // pages/new-tab/app/next-steps/components/NextSteps.examples.js
  init_preact_module();
  init_utils2();
  init_NextStepsCard();
  init_NextStepsGroup();
  var nextStepsExamples = {
    "next-steps.cardGroup.all": {
      factory: () => /* @__PURE__ */ _(
        NextStepsCardGroup,
        {
          types: [
            "bringStuff",
            "defaultApp",
            "blockCookies",
            "emailProtection",
            "duckplayer",
            "addAppToDockMac",
            "pinAppToTaskbarWindows"
          ],
          expansion: "collapsed",
          toggle: noop("toggle"),
          dismiss: noop("dismiss"),
          action: noop("action")
        }
      )
    },
    "next-steps.cardGroup.all-expanded": {
      factory: () => /* @__PURE__ */ _(
        NextStepsCardGroup,
        {
          types: [
            "bringStuff",
            "defaultApp",
            "blockCookies",
            "emailProtection",
            "duckplayer",
            "addAppToDockMac",
            "pinAppToTaskbarWindows"
          ],
          expansion: "expanded",
          toggle: noop("toggle"),
          dismiss: noop("dismiss"),
          action: noop("action")
        }
      )
    },
    "next-steps.cardGroup.two": {
      factory: () => /* @__PURE__ */ _(
        NextStepsCardGroup,
        {
          types: ["bringStuff", "defaultApp"],
          expansion: "collapsed",
          toggle: noop("toggle"),
          dismiss: noop("dismiss"),
          action: noop("action")
        }
      )
    },
    "next-steps.cardGroup.one": {
      factory: () => /* @__PURE__ */ _(
        NextStepsCardGroup,
        {
          types: ["bringStuff"],
          expansion: "collapsed",
          toggle: noop("toggle"),
          dismiss: noop("dismiss"),
          action: noop("action")
        }
      )
    }
  };
  var otherNextStepsExamples = {
    "next-steps.bringStuff": {
      factory: () => /* @__PURE__ */ _(NextStepsCard, { type: "bringStuff", dismiss: noop("dismiss"), action: noop("action") })
    },
    "next-steps.duckplayer": {
      factory: () => /* @__PURE__ */ _(NextStepsCard, { type: "duckplayer", dismiss: noop("dismiss"), action: noop("action") })
    },
    "next-steps.defaultApp": {
      factory: () => /* @__PURE__ */ _(NextStepsCard, { type: "defaultApp", dismiss: noop("dismiss"), action: noop("action") })
    },
    "next-steps.emailProtection": {
      factory: () => /* @__PURE__ */ _(NextStepsCard, { type: "emailProtection", dismiss: noop("dismiss"), action: noop("action") })
    },
    "next-steps.blockCookies": {
      factory: () => /* @__PURE__ */ _(NextStepsCard, { type: "blockCookies", dismiss: noop("dismiss"), action: noop("action") })
    },
    "next-steps.addAppToDockMac": {
      factory: () => /* @__PURE__ */ _(NextStepsCard, { type: "addAppToDockMac", dismiss: noop("dismiss"), action: noop("action") })
    },
    "next-steps.pinToTaskbarWindows": {
      factory: () => /* @__PURE__ */ _(NextStepsCard, { type: "pinAppToTaskbarWindows", dismiss: noop("dismiss"), action: noop("action") })
    },
    "next-steps.bubble": {
      factory: () => /* @__PURE__ */ _(NextStepsBubbleHeader, null)
    }
  };

  // pages/new-tab/app/privacy-stats/components/PrivacyStats.examples.js
  init_preact_module();

  // pages/new-tab/app/privacy-stats/mocks/PrivacyStatsMockProvider.js
  init_hooks_module();
  init_preact_module();
  init_PrivacyStatsProvider();

  // pages/new-tab/app/privacy-stats/mocks/privacy-stats.mocks.js
  init_constants2();
  var privacyStatsMocks = {
    few: {
      trackerCompanies: [
        {
          displayName: "Facebook",
          count: 310
        },
        {
          displayName: "Google",
          count: 279
        },
        {
          displayName: DDG_STATS_OTHER_COMPANY_IDENTIFIER,
          count: 2100
        },
        {
          displayName: "Amazon.com",
          count: 67
        },
        {
          displayName: "Google Ads",
          count: 2
        }
      ]
    },
    single: {
      trackerCompanies: [
        {
          displayName: "Google",
          count: 1
        }
      ]
    },
    norecent: {
      trackerCompanies: []
    },
    none: {
      trackerCompanies: []
    },
    onlyother: {
      trackerCompanies: [
        {
          displayName: DDG_STATS_OTHER_COMPANY_IDENTIFIER,
          count: 2
        }
      ]
    },
    manyOnlyTop: {
      trackerCompanies: [
        {
          displayName: "Facebook",
          count: 310
        },
        {
          displayName: "Google",
          count: 279
        },
        {
          displayName: "Amazon.com",
          count: 67
        },
        {
          displayName: "Google Ads",
          count: 2
        },
        {
          displayName: "Twitter",
          count: 2
        },
        {
          displayName: "Yandex",
          count: 2
        }
      ]
    },
    fewOnlyTop: {
      trackerCompanies: [
        {
          displayName: "Facebook",
          count: 310
        },
        {
          displayName: "Google",
          count: 279
        },
        {
          displayName: "Amazon.com",
          count: 67
        }
      ]
    },
    topAndOneOther: {
      trackerCompanies: [
        {
          displayName: "Facebook",
          count: 310
        },
        {
          displayName: "Google",
          count: 279
        },
        {
          displayName: "Amazon.com",
          count: 67
        },
        {
          displayName: "Google Ads",
          count: 2
        },
        {
          displayName: "Twitter",
          count: 2
        },
        {
          displayName: DDG_STATS_OTHER_COMPANY_IDENTIFIER,
          count: 2
        }
      ]
    },
    manyTopAndOther: {
      trackerCompanies: [
        {
          displayName: "Facebook",
          count: 310
        },
        {
          displayName: "Google",
          count: 279
        },
        {
          displayName: "Amazon.com",
          count: 67
        },
        {
          displayName: "Google Ads",
          count: 2
        },
        {
          displayName: "Twitter",
          count: 2
        },
        {
          displayName: "Yandex",
          count: 2
        },
        {
          displayName: DDG_STATS_OTHER_COMPANY_IDENTIFIER,
          count: 2
        }
      ]
    },
    many: {
      trackerCompanies: [
        { displayName: "Google", count: 153 },
        { displayName: "Microsoft", count: 69 },
        { displayName: "Cloudflare", count: 65 },
        { displayName: "Facebook", count: 61 },
        { displayName: "ByteDance", count: 58 },
        { displayName: "Adobe", count: 38 },
        { displayName: "Magnite", count: 12 },
        { displayName: "PubMatic", count: 10 },
        { displayName: "Index Exchange", count: 10 },
        { displayName: "OpenX", count: 10 },
        { displayName: "Taboola", count: 9 },
        { displayName: "comScore", count: 9 },
        { displayName: "Akamai", count: 8 },
        { displayName: "LiveIntent", count: 7 },
        { displayName: "Criteo", count: 6 },
        { displayName: "Verizon Media", count: 6 },
        { displayName: "TripleLift", count: 5 },
        { displayName: "YieldMo", count: 4 },
        { displayName: "Neustar", count: 4 },
        { displayName: "Oracle", count: 4 },
        { displayName: "WPP", count: 3 },
        { displayName: "Adform", count: 3 },
        { displayName: "The Nielsen Company", count: 3 },
        { displayName: "IPONWEB", count: 3 },
        { displayName: "Kargo", count: 2 },
        { displayName: "__other__", count: 143 },
        { displayName: "Sharethrough", count: 2 },
        { displayName: "GumGum", count: 2 },
        { displayName: "Media.net Advertising", count: 2 },
        { displayName: "Amobee", count: 2 },
        { displayName: "Improve Digital", count: 1 },
        { displayName: "Smartadserver", count: 1 },
        { displayName: "LoopMe", count: 1 },
        { displayName: "Hotjar", count: 1 },
        { displayName: "Amazon.com", count: 1 },
        { displayName: "RTB House", count: 1 },
        { displayName: "Sovrn Holdings", count: 1 },
        { displayName: "Outbrain", count: 1 },
        { displayName: "Conversant", count: 1 },
        { displayName: "The Trade Desk", count: 1 },
        { displayName: "RhythmOne", count: 1 },
        { displayName: "Sonobi", count: 1 },
        { displayName: "New Relic", count: 1 }
      ]
    }
  };

  // pages/new-tab/app/privacy-stats/mocks/PrivacyStatsMockProvider.js
  init_service_hooks();
  init_BodyExpansionProvider();
  function PrivacyStatsMockProvider({ data: data2 = privacyStatsMocks.few, ticker = false, children }) {
    const initial = (
      /** @type {import('../components/PrivacyStatsProvider.js').State} */
      {
        status: "ready",
        data: data2,
        config: null
      }
    );
    const [state, send] = h2(reducer, initial);
    y2(() => {
      if (!ticker) return;
      if (state.status === "ready") {
        const next = {
          trackerCompanies: state.data.trackerCompanies.map((company, index2) => {
            if (index2 === 0) return { ...company, count: company.count + 1 };
            return company;
          })
        };
        const time2 = setTimeout(() => {
          send({ kind: "data", data: next });
        }, 1e3);
        return () => clearTimeout(time2);
      }
      return () => {
      };
    }, [ticker]);
    return /* @__PURE__ */ _(PrivacyStatsContext.Provider, { value: { state } }, /* @__PURE__ */ _(PrivacyStatsDispatchContext.Provider, { value: send }, /* @__PURE__ */ _(BodyExpansionMockProvider, null, children)));
  }
  function BodyExpansionMockProvider({ children, bodyExpansion = "collapsed" }) {
    const [bodyExpansionState, setBodyExpansion] = d2(bodyExpansion);
    const showMore = q2(() => {
      setBodyExpansion("expanded");
    }, []);
    const showLess = q2(() => {
      setBodyExpansion("collapsed");
    }, []);
    return /* @__PURE__ */ _(BodyExpansionContext.Provider, { value: bodyExpansionState }, /* @__PURE__ */ _(BodyExpansionApiContext.Provider, { value: { showMore, showLess } }, children));
  }

  // pages/new-tab/app/privacy-stats/components/PrivacyStats.examples.js
  init_PrivacyStats2();
  init_PrivacyStatsConsumer();
  var privacyStatsExamples = {
    "stats.few": {
      factory: () => /* @__PURE__ */ _(PrivacyStatsMockProvider, { ticker: true }, /* @__PURE__ */ _(PrivacyStatsConsumer, null))
    },
    "stats.few.collapsed": {
      factory: () => /* @__PURE__ */ _(PrivacyStatsMockProvider, null, /* @__PURE__ */ _(PrivacyStatsConsumer, null))
    },
    "stats.single": {
      factory: () => /* @__PURE__ */ _(PrivacyStatsMockProvider, { data: privacyStatsMocks.single }, /* @__PURE__ */ _(PrivacyStatsConsumer, null))
    },
    "stats.none": {
      factory: () => /* @__PURE__ */ _(PrivacyStatsMockProvider, { data: privacyStatsMocks.none }, /* @__PURE__ */ _(PrivacyStatsConsumer, null))
    },
    "stats.norecent": {
      factory: () => /* @__PURE__ */ _(PrivacyStatsMockProvider, { data: privacyStatsMocks.norecent }, /* @__PURE__ */ _(PrivacyStatsConsumer, null))
    },
    "stats.list": {
      factory: () => /* @__PURE__ */ _(PrivacyStats, { trackerCompanies: privacyStatsMocks.few.trackerCompanies, expansion: "expanded" })
    },
    "stats.footer": {
      factory: () => {
        const data2 = privacyStatsMocks.manyTopAndOther.trackerCompanies;
        return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("h2", null, "Collapsed"), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _(BodyExpansionMockProvider, { bodyExpansion: "collapsed" }, /* @__PURE__ */ _(ListFooter, { all: data2 })), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _("h2", null, "Expanded"), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _(BodyExpansionMockProvider, { bodyExpansion: "expanded" }, /* @__PURE__ */ _(ListFooter, { all: data2 })));
      }
    }
  };
  var otherPrivacyStatsExamples = {
    "stats.all": {
      factory: () => {
        const names2 = Object.keys(privacyStatsMocks);
        return /* @__PURE__ */ _(k, null, names2.map((key2) => {
          return /* @__PURE__ */ _(k, { key: key2 }, /* @__PURE__ */ _("h2", null, key2), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _(PrivacyStatsMockProvider, { data: privacyStatsMocks[key2] }, /* @__PURE__ */ _(PrivacyStatsConsumer, null)));
        }));
      }
    },
    "stats.manyTopAndOther": {
      factory: () => /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("h2", null, "manyOnlyTop"), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _(PrivacyStatsMockProvider, { data: privacyStatsMocks.manyTopAndOther }, /* @__PURE__ */ _(PrivacyStatsConsumer, null)), /* @__PURE__ */ _("h2", null, "manyOnlyTop + body expanded"), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _(PrivacyStatsMockProvider, { data: privacyStatsMocks.manyTopAndOther, bodyExpansion: "expanded" }, /* @__PURE__ */ _(PrivacyStatsConsumer, null)))
    }
  };

  // pages/new-tab/app/remote-messaging-framework/components/RMF.examples.js
  init_preact_module();
  init_utils2();
  init_RemoteMessagingFramework2();

  // pages/new-tab/app/remote-messaging-framework/mocks/rmf.data.js
  var rmfDataExamples = {
    small: {
      content: {
        messageType: "small",
        id: "id-small",
        titleText: "Search services limited",
        descriptionText: "Search services are impacted by a Bing outage, results may not be what you expect"
      }
    },
    medium: {
      content: {
        messageType: "medium",
        id: "id-2",
        icon: "DDGAnnounce",
        titleText: "New Search Feature!",
        descriptionText: "DuckDuckGo now offers Instant Answers for quicker access to the information you need."
      }
    },
    big_single_action: {
      content: {
        messageType: "big_single_action",
        id: "id-big-single",
        titleText: "New! Advanced AI for Subscribers",
        descriptionText: "Your subscription now includes access to more advanced models in Duck.ai, our private AI chat service. Always optional. No extra cost.",
        icon: "DuckAi",
        primaryActionText: "Try Duck.ai"
      }
    },
    big_two_action: {
      content: {
        messageType: "big_two_action",
        id: "id-big-two",
        titleText: "Tell Us Your Thoughts on Privacy Pro",
        descriptionText: "Take our short anonymous survey and share your feedback.",
        icon: "Announce",
        primaryActionText: "Take Survey",
        secondaryActionText: "Remind me"
      }
    },
    big_two_action_overflow: {
      content: {
        id: "big-two-overflow",
        messageType: "big_two_action",
        icon: "CriticalUpdate",
        titleText: "Windows Update Recommended",
        descriptionText: "Support for Windows 10 is ending soon. Update to Windows 11 or newer before July 8, 2024, to keep getting the latest browser updates and improvements.",
        primaryActionText: "How to update Windows",
        secondaryActionText: "Remind me later, but only if I\u2019m actually going to update soon"
      }
    }
  };

  // pages/new-tab/app/remote-messaging-framework/components/RMF.examples.js
  var RMFExamples = {
    "rmf.small": {
      factory: () => /* @__PURE__ */ _(RemoteMessagingFramework, { message: rmfDataExamples.small.content, dismiss: noop("rmf_dismiss") })
    },
    "rmf.medium": {
      factory: () => /* @__PURE__ */ _(RemoteMessagingFramework, { message: rmfDataExamples.medium.content, dismiss: noop("rmf_dismiss") })
    },
    "rmf.big-single-action": {
      factory: () => /* @__PURE__ */ _(
        RemoteMessagingFramework,
        {
          message: rmfDataExamples.big_single_action.content,
          primaryAction: noop("rmf_primaryAction"),
          dismiss: noop("rmf_dismiss")
        }
      )
    },
    "rmf.big-two-action": {
      factory: () => /* @__PURE__ */ _(
        RemoteMessagingFramework,
        {
          message: rmfDataExamples.big_two_action.content,
          primaryAction: noop("rmf_primaryAction"),
          secondaryAction: noop("rmf_secondaryAction"),
          dismiss: noop("rmf_dismiss")
        }
      )
    }
  };
  var otherRMFExamples = {
    "rmf.big-two-action-overflow": {
      factory: () => /* @__PURE__ */ _(
        RemoteMessagingFramework,
        {
          message: rmfDataExamples.big_two_action_overflow.content,
          primaryAction: noop("rmf_primaryAction"),
          secondaryAction: noop("rmf_secondaryAction"),
          dismiss: noop("rmf_dismiss")
        }
      )
    }
  };

  // pages/new-tab/app/update-notification/components/UpdateNotification.examples.js
  init_preact_module();
  init_UpdateNotification2();
  init_utils2();
  var updateNotificationExamples = {
    "updateNotification.empty": {
      factory: () => {
        return /* @__PURE__ */ _(UpdateNotification, { notes: [], version: "1.2.3", dismiss: noop("dismiss!") });
      }
    },
    "updateNotification.populated": {
      factory: () => {
        return /* @__PURE__ */ _(UpdateNotification, { notes: ["Bug Fixed and Updates"], version: "1.2.3", dismiss: noop("dismiss!") });
      }
    }
  };

  // pages/new-tab/app/activity/components/Activity.examples.js
  init_preact_module();
  init_Activity2();
  init_signals_module();

  // ../messaging/lib/windows.js
  var WindowsMessagingTransport = class {
    /**
     * @param {WindowsMessagingConfig} config
     * @param {import('../index.js').MessagingContext} messagingContext
     * @internal
     */
    constructor(config, messagingContext) {
      this.messagingContext = messagingContext;
      this.config = config;
      this.globals = {
        window,
        JSONparse: window.JSON.parse,
        JSONstringify: window.JSON.stringify,
        Promise: window.Promise,
        Error: window.Error,
        String: window.String
      };
      for (const [methodName, fn2] of Object.entries(this.config.methods)) {
        if (typeof fn2 !== "function") {
          throw new Error("cannot create WindowsMessagingTransport, missing the method: " + methodName);
        }
      }
    }
    /**
     * @param {import('../index.js').NotificationMessage} msg
     */
    notify(msg) {
      const data2 = this.globals.JSONparse(this.globals.JSONstringify(msg.params || {}));
      const notification = WindowsNotification.fromNotification(msg, data2);
      this.config.methods.postMessage(notification);
    }
    /**
     * @param {import('../index.js').RequestMessage} msg
     * @param {{signal?: AbortSignal}} opts
     * @return {Promise<any>}
     */
    request(msg, opts = {}) {
      const data2 = this.globals.JSONparse(this.globals.JSONstringify(msg.params || {}));
      const outgoing = WindowsRequestMessage.fromRequest(msg, data2);
      this.config.methods.postMessage(outgoing);
      const comparator = (eventData) => {
        return eventData.featureName === msg.featureName && eventData.context === msg.context && eventData.id === msg.id;
      };
      function isMessageResponse(data3) {
        if ("result" in data3) return true;
        if ("error" in data3) return true;
        return false;
      }
      return new this.globals.Promise((resolve, reject) => {
        try {
          this._subscribe(comparator, opts, (value2, unsubscribe) => {
            unsubscribe();
            if (!isMessageResponse(value2)) {
              console.warn("unknown response type", value2);
              return reject(new this.globals.Error("unknown response"));
            }
            if (value2.result) {
              return resolve(value2.result);
            }
            const message = this.globals.String(value2.error?.message || "unknown error");
            reject(new this.globals.Error(message));
          });
        } catch (e4) {
          reject(e4);
        }
      });
    }
    /**
     * @param {import('../index.js').Subscription} msg
     * @param {(value: unknown | undefined) => void} callback
     */
    subscribe(msg, callback) {
      const comparator = (eventData) => {
        return eventData.featureName === msg.featureName && eventData.context === msg.context && eventData.subscriptionName === msg.subscriptionName;
      };
      const cb = (eventData) => {
        return callback(eventData.params);
      };
      return this._subscribe(comparator, {}, cb);
    }
    /**
     * @typedef {import('../index.js').MessageResponse | import('../index.js').SubscriptionEvent} Incoming
     */
    /**
     * @param {(eventData: any) => boolean} comparator
     * @param {{signal?: AbortSignal}} options
     * @param {(value: Incoming, unsubscribe: (()=>void)) => void} callback
     * @internal
     */
    _subscribe(comparator, options, callback) {
      if (options?.signal?.aborted) {
        throw new DOMException("Aborted", "AbortError");
      }
      let teardown;
      const idHandler = (event) => {
        if (this.messagingContext.env === "production") {
          if (event.origin !== null && event.origin !== void 0) {
            console.warn("ignoring because evt.origin is not `null` or `undefined`");
            return;
          }
        }
        if (!event.data) {
          console.warn("data absent from message");
          return;
        }
        if (comparator(event.data)) {
          if (!teardown) throw new Error("unreachable");
          callback(event.data, teardown);
        }
      };
      const abortHandler = () => {
        teardown?.();
        throw new DOMException("Aborted", "AbortError");
      };
      this.config.methods.addEventListener("message", idHandler);
      options?.signal?.addEventListener("abort", abortHandler);
      teardown = () => {
        this.config.methods.removeEventListener("message", idHandler);
        options?.signal?.removeEventListener("abort", abortHandler);
      };
      return () => {
        teardown?.();
      };
    }
  };
  var WindowsMessagingConfig = class {
    /**
     * @param {object} params
     * @param {WindowsInteropMethods} params.methods
     * @internal
     */
    constructor(params) {
      this.methods = params.methods;
      this.platform = "windows";
    }
  };
  var WindowsNotification = class {
    /**
     * @param {object} params
     * @param {string} params.Feature
     * @param {string} params.SubFeatureName
     * @param {string} params.Name
     * @param {Record<string, any>} [params.Data]
     * @internal
     */
    constructor(params) {
      this.Feature = params.Feature;
      this.SubFeatureName = params.SubFeatureName;
      this.Name = params.Name;
      this.Data = params.Data;
    }
    /**
     * Helper to convert a {@link NotificationMessage} to a format that Windows can support
     * @param {NotificationMessage} notification
     * @returns {WindowsNotification}
     */
    static fromNotification(notification, data2) {
      const output = {
        Data: data2,
        Feature: notification.context,
        SubFeatureName: notification.featureName,
        Name: notification.method
      };
      return output;
    }
  };
  var WindowsRequestMessage = class {
    /**
     * @param {object} params
     * @param {string} params.Feature
     * @param {string} params.SubFeatureName
     * @param {string} params.Name
     * @param {Record<string, any>} [params.Data]
     * @param {string} [params.Id]
     * @internal
     */
    constructor(params) {
      this.Feature = params.Feature;
      this.SubFeatureName = params.SubFeatureName;
      this.Name = params.Name;
      this.Data = params.Data;
      this.Id = params.Id;
    }
    /**
     * Helper to convert a {@link RequestMessage} to a format that Windows can support
     * @param {RequestMessage} msg
     * @param {Record<string, any>} data
     * @returns {WindowsRequestMessage}
     */
    static fromRequest(msg, data2) {
      const output = {
        Data: data2,
        Feature: msg.context,
        SubFeatureName: msg.featureName,
        Name: msg.method,
        Id: msg.id
      };
      return output;
    }
  };

  // ../messaging/schema.js
  var RequestMessage = class {
    /**
     * @param {object} params
     * @param {string} params.context
     * @param {string} params.featureName
     * @param {string} params.method
     * @param {string} params.id
     * @param {Record<string, any>} [params.params]
     * @internal
     */
    constructor(params) {
      this.context = params.context;
      this.featureName = params.featureName;
      this.method = params.method;
      this.id = params.id;
      this.params = params.params;
    }
  };
  var NotificationMessage = class {
    /**
     * @param {object} params
     * @param {string} params.context
     * @param {string} params.featureName
     * @param {string} params.method
     * @param {Record<string, any>} [params.params]
     * @internal
     */
    constructor(params) {
      this.context = params.context;
      this.featureName = params.featureName;
      this.method = params.method;
      this.params = params.params;
    }
  };
  var Subscription = class {
    /**
     * @param {object} params
     * @param {string} params.context
     * @param {string} params.featureName
     * @param {string} params.subscriptionName
     * @internal
     */
    constructor(params) {
      this.context = params.context;
      this.featureName = params.featureName;
      this.subscriptionName = params.subscriptionName;
    }
  };
  function isResponseFor(request, data2) {
    if ("result" in data2) {
      return data2.featureName === request.featureName && data2.context === request.context && data2.id === request.id;
    }
    if ("error" in data2) {
      if ("message" in data2.error) {
        return true;
      }
    }
    return false;
  }
  function isSubscriptionEventFor(sub2, data2) {
    if ("subscriptionName" in data2) {
      return data2.featureName === sub2.featureName && data2.context === sub2.context && data2.subscriptionName === sub2.subscriptionName;
    }
    return false;
  }

  // ../messaging/lib/webkit.js
  var WebkitMessagingTransport = class {
    /**
     * @param {WebkitMessagingConfig} config
     * @param {import('../index.js').MessagingContext} messagingContext
     */
    constructor(config, messagingContext) {
      this.messagingContext = messagingContext;
      this.config = config;
      this.globals = captureGlobals();
      if (!this.config.hasModernWebkitAPI) {
        this.captureWebkitHandlers(this.config.webkitMessageHandlerNames);
      }
    }
    /**
     * Sends message to the webkit layer (fire and forget)
     * @param {String} handler
     * @param {*} data
     * @internal
     */
    wkSend(handler, data2 = {}) {
      if (!(handler in this.globals.window.webkit.messageHandlers)) {
        throw new MissingHandler(`Missing webkit handler: '${handler}'`, handler);
      }
      if (!this.config.hasModernWebkitAPI) {
        const outgoing = {
          ...data2,
          messageHandling: {
            ...data2.messageHandling,
            secret: this.config.secret
          }
        };
        if (!(handler in this.globals.capturedWebkitHandlers)) {
          throw new MissingHandler(`cannot continue, method ${handler} not captured on macos < 11`, handler);
        } else {
          return this.globals.capturedWebkitHandlers[handler](outgoing);
        }
      }
      return this.globals.window.webkit.messageHandlers[handler].postMessage?.(data2);
    }
    /**
     * Sends message to the webkit layer and waits for the specified response
     * @param {String} handler
     * @param {import('../index.js').RequestMessage} data
     * @returns {Promise<*>}
     * @internal
     */
    async wkSendAndWait(handler, data2) {
      if (this.config.hasModernWebkitAPI) {
        const response = await this.wkSend(handler, data2);
        return this.globals.JSONparse(response || "{}");
      }
      try {
        const randMethodName = this.createRandMethodName();
        const key2 = await this.createRandKey();
        const iv = this.createRandIv();
        const { ciphertext, tag } = await new this.globals.Promise((resolve) => {
          this.generateRandomMethod(randMethodName, resolve);
          data2.messageHandling = new SecureMessagingParams({
            methodName: randMethodName,
            secret: this.config.secret,
            key: this.globals.Arrayfrom(key2),
            iv: this.globals.Arrayfrom(iv)
          });
          this.wkSend(handler, data2);
        });
        const cipher = new this.globals.Uint8Array([...ciphertext, ...tag]);
        const decrypted = await this.decrypt(cipher, key2, iv);
        return this.globals.JSONparse(decrypted || "{}");
      } catch (e4) {
        if (e4 instanceof MissingHandler) {
          throw e4;
        } else {
          console.error("decryption failed", e4);
          console.error(e4);
          return { error: e4 };
        }
      }
    }
    /**
     * @param {import('../index.js').NotificationMessage} msg
     */
    notify(msg) {
      this.wkSend(msg.context, msg);
    }
    /**
     * @param {import('../index.js').RequestMessage} msg
     */
    async request(msg) {
      const data2 = await this.wkSendAndWait(msg.context, msg);
      if (isResponseFor(msg, data2)) {
        if (data2.result) {
          return data2.result || {};
        }
        if (data2.error) {
          throw new Error(data2.error.message);
        }
      }
      throw new Error("an unknown error occurred");
    }
    /**
     * Generate a random method name and adds it to the global scope
     * The native layer will use this method to send the response
     * @param {string | number} randomMethodName
     * @param {Function} callback
     * @internal
     */
    generateRandomMethod(randomMethodName, callback) {
      this.globals.ObjectDefineProperty(this.globals.window, randomMethodName, {
        enumerable: false,
        // configurable, To allow for deletion later
        configurable: true,
        writable: false,
        /**
         * @param {any[]} args
         */
        value: (...args) => {
          callback(...args);
          delete this.globals.window[randomMethodName];
        }
      });
    }
    /**
     * @internal
     * @return {string}
     */
    randomString() {
      return "" + this.globals.getRandomValues(new this.globals.Uint32Array(1))[0];
    }
    /**
     * @internal
     * @return {string}
     */
    createRandMethodName() {
      return "_" + this.randomString();
    }
    /**
     * @type {{name: string, length: number}}
     * @internal
     */
    algoObj = {
      name: "AES-GCM",
      length: 256
    };
    /**
     * @returns {Promise<Uint8Array>}
     * @internal
     */
    async createRandKey() {
      const key2 = await this.globals.generateKey(this.algoObj, true, ["encrypt", "decrypt"]);
      const exportedKey = await this.globals.exportKey("raw", key2);
      return new this.globals.Uint8Array(exportedKey);
    }
    /**
     * @returns {Uint8Array}
     * @internal
     */
    createRandIv() {
      return this.globals.getRandomValues(new this.globals.Uint8Array(12));
    }
    /**
     * @param {BufferSource} ciphertext
     * @param {BufferSource} key
     * @param {Uint8Array} iv
     * @returns {Promise<string>}
     * @internal
     */
    async decrypt(ciphertext, key2, iv) {
      const cryptoKey = await this.globals.importKey("raw", key2, "AES-GCM", false, ["decrypt"]);
      const algo = {
        name: "AES-GCM",
        iv
      };
      const decrypted = await this.globals.decrypt(algo, cryptoKey, ciphertext);
      const dec = new this.globals.TextDecoder();
      return dec.decode(decrypted);
    }
    /**
     * When required (such as on macos 10.x), capture the `postMessage` method on
     * each webkit messageHandler
     *
     * @param {string[]} handlerNames
     */
    captureWebkitHandlers(handlerNames) {
      const handlers = window.webkit.messageHandlers;
      if (!handlers) throw new MissingHandler("window.webkit.messageHandlers was absent", "all");
      for (const webkitMessageHandlerName of handlerNames) {
        if (typeof handlers[webkitMessageHandlerName]?.postMessage === "function") {
          const original = handlers[webkitMessageHandlerName];
          const bound = handlers[webkitMessageHandlerName].postMessage?.bind(original);
          this.globals.capturedWebkitHandlers[webkitMessageHandlerName] = bound;
          delete handlers[webkitMessageHandlerName].postMessage;
        }
      }
    }
    /**
     * @param {import('../index.js').Subscription} msg
     * @param {(value: unknown) => void} callback
     */
    subscribe(msg, callback) {
      if (msg.subscriptionName in this.globals.window) {
        throw new this.globals.Error(`A subscription with the name ${msg.subscriptionName} already exists`);
      }
      this.globals.ObjectDefineProperty(this.globals.window, msg.subscriptionName, {
        enumerable: false,
        configurable: true,
        writable: false,
        value: (data2) => {
          if (data2 && isSubscriptionEventFor(msg, data2)) {
            callback(data2.params);
          } else {
            console.warn("Received a message that did not match the subscription", data2);
          }
        }
      });
      return () => {
        this.globals.ReflectDeleteProperty(this.globals.window, msg.subscriptionName);
      };
    }
  };
  var WebkitMessagingConfig = class {
    /**
     * @param {object} params
     * @param {boolean} params.hasModernWebkitAPI
     * @param {string[]} params.webkitMessageHandlerNames
     * @param {string} params.secret
     * @internal
     */
    constructor(params) {
      this.hasModernWebkitAPI = params.hasModernWebkitAPI;
      this.webkitMessageHandlerNames = params.webkitMessageHandlerNames;
      this.secret = params.secret;
    }
  };
  var SecureMessagingParams = class {
    /**
     * @param {object} params
     * @param {string} params.methodName
     * @param {string} params.secret
     * @param {number[]} params.key
     * @param {number[]} params.iv
     */
    constructor(params) {
      this.methodName = params.methodName;
      this.secret = params.secret;
      this.key = params.key;
      this.iv = params.iv;
    }
  };
  function captureGlobals() {
    const globals = {
      window,
      getRandomValues: window.crypto.getRandomValues.bind(window.crypto),
      TextEncoder,
      TextDecoder,
      Uint8Array,
      Uint16Array,
      Uint32Array,
      JSONstringify: window.JSON.stringify,
      JSONparse: window.JSON.parse,
      Arrayfrom: window.Array.from,
      Promise: window.Promise,
      Error: window.Error,
      ReflectDeleteProperty: window.Reflect.deleteProperty.bind(window.Reflect),
      ObjectDefineProperty: window.Object.defineProperty,
      addEventListener: window.addEventListener.bind(window),
      /** @type {Record<string, any>} */
      capturedWebkitHandlers: {}
    };
    if (isSecureContext) {
      globals.generateKey = window.crypto.subtle.generateKey.bind(window.crypto.subtle);
      globals.exportKey = window.crypto.subtle.exportKey.bind(window.crypto.subtle);
      globals.importKey = window.crypto.subtle.importKey.bind(window.crypto.subtle);
      globals.encrypt = window.crypto.subtle.encrypt.bind(window.crypto.subtle);
      globals.decrypt = window.crypto.subtle.decrypt.bind(window.crypto.subtle);
    }
    return globals;
  }

  // ../messaging/lib/android.js
  var AndroidMessagingTransport = class {
    /**
     * @param {AndroidMessagingConfig} config
     * @param {MessagingContext} messagingContext
     * @internal
     */
    constructor(config, messagingContext) {
      this.messagingContext = messagingContext;
      this.config = config;
    }
    /**
     * @param {NotificationMessage} msg
     */
    notify(msg) {
      try {
        this.config.sendMessageThrows?.(JSON.stringify(msg));
      } catch (e4) {
        console.error(".notify failed", e4);
      }
    }
    /**
     * @param {RequestMessage} msg
     * @return {Promise<any>}
     */
    request(msg) {
      return new Promise((resolve, reject) => {
        const unsub = this.config.subscribe(msg.id, handler);
        try {
          this.config.sendMessageThrows?.(JSON.stringify(msg));
        } catch (e4) {
          unsub();
          reject(new Error("request failed to send: " + e4.message || "unknown error"));
        }
        function handler(data2) {
          if (isResponseFor(msg, data2)) {
            if (data2.result) {
              resolve(data2.result || {});
              return unsub();
            }
            if (data2.error) {
              reject(new Error(data2.error.message));
              return unsub();
            }
            unsub();
            throw new Error("unreachable: must have `result` or `error` key by this point");
          }
        }
      });
    }
    /**
     * @param {Subscription} msg
     * @param {(value: unknown | undefined) => void} callback
     */
    subscribe(msg, callback) {
      const unsub = this.config.subscribe(msg.subscriptionName, (data2) => {
        if (isSubscriptionEventFor(msg, data2)) {
          callback(data2.params || {});
        }
      });
      return () => {
        unsub();
      };
    }
  };
  var AndroidMessagingConfig = class {
    /** @type {(json: string, secret: string) => void} */
    _capturedHandler;
    /**
     * @param {object} params
     * @param {Record<string, any>} params.target
     * @param {boolean} params.debug
     * @param {string} params.messageSecret - a secret to ensure that messages are only
     * processed by the correct handler
     * @param {string} params.javascriptInterface - the name of the javascript interface
     * registered on the native side
     * @param {string} params.messageCallback - the name of the callback that the native
     * side will use to send messages back to the javascript side
     */
    constructor(params) {
      this.target = params.target;
      this.debug = params.debug;
      this.javascriptInterface = params.javascriptInterface;
      this.messageSecret = params.messageSecret;
      this.messageCallback = params.messageCallback;
      this.listeners = new globalThis.Map();
      this._captureGlobalHandler();
      this._assignHandlerMethod();
    }
    /**
     * The transport can call this to transmit a JSON payload along with a secret
     * to the native Android handler.
     *
     * Note: This can throw - it's up to the transport to handle the error.
     *
     * @type {(json: string) => void}
     * @throws
     * @internal
     */
    sendMessageThrows(json) {
      this._capturedHandler(json, this.messageSecret);
    }
    /**
     * A subscription on Android is just a named listener. All messages from
     * android -> are delivered through a single function, and this mapping is used
     * to route the messages to the correct listener.
     *
     * Note: Use this to implement request->response by unsubscribing after the first
     * response.
     *
     * @param {string} id
     * @param {(msg: MessageResponse | SubscriptionEvent) => void} callback
     * @returns {() => void}
     * @internal
     */
    subscribe(id, callback) {
      this.listeners.set(id, callback);
      return () => {
        this.listeners.delete(id);
      };
    }
    /**
     * Accept incoming messages and try to deliver it to a registered listener.
     *
     * This code is defensive to prevent any single handler from affecting another if
     * it throws (producer interference).
     *
     * @param {MessageResponse | SubscriptionEvent} payload
     * @internal
     */
    _dispatch(payload) {
      if (!payload) return this._log("no response");
      if ("id" in payload) {
        if (this.listeners.has(payload.id)) {
          this._tryCatch(() => this.listeners.get(payload.id)?.(payload));
        } else {
          this._log("no listeners for ", payload);
        }
      }
      if ("subscriptionName" in payload) {
        if (this.listeners.has(payload.subscriptionName)) {
          this._tryCatch(() => this.listeners.get(payload.subscriptionName)?.(payload));
        } else {
          this._log("no subscription listeners for ", payload);
        }
      }
    }
    /**
     *
     * @param {(...args: any[]) => any} fn
     * @param {string} [context]
     */
    _tryCatch(fn2, context = "none") {
      try {
        return fn2();
      } catch (e4) {
        if (this.debug) {
          console.error("AndroidMessagingConfig error:", context);
          console.error(e4);
        }
      }
    }
    /**
     * @param {...any} args
     */
    _log(...args) {
      if (this.debug) {
        console.log("AndroidMessagingConfig", ...args);
      }
    }
    /**
     * Capture the global handler and remove it from the global object.
     */
    _captureGlobalHandler() {
      const { target, javascriptInterface } = this;
      if (Object.prototype.hasOwnProperty.call(target, javascriptInterface)) {
        this._capturedHandler = target[javascriptInterface].process.bind(target[javascriptInterface]);
        delete target[javascriptInterface];
      } else {
        this._capturedHandler = () => {
          this._log("Android messaging interface not available", javascriptInterface);
        };
      }
    }
    /**
     * Assign the incoming handler method to the global object.
     * This is the method that Android will call to deliver messages.
     */
    _assignHandlerMethod() {
      const responseHandler = (providedSecret, response) => {
        if (providedSecret === this.messageSecret) {
          this._dispatch(response);
        }
      };
      Object.defineProperty(this.target, this.messageCallback, {
        value: responseHandler
      });
    }
  };

  // ../injected/src/captured-globals.js
  var Set2 = globalThis.Set;
  var Reflect2 = globalThis.Reflect;
  var customElementsGet = globalThis.customElements?.get.bind(globalThis.customElements);
  var customElementsDefine = globalThis.customElements?.define.bind(globalThis.customElements);
  var URL2 = globalThis.URL;
  var Proxy2 = globalThis.Proxy;
  var functionToString = Function.prototype.toString;
  var TypeError2 = globalThis.TypeError;
  var Symbol2 = globalThis.Symbol;
  var dispatchEvent = globalThis.dispatchEvent?.bind(globalThis);
  var addEventListener = globalThis.addEventListener?.bind(globalThis);
  var removeEventListener = globalThis.removeEventListener?.bind(globalThis);
  var CustomEvent2 = globalThis.CustomEvent;
  var Promise2 = globalThis.Promise;
  var String2 = globalThis.String;
  var Map2 = globalThis.Map;
  var Error2 = globalThis.Error;
  var randomUUID = globalThis.crypto?.randomUUID?.bind(globalThis.crypto);
  var console2 = globalThis.console;
  var consoleLog = console2.log.bind(console2);
  var consoleWarn = console2.warn.bind(console2);
  var consoleError = console2.error.bind(console2);

  // ../injected/src/utils.js
  var globalObj = typeof window === "undefined" ? globalThis : window;
  var Error3 = globalObj.Error;
  var originalWindowDispatchEvent = typeof window === "undefined" ? null : window.dispatchEvent.bind(window);
  function isBeingFramed() {
    if (globalThis.location && "ancestorOrigins" in globalThis.location) {
      return globalThis.location.ancestorOrigins.length > 0;
    }
    return globalThis.top !== globalThis.window;
  }
  var DDGPromise = globalObj.Promise;
  var DDGReflect = globalObj.Reflect;

  // ../messaging/lib/android-adsjs.js
  var AndroidAdsjsMessagingTransport = class {
    /**
     * @param {AndroidAdsjsMessagingConfig} config
     * @param {MessagingContext} messagingContext
     * @internal
     */
    constructor(config, messagingContext) {
      this.messagingContext = messagingContext;
      this.config = config;
    }
    /**
     * @param {NotificationMessage} msg
     */
    notify(msg) {
      try {
        this.config.sendMessageThrows?.(msg);
      } catch (e4) {
        console.error(".notify failed", e4);
      }
    }
    /**
     * @param {RequestMessage} msg
     * @return {Promise<any>}
     */
    request(msg) {
      return new Promise((resolve, reject) => {
        const unsub = this.config.subscribe(msg.id, handler);
        try {
          this.config.sendMessageThrows?.(msg);
        } catch (e4) {
          unsub();
          reject(new Error("request failed to send: " + e4.message || "unknown error"));
        }
        function handler(data2) {
          if (isResponseFor(msg, data2)) {
            if (data2.result) {
              resolve(data2.result || {});
              return unsub();
            }
            if (data2.error) {
              reject(new Error(data2.error.message));
              return unsub();
            }
            unsub();
            throw new Error("unreachable: must have `result` or `error` key by this point");
          }
        }
      });
    }
    /**
     * @param {Subscription} msg
     * @param {(value: unknown | undefined) => void} callback
     */
    subscribe(msg, callback) {
      const unsub = this.config.subscribe(msg.subscriptionName, (data2) => {
        if (isSubscriptionEventFor(msg, data2)) {
          callback(data2.params || {});
        }
      });
      return () => {
        unsub();
      };
    }
  };
  var AndroidAdsjsMessagingConfig = class {
    /** @type {{
     * postMessage: (message: string) => void,
     * addEventListener: (type: string, listener: (event: MessageEvent) => void) => void,
     * } | null} */
    _capturedHandler;
    /**
     * @param {object} params
     * @param {Record<string, any>} params.target
     * @param {boolean} params.debug
     * @param {string} params.objectName - the object name for addWebMessageListener
     */
    constructor(params) {
      this.target = params.target;
      this.debug = params.debug;
      this.objectName = params.objectName;
      this.listeners = new globalThis.Map();
      this._captureGlobalHandler();
      this._setupEventListener();
    }
    /**
     * The transport can call this to transmit a JSON payload along with a secret
     * to the native Android handler via postMessage.
     *
     * Note: This can throw - it's up to the transport to handle the error.
     *
     * @type {(json: object) => void}
     * @throws
     * @internal
     */
    sendMessageThrows(message) {
      if (!this.objectName) {
        throw new Error("Object name not set for WebMessageListener");
      }
      if (this._capturedHandler && this._capturedHandler.postMessage) {
        this._capturedHandler.postMessage(JSON.stringify(message));
      } else {
        throw new Error("postMessage not available");
      }
    }
    /**
     * A subscription on Android is just a named listener. All messages from
     * android -> are delivered through a single function, and this mapping is used
     * to route the messages to the correct listener.
     *
     * Note: Use this to implement request->response by unsubscribing after the first
     * response.
     *
     * @param {string} id
     * @param {(msg: MessageResponse | SubscriptionEvent) => void} callback
     * @returns {() => void}
     * @internal
     */
    subscribe(id, callback) {
      this.listeners.set(id, callback);
      return () => {
        this.listeners.delete(id);
      };
    }
    /**
     * Accept incoming messages and try to deliver it to a registered listener.
     *
     * This code is defensive to prevent any single handler from affecting another if
     * it throws (producer interference).
     *
     * @param {MessageResponse | SubscriptionEvent} payload
     * @internal
     */
    _dispatch(payload) {
      if (!payload) return this._log("no response");
      if ("id" in payload) {
        if (this.listeners.has(payload.id)) {
          this._tryCatch(() => this.listeners.get(payload.id)?.(payload));
        } else {
          this._log("no listeners for ", payload);
        }
      }
      if ("subscriptionName" in payload) {
        if (this.listeners.has(payload.subscriptionName)) {
          this._tryCatch(() => this.listeners.get(payload.subscriptionName)?.(payload));
        } else {
          this._log("no subscription listeners for ", payload);
        }
      }
    }
    /**
     *
     * @param {(...args: any[]) => any} fn
     * @param {string} [context]
     */
    _tryCatch(fn2, context = "none") {
      try {
        return fn2();
      } catch (e4) {
        if (this.debug) {
          console.error("AndroidAdsjsMessagingConfig error:", context);
          console.error(e4);
        }
      }
    }
    /**
     * @param {...any} args
     */
    _log(...args) {
      if (this.debug) {
        console.log("AndroidAdsjsMessagingConfig", ...args);
      }
    }
    /**
     * Capture the global handler and remove it from the global object.
     */
    _captureGlobalHandler() {
      const { target, objectName } = this;
      if (Object.prototype.hasOwnProperty.call(target, objectName)) {
        this._capturedHandler = target[objectName];
        delete target[objectName];
      } else {
        this._capturedHandler = null;
        this._log("Android adsjs messaging interface not available", objectName);
      }
    }
    /**
     * Set up event listener for incoming messages from the captured handler.
     */
    _setupEventListener() {
      if (!this._capturedHandler || !this._capturedHandler.addEventListener) {
        this._log("No event listener support available");
        return;
      }
      this._capturedHandler.addEventListener("message", (event) => {
        try {
          const data2 = (
            /** @type {MessageEvent} */
            event.data
          );
          if (typeof data2 === "string") {
            const parsedData = JSON.parse(data2);
            this._dispatch(parsedData);
          }
        } catch (e4) {
          this._log("Error processing incoming message:", e4);
        }
      });
    }
    /**
     * Send an initial ping message to the platform to establish communication.
     * This is a fire-and-forget notification that signals the JavaScript side is ready.
     * Only sends in top context (not in frames) and if the messaging interface is available.
     *
     * @param {MessagingContext} messagingContext
     * @returns {boolean} true if ping was sent, false if in frame or interface not ready
     */
    sendInitialPing(messagingContext) {
      if (isBeingFramed()) {
        this._log("Skipping initial ping - running in frame context");
        return false;
      }
      try {
        const message = new RequestMessage({
          id: "initialPing",
          context: messagingContext.context,
          featureName: "messaging",
          method: "initialPing"
        });
        this.sendMessageThrows(message);
        this._log("Initial ping sent successfully");
        return true;
      } catch (e4) {
        this._log("Failed to send initial ping:", e4);
        return false;
      }
    }
  };

  // ../messaging/lib/typed-messages.js
  function createTypedMessages(_base, _messaging) {
    const asAny = (
      /** @type {any} */
      _messaging
    );
    return (
      /** @type {BaseClass} */
      asAny
    );
  }

  // ../messaging/index.js
  var MessagingContext2 = class {
    /**
     * @param {object} params
     * @param {string} params.context
     * @param {string} params.featureName
     * @param {"production" | "development"} params.env
     * @internal
     */
    constructor(params) {
      this.context = params.context;
      this.featureName = params.featureName;
      this.env = params.env;
    }
  };
  var Messaging = class {
    /**
     * @param {MessagingContext} messagingContext
     * @param {MessagingConfig} config
     */
    constructor(messagingContext, config) {
      this.messagingContext = messagingContext;
      this.transport = getTransport(config, this.messagingContext);
    }
    /**
     * Send a 'fire-and-forget' message.
     *
     * @example
     *
     * ```ts
     * const messaging = new Messaging(config)
     * messaging.notify("foo", {bar: "baz"})
     * ```
     * @param {string} name
     * @param {Record<string, any>} [data]
     */
    notify(name2, data2 = {}) {
      const message = new NotificationMessage({
        context: this.messagingContext.context,
        featureName: this.messagingContext.featureName,
        method: name2,
        params: data2
      });
      try {
        this.transport.notify(message);
      } catch (e4) {
        if (this.messagingContext.env === "development") {
          console.error("[Messaging] Failed to send notification:", e4);
          console.error("[Messaging] Message details:", { name: name2, data: data2 });
        }
      }
    }
    /**
     * Send a request and wait for a response
     * @throws {Error}
     *
     * @example
     * ```
     * const messaging = new Messaging(config)
     * const response = await messaging.request("foo", {bar: "baz"})
     * ```
     *
     * @param {string} name
     * @param {Record<string, any>} [data]
     * @return {Promise<any>}
     */
    request(name2, data2 = {}) {
      const id = globalThis?.crypto?.randomUUID?.() || name2 + ".response";
      const message = new RequestMessage({
        context: this.messagingContext.context,
        featureName: this.messagingContext.featureName,
        method: name2,
        params: data2,
        id
      });
      return this.transport.request(message);
    }
    /**
     * @param {string} name
     * @param {(value: unknown) => void} callback
     * @return {() => void}
     */
    subscribe(name2, callback) {
      const msg = new Subscription({
        context: this.messagingContext.context,
        featureName: this.messagingContext.featureName,
        subscriptionName: name2
      });
      return this.transport.subscribe(msg, callback);
    }
  };
  var TestTransportConfig = class {
    /**
     * @param {MessagingTransport} impl
     */
    constructor(impl) {
      this.impl = impl;
    }
  };
  var TestTransport = class {
    /**
     * @param {TestTransportConfig} config
     * @param {MessagingContext} messagingContext
     */
    constructor(config, messagingContext) {
      this.config = config;
      this.messagingContext = messagingContext;
    }
    notify(msg) {
      return this.config.impl.notify(msg);
    }
    request(msg) {
      return this.config.impl.request(msg);
    }
    subscribe(msg, callback) {
      return this.config.impl.subscribe(msg, callback);
    }
  };
  function getTransport(config, messagingContext) {
    if (config instanceof WebkitMessagingConfig) {
      return new WebkitMessagingTransport(config, messagingContext);
    }
    if (config instanceof WindowsMessagingConfig) {
      return new WindowsMessagingTransport(config, messagingContext);
    }
    if (config instanceof AndroidMessagingConfig) {
      return new AndroidMessagingTransport(config, messagingContext);
    }
    if (config instanceof AndroidAdsjsMessagingConfig) {
      return new AndroidAdsjsMessagingTransport(config, messagingContext);
    }
    if (config instanceof TestTransportConfig) {
      return new TestTransport(config, messagingContext);
    }
    throw new Error("unreachable");
  }
  var MissingHandler = class extends Error {
    /**
     * @param {string} message
     * @param {string} handlerName
     */
    constructor(message, handlerName) {
      super(message);
      this.handlerName = handlerName;
    }
  };

  // pages/new-tab/app/activity/mocks/activity.mocks.js
  var activityMocks = {
    empty: {
      activity: []
    },
    onlyTopLevel: {
      activity: [
        {
          favicon: { src: "selco-icon.png" },
          url: "https://example.com",
          title: "example.com",
          etldPlusOne: "example.com",
          favorite: false,
          trackersFound: false,
          trackingStatus: {
            trackerCompanies: [],
            totalCount: 0
          },
          history: []
        }
      ]
    },
    longTitle: {
      activity: [
        {
          favicon: { src: "selco-icon.png" },
          url: "https://deploy-preview-1468--content-scope-scripts.netlify.app",
          title: "deploy-preview-1468--content-scope-scripts.netlify.app",
          etldPlusOne: "deploy-preview-1468--content-scope-scripts.netlify.app",
          favorite: false,
          trackersFound: false,
          trackingStatus: {
            trackerCompanies: [],
            totalCount: 0
          },
          history: []
        }
      ]
    },
    longEntry: {
      activity: [
        {
          favicon: { src: "selco-icon.png" },
          url: "https://example.app",
          title: "example.app",
          etldPlusOne: "example.app",
          favorite: false,
          trackersFound: false,
          trackingStatus: {
            trackerCompanies: [],
            totalCount: 0
          },
          history: [
            {
              title: "/products/bathroom/toilets-and-bidets/wall-mounted/modern-collection/ceramic-toilet-bowl?color=white&size=standard&material=porcelain&inStock=true&freeShipping=true",
              url: "https://example.com/products/bathroom",
              relativeTime: "Just now"
            }
          ]
        }
      ]
    },
    singleWithTrackers: {
      activity: [
        {
          favicon: { src: "selco-icon.png" },
          url: "https://example.com",
          title: "example.com",
          etldPlusOne: "example.com",
          favorite: false,
          trackersFound: true,
          trackingStatus: {
            trackerCompanies: [{ displayName: "Google" }, { displayName: "Facebook" }, { displayName: "Amazon" }],
            totalCount: 56
          },
          history: []
        }
      ]
    },
    few: {
      activity: [
        {
          favicon: { src: "selco-icon.png" },
          url: "https://example.com",
          title: "example.com",
          etldPlusOne: "example.com",
          favorite: false,
          trackersFound: true,
          trackingStatus: {
            trackerCompanies: [{ displayName: "Google" }, { displayName: "Facebook" }, { displayName: "Amazon" }],
            totalCount: 56
          },
          history: [
            {
              title: "/bathrooms/toilets",
              url: "https://example.com/bathrooms/toilets",
              relativeTime: "Just now"
            },
            {
              title: "/kitchen/sinks",
              url: "https://example.com/kitchen/sinks",
              relativeTime: "50 mins ago"
            },
            {
              title: "/gardening/tools",
              url: "https://example.com/gardening/tools",
              relativeTime: "18 hrs ago"
            },
            {
              title: "/lighting/fixtures",
              url: "https://example.com/lighting/fixtures",
              relativeTime: "1 day ago"
            }
          ]
        },
        {
          favicon: { src: "youtube-icon.png" },
          url: "https://fireproof.youtube.com",
          title: "youtube.com",
          etldPlusOne: "youtube.com",
          favorite: true,
          trackersFound: true,
          trackingStatus: {
            trackerCompanies: [
              { displayName: "Google" },
              { displayName: "Facebook" },
              { displayName: "Amazon" },
              { displayName: "Twitter" }
            ],
            totalCount: 89
          },
          history: [
            {
              title: "Great Video on YouTube",
              url: "https://youtube.com/watch?v=123",
              relativeTime: "3 days ago"
            }
          ]
        },
        {
          favicon: { src: "amazon-icon.png" },
          url: "https://amazon.com",
          title: "amazon.com",
          etldPlusOne: "amazon.com",
          favorite: false,
          trackersFound: true,
          trackingStatus: {
            trackerCompanies: [{ displayName: "Adobe Analytics" }, { displayName: "Facebook" }],
            totalCount: 12
          },
          history: [
            {
              title: "Electronics Store",
              url: "https://amazon.com/electronics",
              relativeTime: "1 day ago"
            }
          ]
        },
        {
          favicon: { src: "twitter-icon.png" },
          url: "https://twitter.com",
          title: "twitter.com",
          etldPlusOne: "twitter.com",
          favorite: false,
          trackersFound: true,
          trackingStatus: {
            trackerCompanies: [],
            totalCount: 0
          },
          history: [
            {
              title: "Trending Topics",
              url: "https://twitter.com/explore",
              relativeTime: "2 days ago"
            }
          ]
        },
        {
          favicon: { src: "linkedin-icon.png" },
          url: "https://linkedin.com",
          title: "app.linkedin.com",
          etldPlusOne: "linkedin.com",
          favorite: false,
          trackersFound: false,
          trackingStatus: {
            trackerCompanies: [],
            totalCount: 0
          },
          history: [
            {
              title: "Profile Page",
              url: "https://linkedin.com/in/user-profile",
              relativeTime: "2 hrs ago"
            }
          ]
        }
      ]
    }
  };

  // pages/new-tab/app/activity/mocks/activity.mock-transport.js
  var url = typeof window !== "undefined" ? new URL(window.location.href) : new URL("https://example.com");
  function clone(value2) {
    return window.structuredClone?.(value2) ?? JSON.parse(JSON.stringify(value2));
  }
  function activityMockTransport() {
    let dataset = clone(activityMocks.few);
    if (url.searchParams.has("activity")) {
      const key2 = url.searchParams.get("activity");
      if (key2 && key2 in activityMocks) {
        dataset = clone(activityMocks[key2]);
      } else if (key2?.match(/^\d+$/)) {
        dataset = getJsonSync(parseInt(key2));
      }
    }
    const subs = /* @__PURE__ */ new Map();
    return new TestTransportConfig({
      notify(_msg) {
        const msg = (
          /** @type {any} */
          _msg
        );
        switch (msg.method) {
          case "activity_removeItem": {
            const oldCount = dataset.activity.reduce((acc, item) => acc + item.trackingStatus.totalCount, 0);
            dataset.activity = dataset.activity.filter((x3) => x3.url !== msg.params.url);
            const patchParams = toPatch(dataset.activity);
            patchParams.totalTrackersBlocked = oldCount;
            setTimeout(() => {
              const cb = subs.get("activity_onDataPatch");
              cb(patchParams);
            }, 0);
            break;
          }
          default: {
            console.warn("unhandled notification", msg);
          }
        }
      },
      subscribe(_msg, cb) {
        const sub2 = (
          /** @type {any} */
          _msg.subscriptionName
        );
        if (sub2 === "activity_onBurnComplete") {
          subs.set("activity_onBurnComplete", cb);
          return () => {
            subs.delete("activity_onBurnComplete");
          };
        }
        if (sub2 === "activity_onDataUpdate") {
          subs.set("activity_onDataUpdate", cb);
        }
        if (sub2 === "activity_onDataPatch") {
          subs.set("activity_onDataPatch", cb);
        }
        if (sub2 === "activity_onDataUpdate" && url.searchParams.has("flood")) {
          let count = 0;
          const int = setInterval(() => {
            if (count === 10) return clearInterval(int);
            dataset.activity.push({
              url: `https://${count}.example.com`,
              etldPlusOne: "example.com",
              favicon: null,
              history: [],
              favorite: false,
              trackersFound: false,
              trackingStatus: { trackerCompanies: [], totalCount: 0 },
              title: "example.com"
            });
            count += 1;
            console.log("sent", dataset);
            cb(dataset);
          }, 1e3);
          return () => {
          };
        }
        if (sub2 === "activity_onDataUpdate" && url.searchParams.has("nested")) {
          let count = 0;
          const int = setInterval(() => {
            if (count === 10) return clearInterval(int);
            dataset.activity[1].history.push({
              url: `https://${count}.example.com`,
              title: "example.com",
              relativeTime: "just now"
            });
            count += 1;
            cb(dataset);
          }, 500);
          return () => {
          };
        }
        if (sub2 === "activity_onDataPatch") {
          window.af = {
            gen(count) {
              return generateSampleData(count);
            },
            patchAddBack(count) {
              const len = dataset.activity.length;
              const all2 = generateSampleData(200);
              const newItems = all2.slice(len, len + count);
              dataset.activity.push(...newItems);
              const patch = toPatch(dataset.activity);
              cb(patch);
            },
            patchAddFront(count) {
              const len = dataset.activity.length;
              const all2 = generateSampleData(200);
              const newItems = all2.slice(len, len + count);
              dataset.activity = [...newItems, ...dataset.activity];
              const patch = toPatch(dataset.activity);
              cb(patch);
            },
            patchRemove(nth) {
              dataset.activity.splice(nth, 1);
              const patch = toPatch(dataset.activity);
              cb(patch);
            },
            patchRemoveCount(count) {
              dataset.activity.splice(dataset.activity.length - count, count);
              const patch = toPatch(dataset.activity);
              cb(patch);
            },
            addHistoryEntry(nth) {
              const item = dataset.activity[nth];
              item.history.push({
                title: "pushed history entry",
                url: item.url + "/h1",
                relativeTime: "Just now"
              });
              const patch = toPatchItem(dataset.activity, nth);
              cb(patch);
            },
            addTrackingCompany(nth) {
              const item = dataset.activity[nth];
              item.trackingStatus.trackerCompanies.push({
                displayName: "Bytedance"
              });
              const patch = toPatchItem(dataset.activity, nth);
              cb(patch);
            },
            increaseTrackerCount(nth) {
              const item = dataset.activity[nth];
              item.trackingStatus.totalCount += 1;
              const patch = toPatchItem(dataset.activity, nth);
              cb(patch);
            }
          };
          return () => {
          };
        }
        console.warn("unhandled sub", sub2);
        return () => {
        };
      },
      // eslint-ignore-next-line require-await
      request(_msg) {
        const msg = (
          /** @type {any} */
          _msg
        );
        console.log(msg);
        switch (msg.method) {
          case "activity_confirmBurn": {
            const url8 = msg.params.url;
            let response = { action: "burn" };
            if (!window.__playwright_01) {
              const fireproof = url8.startsWith("https://fireproof.");
              if (fireproof) {
                if (!confirm("are you sure?")) {
                  response = { action: "none" };
                }
              }
            }
            if (response.action === "burn" && !window.__playwright_01) {
              setTimeout(() => {
                const cb = subs.get("activity_onDataUpdate");
                console.log("will send updated data after 500ms", url8);
                const next = activityMocks.few.activity.filter((x3) => x3.url !== url8);
                cb?.({ activity: next });
              }, 500);
              setTimeout(() => {
                const cb = subs.get("activity_onBurnComplete");
                console.log("will send updated data after 600ms", url8);
                cb?.();
              }, 600);
            }
            return Promise.resolve(response);
          }
          case "activity_getUrls": {
            const next = toPatch(dataset.activity);
            return Promise.resolve(next);
          }
          case "activity_getDataForUrls": {
            const next = {
              activity: dataset.activity.filter((x3) => msg.params.urls.includes(x3.url))
            };
            return Promise.resolve(next);
          }
          case "activity_getData":
            return Promise.resolve(dataset);
          default: {
            return Promise.reject(new Error("unhandled request" + msg));
          }
        }
      }
    });
  }
  function getJsonSync(count = 200) {
    return { activity: generateSampleData(count) };
  }
  function toPatch(entries4) {
    return {
      urls: entries4.map((x3) => x3.url),
      totalTrackersBlocked: entries4.reduce((acc, item) => acc + item.trackingStatus.totalCount, 0)
    };
  }
  function toPatchItem(entries4, nth) {
    return {
      urls: entries4.map((x3) => x3.url),
      totalTrackersBlocked: entries4.reduce((acc, item) => acc + item.trackingStatus.totalCount, 0),
      patch: entries4[nth]
    };
  }
  function generateSampleData(count) {
    const generateString = (index2, length2 = 10) => {
      const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      let result = "";
      const seed = index2;
      for (let i5 = 0; i5 < length2; i5++) {
        result += chars.charAt((seed + i5 * 17) % chars.length);
      }
      return result;
    };
    const generateHistoryItem = (parentIndex, historyIndex) => ({
      title: `(h) ${parentIndex}.${historyIndex} - ${generateString(historyIndex, 12)}`,
      url: `https://${parentIndex}.${generateString(parentIndex)}.com/a`,
      relativeTime: historyIndex === 0 ? "5 minutes ago" : "3 weeks ago"
    });
    const generateTrackerCompanies = (index2) => {
      const companies = [
        { displayName: "Google" },
        { displayName: "Facebook" },
        { displayName: "Amazon" },
        { displayName: "Microsoft" },
        { displayName: "Apple" },
        { displayName: "Twitter" },
        { displayName: "Adobe" },
        { displayName: "Oracle" },
        { displayName: "TikTok" },
        { displayName: "LinkedIn" },
        { displayName: "Spotify" },
        { displayName: "Snapchat" },
        { displayName: "Yahoo" },
        { displayName: "Cloudflare" },
        { displayName: "Dropbox" },
        { displayName: "Reddit" },
        { displayName: "Pinterest" },
        { displayName: "Salesforce" },
        { displayName: "IBM" },
        { displayName: "Tencent" }
      ];
      const itemCount = index2 % 6;
      return companies.slice(0, itemCount);
    };
    const data2 = [];
    for (let i5 = 0; i5 < count; i5++) {
      const generatedString = generateString(i5);
      const trackerCompanies = generateTrackerCompanies(i5);
      data2.push({
        title: `${i5} ${generatedString}`,
        url: `https://${i5}.${generatedString}.com`,
        etldPlusOne: `${generatedString}.com`,
        trackersFound: true,
        history: [generateHistoryItem(i5, 0), generateHistoryItem(i5, 1)],
        favorite: false,
        favicon: null,
        trackingStatus: {
          trackerCompanies,
          totalCount: trackerCompanies.length === 0 ? 0 : Math.round(trackerCompanies.length * 1.5)
        }
      });
    }
    return data2;
  }

  // pages/new-tab/app/activity/components/Activity.examples.js
  init_NormalizeDataProvider();
  var activityExamples = {
    "activity.empty": {
      factory: () => {
        return /* @__PURE__ */ _(Activity, { itemCount: 0, batched: false });
      }
    },
    "activity.few": {
      factory: () => /* @__PURE__ */ _(Activity, { itemCount: 10, batched: false }, /* @__PURE__ */ _(Mock, { size: 3 }, /* @__PURE__ */ _(ActivityBody, { canBurn: false, visibility: "visible" })))
    },
    "activity.noTrackers": {
      factory: () => /* @__PURE__ */ _(Activity, { itemCount: 20, batched: false }, /* @__PURE__ */ _(Mock, { size: 1 }, /* @__PURE__ */ _(ActivityBody, { canBurn: false, visibility: "visible" })))
    },
    "activity.noActivity.someTrackers": {
      factory: () => /* @__PURE__ */ _(Activity, { itemCount: 0, batched: false }, /* @__PURE__ */ _(Mock, { size: 0 }, /* @__PURE__ */ _(ActivityBody, { canBurn: false, visibility: "visible" })))
    }
  };
  function Mock({ children, size }) {
    const mocks = generateSampleData(size);
    const items = normalizeData(
      {
        items: {},
        history: {},
        trackingStatus: {},
        favorites: {},
        urls: [],
        totalTrackers: 0
      },
      { activity: mocks, urls: mocks.map((x3) => x3.url), totalTrackers: 0 }
    );
    return /* @__PURE__ */ _(
      NormalizedDataContext.Provider,
      {
        value: {
          activity: d3(items),
          keys: d3(items.urls)
        }
      },
      children
    );
  }

  // pages/new-tab/app/protections/components/ProtectionsHeading.examples.js
  init_preact_module();
  init_hooks_module();
  init_Protections2();
  init_signals_module();
  init_Activity2();
  init_PrivacyStats2();
  init_settings_provider();
  var protectionsHeadingExamples = {
    protectionsHeading: {
      factory: () => {
        return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("h2", null, 'AdBlocking = "enabled"'), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _(TubeGrid, null, /* @__PURE__ */ _(MockWithState, { initial: 0 }, ({ expansion, feed, setFeed, blockedCountSignal, toggle }) => {
          return /* @__PURE__ */ _(SettingsProvider, { settings: new Settings({ adBlocking: { state: "enabled" } }) }, /* @__PURE__ */ _(
            Protections,
            {
              blockedCountSignal,
              feed,
              setFeed,
              expansion,
              toggle
            },
            /* @__PURE__ */ _(PrivacyStatsEmptyState, null)
          ));
        }), /* @__PURE__ */ _(MockWithState, { initial: 120 }, ({ expansion, feed, setFeed, blockedCountSignal, toggle }) => {
          return /* @__PURE__ */ _(SettingsProvider, { settings: new Settings({ adBlocking: { state: "enabled" } }) }, /* @__PURE__ */ _(
            Protections,
            {
              blockedCountSignal,
              feed,
              setFeed,
              expansion,
              toggle
            },
            /* @__PURE__ */ _(PrintState, { feed, blockedCountSignal })
          ));
        })), /* @__PURE__ */ _("h2", null, 'AdBlocking = "disabled"'), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _(TubeGrid, null, /* @__PURE__ */ _(MockWithState, { initial: 0 }, ({ expansion, feed, setFeed, blockedCountSignal, toggle }) => {
          return /* @__PURE__ */ _(
            Protections,
            {
              blockedCountSignal,
              feed,
              setFeed,
              expansion,
              toggle
            },
            /* @__PURE__ */ _(PrivacyStatsEmptyState, null)
          );
        }), /* @__PURE__ */ _(MockWithState, { initial: 0, feedType: "activity" }, ({ expansion, feed, setFeed, blockedCountSignal, toggle }) => {
          return /* @__PURE__ */ _(
            Protections,
            {
              blockedCountSignal,
              feed,
              setFeed,
              expansion,
              toggle
            },
            /* @__PURE__ */ _(ActivityEmptyState, null)
          );
        }), /* @__PURE__ */ _(MockWithState, { initial: 1 }, ({ expansion, feed, setFeed, blockedCountSignal, toggle }) => {
          return /* @__PURE__ */ _(
            Protections,
            {
              blockedCountSignal,
              feed,
              setFeed,
              expansion,
              toggle
            },
            /* @__PURE__ */ _(PrintState, { feed, blockedCountSignal })
          );
        }), /* @__PURE__ */ _(MockWithState, { initial: 0, interval: 1e3 }, ({ expansion, feed, setFeed, blockedCountSignal, toggle }) => {
          return /* @__PURE__ */ _(
            Protections,
            {
              blockedCountSignal,
              feed,
              setFeed,
              expansion,
              toggle
            },
            /* @__PURE__ */ _(PrintState, { feed, blockedCountSignal })
          );
        }), /* @__PURE__ */ _(MockWithState, { initial: 100, feedType: "activity" }, ({ expansion, feed, setFeed, blockedCountSignal, toggle }) => {
          return /* @__PURE__ */ _(
            Protections,
            {
              blockedCountSignal,
              feed,
              setFeed,
              expansion,
              toggle
            },
            /* @__PURE__ */ _(PrintState, { feed, blockedCountSignal })
          );
        })));
      }
    }
  };
  function PrintState(props) {
    return /* @__PURE__ */ _("pre", { style: { marginTop: "24px" } }, /* @__PURE__ */ _("code", null, JSON.stringify(
      {
        feed: props.feed,
        blockedCount: props.blockedCountSignal.value
      },
      null,
      2
    )));
  }
  var MockWithState = ({ children, initial = 0, feedType = "privacy-stats", interval = 0 }) => {
    const [feed, setFeed] = d2(feedType);
    const [expansion, setExpansion] = d2(
      /** @type {import('../../../types/new-tab.js').Expansion} */
      "expanded"
    );
    const signal = useSignal(initial);
    y2(() => {
      if (interval === 0) return;
      const int = setInterval(() => signal.value += 1, interval);
      return () => clearInterval(int);
    }, [interval]);
    const toggle = () => {
      setExpansion((old) => old === "expanded" ? "collapsed" : "expanded");
    };
    return children({ toggle, expansion, feed, setFeed, blockedCountSignal: signal });
  };

  // pages/new-tab/app/subscription-winback-banner/components/SubscriptionWinBackBanner.examples.js
  init_preact_module();
  init_utils2();
  init_SubscriptionWinBackBanner2();

  // pages/new-tab/app/subscription-winback-banner/mocks/subscriptionWinBackBanner.data.js
  var subscriptionWinBackBannerDataExamples = {
    winback_last_day: {
      content: {
        messageType: "big_single_action",
        id: "winback_last_day",
        titleText: "Last day to save 25%!",
        descriptionText: "Stay protected with our VPN, private AI, and more. Resubscribe today and save 25%. Limited time offer.",
        actionText: "See Offer"
      }
    }
  };

  // pages/new-tab/app/subscription-winback-banner/components/SubscriptionWinBackBanner.examples.js
  var subscriptionWinBackBannerExamples = {
    "subscriptionWinBackBanner.winback_last_day": {
      factory: () => /* @__PURE__ */ _(
        SubscriptionWinBackBanner,
        {
          message: subscriptionWinBackBannerDataExamples.winback_last_day.content,
          dismiss: noop("winBackOffer_dismiss"),
          action: noop("winBackOffer_action")
        }
      )
    }
  };

  // pages/new-tab/app/components/Examples.jsx
  var mainExamples = {
    ...favoritesExamples,
    ...freemiumPIRBannerExamples,
    ...nextStepsExamples,
    ...privacyStatsExamples,
    ...RMFExamples,
    ...subscriptionWinBackBannerExamples
  };
  var otherExamples = {
    ...otherNextStepsExamples,
    ...otherPrivacyStatsExamples,
    ...otherRMFExamples,
    ...customizerExamples,
    ...updateNotificationExamples,
    ...activityExamples,
    ...protectionsHeadingExamples
  };

  // pages/new-tab/app/components/Components.jsx
  init_themes();
  init_signals_module();
  init_BackgroundProvider();
  init_CustomizerProvider();
  var url2 = new URL(window.location.href);
  var list = {
    ...mainExamples,
    ...otherExamples
  };
  var entries3 = Object.entries(list);
  function Components() {
    const ids = url2.searchParams.getAll("id");
    const isolated = url2.searchParams.has("isolate");
    const e2e = url2.searchParams.has("e2e");
    const entryIds = entries3.map(([id]) => id);
    const validIds = ids.filter((id) => entryIds.includes(id));
    const filtered = validIds.length ? validIds.map((id) => (
      /** @type {const} */
      [id, list[id]]
    )) : entries3;
    const data2 = {
      background: { kind: "default" },
      userImages: [],
      theme: "system",
      userColor: null
    };
    const dataSignal = useSignal(data2);
    const { main, browser } = useThemes(dataSignal);
    return /* @__PURE__ */ _(CustomizerThemesContext.Provider, { value: { main, browser } }, /* @__PURE__ */ _("div", { class: Components_default.main, "data-main-scroller": true, "data-theme": main }, /* @__PURE__ */ _(BackgroundConsumer, { browser }), /* @__PURE__ */ _("div", { "data-content-tube": true, class: Components_default.contentTube }, isolated && /* @__PURE__ */ _(Isolated, { entries: filtered, e2e }), !isolated && /* @__PURE__ */ _(k, null, /* @__PURE__ */ _(DebugBar, { id: ids[0], ids, entries: entries3 }), /* @__PURE__ */ _(Stage, { entries: (
      /** @type {any} */
      filtered
    ) })))));
  }
  function Stage({ entries: entries4 }) {
    return /* @__PURE__ */ _("div", { class: Components_default.componentList, "data-testid": "stage" }, entries4.map(([id, item]) => {
      const next = new URL(url2);
      next.searchParams.set("isolate", "true");
      next.searchParams.set("id", id);
      const selected = new URL(url2);
      selected.searchParams.set("id", id);
      const e2e = new URL(url2);
      e2e.searchParams.set("isolate", "true");
      e2e.searchParams.set("id", id);
      e2e.searchParams.set("e2e", "true");
      const without = new URL(url2);
      const current = without.searchParams.getAll("id");
      const others = current.filter((x3) => x3 !== id);
      const matching = current.filter((x3) => x3 === id);
      const matchingMinus1 = matching.length === 1 ? [] : matching.slice(0, -1);
      without.searchParams.delete("id");
      for (let string2 of [...others, ...matchingMinus1]) {
        without.searchParams.append("id", string2);
      }
      return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("div", { class: Components_default.itemInfo }, /* @__PURE__ */ _("div", { class: Components_default.itemLinks }, /* @__PURE__ */ _("code", null, id), /* @__PURE__ */ _("a", { href: next.toString(), target: "_blank", title: "open in new tab" }, "Open \u{1F517}"), " ", /* @__PURE__ */ _("a", { href: without.toString(), hidden: current.length === 0 }, "Remove")), /* @__PURE__ */ _("div", { class: Components_default.itemLinks }, /* @__PURE__ */ _("a", { href: selected.toString(), class: Components_default.itemLink, title: "show this component only" }, "select"), " ", /* @__PURE__ */ _("a", { href: next.toString(), target: "_blank", class: Components_default.itemLink, title: "isolate this component" }, "isolate"), " ", /* @__PURE__ */ _("a", { href: e2e.toString(), target: "_blank", class: Components_default.itemLink, title: "isolate this component" }, "edge-to-edge"))), /* @__PURE__ */ _("div", { className: Components_default.item, key: id }, item.factory()));
    }));
  }
  function Isolated({ entries: entries4, e2e }) {
    if (e2e) {
      return /* @__PURE__ */ _("div", { "data-isolated": true }, entries4.map(([id, item]) => {
        return /* @__PURE__ */ _(k, { key: id }, item.factory());
      }));
    }
    return /* @__PURE__ */ _("div", { class: Components_default.componentList, "data-testid": "stage", "data-isolated": true }, entries4.map(([id, item], index2) => {
      return /* @__PURE__ */ _("div", { key: id + index2 }, item.factory());
    }));
  }
  function DebugBar({ entries: entries4, id, ids }) {
    return /* @__PURE__ */ _("div", { class: Components_default.debugBar, "data-testid": "selector" }, /* @__PURE__ */ _(ExampleSelector, { entries: entries4, id }), ids.length > 0 && /* @__PURE__ */ _(Append, { entries: entries4 }), /* @__PURE__ */ _(TextLength, null), /* @__PURE__ */ _(Isolate, null));
  }
  function TextLength() {
    function onClick() {
      url2.searchParams.set("textLength", "1.5");
      window.location.href = url2.toString();
    }
    function onReset() {
      url2.searchParams.delete("textLength");
      window.location.href = url2.toString();
    }
    return /* @__PURE__ */ _("div", { class: Components_default.buttonRow }, /* @__PURE__ */ _("button", { onClick: onReset, type: "button" }, "Text Length 1x"), /* @__PURE__ */ _("button", { onClick, type: "button" }, "Text Length 1.5x"));
  }
  function Isolate() {
    const next = new URL(url2);
    next.searchParams.set("isolate", "true");
    const prod = new URL("/build/pages/new-tab", "https://content-scope-scripts.netlify.app");
    prod.search = url2.search;
    return /* @__PURE__ */ _("div", { class: Components_default.buttonRow }, /* @__PURE__ */ _("a", { href: next.toString(), target: "_blank" }, "Isolate (open in a new tab)"), /* @__PURE__ */ _("a", { href: prod.toString(), target: "_blank" }, "Open in Production (new tab)"));
  }
  function ExampleSelector({ entries: entries4, id }) {
    function onReset() {
      const url8 = new URL(window.location.href);
      url8.searchParams.delete("id");
      window.location.href = url8.toString();
    }
    function onChange(event) {
      if (!event.target) return;
      if (!(event.target instanceof HTMLSelectElement)) return;
      const selectedId = event.target.value;
      if (selectedId) {
        if (selectedId === "none") return onReset();
        const url8 = new URL(window.location.href);
        url8.searchParams.set("id", selectedId);
        window.location.href = url8.toString();
      }
    }
    return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("div", { class: Components_default.buttonRow }, /* @__PURE__ */ _("label", null, "Single:", " ", /* @__PURE__ */ _("select", { value: id || "none", onChange }, /* @__PURE__ */ _("option", { value: "none" }, "Select an example"), entries4.map(([id2]) => /* @__PURE__ */ _("option", { key: id2, value: id2 }, id2)))), /* @__PURE__ */ _("button", { onClick: onReset }, "RESET \u{1F501}")));
  }
  function TubeGrid({ children }) {
    return /* @__PURE__ */ _("div", { class: Components_default.tubeGrid }, children);
  }
  function Append({ entries: entries4 }) {
    function onReset() {
      const url8 = new URL(window.location.href);
      url8.searchParams.delete("id");
      window.location.href = url8.toString();
    }
    function onSubmit(event) {
      if (!event.target) return;
      event.preventDefault();
      const form = event.target;
      const data2 = new FormData(form);
      const value2 = data2.get("add-id");
      if (typeof value2 !== "string") return;
      const url8 = new URL(window.location.href);
      url8.searchParams.append("id", value2);
      window.location.href = url8.toString();
    }
    return /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("form", { class: Components_default.buttonRow, onSubmit }, /* @__PURE__ */ _("label", null, "Append:", " ", /* @__PURE__ */ _("select", { value: "none", name: "add-id" }, /* @__PURE__ */ _("option", { value: "none" }, "Select an example"), entries4.map(([id]) => /* @__PURE__ */ _("option", { key: id, value: id }, id)))), /* @__PURE__ */ _("button", null, "Confirm")));
  }

  // shared/call-with-retry.js
  async function callWithRetry(fn2, params = {}) {
    const { maxAttempts = 10, intervalMs = 300 } = params;
    let attempt = 1;
    while (attempt <= maxAttempts) {
      try {
        return { value: await fn2(), attempt };
      } catch (error) {
        if (attempt === maxAttempts) {
          return { error: `Max attempts reached: ${error}` };
        }
        await new Promise((resolve) => setTimeout(resolve, intervalMs));
        attempt++;
      }
    }
    return { error: "Unreachable: value not retrieved" };
  }

  // pages/new-tab/app/index.js
  init_CustomizerProvider();

  // pages/new-tab/app/customizer/customizer.service.js
  init_service();
  var CustomizerService = class {
    /**
     * @param {import("../../src/index.js").NewTabPage} ntp - The internal data feed, expected to have a `subscribe` method.
     * @param {CustomizerData} initial
     * @internal
     */
    constructor(ntp, initial) {
      this.ntp = ntp;
      this.bgService = new Service(
        {
          subscribe: (cb) => ntp.messaging.subscribe("customizer_onBackgroundUpdate", cb),
          persist: (data2) => {
            ntp.messaging.notify("customizer_setBackground", data2);
          }
        },
        { background: initial.background }
      );
      this.themeService = new Service(
        {
          subscribe: (cb) => ntp.messaging.subscribe("customizer_onThemeUpdate", cb)
        },
        { theme: initial.theme }
      );
      this.imagesService = new Service(
        {
          subscribe: (cb) => ntp.messaging.subscribe("customizer_onImagesUpdate", cb)
        },
        { userImages: initial.userImages }
      );
      this.colorService = new Service(
        {
          subscribe: (cb) => ntp.messaging.subscribe("customizer_onColorUpdate", cb)
        },
        { userColor: initial.userColor }
      );
    }
    /**
     * @internal
     */
    destroy() {
      this.bgService.destroy();
      this.themeService.destroy();
      this.imagesService.destroy();
      this.colorService.destroy();
    }
    /**
     * @param {(evt: {data: BackgroundData, source: 'manual' | 'subscription'}) => void} cb
     * @internal
     */
    onBackground(cb) {
      return this.bgService.onData(cb);
    }
    /**
     * @param {(evt: {data: ThemeData, source: 'manual' | 'subscription'}) => void} cb
     * @internal
     */
    onTheme(cb) {
      return this.themeService.onData(cb);
    }
    /**
     * @param {(evt: {data: UserImageData, source: 'manual' | 'subscription'}) => void} cb
     * @internal
     */
    onImages(cb) {
      return this.imagesService.onData(cb);
    }
    /**
     * @param {(evt: {data: UserColorData, source: 'manual' | 'subscription'}) => void} cb
     * @internal
     */
    onColor(cb) {
      return this.colorService.onData(cb);
    }
    /**
     * @param {BackgroundData} bg
     */
    setBackground(bg) {
      this.bgService.update((_5) => {
        return bg;
      });
      if (bg.background.kind === "hex") {
        this.colorService.update((_old) => {
          if (bg.background.kind !== "hex") throw new Error("unreachable code path");
          return { userColor: structuredClone(bg.background) };
        });
      }
    }
    /**
     * @param {string} id
     */
    deleteImage(id) {
      this.imagesService.update((data2) => {
        return {
          ...data2,
          userImages: data2.userImages.filter((img) => img.id !== id)
        };
      });
      this.ntp.messaging.notify("customizer_deleteImage", { id });
    }
    /**
     *
     */
    upload() {
      this.ntp.messaging.notify("customizer_upload");
    }
    /**
     * @param {ThemeData} theme
     */
    setTheme(theme) {
      this.themeService.update((_data) => {
        return theme;
      });
      this.ntp.messaging.notify("customizer_setTheme", theme);
    }
    /**
     * @param {import('../../types/new-tab.js').UserImageContextMenu} params
     */
    contextMenu(params) {
      this.ntp.messaging.notify("customizer_contextMenu", params);
    }
  };

  // pages/new-tab/app/index.js
  init_DocumentVisibility();
  init_utils();
  init_tabs_service();
  init_TabsProvider();
  async function init(root2, messaging2, telemetry2, baseEnvironment2) {
    const result = await callWithRetry(() => messaging2.initialSetup());
    if ("error" in result) {
      throw new Error(result.error);
    }
    const init2 = result.value;
    console.log("INITIAL DATA", init2);
    if (!Array.isArray(init2.widgets)) {
      throw new Error("missing critical initialSetup.widgets array");
    }
    if (!Array.isArray(init2.widgetConfigs)) {
      throw new Error("missing critical initialSetup.widgetConfig array");
    }
    const environment = baseEnvironment2.withEnv(init2.env).withLocale(init2.locale).withLocale(baseEnvironment2.urlParams.get("locale")).withTextLength(baseEnvironment2.urlParams.get("textLength")).withDisplay(baseEnvironment2.urlParams.get("display"));
    const strings = await getStrings(environment);
    const settings = new Settings({}).withPlatformName(baseEnvironment2.injectName).withPlatformName(init2.platform?.name).withPlatformName(baseEnvironment2.urlParams.get("platform")).withFeatureState("customizerDrawer", init2.settings?.customizerDrawer).withFeatureState("adBlocking", init2.settings?.adBlocking);
    if (!window.__playwright_01) {
      console.log("environment:", environment);
      console.log("settings:", settings);
      console.log("locale:", environment.locale);
    }
    const didCatch = (message) => {
      messaging2.reportPageException({ message });
    };
    installGlobalSideEffects(environment, settings);
    applyDefaultStyles(init2.customizer?.defaultStyles);
    if (environment.display === "components") {
      return renderComponents(root2, environment, settings, strings);
    }
    const entryPoints = await resolveEntryPoints(init2.widgets, didCatch);
    const tabs = new TabsService(messaging2, init2.tabs || TabsService.DEFAULT);
    const widgetConfigAPI = new WidgetConfigService(messaging2, init2.widgetConfigs);
    const customizerData2 = init2.customizer || {
      userColor: null,
      background: { kind: "default" },
      theme: "system",
      userImages: []
    };
    const customizerApi = new CustomizerService(messaging2, customizerData2);
    E(
      /* @__PURE__ */ _(
        EnvironmentProvider,
        {
          debugState: environment.debugState,
          injectName: environment.injectName,
          willThrow: environment.willThrow,
          env: environment.env,
          locale: environment.locale
        },
        /* @__PURE__ */ _(
          InlineErrorBoundary,
          {
            context: "App entry point",
            fallback: (message) => /* @__PURE__ */ _(AppLevelErrorBoundaryFallback, null, message)
          },
          /* @__PURE__ */ _(UpdateEnvironment, { search: window.location.search }),
          /* @__PURE__ */ _(MessagingContext.Provider, { value: messaging2 }, /* @__PURE__ */ _(InitialSetupContext.Provider, { value: init2 }, /* @__PURE__ */ _(TelemetryContext.Provider, { value: telemetry2 }, /* @__PURE__ */ _(SettingsProvider, { settings }, /* @__PURE__ */ _(TranslationProvider, { translationObject: strings, fallback: new_tab_default, textLength: environment.textLength }, /* @__PURE__ */ _(CustomizerProvider, { service: customizerApi, initialData: customizerData2 }, /* @__PURE__ */ _(DocumentVisibilityProvider, null, /* @__PURE__ */ _(
            WidgetConfigProvider,
            {
              api: widgetConfigAPI,
              widgetConfigs: init2.widgetConfigs,
              widgets: init2.widgets,
              entryPoints
            },
            /* @__PURE__ */ _(TabsProvider, { service: tabs }, environment.urlParams.has("tabs.debug") && /* @__PURE__ */ _(TabsDebug, null), /* @__PURE__ */ _(App, null))
          ))))))))
        )
      ),
      root2
    );
  }
  async function getStrings(environment) {
    return environment.locale === "en" ? new_tab_default : await fetch(`./locales/${environment.locale}/new-tab.json`).then((x3) => x3.json()).catch((e4) => {
      console.error("Could not load locale", environment.locale, e4);
      return new_tab_default;
    });
  }
  function installGlobalSideEffects(environment, settings) {
    document.body.dataset.platformName = settings.platform.name;
    document.body.dataset.display = environment.display;
    document.body.dataset.animation = environment.urlParams.get("animation") || "";
  }
  async function resolveEntryPoints(widgets, didCatch) {
    try {
      const loaders = widgets.map((widget) => {
        return widgetEntryPoint(widget.id, didCatch).then((mod2) => [widget.id, mod2]);
      });
      const entryPoints = await Promise.all(loaders);
      return Object.fromEntries(entryPoints);
    } catch (e4) {
      const error = new Error("Error loading widget entry points:" + e4.message);
      didCatch(error.message);
      console.error(error);
      return {};
    }
  }
  function renderComponents(root2, environment, settings, strings) {
    $INTEGRATION: E(
      /* @__PURE__ */ _(
        EnvironmentProvider,
        {
          debugState: environment.debugState,
          injectName: environment.injectName,
          willThrow: environment.willThrow,
          locale: environment.locale
        },
        /* @__PURE__ */ _(SettingsProvider, { settings }, /* @__PURE__ */ _(TranslationProvider, { translationObject: strings, fallback: new_tab_default, textLength: environment.textLength }, /* @__PURE__ */ _(Components, null)))
      ),
      root2
    );
  }

  // shared/create-special-page-messaging.js
  function createSpecialPageMessaging(opts) {
    const messageContext = new MessagingContext2({
      context: "specialPages",
      featureName: opts.pageName,
      env: opts.env
    });
    try {
      if (opts.injectName === "windows") {
        const opts2 = new WindowsMessagingConfig({
          methods: {
            // @ts-expect-error - not in @types/chrome
            postMessage: globalThis.windowsInteropPostMessage,
            // @ts-expect-error - not in @types/chrome
            addEventListener: globalThis.windowsInteropAddEventListener,
            // @ts-expect-error - not in @types/chrome
            removeEventListener: globalThis.windowsInteropRemoveEventListener
          }
        });
        return new Messaging(messageContext, opts2);
      } else if (opts.injectName === "apple") {
        const opts2 = new WebkitMessagingConfig({
          hasModernWebkitAPI: true,
          secret: "",
          webkitMessageHandlerNames: ["specialPages"]
        });
        return new Messaging(messageContext, opts2);
      } else if (opts.injectName === "android") {
        const opts2 = new AndroidMessagingConfig({
          messageSecret: "duckduckgo-android-messaging-secret",
          messageCallback: "messageCallback",
          javascriptInterface: messageContext.context,
          target: globalThis,
          debug: true
        });
        return new Messaging(messageContext, opts2);
      }
    } catch (e4) {
      console.error("could not access handlers for %s, falling back to mock interface", opts.injectName);
    }
    const fallback = opts.mockTransport?.() || new TestTransportConfig({
      /**
       * @param {import('@duckduckgo/messaging').NotificationMessage} msg
       */
      notify(msg) {
        console.log(msg);
      },
      /**
       * @param {import('@duckduckgo/messaging').RequestMessage} msg
       */
      request: (msg) => {
        console.log(msg);
        if (msg.method === "initialSetup") {
          return Promise.resolve({
            locale: "en",
            env: opts.env
          });
        }
        return Promise.resolve(null);
      },
      /**
       * @param {import('@duckduckgo/messaging').SubscriptionEvent} msg
       */
      subscribe(msg) {
        console.log(msg);
        return () => {
          console.log("teardown");
        };
      }
    });
    return new Messaging(messageContext, fallback);
  }

  // shared/environment.js
  var Environment = class _Environment {
    /**
     * @param {object} params
     * @param {'app' | 'components'} [params.display] - whether to show the application or component list
     * @param {'production' | 'development'} [params.env] - application environment
     * @param {URLSearchParams} [params.urlParams] - URL params passed into the page
     * @param {ImportMeta['injectName']} [params.injectName] - application platform
     * @param {boolean} [params.willThrow] - whether the application will simulate an error
     * @param {boolean} [params.debugState] - whether to show debugging UI
     * @param {keyof typeof import('./utils').translationsLocales} [params.locale] - for applications strings and numbers formatting
     * @param {number} [params.textLength] - what ratio of text should be used. Set a number higher than 1 to have longer strings for testing
     */
    constructor({
      env = "production",
      urlParams = new URLSearchParams(location.search),
      injectName = "windows",
      willThrow = urlParams.get("willThrow") === "true",
      debugState = urlParams.has("debugState"),
      display = "app",
      locale = "en",
      textLength = 1
    } = {}) {
      this.display = display;
      this.urlParams = urlParams;
      this.injectName = injectName;
      this.willThrow = willThrow;
      this.debugState = debugState;
      this.env = env;
      this.locale = locale;
      this.textLength = textLength;
    }
    /**
     * @param {string|null|undefined} injectName
     * @returns {Environment}
     */
    withInjectName(injectName) {
      if (!injectName) return this;
      if (!isInjectName(injectName)) return this;
      return new _Environment({
        ...this,
        injectName
      });
    }
    /**
     * @param {string|null|undefined} env
     * @returns {Environment}
     */
    withEnv(env) {
      if (!env) return this;
      if (env !== "production" && env !== "development") return this;
      return new _Environment({
        ...this,
        env
      });
    }
    /**
     * @param {string|null|undefined} display
     * @returns {Environment}
     */
    withDisplay(display) {
      if (!display) return this;
      if (display !== "app" && display !== "components") return this;
      return new _Environment({
        ...this,
        display
      });
    }
    /**
     * @param {string|null|undefined} locale
     * @returns {Environment}
     */
    withLocale(locale) {
      if (!locale) return this;
      if (typeof locale !== "string") return this;
      if (locale.length !== 2) return this;
      return new _Environment({
        ...this,
        locale
      });
    }
    /**
     * @param {string|number|null|undefined} length
     * @returns {Environment}
     */
    withTextLength(length2) {
      if (!length2) return this;
      const num = Number(length2);
      if (num >= 1 && num <= 2) {
        return new _Environment({
          ...this,
          textLength: num
        });
      }
      return this;
    }
  };
  function isInjectName(input) {
    const allowed = ["windows", "apple", "integration", "android"];
    return allowed.includes(input);
  }

  // pages/new-tab/app/update-notification/mocks/update-notification.data.js
  var updateNotificationExamples2 = {
    empty: {
      content: {
        version: "1.65.0",
        notes: []
      }
    },
    populated: {
      content: {
        // prettier-ignore
        notes: [
          "\u2022 Bug fixes and improvements",
          "Optimized performance for faster load times"
        ],
        version: "1.91"
      }
    },
    multipleSections: {
      content: {
        // prettier-ignore
        notes: [
          `\u2022 We're excited to introduce a new browsing feature - Fire Windows. These special windows work the same way as normal windows, except they isolate your activity from other browsing data and self-destruct when closed. This means you can use a Fire Window to browse without saving local history or to sign into a site with a different account. You can open a new Fire Window anytime from the Fire Button menu.`,
          `\u2022 Try the new bookmark management view that opens in a tab for more robust bookmark organization.`,
          `For DuckDuckGo subscribers`,
          `\u2022 VPN notifications are now available to help communicate VPN status.`,
          `\u2022 Some apps aren't compatible with VPNs. You can now exclude these apps to use them while connected to the VPN.`,
          `\u2022 Visit https://duckduckgo.com/pro for more information.`
        ],
        version: "0.98.4"
      }
    }
  };

  // pages/new-tab/app/mock-transport.js
  init_nextsteps_data();

  // pages/new-tab/app/customizer/mocks.js
  init_values();
  var url3 = new URL(window.location.href);
  function customizerMockTransport() {
    let channel;
    if (typeof globalThis.BroadcastChannel !== "undefined") {
      channel = new BroadcastChannel("ntp_customizer");
    }
    const subscriptions = /* @__PURE__ */ new Map();
    function broadcastHere(named, data2) {
      setTimeout(() => {
        channel?.postMessage({
          subscriptionName: named,
          params: data2
        });
      }, 100);
    }
    channel?.addEventListener("message", (msg) => {
      if (msg.data.subscriptionName) {
        const cb = subscriptions.get(msg.data.subscriptionName);
        if (!cb) return console.warn(`missing subscription for ${msg.data.subscriptionName}`);
        cb(msg.data.params);
      }
    });
    return new TestTransportConfig({
      notify(_msg) {
        const msg = (
          /** @type {any} */
          _msg
        );
        switch (msg.method) {
          case "customizer_setTheme": {
            broadcastHere("customizer_onThemeUpdate", msg.params);
            return;
          }
          case "customizer_setBackground": {
            broadcastHere("customizer_onBackgroundUpdate", msg.params);
            if (msg.params.background.kind === "hex") {
              const userColorData = { userColor: msg.params.background };
              broadcastHere("customizer_onColorUpdate", userColorData);
            }
            return;
          }
          default: {
            console.warn("unhandled customizer notification", msg);
          }
        }
      },
      subscribe(_msg, cb) {
        const sub2 = (
          /** @type {any} */
          _msg.subscriptionName
        );
        switch (sub2) {
          case "customizer_onColorUpdate":
          case "customizer_onThemeUpdate":
          case "customizer_onBackgroundUpdate":
          case "customizer_onImagesUpdate": {
            subscriptions.set(sub2, cb);
            return () => {
              console.log("-- did remove sub", sub2);
              return subscriptions.delete(sub2);
            };
          }
        }
        return () => {
        };
      },
      // eslint-ignore-next-line require-await
      request(_msg) {
        const msg = (
          /** @type {any} */
          _msg
        );
        switch (msg.method) {
          default: {
            return Promise.reject(new Error("unhandled request" + msg));
          }
        }
      }
    });
  }
  function getDefaultStyles() {
    if (url3.searchParams.get("defaultStyles") === "visual-refresh") {
      return {
        lightBackgroundColor: "#E9EBEC",
        darkBackgroundColor: "#27282A"
      };
    }
    return null;
  }
  function customizerData() {
    const customizer = {
      userImages: [],
      userColor: null,
      theme: "system",
      background: { kind: "default" },
      defaultStyles: getDefaultStyles()
    };
    if (url3.searchParams.has("background")) {
      const backgroundParam = url3.searchParams.get("background");
      if (backgroundParam && backgroundParam in values.colors) {
        customizer.background = {
          kind: "color",
          value: (
            /** @type {import('../../types/new-tab').PredefinedColor} */
            backgroundParam
          )
        };
      } else if (backgroundParam && backgroundParam in values.gradients) {
        customizer.background = {
          kind: "gradient",
          value: (
            /** @type {import('../../types/new-tab').PredefinedGradient} */
            backgroundParam
          )
        };
      } else if (backgroundParam && backgroundParam.startsWith("hex:")) {
        const hex = backgroundParam.slice(4);
        if (hex.length === 6 || hex.length === 8) {
          const value2 = `#${hex.slice(0, 6)}`;
          customizer.background = {
            kind: "hex",
            value: value2
          };
        } else {
          console.warn("invalid hex values");
        }
      } else if (backgroundParam && backgroundParam.startsWith("userImage:")) {
        const image = backgroundParam.slice(10);
        if (image in values.userImages) {
          const value2 = values.userImages[image];
          customizer.background = {
            kind: "userImage",
            value: value2
          };
        } else {
          console.warn("unknown user image");
        }
      } else if (backgroundParam && backgroundParam === "default") {
        customizer.background = { kind: "default" };
      }
    }
    if (url3.searchParams.has("userImages")) {
      customizer.userImages = [values.userImages["01"], values.userImages["02"], values.userImages["03"]];
      if (url3.searchParams.get("willThrowPageException") === "userImages") {
        customizer.userImages[0] = {
          ...customizer.userImages[0],
          id: "__will_throw__"
        };
      }
    }
    if (url3.searchParams.has("userColor")) {
      const hex = `#` + url3.searchParams.get("userColor");
      customizer.userColor = { kind: "hex", value: hex };
    }
    if (url3.searchParams.has("theme")) {
      const value2 = url3.searchParams.get("theme");
      if (value2 === "light" || value2 === "dark" || value2 === "system") {
        customizer.theme = value2;
      }
    }
    return customizer;
  }

  // pages/new-tab/app/protections/mocks/protections.mocks.js
  var protectionsMocks = {
    empty: {
      totalCount: 0
    },
    few: {
      totalCount: 86
    },
    many: {
      totalCount: 1000020
    }
  };

  // pages/new-tab/app/protections/mocks/protections.mock-transport.js
  var url4 = typeof window !== "undefined" ? new URL(window.location.href) : new URL("https://example.com");
  function clone2(value2) {
    return window.structuredClone?.(value2) ?? JSON.parse(JSON.stringify(value2));
  }
  function protectionsMockTransport() {
    let dataset = clone2(protectionsMocks.few);
    const config = {
      expansion: "expanded",
      feed: "privacy-stats"
    };
    if (url4.searchParams.has("protections")) {
      const key2 = url4.searchParams.get("protections");
      if (key2 && key2 in protectionsMocks) {
        dataset = clone2(protectionsMocks[key2]);
      } else {
        console.warn("unknown mock dataset for", key2);
      }
    }
    const subs = /* @__PURE__ */ new Map();
    return new TestTransportConfig({
      notify(_msg) {
        const msg = (
          /** @type {any} */
          _msg
        );
        switch (msg.method) {
          case "protections_setConfig": {
            Object.assign(config, msg.params);
            subs.get("protections_onConfigUpdate")?.(config);
            break;
          }
          default: {
            console.warn("unhandled notification", msg);
          }
        }
      },
      subscribe(_msg, cb) {
        const sub2 = (
          /** @type {any} */
          _msg.subscriptionName
        );
        if (sub2 === "protections_onDataUpdate") {
          subs.set(sub2, cb);
          if (url4.searchParams.get("protections.continuous")) {
            const int = setInterval(() => {
              dataset.totalCount += 1;
              subs.get(sub2)?.(dataset);
            }, 1e3);
            return () => {
              console.log("did cleanup");
              clearInterval(int);
            };
          }
        }
        if (sub2 === "protections_onConfigUpdate") {
          subs.set(sub2, cb);
          return () => {
          };
        }
        if (sub2 === "protections_onDataUpdate") {
          return () => {
          };
        }
        console.warn("unhandled sub", sub2);
        return () => {
        };
      },
      // eslint-ignore-next-line require-await
      request(_msg) {
        const msg = (
          /** @type {any} */
          _msg
        );
        switch (msg.method) {
          case "protections_getData":
            if (url4.searchParams.get("stats") === "none") {
              dataset.totalCount = 0;
            }
            if (url4.searchParams.get("activity") === "empty") {
              dataset.totalCount = 0;
            }
            return Promise.resolve(dataset);
          case "protections_getConfig": {
            if (url4.searchParams.get("protections.feed") === "activity") {
              config.feed = "activity";
            }
            if (url4.searchParams.get("protections.burn") === "false") {
              config.showBurnAnimation = false;
            }
            return Promise.resolve(config);
          }
          default: {
            return Promise.reject(new Error("unhandled request" + msg));
          }
        }
      }
    });
  }

  // pages/new-tab/app/omnibar/mocks/omnibar.mocks.js
  var pizzaRelatedData = {
    phrases: [
      "pizza near me",
      "pizza delivery",
      "pizza hut",
      "pizza recipes",
      "pizza express",
      "pizza dough recipe",
      "pizza marinara",
      "pizza margherita",
      "pizzeria italiano",
      "pizza places open now",
      "pizza express menu",
      "pizza toppings",
      "pizza sauce recipe",
      "pizza napoletana",
      "pizza pasta"
    ],
    websites: ["pizzahut.com", "dominos.com", "papajohns.com", "littlecaesars.com", "pizzaexpress.com"],
    historyEntries: [
      "Best Pizza Places in New York",
      "Pizza Making Tips and Tricks",
      "Italian Pizza History",
      "Homemade Pizza Guide",
      "Pizza Dough Calculator"
    ],
    openTabs: ["Chicago vs New York Pizza"]
  };
  function getMockSuggestions(term) {
    return {
      suggestions: {
        topHits: pizzaRelatedData.phrases.filter((phrase) => containsIgnoreCase(phrase, term)).slice(0, 3).map((phrase) => ({
          kind: (
            /** @type {const} */
            "phrase"
          ),
          phrase,
          score: random2(95, 99)
        })),
        duckduckgoSuggestions: [
          ...pizzaRelatedData.websites.filter((phrase) => containsIgnoreCase(phrase, term)).slice(0, 2).map((website, index2) => ({
            kind: (
              /** @type {const} */
              "bookmark"
            ),
            title: website,
            url: website,
            isFavorite: index2 === 0,
            score: random2(95, 99)
          })),
          ...pizzaRelatedData.phrases.filter((phrase) => containsIgnoreCase(phrase, term)).slice(3, 8).map((phrase) => ({
            kind: (
              /** @type {const} */
              "phrase"
            ),
            phrase
          })),
          ...pizzaRelatedData.websites.filter((site) => containsIgnoreCase(site, term)).map((url8) => ({
            kind: (
              /** @type {const} */
              "website"
            ),
            url: `https://${url8}`
          }))
        ],
        localSuggestions: [
          ...pizzaRelatedData.historyEntries.filter((title) => containsIgnoreCase(title, term)).map((title) => ({
            kind: (
              /** @type {const} */
              "historyEntry"
            ),
            title,
            url: `https://example.com/search?q=${encodeURIComponent(title)}`,
            score: random2(80, 89)
          })),
          ...pizzaRelatedData.openTabs.filter((title) => containsIgnoreCase(title, term)).map((title) => ({
            kind: (
              /** @type {const} */
              "openTab"
            ),
            title,
            tabId: `tab-${random2(1e3, 9999)}`,
            score: random2(80, 89)
          }))
        ]
      }
    };
  }
  function containsIgnoreCase(text2, searchTerm) {
    return text2.toLowerCase().includes(searchTerm.toLowerCase());
  }
  function random2(min, max) {
    return min + Math.floor(Math.random() * (max - min + 1));
  }

  // pages/new-tab/app/omnibar/mocks/omnibar.mock-transport.js
  var url5 = typeof window !== "undefined" ? new URL(window.location.href) : new URL("https://example.com");
  function omnibarMockTransport() {
    const config = {
      mode: "search",
      enableAi: true,
      showAiSetting: true,
      showCustomizePopover: false
    };
    const subs = /* @__PURE__ */ new Map();
    return new TestTransportConfig({
      notify(_msg) {
        const msg = (
          /** @type {any} */
          _msg
        );
        switch (msg.method) {
          case "omnibar_setConfig": {
            Object.assign(config, msg.params);
            subs.get("omnibar_onConfigUpdate")?.(config);
            break;
          }
          default: {
            console.warn("unhandled notification", msg);
          }
        }
      },
      subscribe(_msg, cb) {
        const sub2 = (
          /** @type {any} */
          _msg.subscriptionName
        );
        if (sub2 === "omnibar_onConfigUpdate") {
          subs.set(sub2, cb);
          return () => {
          };
        }
        console.warn("unhandled sub", sub2);
        return () => {
        };
      },
      async request(_msg) {
        const msg = (
          /** @type {any} */
          _msg
        );
        switch (msg.method) {
          case "omnibar_getConfig": {
            const modeOverride = url5.searchParams.get("omnibar.mode");
            if (modeOverride === "search" || modeOverride === "ai") {
              config.mode = modeOverride;
            }
            const enableAiOverride = url5.searchParams.get("omnibar.enableAi");
            if (enableAiOverride === "true" || enableAiOverride === "false") {
              config.enableAi = enableAiOverride === "true";
            }
            const showAiSettingOverride = url5.searchParams.get("omnibar.showAiSetting");
            if (showAiSettingOverride === "true" || showAiSettingOverride === "false") {
              config.showAiSetting = showAiSettingOverride === "true";
            }
            const showCustomizePopoverOverride = url5.searchParams.get("omnibar.showCustomizePopover");
            if (showCustomizePopoverOverride === "true" || showCustomizePopoverOverride === "false") {
              config.showCustomizePopover = showCustomizePopoverOverride === "true";
            }
            return config;
          }
          case "omnibar_getSuggestions": {
            await new Promise((resolve) => setTimeout(resolve, 100));
            return getMockSuggestions(msg.params.term);
          }
          default: {
            throw new Error("unhandled request" + msg);
          }
        }
      }
    });
  }

  // pages/new-tab/app/tabs/tabs.mock-transport.js
  init_tabs_service();
  var url6 = new URL(window.location.href);
  function tabsMockTransport() {
    const initial = initialSetup(url6);
    const memory = initial.tabs ? structuredClone(initial.tabs) : TabsService.DEFAULT;
    return new TestTransportConfig({
      request() {
        return Promise.reject(new Error("not implemented yet"));
      },
      notify() {
        return Promise.reject(new Error("not implemented yet"));
      },
      /**
       * @template {Names} K
       * @template {{ subscriptionName: K, context: string, featureName: string }} Msg
       * @param {Msg} msg
       */
      subscribe(msg, cb) {
        if (msg.subscriptionName === "tabs_onDataUpdate") {
          window._tabs = {
            add: (id) => {
              memory.tabId = id;
              memory.tabIds.push(id);
              memory.tabIds = [...new Set(memory.tabIds)];
              cb(structuredClone(memory));
            },
            tabs: ({ tabId, tabIds }) => {
              memory.tabId = tabId;
              memory.tabIds = tabIds;
              cb(structuredClone(memory));
            },
            delete: (id) => {
              memory.tabIds = memory.tabIds.filter((x3) => x3 !== id);
              cb(structuredClone(memory));
            },
            switch: (id) => {
              memory.tabId = id;
              cb(structuredClone(memory));
            }
          };
          return () => {
          };
        }
        return () => {
        };
      }
    });
  }

  // pages/new-tab/app/mock-transport.js
  var VERSION_PREFIX = "__ntp_31__.";
  var url7 = new URL(window.location.href);
  function mockTransport() {
    let channel;
    if (typeof globalThis.BroadcastChannel !== "undefined") {
      channel = new BroadcastChannel("ntp");
    }
    const subscriptions = /* @__PURE__ */ new Map();
    if ("__playwright_01" in window) {
      window.__playwright_01.publishSubscriptionEvent = (evt) => {
        const matchingCallback = subscriptions.get(evt.subscriptionName);
        if (!matchingCallback) return console.error("no matching callback for subscription", evt);
        matchingCallback(evt.params);
      };
    }
    function broadcast(named) {
      setTimeout(() => {
        channel?.postMessage({
          change: named
        });
      }, 100);
    }
    function read(name2) {
      try {
        if (url7.searchParams.has("skip-read")) {
          console.warn("not reading from localstorage, because skip-read was in the search");
          return null;
        }
        const item = localStorage.getItem(VERSION_PREFIX + name2);
        if (!item) return null;
        return JSON.parse(item);
      } catch (e4) {
        console.error("Failed to parse initialSetup from localStorage", e4);
        return null;
      }
    }
    function write(name2, value2) {
      try {
        if (url7.searchParams.has("skip-write")) {
          console.warn("not writing to localstorage, because skip-write was in the search");
          return;
        }
        localStorage.setItem(VERSION_PREFIX + name2, JSON.stringify(value2));
      } catch (e4) {
        console.error("Failed to write", e4);
      }
    }
    const rmfSubscriptions = /* @__PURE__ */ new Map();
    const freemiumPIRBannerSubscriptions = /* @__PURE__ */ new Map();
    const nextStepsSubscriptions = /* @__PURE__ */ new Map();
    const subscriptionWinBackBannerSubscriptions = /* @__PURE__ */ new Map();
    function clearRmf() {
      const listeners = rmfSubscriptions.get("rmf_onDataUpdate") || [];
      const message = { content: void 0 };
      for (const listener of listeners) {
        listener(message);
      }
    }
    function clearNextStepsCard(cardId, data2) {
      const listeners = nextStepsSubscriptions.get("nextSteps_onDataUpdate") || [];
      const newContent = data2.content.filter((card) => card.id !== cardId);
      const message = { content: newContent };
      for (const listener of listeners) {
        listener(message);
        write("nextSteps_data", message);
      }
    }
    const transports = {
      customizer: customizerMockTransport(),
      activity: activityMockTransport(),
      protections: protectionsMockTransport(),
      omnibar: omnibarMockTransport(),
      tabs: tabsMockTransport()
    };
    return new TestTransportConfig({
      notify(_msg) {
        window.__playwright_01?.mocks?.outgoing?.push?.({ payload: structuredClone(_msg) });
        const msg = (
          /** @type {any} */
          _msg
        );
        const [namespace] = msg.method.split("_");
        if (namespace in transports) {
          transports[namespace]?.impl.notify(_msg);
          return;
        }
        switch (msg.method) {
          case "widgets_setConfig": {
            if (!msg.params) throw new Error("unreachable");
            write("widget_config", msg.params);
            broadcast("widget_config");
            return;
          }
          case "rmf_primaryAction": {
            console.log("ignoring rmf_primaryAction", msg.params);
            clearRmf();
            return;
          }
          case "rmf_secondaryAction": {
            console.log("ignoring rmf_secondaryAction", msg.params);
            clearRmf();
            return;
          }
          case "rmf_dismiss": {
            console.log("ignoring rmf_dismiss", msg.params);
            clearRmf();
            return;
          }
          case "freemiumPIRBanner_action": {
            console.log("ignoring freemiumPIRBanner_action", msg.params);
            return;
          }
          case "freemiumPIRBanner_dismiss": {
            console.log("ignoring freemiumPIRBanner_dismiss", msg.params);
            return;
          }
          case "winBackOffer_action": {
            console.log("ignoring winBackOffer_action", msg.params);
            return;
          }
          case "winBackOffer_dismiss": {
            console.log("ignoring winBackOffer_dismiss", msg.params);
            return;
          }
          case "favorites_setConfig": {
            if (!msg.params) throw new Error("unreachable");
            const { animation, ...rest } = msg.params;
            write("favorites_config", rest);
            broadcast("favorites_config");
            return;
          }
          case "favorites_move": {
            if (!msg.params) throw new Error("unreachable");
            const { id, targetIndex } = msg.params;
            const data2 = read("favorites_data");
            if (Array.isArray(data2?.favorites)) {
              const favorites2 = reorderArray(data2.favorites, id, targetIndex);
              write("favorites_data", { favorites: favorites2 });
              broadcast("favorites_data");
            }
            return;
          }
          case "favorites_openContextMenu": {
            if (!msg.params) throw new Error("unreachable");
            console.log("mock: ignoring favorites_openContextMenu", msg.params);
            return;
          }
          case "favorites_add": {
            console.log("mock: ignoring favorites_add");
            return;
          }
          case "nextSteps_dismiss": {
            if (msg.params.id) {
              const data2 = read("nextSteps_data");
              clearNextStepsCard(msg.params.id, data2);
              return;
            }
            console.log("ignoring nextSteps_dismiss");
            return;
          }
          default: {
            console.warn("unhandled notification", msg);
          }
        }
      },
      subscribe(_msg, cb) {
        const sub2 = (
          /** @type {any} */
          _msg.subscriptionName
        );
        if ("__playwright_01" in window) {
          window.__playwright_01?.mocks?.outgoing?.push?.({ payload: structuredClone(_msg) });
          subscriptions.set(sub2, cb);
          return () => {
            subscriptions.delete(sub2);
          };
        }
        const [namespace] = sub2.split("_");
        if (namespace in transports) {
          return transports[namespace]?.impl.subscribe(_msg, cb);
        }
        switch (sub2) {
          case "widgets_onConfigUpdated": {
            const controller = new AbortController();
            channel?.addEventListener(
              "message",
              (msg) => {
                if (msg.data.change === "widget_config") {
                  const values2 = read("widget_config");
                  if (values2) {
                    cb(values2);
                  }
                }
              },
              { signal: controller.signal }
            );
            return () => controller.abort();
          }
          case "freemiumPIRBanner_onDataUpdate": {
            const prev = freemiumPIRBannerSubscriptions.get("freemiumPIRBanner_onDataUpdate") || [];
            const next = [...prev];
            next.push(cb);
            freemiumPIRBannerSubscriptions.set("freemiumPIRBanner_onDataUpdate", next);
            const freemiumPIRBannerParam = url7.searchParams.get("pir");
            if (freemiumPIRBannerParam !== null && freemiumPIRBannerParam in freemiumPIRDataExamples) {
              const message = freemiumPIRDataExamples[freemiumPIRBannerParam];
              cb(message);
            }
            return () => {
            };
          }
          case "winBackOffer_onDataUpdate": {
            const prev = subscriptionWinBackBannerSubscriptions.get("winBackOffer_onDataUpdate") || [];
            const next = [...prev];
            next.push(cb);
            subscriptionWinBackBannerSubscriptions.set("winBackOffer_onDataUpdate", next);
            const subscriptionWinBackBannerParam = url7.searchParams.get("winback");
            if (subscriptionWinBackBannerParam !== null && subscriptionWinBackBannerParam in subscriptionWinBackBannerDataExamples) {
              const message = subscriptionWinBackBannerDataExamples[subscriptionWinBackBannerParam];
              cb(message);
            }
            return () => {
            };
          }
          case "nextSteps_onDataUpdate": {
            const prev = nextStepsSubscriptions.get("nextSteps_onDataUpdate") || [];
            const next = [...prev];
            next.push(cb);
            nextStepsSubscriptions.set("nextSteps_onDataUpdate", next);
            const params = url7.searchParams.get("next-steps");
            if (params && params in variants) {
              const data2 = read("nextSteps_data");
              cb(data2);
            }
            return () => {
            };
          }
          case "rmf_onDataUpdate": {
            const prev = rmfSubscriptions.get("rmf_onDataUpdate") || [];
            const next = [...prev];
            next.push(cb);
            rmfSubscriptions.set("rmf_onDataUpdate", next);
            const delay = url7.searchParams.get("rmf-delay");
            const rmfParam = url7.searchParams.get("rmf");
            if (delay !== null && rmfParam !== null && rmfParam in rmfDataExamples) {
              const ms = parseInt(delay, 10);
              const timeout = setTimeout(() => {
                const message = rmfDataExamples[rmfParam];
                cb(message);
              }, ms);
              return () => clearTimeout(timeout);
            }
            return () => {
            };
          }
          case "updateNotification_onDataUpdate": {
            const update = url7.searchParams.get("update-notification");
            const delay = url7.searchParams.get("update-notification-delay");
            if (update && delay && update in updateNotificationExamples2) {
              const ms = parseInt(delay, 10);
              const timeout = setTimeout(() => {
                const message = updateNotificationExamples2[update];
                cb(message);
              }, ms);
              return () => clearTimeout(timeout);
            }
            return () => {
            };
          }
          case "favorites_onDataUpdate": {
            const controller = new AbortController();
            channel?.addEventListener(
              "message",
              (msg) => {
                if (msg.data.change === "favorites_data") {
                  const values2 = read("favorites_data");
                  if (values2) {
                    cb(values2);
                  }
                }
              },
              { signal: controller.signal }
            );
            return () => controller.abort();
          }
          case "stats_onDataUpdate": {
            const statsVariant = url7.searchParams.get("stats");
            const count = url7.searchParams.get("stats-update-count");
            const updateMaxCount = parseInt(count || "0");
            if (updateMaxCount === 0) return () => {
            };
            if (statsVariant === "willUpdate") {
              let inc = 1;
              const max = Math.min(updateMaxCount, 10);
              const int = setInterval(() => {
                if (inc === max) return clearInterval(int);
                const next = {
                  ...privacyStatsMocks.few,
                  trackerCompanies: privacyStatsMocks.few.trackerCompanies.map((x3, index2) => {
                    return {
                      ...x3,
                      count: x3.count + inc * index2
                    };
                  })
                };
                cb(next);
                inc++;
              }, 500);
              return () => {
                clearInterval(int);
              };
            } else if (statsVariant === "growing") {
              const list2 = privacyStatsMocks.many.trackerCompanies;
              let index2 = 0;
              const max = Math.min(updateMaxCount, list2.length);
              const int = setInterval(() => {
                if (index2 === max) return clearInterval(int);
                console.log({ index: index2, max });
                cb({
                  trackerCompanies: list2.slice(0, index2 + 1)
                });
                index2++;
              }, 200);
              return () => {
              };
            } else {
              console.log(statsVariant);
              return () => {
              };
            }
          }
          case "favorites_onConfigUpdate": {
            const controller = new AbortController();
            channel?.addEventListener(
              "message",
              (msg) => {
                if (msg.data.change === "favorites_config") {
                  const values2 = read("favorites_config");
                  if (values2) {
                    cb(values2);
                  }
                }
              },
              { signal: controller.signal }
            );
            return () => controller.abort();
          }
          case "favorites_onRefresh": {
            if (url7.searchParams.get("favoriteRefresh") === "favicons") {
              const timer2 = setTimeout(() => {
                const payload = {
                  items: [{ kind: "favicons" }]
                };
                cb(payload);
              }, 1e3);
              return () => {
                clearTimeout(timer2);
              };
            } else {
              return () => {
              };
            }
          }
        }
        return () => {
        };
      },
      // eslint-ignore-next-line require-await
      request(_msg) {
        window.__playwright_01?.mocks?.outgoing?.push?.({ payload: structuredClone(_msg) });
        const msg = (
          /** @type {any} */
          _msg
        );
        const [namespace] = msg.method.split("_");
        if (namespace in transports) {
          return transports[namespace]?.impl.request(_msg);
        }
        switch (msg.method) {
          case "stats_getData": {
            const statsVariant = url7.searchParams.get("stats");
            if (statsVariant && statsVariant in privacyStatsMocks) {
              return Promise.resolve(privacyStatsMocks[statsVariant]);
            }
            return Promise.resolve(privacyStatsMocks.few);
          }
          case "nextSteps_getConfig": {
            const config = { expansion: "collapsed" };
            return Promise.resolve(config);
          }
          case "nextSteps_getData": {
            let data2 = { content: null };
            const ids = url7.searchParams.getAll("next-steps");
            if (ids.length) {
              data2 = {
                content: ids.filter((id) => {
                  if (!(id in variants)) {
                    console.warn(`${id} missing in nextSteps data`);
                    return false;
                  }
                  return true;
                }).map((id) => {
                  return { id: (
                    /** @type {any} */
                    id
                  ) };
                })
              };
              write("nextSteps_data", data2);
            }
            return Promise.resolve(data2);
          }
          case "rmf_getData": {
            let message = { content: void 0 };
            const rmfParam = url7.searchParams.get("rmf");
            const delayed = url7.searchParams.has("rmf-delay");
            if (delayed) return Promise.resolve(message);
            if (rmfParam && rmfParam in rmfDataExamples) {
              message = rmfDataExamples[rmfParam];
            }
            return Promise.resolve(message);
          }
          case "freemiumPIRBanner_getData": {
            let freemiumPIRBannerMessage = { content: null };
            const freemiumPIRBannerParam = url7.searchParams.get("pir");
            if (freemiumPIRBannerParam && freemiumPIRBannerParam in freemiumPIRDataExamples) {
              freemiumPIRBannerMessage = freemiumPIRDataExamples[freemiumPIRBannerParam];
            }
            return Promise.resolve(freemiumPIRBannerMessage);
          }
          case "winBackOffer_getData": {
            let subscriptionWinBackBannerMessage = { content: null };
            const subscriptionWinBackBannerParam = url7.searchParams.get("winback");
            if (subscriptionWinBackBannerParam && subscriptionWinBackBannerParam in subscriptionWinBackBannerDataExamples) {
              subscriptionWinBackBannerMessage = subscriptionWinBackBannerDataExamples[subscriptionWinBackBannerParam];
            }
            return Promise.resolve(subscriptionWinBackBannerMessage);
          }
          case "favorites_getData": {
            const param = url7.searchParams.get("favorites");
            let data2;
            if (param && param in favorites) {
              data2 = favorites[param];
            } else {
              data2 = param ? gen(Number(url7.searchParams.get("favorites"))) : read("favorites_data") || favorites.many;
            }
            write("favorites_data", data2);
            return Promise.resolve(data2);
          }
          case "favorites_getConfig": {
            const defaultConfig = { expansion: "collapsed", animation: { kind: "view-transitions" } };
            const fromStorage = read("favorites_config") || defaultConfig;
            if (url7.searchParams.get("favorites.config.expansion") === "expanded") {
              defaultConfig.expansion = "expanded";
            }
            return Promise.resolve(fromStorage);
          }
          case "initialSetup": {
            return Promise.resolve(initialSetup(url7));
          }
          default: {
            return Promise.reject(new Error("unhandled request" + msg));
          }
        }
      }
    });
  }
  function initialSetup(url8) {
    const widgetsFromStorage = [
      { id: "updateNotification" },
      { id: "rmf" },
      { id: "freemiumPIRBanner" },
      { id: "subscriptionWinBackBanner" },
      { id: "nextSteps" },
      { id: "favorites" }
    ];
    const widgetConfigFromStorage = [{ id: "favorites", visibility: "visible" }];
    let updateNotification = { content: null };
    const isDelayed = url8.searchParams.has("update-notification-delay");
    if (!isDelayed && url8.searchParams.has("update-notification")) {
      const value2 = url8.searchParams.get("update-notification");
      if (value2 && value2 in updateNotificationExamples2) {
        updateNotification = updateNotificationExamples2[value2];
      }
    }
    const initial = {
      widgets: widgetsFromStorage,
      widgetConfigs: widgetConfigFromStorage,
      platform: { name: "integration" },
      env: "development",
      locale: "en",
      updateNotification
    };
    widgetsFromStorage.push({ id: "protections" });
    widgetConfigFromStorage.push({ id: "protections", visibility: "visible" });
    if (url8.searchParams.has("omnibar")) {
      const favoritesWidgetIndex = widgetsFromStorage.findIndex((widget) => widget.id === "favorites") ?? 0;
      widgetsFromStorage.splice(favoritesWidgetIndex, 0, { id: "omnibar" });
      const favoritesWidgetConfigIndex = widgetConfigFromStorage.findIndex((widget) => widget.id === "favorites") ?? 0;
      widgetConfigFromStorage.splice(favoritesWidgetConfigIndex, 0, { id: "omnibar", visibility: "visible" });
    }
    initial.customizer = customizerData();
    const settings = {
      customizerDrawer: { state: "enabled" }
    };
    if (url8.searchParams.get("autoOpen") === "true" && settings.customizerDrawer) {
      settings.customizerDrawer.autoOpen = true;
    }
    if (url8.searchParams.get("adBlocking") === "enabled") {
      settings.adBlocking = { state: "enabled" };
    }
    if (url8.searchParams.has("tabs")) {
      initial.tabs = { tabId: "01", tabIds: ["01"] };
    }
    initial.settings = settings;
    return initial;
  }
  function reorderArray(array, id, toIndex) {
    const fromIndex = array.findIndex((item) => item.id === id);
    const element = array.splice(fromIndex, 1)[0];
    array.splice(toIndex, 0, element);
    return array;
  }

  // pages/new-tab/src/index.js
  var NewTabPage = class {
    /**
     * @param {import("@duckduckgo/messaging").Messaging} messaging
     * @param {ImportMeta['injectName']} injectName
     */
    constructor(messaging2, injectName) {
      this.messaging = createTypedMessages(this, messaging2);
      this.injectName = injectName;
    }
    /**
     * @return {Promise<import('../types/new-tab.ts').InitialSetupResponse>}
     */
    initialSetup() {
      return this.messaging.request("initialSetup");
    }
    /**
     * @param {string} message
     */
    reportInitException(message) {
      this.messaging.notify("reportInitException", { message });
    }
    /**
     * This will be sent if the application has loaded, but a client-side error
     * has occurred that cannot be recovered from
     * @param {{message: string}} params
     */
    reportPageException(params) {
      if (!params || !("message" in params) || typeof params.message !== "string") {
        console.trace("reportPageException INCORRECT params", params);
        return this.messaging.notify("reportPageException", { message: "an unknown error was reported" });
      }
      this.messaging.notify("reportPageException", params);
    }
    /**
     * Sent when a right-click occurs, and wasn't intercepted by another widget
     * @param {import('../types/new-tab.ts').ContextMenuNotify} params
     */
    contextMenu(params) {
      this.messaging.notify("contextMenu", params);
    }
    /**
     * Sent when a right-click occurs, and wasn't intercepted by another widget
     * @param {import('../types/new-tab.ts').OpenAction} params
     */
    open(params) {
      this.messaging.notify("open", params);
    }
    /**
     * @param {import("../types/new-tab.ts").NTPTelemetryEvent} event
     */
    telemetryEvent(event) {
      this.messaging.notify("telemetryEvent", event);
    }
    /**
     * NOTE: temporary workaround, to be replaced with 'telemetryEvent'
     */
    statsShowMore() {
      this.messaging.notify("stats_showMore");
    }
    /**
     * NOTE: temporary workaround, to be replaced with 'telemetryEvent'
     */
    statsShowLess() {
      this.messaging.notify("stats_showLess");
    }
  };
  var baseEnvironment = new Environment().withInjectName("integration").withEnv("production");
  var rawMessaging = createSpecialPageMessaging({
    injectName: "integration",
    env: "production",
    pageName: "newTabPage",
    mockTransport: () => {
      if (baseEnvironment.injectName !== "integration") return null;
      let mock = null;
      $INTEGRATION: mock = mockTransport();
      return mock;
    }
  });
  var { messaging, telemetry } = install(rawMessaging);
  var newTabMessaging = new NewTabPage(messaging, "integration");
  var root = document.querySelector("#app");
  if (!root) {
    document.documentElement.dataset.fatalError = "true";
    E("Fatal: #app missing", document.body);
    throw new Error("Missing #app");
  }
  init(root, newTabMessaging, telemetry, baseEnvironment).catch((e4) => {
    console.error(e4);
    const msg = typeof e4?.message === "string" ? e4.message : "unknown init error";
    newTabMessaging.reportInitException(msg);
    document.documentElement.dataset.fatalError = "true";
    const element = /* @__PURE__ */ _(k, null, /* @__PURE__ */ _("div", { style: "padding: 1rem;" }, /* @__PURE__ */ _("p", null, /* @__PURE__ */ _("strong", null, "A fatal error occurred:")), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _("pre", { style: { whiteSpace: "prewrap", overflow: "auto" } }, /* @__PURE__ */ _("code", null, JSON.stringify({ message: e4.message }, null, 2))), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _("p", null, /* @__PURE__ */ _("strong", null, "Telemetry")), /* @__PURE__ */ _("br", null), /* @__PURE__ */ _("pre", { style: { whiteSpace: "prewrap", overflow: "auto", fontSize: ".8em" } }, /* @__PURE__ */ _("code", null, JSON.stringify(telemetry.eventStore, null, 2)))));
    E(element, document.body);
  });
})();
/*! Bundled license information:

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

lottie-web/build/player/lottie.js:
  (*!
   Transformation Matrix v2.0
   (c) Epistemex 2014-2015
   www.epistemex.com
   By Ken Fyrstenberg
   Contributions by leeoniya.
   License: MIT, header required.
   *)
*/
